
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200041a8 	.word	0x200041a8
}
   4:	000110d9 	.word	0x000110d9
   8:	0001af9f 	.word	0x0001af9f
   c:	00011109 	.word	0x00011109
  10:	00011109 	.word	0x00011109
  14:	00011109 	.word	0x00011109
  18:	00011109 	.word	0x00011109
	...
  2c:	00010ed5 	.word	0x00010ed5
  30:	00011109 	.word	0x00011109
  34:	00000000 	.word	0x00000000
  38:	00010e8d 	.word	0x00010e8d
  3c:	00019df9 	.word	0x00019df9

00000040 <_irq_vector_table>:
  40:	00011099 0001dd53 00011099 00011099     ....S...........
  50:	00011099 00011099 00011099 00011099     ................
  60:	0001dd1b 00011099 00011099 0001dd39     ............9...
  70:	00011099 00011099 00011099 00011099     ................
  80:	00011099 00011099 00011099 00011099     ................
  90:	00011099 00011099 00011099 00011099     ................
  a0:	00011099 00011099 00011099 00011099     ................
  b0:	00011099 00011099 00011099 00011099     ................
  c0:	00011099 00011099 00011099 00011099     ................
  d0:	00011099 00011099 00011099              ............

Disassembly of section text:

000000e0 <__aeabi_frsub>:
      e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__addsf3>
      e6:	bf00      	nop

000000e8 <__aeabi_fsub>:
      e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000000ec <__addsf3>:
      ec:	0042      	lsls	r2, r0, #1
      ee:	bf1f      	itttt	ne
      f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
      f4:	ea92 0f03 	teqne	r2, r3
      f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
      fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     100:	d06a      	beq.n	1d8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x8e>
     102:	ea4f 6212 	mov.w	r2, r2, lsr #24
     106:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     10a:	bfc1      	itttt	gt
     10c:	18d2      	addgt	r2, r2, r3
     10e:	4041      	eorgt	r1, r0
     110:	4048      	eorgt	r0, r1
     112:	4041      	eorgt	r1, r0
     114:	bfb8      	it	lt
     116:	425b      	neglt	r3, r3
     118:	2b19      	cmp	r3, #25
     11a:	bf88      	it	hi
     11c:	4770      	bxhi	lr
     11e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     122:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     126:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     12a:	bf18      	it	ne
     12c:	4240      	negne	r0, r0
     12e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     132:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     136:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     13a:	bf18      	it	ne
     13c:	4249      	negne	r1, r1
     13e:	ea92 0f03 	teq	r2, r3
     142:	d03f      	beq.n	1c4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x7a>
     144:	f1a2 0201 	sub.w	r2, r2, #1
     148:	fa41 fc03 	asr.w	ip, r1, r3
     14c:	eb10 000c 	adds.w	r0, r0, ip
     150:	f1c3 0320 	rsb	r3, r3, #32
     154:	fa01 f103 	lsl.w	r1, r1, r3
     158:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     15c:	d502      	bpl.n	164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>
     15e:	4249      	negs	r1, r1
     160:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     164:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     168:	d313      	bcc.n	192 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x48>
     16a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     16e:	d306      	bcc.n	17e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x34>
     170:	0840      	lsrs	r0, r0, #1
     172:	ea4f 0131 	mov.w	r1, r1, rrx
     176:	f102 0201 	add.w	r2, r2, #1
     17a:	2afe      	cmp	r2, #254	; 0xfe
     17c:	d251      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     17e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     182:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     186:	bf08      	it	eq
     188:	f020 0001 	biceq.w	r0, r0, #1
     18c:	ea40 0003 	orr.w	r0, r0, r3
     190:	4770      	bx	lr
     192:	0049      	lsls	r1, r1, #1
     194:	eb40 0000 	adc.w	r0, r0, r0
     198:	3a01      	subs	r2, #1
     19a:	bf28      	it	cs
     19c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     1a0:	d2ed      	bcs.n	17e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x34>
     1a2:	fab0 fc80 	clz	ip, r0
     1a6:	f1ac 0c08 	sub.w	ip, ip, #8
     1aa:	ebb2 020c 	subs.w	r2, r2, ip
     1ae:	fa00 f00c 	lsl.w	r0, r0, ip
     1b2:	bfaa      	itet	ge
     1b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     1b8:	4252      	neglt	r2, r2
     1ba:	4318      	orrge	r0, r3
     1bc:	bfbc      	itt	lt
     1be:	40d0      	lsrlt	r0, r2
     1c0:	4318      	orrlt	r0, r3
     1c2:	4770      	bx	lr
     1c4:	f092 0f00 	teq	r2, #0
     1c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1cc:	bf06      	itte	eq
     1ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1d2:	3201      	addeq	r2, #1
     1d4:	3b01      	subne	r3, #1
     1d6:	e7b5      	b.n	144 <CONFIG_IDLE_STACK_SIZE+0x4>
     1d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     1e0:	bf18      	it	ne
     1e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1e6:	d021      	beq.n	22c <CONFIG_FLASH_SIZE+0x2c>
     1e8:	ea92 0f03 	teq	r2, r3
     1ec:	d004      	beq.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1ee:	f092 0f00 	teq	r2, #0
     1f2:	bf08      	it	eq
     1f4:	4608      	moveq	r0, r1
     1f6:	4770      	bx	lr
     1f8:	ea90 0f01 	teq	r0, r1
     1fc:	bf1c      	itt	ne
     1fe:	2000      	movne	r0, #0
     200:	4770      	bxne	lr
     202:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     206:	d104      	bne.n	212 <CONFIG_FLASH_SIZE+0x12>
     208:	0040      	lsls	r0, r0, #1
     20a:	bf28      	it	cs
     20c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     210:	4770      	bx	lr
     212:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     216:	bf3c      	itt	cc
     218:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     21c:	4770      	bxcc	lr
     21e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     222:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     226:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     22a:	4770      	bx	lr
     22c:	ea7f 6222 	mvns.w	r2, r2, asr #24
     230:	bf16      	itet	ne
     232:	4608      	movne	r0, r1
     234:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     238:	4601      	movne	r1, r0
     23a:	0242      	lsls	r2, r0, #9
     23c:	bf06      	itte	eq
     23e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     242:	ea90 0f01 	teqeq	r0, r1
     246:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     24a:	4770      	bx	lr

0000024c <__aeabi_ui2f>:
     24c:	f04f 0300 	mov.w	r3, #0
     250:	e004      	b.n	25c <__aeabi_i2f+0x8>
     252:	bf00      	nop

00000254 <__aeabi_i2f>:
     254:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     258:	bf48      	it	mi
     25a:	4240      	negmi	r0, r0
     25c:	ea5f 0c00 	movs.w	ip, r0
     260:	bf08      	it	eq
     262:	4770      	bxeq	lr
     264:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     268:	4601      	mov	r1, r0
     26a:	f04f 0000 	mov.w	r0, #0
     26e:	e01c      	b.n	2aa <__aeabi_l2f+0x2a>

00000270 <__aeabi_ul2f>:
     270:	ea50 0201 	orrs.w	r2, r0, r1
     274:	bf08      	it	eq
     276:	4770      	bxeq	lr
     278:	f04f 0300 	mov.w	r3, #0
     27c:	e00a      	b.n	294 <__aeabi_l2f+0x14>
     27e:	bf00      	nop

00000280 <__aeabi_l2f>:
     280:	ea50 0201 	orrs.w	r2, r0, r1
     284:	bf08      	it	eq
     286:	4770      	bxeq	lr
     288:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     28c:	d502      	bpl.n	294 <__aeabi_l2f+0x14>
     28e:	4240      	negs	r0, r0
     290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     294:	ea5f 0c01 	movs.w	ip, r1
     298:	bf02      	ittt	eq
     29a:	4684      	moveq	ip, r0
     29c:	4601      	moveq	r1, r0
     29e:	2000      	moveq	r0, #0
     2a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2a4:	bf08      	it	eq
     2a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ae:	fabc f28c 	clz	r2, ip
     2b2:	3a08      	subs	r2, #8
     2b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2b8:	db10      	blt.n	2dc <__aeabi_l2f+0x5c>
     2ba:	fa01 fc02 	lsl.w	ip, r1, r2
     2be:	4463      	add	r3, ip
     2c0:	fa00 fc02 	lsl.w	ip, r0, r2
     2c4:	f1c2 0220 	rsb	r2, r2, #32
     2c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2cc:	fa20 f202 	lsr.w	r2, r0, r2
     2d0:	eb43 0002 	adc.w	r0, r3, r2
     2d4:	bf08      	it	eq
     2d6:	f020 0001 	biceq.w	r0, r0, #1
     2da:	4770      	bx	lr
     2dc:	f102 0220 	add.w	r2, r2, #32
     2e0:	fa01 fc02 	lsl.w	ip, r1, r2
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     2ec:	fa21 f202 	lsr.w	r2, r1, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
     2f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     2fa:	4770      	bx	lr

000002fc <__aeabi_fmul>:
     2fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     300:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     304:	bf1e      	ittt	ne
     306:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     30a:	ea92 0f0c 	teqne	r2, ip
     30e:	ea93 0f0c 	teqne	r3, ip
     312:	d06f      	beq.n	3f4 <CONFIG_BT_DEVICE_APPEARANCE+0xf4>
     314:	441a      	add	r2, r3
     316:	ea80 0c01 	eor.w	ip, r0, r1
     31a:	0240      	lsls	r0, r0, #9
     31c:	bf18      	it	ne
     31e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     322:	d01e      	beq.n	362 <CONFIG_BT_DEVICE_APPEARANCE+0x62>
     324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     328:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     32c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     330:	fba0 3101 	umull	r3, r1, r0, r1
     334:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     338:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     33c:	bf3e      	ittt	cc
     33e:	0049      	lslcc	r1, r1, #1
     340:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     344:	005b      	lslcc	r3, r3, #1
     346:	ea40 0001 	orr.w	r0, r0, r1
     34a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     34e:	2afd      	cmp	r2, #253	; 0xfd
     350:	d81d      	bhi.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     35a:	bf08      	it	eq
     35c:	f020 0001 	biceq.w	r0, r0, #1
     360:	4770      	bx	lr
     362:	f090 0f00 	teq	r0, #0
     366:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     36a:	bf08      	it	eq
     36c:	0249      	lsleq	r1, r1, #9
     36e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     372:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     376:	3a7f      	subs	r2, #127	; 0x7f
     378:	bfc2      	ittt	gt
     37a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     37e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     382:	4770      	bxgt	lr
     384:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     388:	f04f 0300 	mov.w	r3, #0
     38c:	3a01      	subs	r2, #1
     38e:	dc5d      	bgt.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     390:	f112 0f19 	cmn.w	r2, #25
     394:	bfdc      	itt	le
     396:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     39a:	4770      	bxle	lr
     39c:	f1c2 0200 	rsb	r2, r2, #0
     3a0:	0041      	lsls	r1, r0, #1
     3a2:	fa21 f102 	lsr.w	r1, r1, r2
     3a6:	f1c2 0220 	rsb	r2, r2, #32
     3aa:	fa00 fc02 	lsl.w	ip, r0, r2
     3ae:	ea5f 0031 	movs.w	r0, r1, rrx
     3b2:	f140 0000 	adc.w	r0, r0, #0
     3b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3ba:	bf08      	it	eq
     3bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3c0:	4770      	bx	lr
     3c2:	f092 0f00 	teq	r2, #0
     3c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3ca:	bf02      	ittt	eq
     3cc:	0040      	lsleq	r0, r0, #1
     3ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3d2:	3a01      	subeq	r2, #1
     3d4:	d0f9      	beq.n	3ca <CONFIG_BT_DEVICE_APPEARANCE+0xca>
     3d6:	ea40 000c 	orr.w	r0, r0, ip
     3da:	f093 0f00 	teq	r3, #0
     3de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     3e2:	bf02      	ittt	eq
     3e4:	0049      	lsleq	r1, r1, #1
     3e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     3ea:	3b01      	subeq	r3, #1
     3ec:	d0f9      	beq.n	3e2 <CONFIG_BT_DEVICE_APPEARANCE+0xe2>
     3ee:	ea41 010c 	orr.w	r1, r1, ip
     3f2:	e78f      	b.n	314 <CONFIG_BT_DEVICE_APPEARANCE+0x14>
     3f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     3f8:	ea92 0f0c 	teq	r2, ip
     3fc:	bf18      	it	ne
     3fe:	ea93 0f0c 	teqne	r3, ip
     402:	d00a      	beq.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     404:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     408:	bf18      	it	ne
     40a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     40e:	d1d8      	bne.n	3c2 <CONFIG_BT_DEVICE_APPEARANCE+0xc2>
     410:	ea80 0001 	eor.w	r0, r0, r1
     414:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     418:	4770      	bx	lr
     41a:	f090 0f00 	teq	r0, #0
     41e:	bf17      	itett	ne
     420:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     424:	4608      	moveq	r0, r1
     426:	f091 0f00 	teqne	r1, #0
     42a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     42e:	d014      	beq.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     430:	ea92 0f0c 	teq	r2, ip
     434:	d101      	bne.n	43a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     436:	0242      	lsls	r2, r0, #9
     438:	d10f      	bne.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     43a:	ea93 0f0c 	teq	r3, ip
     43e:	d103      	bne.n	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     440:	024b      	lsls	r3, r1, #9
     442:	bf18      	it	ne
     444:	4608      	movne	r0, r1
     446:	d108      	bne.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     448:	ea80 0001 	eor.w	r0, r0, r1
     44c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     450:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     454:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     458:	4770      	bx	lr
     45a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     45e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     462:	4770      	bx	lr

00000464 <__aeabi_fdiv>:
     464:	f04f 0cff 	mov.w	ip, #255	; 0xff
     468:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     46c:	bf1e      	ittt	ne
     46e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     472:	ea92 0f0c 	teqne	r2, ip
     476:	ea93 0f0c 	teqne	r3, ip
     47a:	d069      	beq.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     47c:	eba2 0203 	sub.w	r2, r2, r3
     480:	ea80 0c01 	eor.w	ip, r0, r1
     484:	0249      	lsls	r1, r1, #9
     486:	ea4f 2040 	mov.w	r0, r0, lsl #9
     48a:	d037      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     48c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     490:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     494:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     498:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     49c:	428b      	cmp	r3, r1
     49e:	bf38      	it	cc
     4a0:	005b      	lslcc	r3, r3, #1
     4a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4aa:	428b      	cmp	r3, r1
     4ac:	bf24      	itt	cs
     4ae:	1a5b      	subcs	r3, r3, r1
     4b0:	ea40 000c 	orrcs.w	r0, r0, ip
     4b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4b8:	bf24      	itt	cs
     4ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4c6:	bf24      	itt	cs
     4c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4d4:	bf24      	itt	cs
     4d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4de:	011b      	lsls	r3, r3, #4
     4e0:	bf18      	it	ne
     4e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     4e6:	d1e0      	bne.n	4aa <__aeabi_fdiv+0x46>
     4e8:	2afd      	cmp	r2, #253	; 0xfd
     4ea:	f63f af50 	bhi.w	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     4ee:	428b      	cmp	r3, r1
     4f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     4f4:	bf08      	it	eq
     4f6:	f020 0001 	biceq.w	r0, r0, #1
     4fa:	4770      	bx	lr
     4fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     500:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     504:	327f      	adds	r2, #127	; 0x7f
     506:	bfc2      	ittt	gt
     508:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     50c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     510:	4770      	bxgt	lr
     512:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     516:	f04f 0300 	mov.w	r3, #0
     51a:	3a01      	subs	r2, #1
     51c:	e737      	b.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     51e:	f092 0f00 	teq	r2, #0
     522:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     526:	bf02      	ittt	eq
     528:	0040      	lsleq	r0, r0, #1
     52a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     52e:	3a01      	subeq	r2, #1
     530:	d0f9      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     532:	ea40 000c 	orr.w	r0, r0, ip
     536:	f093 0f00 	teq	r3, #0
     53a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     53e:	bf02      	ittt	eq
     540:	0049      	lsleq	r1, r1, #1
     542:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     546:	3b01      	subeq	r3, #1
     548:	d0f9      	beq.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     54a:	ea41 010c 	orr.w	r1, r1, ip
     54e:	e795      	b.n	47c <__aeabi_fdiv+0x18>
     550:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     554:	ea92 0f0c 	teq	r2, ip
     558:	d108      	bne.n	56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>
     55a:	0242      	lsls	r2, r0, #9
     55c:	f47f af7d 	bne.w	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     560:	ea93 0f0c 	teq	r3, ip
     564:	f47f af70 	bne.w	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     568:	4608      	mov	r0, r1
     56a:	e776      	b.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     56c:	ea93 0f0c 	teq	r3, ip
     570:	d104      	bne.n	57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>
     572:	024b      	lsls	r3, r1, #9
     574:	f43f af4c 	beq.w	410 <CONFIG_BT_RX_STACK_SIZE+0x10>
     578:	4608      	mov	r0, r1
     57a:	e76e      	b.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     57c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     580:	bf18      	it	ne
     582:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     586:	d1ca      	bne.n	51e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x36>
     588:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     58c:	f47f af5c 	bne.w	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     590:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     594:	f47f af3c 	bne.w	410 <CONFIG_BT_RX_STACK_SIZE+0x10>
     598:	e75f      	b.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     59a:	bf00      	nop

0000059c <__aeabi_f2iz>:
     59c:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     5a4:	d30f      	bcc.n	5c6 <__aeabi_f2iz+0x2a>
     5a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     5aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     5ae:	d90d      	bls.n	5cc <__aeabi_f2iz+0x30>
     5b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     5b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     5b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     5bc:	fa23 f002 	lsr.w	r0, r3, r2
     5c0:	bf18      	it	ne
     5c2:	4240      	negne	r0, r0
     5c4:	4770      	bx	lr
     5c6:	f04f 0000 	mov.w	r0, #0
     5ca:	4770      	bx	lr
     5cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
     5d0:	d101      	bne.n	5d6 <__aeabi_f2iz+0x3a>
     5d2:	0242      	lsls	r2, r0, #9
     5d4:	d105      	bne.n	5e2 <__aeabi_f2iz+0x46>
     5d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     5da:	bf08      	it	eq
     5dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     5e0:	4770      	bx	lr
     5e2:	f04f 0000 	mov.w	r0, #0
     5e6:	4770      	bx	lr

000005e8 <__aeabi_uldivmod>:
     5e8:	b953      	cbnz	r3, 600 <CONFIG_BT_HCI_TX_STACK_SIZE>
     5ea:	b94a      	cbnz	r2, 600 <CONFIG_BT_HCI_TX_STACK_SIZE>
     5ec:	2900      	cmp	r1, #0
     5ee:	bf08      	it	eq
     5f0:	2800      	cmpeq	r0, #0
     5f2:	bf1c      	itt	ne
     5f4:	f04f 31ff 	movne.w	r1, #4294967295
     5f8:	f04f 30ff 	movne.w	r0, #4294967295
     5fc:	f000 b96c 	b.w	8d8 <__aeabi_idiv0>
     600:	f1ad 0c08 	sub.w	ip, sp, #8
     604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     608:	f000 f806 	bl	618 <__udivmoddi4>
     60c:	f8dd e004 	ldr.w	lr, [sp, #4]
     610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     614:	b004      	add	sp, #16
     616:	4770      	bx	lr

00000618 <__udivmoddi4>:
     618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     61c:	9e08      	ldr	r6, [sp, #32]
     61e:	460d      	mov	r5, r1
     620:	4604      	mov	r4, r0
     622:	468e      	mov	lr, r1
     624:	2b00      	cmp	r3, #0
     626:	f040 8082 	bne.w	72e <__udivmoddi4+0x116>
     62a:	428a      	cmp	r2, r1
     62c:	4617      	mov	r7, r2
     62e:	d946      	bls.n	6be <__udivmoddi4+0xa6>
     630:	fab2 f282 	clz	r2, r2
     634:	b14a      	cbz	r2, 64a <__udivmoddi4+0x32>
     636:	f1c2 0120 	rsb	r1, r2, #32
     63a:	fa05 f302 	lsl.w	r3, r5, r2
     63e:	fa20 f101 	lsr.w	r1, r0, r1
     642:	4097      	lsls	r7, r2
     644:	ea41 0e03 	orr.w	lr, r1, r3
     648:	4094      	lsls	r4, r2
     64a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     64e:	0c23      	lsrs	r3, r4, #16
     650:	fbbe fcf8 	udiv	ip, lr, r8
     654:	b2b9      	uxth	r1, r7
     656:	fb08 ee1c 	mls	lr, r8, ip, lr
     65a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     65e:	fb0c f001 	mul.w	r0, ip, r1
     662:	4298      	cmp	r0, r3
     664:	d90a      	bls.n	67c <__udivmoddi4+0x64>
     666:	18fb      	adds	r3, r7, r3
     668:	f10c 35ff 	add.w	r5, ip, #4294967295
     66c:	f080 8116 	bcs.w	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     670:	4298      	cmp	r0, r3
     672:	f240 8113 	bls.w	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     676:	f1ac 0c02 	sub.w	ip, ip, #2
     67a:	443b      	add	r3, r7
     67c:	1a1b      	subs	r3, r3, r0
     67e:	b2a4      	uxth	r4, r4
     680:	fbb3 f0f8 	udiv	r0, r3, r8
     684:	fb08 3310 	mls	r3, r8, r0, r3
     688:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     68c:	fb00 f101 	mul.w	r1, r0, r1
     690:	42a1      	cmp	r1, r4
     692:	d909      	bls.n	6a8 <__udivmoddi4+0x90>
     694:	193c      	adds	r4, r7, r4
     696:	f100 33ff 	add.w	r3, r0, #4294967295
     69a:	f080 8101 	bcs.w	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     69e:	42a1      	cmp	r1, r4
     6a0:	f240 80fe 	bls.w	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     6a4:	3802      	subs	r0, #2
     6a6:	443c      	add	r4, r7
     6a8:	1a64      	subs	r4, r4, r1
     6aa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     6ae:	2100      	movs	r1, #0
     6b0:	b11e      	cbz	r6, 6ba <__udivmoddi4+0xa2>
     6b2:	40d4      	lsrs	r4, r2
     6b4:	2300      	movs	r3, #0
     6b6:	e9c6 4300 	strd	r4, r3, [r6]
     6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6be:	b902      	cbnz	r2, 6c2 <__udivmoddi4+0xaa>
     6c0:	deff      	udf	#255	; 0xff
     6c2:	fab2 f282 	clz	r2, r2
     6c6:	2a00      	cmp	r2, #0
     6c8:	d14f      	bne.n	76a <__udivmoddi4+0x152>
     6ca:	1bcb      	subs	r3, r1, r7
     6cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     6d0:	fa1f f887 	uxth.w	r8, r7
     6d4:	2101      	movs	r1, #1
     6d6:	fbb3 fcfe 	udiv	ip, r3, lr
     6da:	0c25      	lsrs	r5, r4, #16
     6dc:	fb0e 331c 	mls	r3, lr, ip, r3
     6e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     6e4:	fb08 f30c 	mul.w	r3, r8, ip
     6e8:	42ab      	cmp	r3, r5
     6ea:	d907      	bls.n	6fc <__udivmoddi4+0xe4>
     6ec:	197d      	adds	r5, r7, r5
     6ee:	f10c 30ff 	add.w	r0, ip, #4294967295
     6f2:	d202      	bcs.n	6fa <__udivmoddi4+0xe2>
     6f4:	42ab      	cmp	r3, r5
     6f6:	f200 80e7 	bhi.w	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
     6fa:	4684      	mov	ip, r0
     6fc:	1aed      	subs	r5, r5, r3
     6fe:	b2a3      	uxth	r3, r4
     700:	fbb5 f0fe 	udiv	r0, r5, lr
     704:	fb0e 5510 	mls	r5, lr, r0, r5
     708:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     70c:	fb08 f800 	mul.w	r8, r8, r0
     710:	45a0      	cmp	r8, r4
     712:	d907      	bls.n	724 <__udivmoddi4+0x10c>
     714:	193c      	adds	r4, r7, r4
     716:	f100 33ff 	add.w	r3, r0, #4294967295
     71a:	d202      	bcs.n	722 <__udivmoddi4+0x10a>
     71c:	45a0      	cmp	r8, r4
     71e:	f200 80d7 	bhi.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     722:	4618      	mov	r0, r3
     724:	eba4 0408 	sub.w	r4, r4, r8
     728:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     72c:	e7c0      	b.n	6b0 <__udivmoddi4+0x98>
     72e:	428b      	cmp	r3, r1
     730:	d908      	bls.n	744 <__udivmoddi4+0x12c>
     732:	2e00      	cmp	r6, #0
     734:	f000 80af 	beq.w	896 <CONFIG_ISR_STACK_SIZE+0x96>
     738:	2100      	movs	r1, #0
     73a:	e9c6 0500 	strd	r0, r5, [r6]
     73e:	4608      	mov	r0, r1
     740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     744:	fab3 f183 	clz	r1, r3
     748:	2900      	cmp	r1, #0
     74a:	d14b      	bne.n	7e4 <__udivmoddi4+0x1cc>
     74c:	42ab      	cmp	r3, r5
     74e:	d302      	bcc.n	756 <__udivmoddi4+0x13e>
     750:	4282      	cmp	r2, r0
     752:	f200 80b7 	bhi.w	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     756:	1a84      	subs	r4, r0, r2
     758:	eb65 0303 	sbc.w	r3, r5, r3
     75c:	2001      	movs	r0, #1
     75e:	469e      	mov	lr, r3
     760:	2e00      	cmp	r6, #0
     762:	d0aa      	beq.n	6ba <__udivmoddi4+0xa2>
     764:	e9c6 4e00 	strd	r4, lr, [r6]
     768:	e7a7      	b.n	6ba <__udivmoddi4+0xa2>
     76a:	f1c2 0c20 	rsb	ip, r2, #32
     76e:	fa01 f302 	lsl.w	r3, r1, r2
     772:	4097      	lsls	r7, r2
     774:	fa20 f00c 	lsr.w	r0, r0, ip
     778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     77c:	fa21 fc0c 	lsr.w	ip, r1, ip
     780:	4318      	orrs	r0, r3
     782:	fbbc f1fe 	udiv	r1, ip, lr
     786:	0c05      	lsrs	r5, r0, #16
     788:	fb0e cc11 	mls	ip, lr, r1, ip
     78c:	fa1f f887 	uxth.w	r8, r7
     790:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     794:	fb01 f308 	mul.w	r3, r1, r8
     798:	42ab      	cmp	r3, r5
     79a:	fa04 f402 	lsl.w	r4, r4, r2
     79e:	d909      	bls.n	7b4 <__udivmoddi4+0x19c>
     7a0:	197d      	adds	r5, r7, r5
     7a2:	f101 3cff 	add.w	ip, r1, #4294967295
     7a6:	f080 808b 	bcs.w	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     7aa:	42ab      	cmp	r3, r5
     7ac:	f240 8088 	bls.w	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     7b0:	3902      	subs	r1, #2
     7b2:	443d      	add	r5, r7
     7b4:	1aeb      	subs	r3, r5, r3
     7b6:	b285      	uxth	r5, r0
     7b8:	fbb3 f0fe 	udiv	r0, r3, lr
     7bc:	fb0e 3310 	mls	r3, lr, r0, r3
     7c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     7c4:	fb00 f308 	mul.w	r3, r0, r8
     7c8:	42ab      	cmp	r3, r5
     7ca:	d907      	bls.n	7dc <__udivmoddi4+0x1c4>
     7cc:	197d      	adds	r5, r7, r5
     7ce:	f100 3cff 	add.w	ip, r0, #4294967295
     7d2:	d271      	bcs.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     7d4:	42ab      	cmp	r3, r5
     7d6:	d96f      	bls.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     7d8:	3802      	subs	r0, #2
     7da:	443d      	add	r5, r7
     7dc:	1aeb      	subs	r3, r5, r3
     7de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     7e2:	e778      	b.n	6d6 <__udivmoddi4+0xbe>
     7e4:	f1c1 0c20 	rsb	ip, r1, #32
     7e8:	408b      	lsls	r3, r1
     7ea:	fa22 f70c 	lsr.w	r7, r2, ip
     7ee:	431f      	orrs	r7, r3
     7f0:	fa20 f40c 	lsr.w	r4, r0, ip
     7f4:	fa05 f301 	lsl.w	r3, r5, r1
     7f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     7fc:	fa25 f50c 	lsr.w	r5, r5, ip
     800:	431c      	orrs	r4, r3
     802:	0c23      	lsrs	r3, r4, #16
     804:	fbb5 f9fe 	udiv	r9, r5, lr
     808:	fa1f f887 	uxth.w	r8, r7
     80c:	fb0e 5519 	mls	r5, lr, r9, r5
     810:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     814:	fb09 fa08 	mul.w	sl, r9, r8
     818:	45aa      	cmp	sl, r5
     81a:	fa02 f201 	lsl.w	r2, r2, r1
     81e:	fa00 f301 	lsl.w	r3, r0, r1
     822:	d908      	bls.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     824:	197d      	adds	r5, r7, r5
     826:	f109 30ff 	add.w	r0, r9, #4294967295
     82a:	d247      	bcs.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     82c:	45aa      	cmp	sl, r5
     82e:	d945      	bls.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     830:	f1a9 0902 	sub.w	r9, r9, #2
     834:	443d      	add	r5, r7
     836:	eba5 050a 	sub.w	r5, r5, sl
     83a:	b2a4      	uxth	r4, r4
     83c:	fbb5 f0fe 	udiv	r0, r5, lr
     840:	fb0e 5510 	mls	r5, lr, r0, r5
     844:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     848:	fb00 f808 	mul.w	r8, r0, r8
     84c:	45a0      	cmp	r8, r4
     84e:	d907      	bls.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
     850:	193c      	adds	r4, r7, r4
     852:	f100 35ff 	add.w	r5, r0, #4294967295
     856:	d22d      	bcs.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     858:	45a0      	cmp	r8, r4
     85a:	d92b      	bls.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     85c:	3802      	subs	r0, #2
     85e:	443c      	add	r4, r7
     860:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     864:	eba4 0408 	sub.w	r4, r4, r8
     868:	fba0 8902 	umull	r8, r9, r0, r2
     86c:	454c      	cmp	r4, r9
     86e:	46c6      	mov	lr, r8
     870:	464d      	mov	r5, r9
     872:	d319      	bcc.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
     874:	d016      	beq.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     876:	b15e      	cbz	r6, 890 <CONFIG_ISR_STACK_SIZE+0x90>
     878:	ebb3 020e 	subs.w	r2, r3, lr
     87c:	eb64 0405 	sbc.w	r4, r4, r5
     880:	fa04 fc0c 	lsl.w	ip, r4, ip
     884:	40ca      	lsrs	r2, r1
     886:	ea4c 0202 	orr.w	r2, ip, r2
     88a:	40cc      	lsrs	r4, r1
     88c:	e9c6 2400 	strd	r2, r4, [r6]
     890:	2100      	movs	r1, #0
     892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     896:	4631      	mov	r1, r6
     898:	4630      	mov	r0, r6
     89a:	e70e      	b.n	6ba <__udivmoddi4+0xa2>
     89c:	46ac      	mov	ip, r5
     89e:	e6ed      	b.n	67c <__udivmoddi4+0x64>
     8a0:	4618      	mov	r0, r3
     8a2:	e701      	b.n	6a8 <__udivmoddi4+0x90>
     8a4:	4543      	cmp	r3, r8
     8a6:	d2e6      	bcs.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     8a8:	ebb8 0e02 	subs.w	lr, r8, r2
     8ac:	eb69 0507 	sbc.w	r5, r9, r7
     8b0:	3801      	subs	r0, #1
     8b2:	e7e0      	b.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     8b4:	4628      	mov	r0, r5
     8b6:	e7d3      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
     8b8:	4660      	mov	r0, ip
     8ba:	e78f      	b.n	7dc <__udivmoddi4+0x1c4>
     8bc:	4681      	mov	r9, r0
     8be:	e7ba      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     8c0:	4661      	mov	r1, ip
     8c2:	e777      	b.n	7b4 <__udivmoddi4+0x19c>
     8c4:	4608      	mov	r0, r1
     8c6:	e74b      	b.n	760 <__udivmoddi4+0x148>
     8c8:	f1ac 0c02 	sub.w	ip, ip, #2
     8cc:	443d      	add	r5, r7
     8ce:	e715      	b.n	6fc <__udivmoddi4+0xe4>
     8d0:	3802      	subs	r0, #2
     8d2:	443c      	add	r4, r7
     8d4:	e726      	b.n	724 <__udivmoddi4+0x10c>
     8d6:	bf00      	nop

000008d8 <__aeabi_idiv0>:
     8d8:	4770      	bx	lr
     8da:	bf00      	nop

000008dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     8dc:	4801      	ldr	r0, [pc, #4]	; (8e4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     8de:	7800      	ldrb	r0, [r0, #0]
     8e0:	4770      	bx	lr
     8e2:	0000      	.short	0x0000
     8e4:	20000000 	.word	0x20000000

000008e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     8e8:	4904      	ldr	r1, [pc, #16]	; (8fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     8ea:	780a      	ldrb	r2, [r1, #0]
     8ec:	4290      	cmp	r0, r2
     8ee:	d301      	bcc.n	8f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     8f0:	2000      	movs	r0, #0
     8f2:	4770      	bx	lr
     8f4:	6849      	ldr	r1, [r1, #4]
     8f6:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     8fa:	4770      	bx	lr
     8fc:	20000000 	.word	0x20000000
     900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     904:	4615      	mov	r5, r2
     906:	4604      	mov	r4, r0
     908:	f100 0208 	add.w	r2, r0, #8
     90c:	1cc8      	adds	r0, r1, #3
     90e:	4241      	negs	r1, r0
     910:	f8df c09c 	ldr.w	ip, [pc, #156]	; 9b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc8>
     914:	461f      	mov	r7, r3
     916:	1a28      	subs	r0, r5, r0
     918:	2300      	movs	r3, #0
     91a:	9e08      	ldr	r6, [sp, #32]
     91c:	ebbc 0c05 	subs.w	ip, ip, r5
     920:	419b      	sbcs	r3, r3
     922:	d204      	bcs.n	92e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46>
     924:	f240 51e4 	movw	r1, #1508	; 0x5e4
     928:	2070      	movs	r0, #112	; 0x70
     92a:	f003 f8f5 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     92e:	4b21      	ldr	r3, [pc, #132]	; (9b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcc>)
     930:	4299      	cmp	r1, r3
     932:	dd04      	ble.n	93e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56>
     934:	f240 51e5 	movw	r1, #1509	; 0x5e5
     938:	2070      	movs	r0, #112	; 0x70
     93a:	f003 f8ed 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     93e:	4b1e      	ldr	r3, [pc, #120]	; (9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd0>)
     940:	4299      	cmp	r1, r3
     942:	da04      	bge.n	94e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66>
     944:	f240 51e6 	movw	r1, #1510	; 0x5e6
     948:	2070      	movs	r0, #112	; 0x70
     94a:	f003 f8e5 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     94e:	491b      	ldr	r1, [pc, #108]	; (9bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4>)
     950:	4288      	cmp	r0, r1
     952:	bfa8      	it	ge
     954:	491a      	ldrge	r1, [pc, #104]	; (9c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd8>)
     956:	da03      	bge.n	960 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x78>
     958:	2800      	cmp	r0, #0
     95a:	bfb8      	it	lt
     95c:	4917      	ldrlt	r1, [pc, #92]	; (9bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4>)
     95e:	da00      	bge.n	962 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7a>
     960:	1840      	adds	r0, r0, r1
     962:	4621      	mov	r1, r4
     964:	f002 fd40 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     968:	6820      	ldr	r0, [r4, #0]
     96a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     96e:	19e8      	adds	r0, r5, r7
     970:	1cc0      	adds	r0, r0, #3
     972:	6021      	str	r1, [r4, #0]
     974:	2e00      	cmp	r6, #0
     976:	bf08      	it	eq
     978:	307a      	addeq	r0, #122	; 0x7a
     97a:	d008      	beq.n	98e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa6>
     97c:	2e01      	cmp	r6, #1
     97e:	bf08      	it	eq
     980:	3045      	addeq	r0, #69	; 0x45
     982:	d004      	beq.n	98e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa6>
     984:	f240 6189 	movw	r1, #1673	; 0x689
     988:	2070      	movs	r0, #112	; 0x70
     98a:	f003 f8c5 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     98e:	466a      	mov	r2, sp
     990:	1d21      	adds	r1, r4, #4
     992:	f002 fd29 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     996:	f99d 0000 	ldrsb.w	r0, [sp]
     99a:	2800      	cmp	r0, #0
     99c:	6860      	ldr	r0, [r4, #4]
     99e:	bfc4      	itt	gt
     9a0:	1c40      	addgt	r0, r0, #1
     9a2:	6060      	strgt	r0, [r4, #4]
     9a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9a8:	6060      	str	r0, [r4, #4]
     9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     9ae:	0000      	.short	0x0000
     9b0:	1e847fff 	.word	0x1e847fff
     9b4:	07a12000 	.word	0x07a12000
     9b8:	f85ee000 	.word	0xf85ee000
     9bc:	1e848000 	.word	0x1e848000
     9c0:	e17b8000 	.word	0xe17b8000
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	4605      	mov	r5, r0
     9c8:	2a20      	cmp	r2, #32
     9ca:	d027      	beq.n	a1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     9cc:	4819      	ldr	r0, [pc, #100]	; (a34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>)
     9ce:	4c1a      	ldr	r4, [pc, #104]	; (a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x150>)
     9d0:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     9d4:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     9d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     9dc:	2920      	cmp	r1, #32
     9de:	d022      	beq.n	a26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x13e>
     9e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     9e4:	7840      	ldrb	r0, [r0, #1]
     9e6:	784c      	ldrb	r4, [r1, #1]
     9e8:	7048      	strb	r0, [r1, #1]
     9ea:	4620      	mov	r0, r4
     9ec:	4601      	mov	r1, r0
     9ee:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     9f2:	4291      	cmp	r1, r2
     9f4:	7005      	strb	r5, [r0, #0]
     9f6:	7840      	ldrb	r0, [r0, #1]
     9f8:	d1f8      	bne.n	9ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x104>
     9fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     9fe:	2a20      	cmp	r2, #32
     a00:	bf1a      	itte	ne
     a02:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a06:	7054      	strbne	r4, [r2, #1]
     a08:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     a0c:	2220      	movs	r2, #32
     a0e:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a12:	f88c 2001 	strb.w	r2, [ip, #1]
     a16:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     a1a:	bd70      	pop	{r4, r5, r6, pc}
     a1c:	f240 2189 	movw	r1, #649	; 0x289
     a20:	2070      	movs	r0, #112	; 0x70
     a22:	f003 f879 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a26:	f893 4020 	ldrb.w	r4, [r3, #32]
     a2a:	7840      	ldrb	r0, [r0, #1]
     a2c:	f883 0020 	strb.w	r0, [r3, #32]
     a30:	e7db      	b.n	9ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x102>
     a32:	0000      	.short	0x0000
     a34:	20000d4c 	.word	0x20000d4c
     a38:	20000dcc 	.word	0x20000dcc
     a3c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a40:	b087      	sub	sp, #28
     a42:	4604      	mov	r4, r0
     a44:	2000      	movs	r0, #0
     a46:	9002      	str	r0, [sp, #8]
     a48:	489e      	ldr	r0, [pc, #632]	; (cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3dc>)
     a4a:	9f08      	ldr	r7, [sp, #32]
     a4c:	4e9e      	ldr	r6, [pc, #632]	; (cc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e0>)
     a4e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     a52:	9003      	str	r0, [sp, #12]
     a54:	f890 5020 	ldrb.w	r5, [r0, #32]
     a58:	2020      	movs	r0, #32
     a5a:	46e9      	mov	r9, sp
     a5c:	f10d 0804 	add.w	r8, sp, #4
     a60:	f88d 0000 	strb.w	r0, [sp]
     a64:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     a68:	2d20      	cmp	r5, #32
     a6a:	bf18      	it	ne
     a6c:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     a70:	d032      	beq.n	ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f0>
     a72:	bf00      	nop
     a74:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     a78:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     a7c:	1d01      	adds	r1, r0, #4
     a7e:	6880      	ldr	r0, [r0, #8]
     a80:	6822      	ldr	r2, [r4, #0]
     a82:	1a10      	subs	r0, r2, r0
     a84:	0200      	lsls	r0, r0, #8
     a86:	17c2      	asrs	r2, r0, #31
     a88:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     a8c:	1200      	asrs	r0, r0, #8
     a8e:	d423      	bmi.n	ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f0>
     a90:	8960      	ldrh	r0, [r4, #10]
     a92:	b1d0      	cbz	r0, aca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1e2>
     a94:	8948      	ldrh	r0, [r1, #10]
     a96:	b9c0      	cbnz	r0, aca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1e2>
     a98:	4608      	mov	r0, r1
     a9a:	f000 fcdb 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     a9e:	aa05      	add	r2, sp, #20
     aa0:	a904      	add	r1, sp, #16
     aa2:	f002 fca1 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     aa6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     aaa:	2800      	cmp	r0, #0
     aac:	bfcc      	ite	gt
     aae:	2001      	movgt	r0, #1
     ab0:	2000      	movle	r0, #0
     ab2:	f100 0133 	add.w	r1, r0, #51	; 0x33
     ab6:	9804      	ldr	r0, [sp, #16]
     ab8:	6822      	ldr	r2, [r4, #0]
     aba:	1a10      	subs	r0, r2, r0
     abc:	0200      	lsls	r0, r0, #8
     abe:	17c2      	asrs	r2, r0, #31
     ac0:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ac4:	1200      	asrs	r0, r0, #8
     ac6:	4288      	cmp	r0, r1
     ac8:	db06      	blt.n	ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f0>
     aca:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     ace:	f889 5000 	strb.w	r5, [r9]
     ad2:	7845      	ldrb	r5, [r0, #1]
     ad4:	2d20      	cmp	r5, #32
     ad6:	d1cd      	bne.n	a74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18c>
     ad8:	f899 0000 	ldrb.w	r0, [r9]
     adc:	f888 0000 	strb.w	r0, [r8]
     ae0:	46a1      	mov	r9, r4
     ae2:	2d20      	cmp	r5, #32
     ae4:	bf1c      	itt	ne
     ae6:	4879      	ldrne	r0, [pc, #484]	; (ccc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e4>)
     ae8:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     aec:	f000 80e5 	beq.w	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     af0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     af4:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     af8:	f8d9 2004 	ldr.w	r2, [r9, #4]
     afc:	f8da 1004 	ldr.w	r1, [sl, #4]
     b00:	4648      	mov	r0, r9
     b02:	1a89      	subs	r1, r1, r2
     b04:	0209      	lsls	r1, r1, #8
     b06:	17ca      	asrs	r2, r1, #31
     b08:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b0c:	f10a 0704 	add.w	r7, sl, #4
     b10:	1209      	asrs	r1, r1, #8
     b12:	d41f      	bmi.n	b54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x26c>
     b14:	8979      	ldrh	r1, [r7, #10]
     b16:	2900      	cmp	r1, #0
     b18:	f000 80cf 	beq.w	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     b1c:	8941      	ldrh	r1, [r0, #10]
     b1e:	2900      	cmp	r1, #0
     b20:	f040 80cb 	bne.w	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     b24:	f000 fc96 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     b28:	aa05      	add	r2, sp, #20
     b2a:	a904      	add	r1, sp, #16
     b2c:	f002 fc5c 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     b30:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     b34:	2800      	cmp	r0, #0
     b36:	bfcc      	ite	gt
     b38:	2001      	movgt	r0, #1
     b3a:	2000      	movle	r0, #0
     b3c:	f100 0133 	add.w	r1, r0, #51	; 0x33
     b40:	9804      	ldr	r0, [sp, #16]
     b42:	683a      	ldr	r2, [r7, #0]
     b44:	1a10      	subs	r0, r2, r0
     b46:	0200      	lsls	r0, r0, #8
     b48:	17c2      	asrs	r2, r0, #31
     b4a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b4e:	1200      	asrs	r0, r0, #8
     b50:	4288      	cmp	r0, r1
     b52:	da7d      	bge.n	c50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     b54:	f888 5000 	strb.w	r5, [r8]
     b58:	f89a 0010 	ldrb.w	r0, [sl, #16]
     b5c:	f899 100c 	ldrb.w	r1, [r9, #12]
     b60:	4288      	cmp	r0, r1
     b62:	d905      	bls.n	b70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x288>
     b64:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b68:	7845      	ldrb	r5, [r0, #1]
     b6a:	2d20      	cmp	r5, #32
     b6c:	d1c0      	bne.n	af0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x208>
     b6e:	e0a4      	b.n	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     b70:	f89d 0004 	ldrb.w	r0, [sp, #4]
     b74:	e9d4 2100 	ldrd	r2, r1, [r4]
     b78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     b7c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     b80:	1a89      	subs	r1, r1, r2
     b82:	6880      	ldr	r0, [r0, #8]
     b84:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     b88:	4408      	add	r0, r1
     b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b8e:	e9c4 2000 	strd	r2, r0, [r4]
     b92:	2001      	movs	r0, #1
     b94:	9002      	str	r0, [sp, #8]
     b96:	484b      	ldr	r0, [pc, #300]	; (cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3dc>)
     b98:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     b9c:	b118      	cbz	r0, ba6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2be>
     b9e:	b009      	add	sp, #36	; 0x24
     ba0:	2000      	movs	r0, #0
     ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba6:	9803      	ldr	r0, [sp, #12]
     ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
     bac:	466f      	mov	r7, sp
     bae:	f890 5020 	ldrb.w	r5, [r0, #32]
     bb2:	2020      	movs	r0, #32
     bb4:	f10d 0a04 	add.w	sl, sp, #4
     bb8:	f88d 0000 	strb.w	r0, [sp]
     bbc:	2d20      	cmp	r5, #32
     bbe:	bf1c      	itt	ne
     bc0:	4842      	ldrne	r0, [pc, #264]	; (ccc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e4>)
     bc2:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     bc6:	d030      	beq.n	c2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x342>
     bc8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     bcc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     bd0:	1d01      	adds	r1, r0, #4
     bd2:	6880      	ldr	r0, [r0, #8]
     bd4:	6822      	ldr	r2, [r4, #0]
     bd6:	1a10      	subs	r0, r2, r0
     bd8:	0200      	lsls	r0, r0, #8
     bda:	17c2      	asrs	r2, r0, #31
     bdc:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     be0:	1200      	asrs	r0, r0, #8
     be2:	d422      	bmi.n	c2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x342>
     be4:	8960      	ldrh	r0, [r4, #10]
     be6:	b1d0      	cbz	r0, c1e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x336>
     be8:	8948      	ldrh	r0, [r1, #10]
     bea:	b9c0      	cbnz	r0, c1e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x336>
     bec:	4608      	mov	r0, r1
     bee:	f000 fc31 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     bf2:	aa05      	add	r2, sp, #20
     bf4:	a904      	add	r1, sp, #16
     bf6:	f002 fbf7 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     bfa:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     bfe:	2800      	cmp	r0, #0
     c00:	bfcc      	ite	gt
     c02:	2001      	movgt	r0, #1
     c04:	2000      	movle	r0, #0
     c06:	f100 0133 	add.w	r1, r0, #51	; 0x33
     c0a:	9804      	ldr	r0, [sp, #16]
     c0c:	6822      	ldr	r2, [r4, #0]
     c0e:	1a10      	subs	r0, r2, r0
     c10:	0200      	lsls	r0, r0, #8
     c12:	17c2      	asrs	r2, r0, #31
     c14:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c18:	1200      	asrs	r0, r0, #8
     c1a:	4288      	cmp	r0, r1
     c1c:	db05      	blt.n	c2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x342>
     c1e:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     c22:	703d      	strb	r5, [r7, #0]
     c24:	7845      	ldrb	r5, [r0, #1]
     c26:	2d20      	cmp	r5, #32
     c28:	d1ce      	bne.n	bc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e0>
     c2a:	7838      	ldrb	r0, [r7, #0]
     c2c:	f88a 0000 	strb.w	r0, [sl]
     c30:	4627      	mov	r7, r4
     c32:	2d20      	cmp	r5, #32
     c34:	bf1c      	itt	ne
     c36:	4825      	ldrne	r0, [pc, #148]	; (ccc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e4>)
     c38:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     c3c:	d03d      	beq.n	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     c3e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     c42:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     c46:	4638      	mov	r0, r7
     c48:	f109 0804 	add.w	r8, r9, #4
     c4c:	687a      	ldr	r2, [r7, #4]
     c4e:	e000      	b.n	c52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x36a>
     c50:	e033      	b.n	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     c52:	f8d9 1004 	ldr.w	r1, [r9, #4]
     c56:	1a89      	subs	r1, r1, r2
     c58:	0209      	lsls	r1, r1, #8
     c5a:	17ca      	asrs	r2, r1, #31
     c5c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c60:	1209      	asrs	r1, r1, #8
     c62:	d41d      	bmi.n	ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
     c64:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     c68:	b339      	cbz	r1, cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     c6a:	8941      	ldrh	r1, [r0, #10]
     c6c:	bb29      	cbnz	r1, cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     c6e:	f000 fbf1 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     c72:	aa05      	add	r2, sp, #20
     c74:	a904      	add	r1, sp, #16
     c76:	f002 fbb7 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     c7a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     c7e:	2800      	cmp	r0, #0
     c80:	bfcc      	ite	gt
     c82:	2001      	movgt	r0, #1
     c84:	2000      	movle	r0, #0
     c86:	f100 0133 	add.w	r1, r0, #51	; 0x33
     c8a:	9804      	ldr	r0, [sp, #16]
     c8c:	f8d8 2000 	ldr.w	r2, [r8]
     c90:	1a10      	subs	r0, r2, r0
     c92:	0200      	lsls	r0, r0, #8
     c94:	17c2      	asrs	r2, r0, #31
     c96:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c9a:	1200      	asrs	r0, r0, #8
     c9c:	4288      	cmp	r0, r1
     c9e:	da0c      	bge.n	cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3d2>
     ca0:	f88a 5000 	strb.w	r5, [sl]
     ca4:	f899 1010 	ldrb.w	r1, [r9, #16]
     ca8:	7b38      	ldrb	r0, [r7, #12]
     caa:	4281      	cmp	r1, r0
     cac:	f67f af60 	bls.w	b70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x288>
     cb0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     cb4:	7845      	ldrb	r5, [r0, #1]
     cb6:	2d20      	cmp	r5, #32
     cb8:	d1c1      	bne.n	c3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x356>
     cba:	9802      	ldr	r0, [sp, #8]
     cbc:	b009      	add	sp, #36	; 0x24
     cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cc2:	0000      	.short	0x0000
     cc4:	20000dcc 	.word	0x20000dcc
     cc8:	20000acc 	.word	0x20000acc
     ccc:	20000d4c 	.word	0x20000d4c
     cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cd4:	4604      	mov	r4, r0
     cd6:	4847      	ldr	r0, [pc, #284]	; (df4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x50c>)
     cd8:	460e      	mov	r6, r1
     cda:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     cde:	4f46      	ldr	r7, [pc, #280]	; (df8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x510>)
     ce0:	f890 5020 	ldrb.w	r5, [r0, #32]
     ce4:	2020      	movs	r0, #32
     ce6:	b083      	sub	sp, #12
     ce8:	4698      	mov	r8, r3
     cea:	4692      	mov	sl, r2
     cec:	7010      	strb	r0, [r2, #0]
     cee:	f507 7920 	add.w	r9, r7, #640	; 0x280
     cf2:	2d20      	cmp	r5, #32
     cf4:	bf18      	it	ne
     cf6:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     cfa:	d031      	beq.n	d60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x478>
     cfc:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     d00:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     d04:	1d01      	adds	r1, r0, #4
     d06:	6880      	ldr	r0, [r0, #8]
     d08:	6822      	ldr	r2, [r4, #0]
     d0a:	1a10      	subs	r0, r2, r0
     d0c:	0200      	lsls	r0, r0, #8
     d0e:	17c2      	asrs	r2, r0, #31
     d10:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d14:	1200      	asrs	r0, r0, #8
     d16:	d423      	bmi.n	d60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x478>
     d18:	8960      	ldrh	r0, [r4, #10]
     d1a:	b1d0      	cbz	r0, d52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46a>
     d1c:	8948      	ldrh	r0, [r1, #10]
     d1e:	b9c0      	cbnz	r0, d52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46a>
     d20:	4608      	mov	r0, r1
     d22:	f000 fb97 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     d26:	aa01      	add	r2, sp, #4
     d28:	4669      	mov	r1, sp
     d2a:	f002 fb5d 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     d2e:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     d32:	2800      	cmp	r0, #0
     d34:	bfcc      	ite	gt
     d36:	2001      	movgt	r0, #1
     d38:	2000      	movle	r0, #0
     d3a:	f100 0133 	add.w	r1, r0, #51	; 0x33
     d3e:	9800      	ldr	r0, [sp, #0]
     d40:	6822      	ldr	r2, [r4, #0]
     d42:	1a10      	subs	r0, r2, r0
     d44:	0200      	lsls	r0, r0, #8
     d46:	17c2      	asrs	r2, r0, #31
     d48:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d4c:	1200      	asrs	r0, r0, #8
     d4e:	4288      	cmp	r0, r1
     d50:	db06      	blt.n	d60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x478>
     d52:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d56:	f88a 5000 	strb.w	r5, [sl]
     d5a:	7845      	ldrb	r5, [r0, #1]
     d5c:	2d20      	cmp	r5, #32
     d5e:	d1cd      	bne.n	cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x414>
     d60:	f89a 0000 	ldrb.w	r0, [sl]
     d64:	f888 0000 	strb.w	r0, [r8]
     d68:	2d20      	cmp	r5, #32
     d6a:	bf18      	it	ne
     d6c:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     d70:	d03c      	beq.n	dec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
     d72:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     d76:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     d7a:	6861      	ldr	r1, [r4, #4]
     d7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
     d80:	4620      	mov	r0, r4
     d82:	1a51      	subs	r1, r2, r1
     d84:	0209      	lsls	r1, r1, #8
     d86:	17ca      	asrs	r2, r1, #31
     d88:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d8c:	f109 0604 	add.w	r6, r9, #4
     d90:	1209      	asrs	r1, r1, #8
     d92:	d41b      	bmi.n	dcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4e4>
     d94:	8971      	ldrh	r1, [r6, #10]
     d96:	b349      	cbz	r1, dec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
     d98:	8941      	ldrh	r1, [r0, #10]
     d9a:	bb39      	cbnz	r1, dec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
     d9c:	f000 fb5a 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     da0:	aa01      	add	r2, sp, #4
     da2:	4669      	mov	r1, sp
     da4:	f002 fb20 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     da8:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     dac:	2800      	cmp	r0, #0
     dae:	bfcc      	ite	gt
     db0:	2001      	movgt	r0, #1
     db2:	2000      	movle	r0, #0
     db4:	f100 0133 	add.w	r1, r0, #51	; 0x33
     db8:	9800      	ldr	r0, [sp, #0]
     dba:	6832      	ldr	r2, [r6, #0]
     dbc:	1a10      	subs	r0, r2, r0
     dbe:	0200      	lsls	r0, r0, #8
     dc0:	17c2      	asrs	r2, r0, #31
     dc2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     dc6:	1200      	asrs	r0, r0, #8
     dc8:	4288      	cmp	r0, r1
     dca:	da0f      	bge.n	dec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x504>
     dcc:	f888 5000 	strb.w	r5, [r8]
     dd0:	f899 0010 	ldrb.w	r0, [r9, #16]
     dd4:	7b21      	ldrb	r1, [r4, #12]
     dd6:	4288      	cmp	r0, r1
     dd8:	d803      	bhi.n	de2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4fa>
     dda:	b003      	add	sp, #12
     ddc:	2000      	movs	r0, #0
     dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de2:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     de6:	7845      	ldrb	r5, [r0, #1]
     de8:	2d20      	cmp	r5, #32
     dea:	d1c2      	bne.n	d72 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48a>
     dec:	b003      	add	sp, #12
     dee:	2001      	movs	r0, #1
     df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     df4:	20000dcc 	.word	0x20000dcc
     df8:	20000acc 	.word	0x20000acc
     dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e00:	f04f 0800 	mov.w	r8, #0
     e04:	b098      	sub	sp, #96	; 0x60
     e06:	4616      	mov	r6, r2
     e08:	460d      	mov	r5, r1
     e0a:	46c3      	mov	fp, r8
     e0c:	f002 f894 	bl	2f38 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     e10:	4604      	mov	r4, r0
     e12:	2d01      	cmp	r5, #1
     e14:	bf18      	it	ne
     e16:	2d02      	cmpne	r5, #2
     e18:	d005      	beq.n	e26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x53e>
     e1a:	f640 116d 	movw	r1, #2413	; 0x96d
     e1e:	f04f 0070 	mov.w	r0, #112	; 0x70
     e22:	f002 fe79 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e26:	49fe      	ldr	r1, [pc, #1016]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
     e28:	2001      	movs	r0, #1
     e2a:	6008      	str	r0, [r1, #0]
     e2c:	49fd      	ldr	r1, [pc, #1012]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
     e2e:	6889      	ldr	r1, [r1, #8]
     e30:	6008      	str	r0, [r1, #0]
     e32:	2000      	movs	r0, #0
     e34:	9006      	str	r0, [sp, #24]
     e36:	1e40      	subs	r0, r0, #1
     e38:	9008      	str	r0, [sp, #32]
     e3a:	49fb      	ldr	r1, [pc, #1004]	; (1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
     e3c:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     e40:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     e44:	1d1b      	adds	r3, r3, #4
     e46:	af09      	add	r7, sp, #36	; 0x24
     e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     e4a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     e4e:	a809      	add	r0, sp, #36	; 0x24
     e50:	f000 fb00 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
     e54:	9007      	str	r0, [sp, #28]
     e56:	48f4      	ldr	r0, [pc, #976]	; (1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
     e58:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     e5c:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
     e60:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     e64:	f1b9 0f00 	cmp.w	r9, #0
     e68:	bf14      	ite	ne
     e6a:	f04f 0a01 	movne.w	sl, #1
     e6e:	f04f 0a00 	moveq.w	sl, #0
     e72:	9809      	ldr	r0, [sp, #36]	; 0x24
     e74:	9012      	str	r0, [sp, #72]	; 0x48
     e76:	f1ba 0f00 	cmp.w	sl, #0
     e7a:	d009      	beq.n	e90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a8>
     e7c:	48eb      	ldr	r0, [pc, #940]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
     e7e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     e82:	b928      	cbnz	r0, e90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a8>
     e84:	f002 fde4 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     e88:	2800      	cmp	r0, #0
     e8a:	bf08      	it	eq
     e8c:	2701      	moveq	r7, #1
     e8e:	d000      	beq.n	e92 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5aa>
     e90:	2700      	movs	r7, #0
     e92:	48e7      	ldr	r0, [pc, #924]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
     e94:	2200      	movs	r2, #0
     e96:	9214      	str	r2, [sp, #80]	; 0x50
     e98:	7800      	ldrb	r0, [r0, #0]
     e9a:	4616      	mov	r6, r2
     e9c:	2801      	cmp	r0, #1
     e9e:	bf18      	it	ne
     ea0:	2803      	cmpne	r0, #3
     ea2:	d143      	bne.n	f2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x644>
     ea4:	48e2      	ldr	r0, [pc, #904]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
     ea6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     eaa:	eba8 0009 	sub.w	r0, r8, r9
     eae:	9014      	str	r0, [sp, #80]	; 0x50
     eb0:	45c1      	cmp	r9, r8
     eb2:	d23b      	bcs.n	f2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x644>
     eb4:	a803      	add	r0, sp, #12
     eb6:	9005      	str	r0, [sp, #20]
     eb8:	a817      	add	r0, sp, #92	; 0x5c
     eba:	9010      	str	r0, [sp, #64]	; 0x40
     ebc:	9907      	ldr	r1, [sp, #28]
     ebe:	f108 0003 	add.w	r0, r8, #3
     ec2:	4242      	negs	r2, r0
     ec4:	f8df c36c 	ldr.w	ip, [pc, #876]	; 1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
     ec8:	1a08      	subs	r0, r1, r0
     eca:	2300      	movs	r3, #0
     ecc:	ebbc 0101 	subs.w	r1, ip, r1
     ed0:	eb73 0103 	sbcs.w	r1, r3, r3
     ed4:	d204      	bcs.n	ee0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5f8>
     ed6:	f240 51e4 	movw	r1, #1508	; 0x5e4
     eda:	2070      	movs	r0, #112	; 0x70
     edc:	f002 fe1c 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee0:	49d5      	ldr	r1, [pc, #852]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
     ee2:	428a      	cmp	r2, r1
     ee4:	dd04      	ble.n	ef0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x608>
     ee6:	f240 51e5 	movw	r1, #1509	; 0x5e5
     eea:	2070      	movs	r0, #112	; 0x70
     eec:	f002 fe14 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ef0:	49d2      	ldr	r1, [pc, #840]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
     ef2:	428a      	cmp	r2, r1
     ef4:	da04      	bge.n	f00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x618>
     ef6:	f240 51e6 	movw	r1, #1510	; 0x5e6
     efa:	2070      	movs	r0, #112	; 0x70
     efc:	f002 fe0c 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f00:	49cf      	ldr	r1, [pc, #828]	; (1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>)
     f02:	4288      	cmp	r0, r1
     f04:	bfa8      	it	ge
     f06:	49cf      	ldrge	r1, [pc, #828]	; (1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>)
     f08:	da03      	bge.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x62a>
     f0a:	2800      	cmp	r0, #0
     f0c:	bfb8      	it	lt
     f0e:	49cc      	ldrlt	r1, [pc, #816]	; (1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>)
     f10:	da00      	bge.n	f14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x62c>
     f12:	1840      	adds	r0, r0, r1
     f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
     f16:	9905      	ldr	r1, [sp, #20]
     f18:	f002 fa66 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     f1c:	9803      	ldr	r0, [sp, #12]
     f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
     f20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f24:	9003      	str	r0, [sp, #12]
     f26:	1a08      	subs	r0, r1, r0
     f28:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     f2c:	2f00      	cmp	r7, #0
     f2e:	bf18      	it	ne
     f30:	2632      	movne	r6, #50	; 0x32
     f32:	d104      	bne.n	f3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x656>
     f34:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     f38:	2800      	cmp	r0, #0
     f3a:	bf18      	it	ne
     f3c:	2602      	movne	r6, #2
     f3e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     f42:	d008      	beq.n	f56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66e>
     f44:	9809      	ldr	r0, [sp, #36]	; 0x24
     f46:	1b00      	subs	r0, r0, r4
     f48:	0200      	lsls	r0, r0, #8
     f4a:	17c1      	asrs	r1, r0, #31
     f4c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f50:	1200      	asrs	r0, r0, #8
     f52:	2801      	cmp	r0, #1
     f54:	da02      	bge.n	f5c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
     f56:	2004      	movs	r0, #4
     f58:	9918      	ldr	r1, [sp, #96]	; 0x60
     f5a:	e00b      	b.n	f74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68c>
     f5c:	b147      	cbz	r7, f70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
     f5e:	48b3      	ldr	r0, [pc, #716]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
     f60:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     f64:	b120      	cbz	r0, f70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
     f66:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     f6a:	1c06      	adds	r6, r0, #0
     f6c:	bf18      	it	ne
     f6e:	2602      	movne	r6, #2
     f70:	4621      	mov	r1, r4
     f72:	2001      	movs	r0, #1
     f74:	f1b9 0f00 	cmp.w	r9, #0
     f78:	d002      	beq.n	f80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
     f7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
     f7c:	2b1e      	cmp	r3, #30
     f7e:	da02      	bge.n	f86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x69e>
     f80:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     f84:	b113      	cbz	r3, f8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6a4>
     f86:	f04f 0b01 	mov.w	fp, #1
     f8a:	1e40      	subs	r0, r0, #1
     f8c:	1983      	adds	r3, r0, r6
     f8e:	48a8      	ldr	r0, [pc, #672]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
     f90:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     f94:	7800      	ldrb	r0, [r0, #0]
     f96:	9015      	str	r0, [sp, #84]	; 0x54
     f98:	9809      	ldr	r0, [sp, #36]	; 0x24
     f9a:	1a80      	subs	r0, r0, r2
     f9c:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     fa0:	ebac 0001 	sub.w	r0, ip, r1
     fa4:	0200      	lsls	r0, r0, #8
     fa6:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     faa:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     fae:	1200      	asrs	r0, r0, #8
     fb0:	4298      	cmp	r0, r3
     fb2:	db18      	blt.n	fe6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6fe>
     fb4:	2a00      	cmp	r2, #0
     fb6:	bf18      	it	ne
     fb8:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     fbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
     fbe:	9710      	str	r7, [sp, #64]	; 0x40
     fc0:	2700      	movs	r7, #0
     fc2:	f001 feb3 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     fc6:	1a30      	subs	r0, r6, r0
     fc8:	0200      	lsls	r0, r0, #8
     fca:	17c1      	asrs	r1, r0, #31
     fcc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     fd0:	1200      	asrs	r0, r0, #8
     fd2:	283e      	cmp	r0, #62	; 0x3e
     fd4:	da3e      	bge.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fd6:	2d01      	cmp	r5, #1
     fd8:	d01f      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
     fda:	1e70      	subs	r0, r6, #1
     fdc:	9910      	ldr	r1, [sp, #64]	; 0x40
     fde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fe2:	b311      	cbz	r1, 102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
     fe4:	e02c      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     fe6:	b17a      	cbz	r2, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     fe8:	2e00      	cmp	r6, #0
     fea:	bf04      	itt	eq
     fec:	9815      	ldreq	r0, [sp, #84]	; 0x54
     fee:	2803      	cmpeq	r0, #3
     ff0:	d00a      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff2:	b927      	cbnz	r7, ffe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x716>
     ff4:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     ff8:	2800      	cmp	r0, #0
     ffa:	bf18      	it	ne
     ffc:	1e9b      	subne	r3, r3, #2
     ffe:	2200      	movs	r2, #0
    1000:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    1004:	4690      	mov	r8, r2
    1006:	e7c7      	b.n	f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b0>
    1008:	bb07      	cbnz	r7, 104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    100a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    100e:	b1e8      	cbz	r0, 104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    1010:	2000      	movs	r0, #0
    1012:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    1016:	1e9b      	subs	r3, r3, #2
    1018:	e7be      	b.n	f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b0>
    101a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    101e:	d120      	bne.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    1020:	f640 01e6 	movw	r1, #2278	; 0x8e6
    1024:	2070      	movs	r0, #112	; 0x70
    1026:	f002 fd77 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    102a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    102e:	d007      	beq.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
    1030:	1a21      	subs	r1, r4, r0
    1032:	0209      	lsls	r1, r1, #8
    1034:	17ca      	asrs	r2, r1, #31
    1036:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    103a:	1209      	asrs	r1, r1, #8
    103c:	2904      	cmp	r1, #4
    103e:	dd03      	ble.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    1040:	4604      	mov	r4, r0
    1042:	f001 fe79 	bl	2d38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1046:	e00c      	b.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    1048:	2900      	cmp	r1, #0
    104a:	dd0a      	ble.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    104c:	b01b      	add	sp, #108	; 0x6c
    104e:	2000      	movs	r0, #0
    1050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1054:	1e70      	subs	r0, r6, #1
    1056:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    105a:	4620      	mov	r0, r4
    105c:	f001 fe6c 	bl	2d38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1060:	4657      	mov	r7, sl
    1062:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1066:	d028      	beq.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    1068:	9809      	ldr	r0, [sp, #36]	; 0x24
    106a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    106e:	1b00      	subs	r0, r0, r4
    1070:	f08b 0301 	eor.w	r3, fp, #1
    1074:	4a74      	ldr	r2, [pc, #464]	; (1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>)
    1076:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    107a:	ebac 0c04 	sub.w	ip, ip, r4
    107e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1082:	4283      	cmp	r3, r0
    1084:	bf98      	it	ls
    1086:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    108a:	d2df      	bcs.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    108c:	4562      	cmp	r2, ip
    108e:	d3dd      	bcc.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    1090:	4620      	mov	r0, r4
    1092:	f00a feb8 	bl	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1096:	4a67      	ldr	r2, [pc, #412]	; (1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>)
    1098:	9907      	ldr	r1, [sp, #28]
    109a:	1c53      	adds	r3, r2, #1
    109c:	1a0e      	subs	r6, r1, r0
    109e:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    10a2:	bf24      	itt	cs
    10a4:	eba0 0c01 	subcs.w	ip, r0, r1
    10a8:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    10ac:	d310      	bcc.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
    10ae:	42b2      	cmp	r2, r6
    10b0:	d208      	bcs.n	10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
    10b2:	1a10      	subs	r0, r2, r0
    10b4:	4408      	add	r0, r1
    10b6:	1c46      	adds	r6, r0, #1
    10b8:	e00a      	b.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
    10ba:	f640 2105 	movw	r1, #2565	; 0xa05
    10be:	2070      	movs	r0, #112	; 0x70
    10c0:	f002 fd2a 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10c4:	4562      	cmp	r2, ip
    10c6:	d22c      	bcs.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    10c8:	1a51      	subs	r1, r2, r1
    10ca:	4408      	add	r0, r1
    10cc:	1c40      	adds	r0, r0, #1
    10ce:	4246      	negs	r6, r0
    10d0:	4856      	ldr	r0, [pc, #344]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    10d2:	7f80      	ldrb	r0, [r0, #30]
    10d4:	b350      	cbz	r0, 112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    10d6:	4628      	mov	r0, r5
    10d8:	4645      	mov	r5, r8
    10da:	f04f 0b00 	mov.w	fp, #0
    10de:	46d8      	mov	r8, fp
    10e0:	2801      	cmp	r0, #1
    10e2:	d005      	beq.n	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
    10e4:	2002      	movs	r0, #2
    10e6:	f002 f86f 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    10ea:	2001      	movs	r0, #1
    10ec:	f002 f86c 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    10f0:	45a9      	cmp	r9, r5
    10f2:	d22c      	bcs.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
    10f4:	eba6 0105 	sub.w	r1, r6, r5
    10f8:	f04f 0301 	mov.w	r3, #1
    10fc:	f04f 0203 	mov.w	r2, #3
    1100:	f04f 0002 	mov.w	r0, #2
    1104:	f001 ff98 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1108:	2800      	cmp	r0, #0
    110a:	bf08      	it	eq
    110c:	f04f 0801 	moveq.w	r8, #1
    1110:	f1b9 0f00 	cmp.w	r9, #0
    1114:	d035      	beq.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    1116:	2301      	movs	r3, #1
    1118:	eba6 0109 	sub.w	r1, r6, r9
    111c:	2203      	movs	r2, #3
    111e:	4618      	mov	r0, r3
    1120:	e023      	b.n	116a <CONFIG_FPROTECT_BLOCK_SIZE+0x16a>
    1122:	f640 21e5 	movw	r1, #2789	; 0xae5
    1126:	2070      	movs	r0, #112	; 0x70
    1128:	f002 fcf6 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    112c:	45c1      	cmp	r9, r8
    112e:	bf34      	ite	cc
    1130:	4640      	movcc	r0, r8
    1132:	4648      	movcs	r0, r9
    1134:	f1bb 0f00 	cmp.w	fp, #0
    1138:	bf14      	ite	ne
    113a:	2100      	movne	r1, #0
    113c:	211e      	moveq	r1, #30
    113e:	4408      	add	r0, r1
    1140:	42b0      	cmp	r0, r6
    1142:	dbc8      	blt.n	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
    1144:	f640 2118 	movw	r1, #2584	; 0xa18
    1148:	2070      	movs	r0, #112	; 0x70
    114a:	f002 fce5 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    114e:	d910      	bls.n	1172 <CONFIG_FPROTECT_BLOCK_SIZE+0x172>
    1150:	2301      	movs	r3, #1
    1152:	eba6 0109 	sub.w	r1, r6, r9
    1156:	2203      	movs	r2, #3
    1158:	4618      	mov	r0, r3
    115a:	f001 ff6d 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    115e:	b328      	cbz	r0, 11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1160:	b17d      	cbz	r5, 1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    1162:	1b71      	subs	r1, r6, r5
    1164:	2301      	movs	r3, #1
    1166:	2203      	movs	r2, #3
    1168:	2002      	movs	r0, #2
    116a:	f001 ff65 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    116e:	b1e8      	cbz	r0, 11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1170:	e007      	b.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    1172:	ea55 0009 	orrs.w	r0, r5, r9
    1176:	d004      	beq.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    1178:	f44f 6115 	mov.w	r1, #2384	; 0x950
    117c:	2070      	movs	r0, #112	; 0x70
    117e:	f002 fccb 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1182:	2301      	movs	r3, #1
    1184:	2203      	movs	r2, #3
    1186:	4631      	mov	r1, r6
    1188:	2000      	movs	r0, #0
    118a:	f001 ff55 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    118e:	b168      	cbz	r0, 11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1190:	2501      	movs	r5, #1
    1192:	f1b8 0f00 	cmp.w	r8, #0
    1196:	d003      	beq.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    1198:	9812      	ldr	r0, [sp, #72]	; 0x48
    119a:	9009      	str	r0, [sp, #36]	; 0x24
    119c:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
    11a0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
    11a4:	f1ba 0f00 	cmp.w	sl, #0
    11a8:	d10e      	bne.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    11aa:	e009      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    11ac:	2002      	movs	r0, #2
    11ae:	f002 f80b 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11b2:	2001      	movs	r0, #1
    11b4:	f002 f808 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11b8:	b01b      	add	sp, #108	; 0x6c
    11ba:	2000      	movs	r0, #0
    11bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11c0:	481a      	ldr	r0, [pc, #104]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    11c2:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    11c6:	b100      	cbz	r0, 11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
    11c8:	b34f      	cbz	r7, 121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    11ca:	f8df a060 	ldr.w	sl, [pc, #96]	; 122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    11ce:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    11d2:	b118      	cbz	r0, 11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    11d4:	f002 fae6 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    11d8:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    11dc:	b3e7      	cbz	r7, 1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    11de:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    11e2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    11e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    11ea:	f8c8 0000 	str.w	r0, [r8]
    11ee:	2300      	movs	r3, #0
    11f0:	2203      	movs	r2, #3
    11f2:	2005      	movs	r0, #5
    11f4:	f001 ff20 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11f8:	b378      	cbz	r0, 125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
    11fa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    11fe:	2005      	movs	r0, #5
    1200:	f002 f89c 	bl	333c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1204:	4912      	ldr	r1, [pc, #72]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
    1206:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    120a:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    120e:	4911      	ldr	r1, [pc, #68]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    1210:	12e0      	asrs	r0, r4, #11
    1212:	6008      	str	r0, [r1, #0]
    1214:	4c05      	ldr	r4, [pc, #20]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    1216:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    121a:	b3e0      	cbz	r0, 1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
    121c:	e05d      	b.n	12da <CONFIG_FPROTECT_BLOCK_SIZE+0x2da>
    121e:	e01d      	b.n	125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
    1220:	40000508 	.word	0x40000508
    1224:	20000008 	.word	0x20000008
    1228:	20000acc 	.word	0x20000acc
    122c:	20000dcc 	.word	0x20000dcc
    1230:	2000000a 	.word	0x2000000a
    1234:	1e847fff 	.word	0x1e847fff
    1238:	07a12000 	.word	0x07a12000
    123c:	f85ee000 	.word	0xf85ee000
    1240:	1e848000 	.word	0x1e848000
    1244:	e17b8000 	.word	0xe17b8000
    1248:	003fffff 	.word	0x003fffff
    124c:	4001f508 	.word	0x4001f508
    1250:	4001f098 	.word	0x4001f098
    1254:	4001f504 	.word	0x4001f504
    1258:	e005      	b.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
    125a:	e035      	b.n	12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>
    125c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    1260:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1264:	b358      	cbz	r0, 12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    1266:	4c2c      	ldr	r4, [pc, #176]	; (1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>)
    1268:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    126c:	b150      	cbz	r0, 1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
    126e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1272:	f8c8 0000 	str.w	r0, [r8]
    1276:	2005      	movs	r0, #5
    1278:	f001 ffa6 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    127c:	f002 fafa 	bl	3874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1280:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1284:	ac06      	add	r4, sp, #24
    1286:	4825      	ldr	r0, [pc, #148]	; (131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>)
    1288:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    128c:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    1290:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    1294:	e000      	b.n	1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
    1296:	e01c      	b.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    1298:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    129c:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
    12a0:	ac0a      	add	r4, sp, #40	; 0x28
    12a2:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    12a6:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
    12aa:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
    12ae:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
    12b2:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
    12b6:	b01b      	add	sp, #108	; 0x6c
    12b8:	2001      	movs	r0, #1
    12ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12be:	f002 fa8d 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    12c2:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    12c6:	e789      	b.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    12c8:	f240 3149 	movw	r1, #841	; 0x349
    12cc:	2070      	movs	r0, #112	; 0x70
    12ce:	f002 fc23 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12d2:	f002 fac1 	bl	3858 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    12d6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    12da:	eba6 0009 	sub.w	r0, r6, r9
    12de:	f1a0 0119 	sub.w	r1, r0, #25
    12e2:	2900      	cmp	r1, #0
    12e4:	dc04      	bgt.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    12e6:	f640 2142 	movw	r1, #2626	; 0xa42
    12ea:	2070      	movs	r0, #112	; 0x70
    12ec:	f002 fc14 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f0:	2203      	movs	r2, #3
    12f2:	2301      	movs	r3, #1
    12f4:	4610      	mov	r0, r2
    12f6:	f001 fe9f 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12fa:	b138      	cbz	r0, 130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12fc:	4808      	ldr	r0, [pc, #32]	; (1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>)
    12fe:	6880      	ldr	r0, [r0, #8]
    1300:	f8c0 b000 	str.w	fp, [r0]
    1304:	4807      	ldr	r0, [pc, #28]	; (1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>)
    1306:	f8c0 b000 	str.w	fp, [r0]
    130a:	e7bb      	b.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
    130c:	f640 214d 	movw	r1, #2637	; 0xa4d
    1310:	2070      	movs	r0, #112	; 0x70
    1312:	f002 fc01 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1316:	0000      	.short	0x0000
    1318:	20000dcc 	.word	0x20000dcc
    131c:	20000acc 	.word	0x20000acc
    1320:	20000008 	.word	0x20000008
    1324:	40000508 	.word	0x40000508
    1328:	b510      	push	{r4, lr}
    132a:	4c15      	ldr	r4, [pc, #84]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    132c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1330:	2820      	cmp	r0, #32
    1332:	bf18      	it	ne
    1334:	bd10      	popne	{r4, pc}
    1336:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    133a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    133e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1342:	2920      	cmp	r1, #32
    1344:	d017      	beq.n	1376 <CONFIG_FPROTECT_BLOCK_SIZE+0x376>
    1346:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    134a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    134e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1352:	785b      	ldrb	r3, [r3, #1]
    1354:	f880 3020 	strb.w	r3, [r0, #32]
    1358:	2301      	movs	r3, #1
    135a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    135e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1362:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1366:	2002      	movs	r0, #2
    1368:	f000 f8b2 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    136c:	2000      	movs	r0, #0
    136e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1372:	77a0      	strb	r0, [r4, #30]
    1374:	bd10      	pop	{r4, pc}
    1376:	f240 3196 	movw	r1, #918	; 0x396
    137a:	2070      	movs	r0, #112	; 0x70
    137c:	f002 fbcc 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1380:	20000dcc 	.word	0x20000dcc
    1384:	20000d4c 	.word	0x20000d4c
    1388:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    138c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    1390:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1394:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1398:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    139c:	2c20      	cmp	r4, #32
    139e:	bf08      	it	eq
    13a0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    13a4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>
    13a8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>
    13ac:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
    13b0:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    13b4:	2607      	movs	r6, #7
    13b6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    13ba:	2801      	cmp	r0, #1
    13bc:	d00e      	beq.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13be:	2804      	cmp	r0, #4
    13c0:	bf08      	it	eq
    13c2:	2602      	moveq	r6, #2
    13c4:	d00a      	beq.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13c6:	2805      	cmp	r0, #5
    13c8:	bf0c      	ite	eq
    13ca:	2603      	moveq	r6, #3
    13cc:	2806      	cmpne	r0, #6
    13ce:	d005      	beq.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13d0:	f640 01b3 	movw	r1, #2227	; 0x8b3
    13d4:	f04f 0070 	mov.w	r0, #112	; 0x70
    13d8:	f002 fb9e 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13dc:	f1ba 0f00 	cmp.w	sl, #0
    13e0:	bf18      	it	ne
    13e2:	f3af 8000 	nopne.w
    13e6:	f3ef 8010 	mrs	r0, PRIMASK
    13ea:	b672      	cpsid	i
    13ec:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    13f0:	784a      	ldrb	r2, [r1, #1]
    13f2:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    13f6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    13fa:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    13fe:	42a2      	cmp	r2, r4
    1400:	bf04      	itt	eq
    1402:	2220      	moveq	r2, #32
    1404:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1408:	b1a8      	cbz	r0, 1436 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae>
    140a:	462a      	mov	r2, r5
    140c:	4621      	mov	r1, r4
    140e:	2001      	movs	r0, #1
    1410:	f000 f85e 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    1414:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1418:	4631      	mov	r1, r6
    141a:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    141e:	4620      	mov	r0, r4
    1420:	4790      	blx	r2
    1422:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1426:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    142a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    142e:	2c20      	cmp	r4, #32
    1430:	d1be      	bne.n	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    1432:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1436:	4806      	ldr	r0, [pc, #24]	; (1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>)
    1438:	2800      	cmp	r0, #0
    143a:	bf18      	it	ne
    143c:	f3af 8000 	nopne.w
    1440:	b662      	cpsie	i
    1442:	e7e2      	b.n	140a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82>
    1444:	20000dcc 	.word	0x20000dcc
    1448:	00000000 	.word	0x00000000
    144c:	20000d4c 	.word	0x20000d4c
    1450:	00000000 	.word	0x00000000
    1454:	b510      	push	{r4, lr}
    1456:	4604      	mov	r4, r0
    1458:	6800      	ldr	r0, [r0, #0]
    145a:	f00a fcd4 	bl	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    145e:	4601      	mov	r1, r0
    1460:	8960      	ldrh	r0, [r4, #10]
    1462:	f994 2008 	ldrsb.w	r2, [r4, #8]
    1466:	f8df c054 	ldr.w	ip, [pc, #84]	; 14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>
    146a:	4410      	add	r0, r2
    146c:	1cc2      	adds	r2, r0, #3
    146e:	1888      	adds	r0, r1, r2
    1470:	2300      	movs	r3, #0
    1472:	ebbc 0101 	subs.w	r1, ip, r1
    1476:	eb73 0103 	sbcs.w	r1, r3, r3
    147a:	d204      	bcs.n	1486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfe>
    147c:	f240 51e4 	movw	r1, #1508	; 0x5e4
    1480:	2070      	movs	r0, #112	; 0x70
    1482:	f002 fb49 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1486:	490e      	ldr	r1, [pc, #56]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    1488:	428a      	cmp	r2, r1
    148a:	dd04      	ble.n	1496 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10e>
    148c:	f240 51e5 	movw	r1, #1509	; 0x5e5
    1490:	2070      	movs	r0, #112	; 0x70
    1492:	f002 fb41 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1496:	490b      	ldr	r1, [pc, #44]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    1498:	428a      	cmp	r2, r1
    149a:	da04      	bge.n	14a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e>
    149c:	f240 51e6 	movw	r1, #1510	; 0x5e6
    14a0:	2070      	movs	r0, #112	; 0x70
    14a2:	f002 fb39 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14a6:	4908      	ldr	r1, [pc, #32]	; (14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>)
    14a8:	4288      	cmp	r0, r1
    14aa:	bfa8      	it	ge
    14ac:	4907      	ldrge	r1, [pc, #28]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    14ae:	da03      	bge.n	14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>
    14b0:	2800      	cmp	r0, #0
    14b2:	bfb4      	ite	lt
    14b4:	4904      	ldrlt	r1, [pc, #16]	; (14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>)
    14b6:	bd10      	popge	{r4, pc}
    14b8:	1840      	adds	r0, r0, r1
    14ba:	bd10      	pop	{r4, pc}
    14bc:	1e847fff 	.word	0x1e847fff
    14c0:	07a12000 	.word	0x07a12000
    14c4:	f85ee000 	.word	0xf85ee000
    14c8:	1e848000 	.word	0x1e848000
    14cc:	e17b8000 	.word	0xe17b8000
    14d0:	f8df c054 	ldr.w	ip, [pc, #84]	; 1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>
    14d4:	b510      	push	{r4, lr}
    14d6:	2300      	movs	r3, #0
    14d8:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    14dc:	2807      	cmp	r0, #7
    14de:	d21e      	bcs.n	151e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x196>
    14e0:	e8df f000 	tbb	[pc, r0]
    14e4:	05050505 	.word	0x05050505
    14e8:	00040404 	.word	0x00040404
    14ec:	2301      	movs	r3, #1
    14ee:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    14f2:	2b00      	cmp	r3, #0
    14f4:	bf08      	it	eq
    14f6:	bd10      	popeq	{r4, pc}
    14f8:	480c      	ldr	r0, [pc, #48]	; (152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>)
    14fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    14fe:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1502:	2820      	cmp	r0, #32
    1504:	bf0e      	itee	eq
    1506:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    150a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    150e:	7041      	strbne	r1, [r0, #1]
    1510:	2020      	movs	r0, #32
    1512:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1516:	7058      	strb	r0, [r3, #1]
    1518:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    151c:	bd10      	pop	{r4, pc}
    151e:	f240 215f 	movw	r1, #607	; 0x25f
    1522:	2070      	movs	r0, #112	; 0x70
    1524:	f002 faf8 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1528:	20000d4c 	.word	0x20000d4c
    152c:	20000dcc 	.word	0x20000dcc
    1530:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1534:	b083      	sub	sp, #12
    1536:	485c      	ldr	r0, [pc, #368]	; (16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    1538:	9904      	ldr	r1, [sp, #16]
    153a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    153e:	9001      	str	r0, [sp, #4]
    1540:	f890 4020 	ldrb.w	r4, [r0, #32]
    1544:	9803      	ldr	r0, [sp, #12]
    1546:	4625      	mov	r5, r4
    1548:	2801      	cmp	r0, #1
    154a:	bf18      	it	ne
    154c:	2802      	cmpne	r0, #2
    154e:	d005      	beq.n	155c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d4>
    1550:	f640 2189 	movw	r1, #2697	; 0xa89
    1554:	f04f 0070 	mov.w	r0, #112	; 0x70
    1558:	f002 fade 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    155c:	2700      	movs	r7, #0
    155e:	2d20      	cmp	r5, #32
    1560:	d04a      	beq.n	15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>
    1562:	4851      	ldr	r0, [pc, #324]	; (16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    1564:	9100      	str	r1, [sp, #0]
    1566:	2600      	movs	r6, #0
    1568:	7f80      	ldrb	r0, [r0, #30]
    156a:	2800      	cmp	r0, #0
    156c:	bf08      	it	eq
    156e:	2602      	moveq	r6, #2
    1570:	f001 fbdc 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1574:	f8df a138 	ldr.w	sl, [pc, #312]	; 16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>
    1578:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    157c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    1580:	f8df 9128 	ldr.w	r9, [pc, #296]	; 16ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x324>
    1584:	684a      	ldr	r2, [r1, #4]
    1586:	6889      	ldr	r1, [r1, #8]
    1588:	1a12      	subs	r2, r2, r0
    158a:	1a09      	subs	r1, r1, r0
    158c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1590:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1594:	4296      	cmp	r6, r2
    1596:	bf98      	it	ls
    1598:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    159c:	d201      	bcs.n	15a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21a>
    159e:	4589      	cmp	r9, r1
    15a0:	d228      	bcs.n	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
    15a2:	4a44      	ldr	r2, [pc, #272]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    15a4:	9900      	ldr	r1, [sp, #0]
    15a6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    15aa:	4622      	mov	r2, r4
    15ac:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    15b0:	784c      	ldrb	r4, [r1, #1]
    15b2:	2c20      	cmp	r4, #32
    15b4:	d016      	beq.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    15b6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    15ba:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    15be:	f8dc 8004 	ldr.w	r8, [ip, #4]
    15c2:	f8dc c008 	ldr.w	ip, [ip, #8]
    15c6:	eba8 0800 	sub.w	r8, r8, r0
    15ca:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    15ce:	ebac 0100 	sub.w	r1, ip, r0
    15d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    15d6:	4546      	cmp	r6, r8
    15d8:	bf98      	it	ls
    15da:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    15de:	d2e4      	bcs.n	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
    15e0:	4589      	cmp	r9, r1
    15e2:	d3e2      	bcc.n	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
    15e4:	2a20      	cmp	r2, #32
    15e6:	d005      	beq.n	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
    15e8:	2120      	movs	r1, #32
    15ea:	2004      	movs	r0, #4
    15ec:	9b00      	ldr	r3, [sp, #0]
    15ee:	f7ff f9e9 	bl	9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    15f2:	4604      	mov	r4, r0
    15f4:	42ac      	cmp	r4, r5
    15f6:	d115      	bne.n	1624 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29c>
    15f8:	482f      	ldr	r0, [pc, #188]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    15fa:	2800      	cmp	r0, #0
    15fc:	bf18      	it	ne
    15fe:	f3af 8000 	nopne.w
    1602:	f001 fb93 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1606:	4c28      	ldr	r4, [pc, #160]	; (16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    1608:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    160c:	2920      	cmp	r1, #32
    160e:	d00d      	beq.n	162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>
    1610:	68e1      	ldr	r1, [r4, #12]
    1612:	1c82      	adds	r2, r0, #2
    1614:	1a51      	subs	r1, r2, r1
    1616:	0209      	lsls	r1, r1, #8
    1618:	17ca      	asrs	r2, r1, #31
    161a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    161e:	1209      	asrs	r1, r1, #8
    1620:	2900      	cmp	r1, #0
    1622:	dd03      	ble.n	162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>
    1624:	b005      	add	sp, #20
    1626:	2000      	movs	r0, #0
    1628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    162c:	2d20      	cmp	r5, #32
    162e:	d00d      	beq.n	164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>
    1630:	462a      	mov	r2, r5
    1632:	9903      	ldr	r1, [sp, #12]
    1634:	f7ff fbe2 	bl	dfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x514>
    1638:	b358      	cbz	r0, 1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
    163a:	9801      	ldr	r0, [sp, #4]
    163c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1640:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1644:	b005      	add	sp, #20
    1646:	2001      	movs	r0, #1
    1648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    164c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1650:	b118      	cbz	r0, 165a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d2>
    1652:	f002 f8a7 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1656:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    165a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    165e:	b150      	cbz	r0, 1676 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ee>
    1660:	4916      	ldr	r1, [pc, #88]	; (16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>)
    1662:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1666:	6008      	str	r0, [r1, #0]
    1668:	2005      	movs	r0, #5
    166a:	f001 fdad 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    166e:	f002 f901 	bl	3874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1672:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1676:	2004      	movs	r0, #4
    1678:	f001 fda6 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    167c:	f001 fe00 	bl	3280 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1680:	2020      	movs	r0, #32
    1682:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1686:	480e      	ldr	r0, [pc, #56]	; (16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>)
    1688:	6880      	ldr	r0, [r0, #8]
    168a:	6007      	str	r7, [r0, #0]
    168c:	480d      	ldr	r0, [pc, #52]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    168e:	6007      	str	r7, [r0, #0]
    1690:	e7d8      	b.n	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
    1692:	462a      	mov	r2, r5
    1694:	2120      	movs	r1, #32
    1696:	2004      	movs	r0, #4
    1698:	9b04      	ldr	r3, [sp, #16]
    169a:	f7ff f993 	bl	9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    169e:	b005      	add	sp, #20
    16a0:	2000      	movs	r0, #0
    16a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a6:	0000      	.short	0x0000
    16a8:	20000dcc 	.word	0x20000dcc
    16ac:	003fffff 	.word	0x003fffff
    16b0:	20000acc 	.word	0x20000acc
    16b4:	20000d4c 	.word	0x20000d4c
    16b8:	00000000 	.word	0x00000000
    16bc:	4001f508 	.word	0x4001f508
    16c0:	20000008 	.word	0x20000008
    16c4:	40000508 	.word	0x40000508

000016c8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    16c8:	4906      	ldr	r1, [pc, #24]	; (16e4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    16ca:	b510      	push	{r4, lr}
    16cc:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    16d0:	2a20      	cmp	r2, #32
    16d2:	bf1c      	itt	ne
    16d4:	7788      	strbne	r0, [r1, #30]
    16d6:	bd10      	popne	{r4, pc}
    16d8:	f240 31f5 	movw	r1, #1013	; 0x3f5
    16dc:	2070      	movs	r0, #112	; 0x70
    16de:	f002 fa1b 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16e2:	0000      	.short	0x0000
    16e4:	20000dcc 	.word	0x20000dcc

000016e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    16e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16ec:	4e73      	ldr	r6, [pc, #460]	; (18bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    16ee:	4607      	mov	r7, r0
    16f0:	b087      	sub	sp, #28
    16f2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    16f6:	468a      	mov	sl, r1
    16f8:	2820      	cmp	r0, #32
    16fa:	d05a      	beq.n	17b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    16fc:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1700:	f106 040c 	add.w	r4, r6, #12
    1704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1708:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    170c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1710:	2020      	movs	r0, #32
    1712:	f88d 0000 	strb.w	r0, [sp]
    1716:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    171a:	aa03      	add	r2, sp, #12
    171c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1720:	a901      	add	r1, sp, #4
    1722:	f890 5020 	ldrb.w	r5, [r0, #32]
    1726:	6930      	ldr	r0, [r6, #16]
    1728:	9002      	str	r0, [sp, #8]
    172a:	6830      	ldr	r0, [r6, #0]
    172c:	4438      	add	r0, r7
    172e:	f001 fe5b 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1732:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    1736:	2800      	cmp	r0, #0
    1738:	dd02      	ble.n	1740 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    173a:	9801      	ldr	r0, [sp, #4]
    173c:	1c40      	adds	r0, r0, #1
    173e:	9001      	str	r0, [sp, #4]
    1740:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1744:	9901      	ldr	r1, [sp, #4]
    1746:	1843      	adds	r3, r0, r1
    1748:	2f64      	cmp	r7, #100	; 0x64
    174a:	d337      	bcc.n	17bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    174c:	495c      	ldr	r1, [pc, #368]	; (18c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    174e:	2200      	movs	r2, #0
    1750:	1bc9      	subs	r1, r1, r7
    1752:	eb72 0002 	sbcs.w	r0, r2, r2
    1756:	d331      	bcc.n	17bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1758:	f8d8 0004 	ldr.w	r0, [r8, #4]
    175c:	1a18      	subs	r0, r3, r0
    175e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1762:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1766:	d229      	bcs.n	17bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1768:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
    176c:	6060      	str	r0, [r4, #4]
    176e:	4853      	ldr	r0, [pc, #332]	; (18bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    1770:	f884 a00c 	strb.w	sl, [r4, #12]
    1774:	f890 102e 	ldrb.w	r1, [r0, #46]	; 0x2e
    1778:	46ea      	mov	sl, sp
    177a:	2d20      	cmp	r5, #32
    177c:	bf1c      	itt	ne
    177e:	4851      	ldrne	r0, [pc, #324]	; (18c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    1780:	eb00 1b81 	addne.w	fp, r0, r1, lsl #6
    1784:	d04a      	beq.n	181c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1786:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    178a:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    178e:	6860      	ldr	r0, [r4, #4]
    1790:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1794:	4621      	mov	r1, r4
    1796:	1a10      	subs	r0, r2, r0
    1798:	0200      	lsls	r0, r0, #8
    179a:	17c2      	asrs	r2, r0, #31
    179c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    17a0:	f108 0604 	add.w	r6, r8, #4
    17a4:	1200      	asrs	r0, r0, #8
    17a6:	d426      	bmi.n	17f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    17a8:	8970      	ldrh	r0, [r6, #10]
    17aa:	b388      	cbz	r0, 1810 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    17ac:	8948      	ldrh	r0, [r1, #10]
    17ae:	b148      	cbz	r0, 17c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    17b0:	e034      	b.n	181c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    17b2:	f640 315c 	movw	r1, #2908	; 0xb5c
    17b6:	2070      	movs	r0, #112	; 0x70
    17b8:	f002 f9ae 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17bc:	b007      	add	sp, #28
    17be:	2001      	movs	r0, #1
    17c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17c4:	4620      	mov	r0, r4
    17c6:	f7ff fe45 	bl	1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
    17ca:	aa05      	add	r2, sp, #20
    17cc:	a904      	add	r1, sp, #16
    17ce:	f001 fe0b 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    17d2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    17d6:	2800      	cmp	r0, #0
    17d8:	bfcc      	ite	gt
    17da:	2001      	movgt	r0, #1
    17dc:	2000      	movle	r0, #0
    17de:	f100 0133 	add.w	r1, r0, #51	; 0x33
    17e2:	9804      	ldr	r0, [sp, #16]
    17e4:	6832      	ldr	r2, [r6, #0]
    17e6:	1a10      	subs	r0, r2, r0
    17e8:	0200      	lsls	r0, r0, #8
    17ea:	17c2      	asrs	r2, r0, #31
    17ec:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    17f0:	1200      	asrs	r0, r0, #8
    17f2:	4288      	cmp	r0, r1
    17f4:	da12      	bge.n	181c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    17f6:	f88a 5000 	strb.w	r5, [sl]
    17fa:	f898 1010 	ldrb.w	r1, [r8, #16]
    17fe:	7b20      	ldrb	r0, [r4, #12]
    1800:	4281      	cmp	r1, r0
    1802:	d806      	bhi.n	1812 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1804:	9802      	ldr	r0, [sp, #8]
    1806:	6060      	str	r0, [r4, #4]
    1808:	b007      	add	sp, #28
    180a:	2003      	movs	r0, #3
    180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1810:	e004      	b.n	181c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1812:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1816:	7845      	ldrb	r5, [r0, #1]
    1818:	2d20      	cmp	r5, #32
    181a:	d1b4      	bne.n	1786 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    181c:	4d27      	ldr	r5, [pc, #156]	; (18bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    181e:	68a8      	ldr	r0, [r5, #8]
    1820:	f1b0 3fff 	cmp.w	r0, #4294967295
    1824:	d016      	beq.n	1854 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1826:	f001 fa81 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    182a:	68a9      	ldr	r1, [r5, #8]
    182c:	1a08      	subs	r0, r1, r0
    182e:	0200      	lsls	r0, r0, #8
    1830:	17c1      	asrs	r1, r0, #31
    1832:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1836:	1200      	asrs	r0, r0, #8
    1838:	2802      	cmp	r0, #2
    183a:	dc05      	bgt.n	1848 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    183c:	9802      	ldr	r0, [sp, #8]
    183e:	6060      	str	r0, [r4, #4]
    1840:	b007      	add	sp, #28
    1842:	2002      	movs	r0, #2
    1844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1848:	2005      	movs	r0, #5
    184a:	f001 fcbd 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    184e:	f04f 30ff 	mov.w	r0, #4294967295
    1852:	60a8      	str	r0, [r5, #8]
    1854:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    1858:	f89d 2000 	ldrb.w	r2, [sp]
    185c:	2120      	movs	r1, #32
    185e:	2a20      	cmp	r2, #32
    1860:	bf13      	iteet	ne
    1862:	2005      	movne	r0, #5
    1864:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    1868:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    186c:	f7ff f8aa 	blne	9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    1870:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1874:	4913      	ldr	r1, [pc, #76]	; (18c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    1876:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    187a:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
    187e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1882:	7048      	strb	r0, [r1, #1]
    1884:	6828      	ldr	r0, [r5, #0]
    1886:	4438      	add	r0, r7
    1888:	6028      	str	r0, [r5, #0]
    188a:	2001      	movs	r0, #1
    188c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1890:	7e68      	ldrb	r0, [r5, #25]
    1892:	2801      	cmp	r0, #1
    1894:	d105      	bne.n	18a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ba>
    1896:	6928      	ldr	r0, [r5, #16]
    1898:	1e40      	subs	r0, r0, #1
    189a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    189e:	f001 fae5 	bl	2e6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    18a2:	f89d 0000 	ldrb.w	r0, [sp]
    18a6:	2820      	cmp	r0, #32
    18a8:	d003      	beq.n	18b2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ca>
    18aa:	4807      	ldr	r0, [pc, #28]	; (18c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e0>)
    18ac:	7840      	ldrb	r0, [r0, #1]
    18ae:	f002 fa03 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    18b2:	b007      	add	sp, #28
    18b4:	2000      	movs	r0, #0
    18b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18ba:	0000      	.short	0x0000
    18bc:	20000dcc 	.word	0x20000dcc
    18c0:	07a11fff 	.word	0x07a11fff
    18c4:	20000d4c 	.word	0x20000d4c
    18c8:	20000008 	.word	0x20000008

000018cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    18cc:	4602      	mov	r2, r0
    18ce:	f8df c054 	ldr.w	ip, [pc, #84]	; 1924 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    18d2:	b510      	push	{r4, lr}
    18d4:	2300      	movs	r3, #0
    18d6:	ebbc 0202 	subs.w	r2, ip, r2
    18da:	4408      	add	r0, r1
    18dc:	eb73 0203 	sbcs.w	r2, r3, r3
    18e0:	d204      	bcs.n	18ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    18e2:	f240 51e4 	movw	r1, #1508	; 0x5e4
    18e6:	2070      	movs	r0, #112	; 0x70
    18e8:	f002 f916 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ec:	4a0e      	ldr	r2, [pc, #56]	; (1928 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    18ee:	4291      	cmp	r1, r2
    18f0:	dd04      	ble.n	18fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    18f2:	f240 51e5 	movw	r1, #1509	; 0x5e5
    18f6:	2070      	movs	r0, #112	; 0x70
    18f8:	f002 f90e 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18fc:	4a0b      	ldr	r2, [pc, #44]	; (192c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    18fe:	4291      	cmp	r1, r2
    1900:	da04      	bge.n	190c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    1902:	f240 51e6 	movw	r1, #1510	; 0x5e6
    1906:	2070      	movs	r0, #112	; 0x70
    1908:	f002 f906 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    190c:	4908      	ldr	r1, [pc, #32]	; (1930 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    190e:	4288      	cmp	r0, r1
    1910:	bfa8      	it	ge
    1912:	4908      	ldrge	r1, [pc, #32]	; (1934 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1914:	da03      	bge.n	191e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    1916:	2800      	cmp	r0, #0
    1918:	bfb4      	ite	lt
    191a:	4905      	ldrlt	r1, [pc, #20]	; (1930 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    191c:	bd10      	popge	{r4, pc}
    191e:	1840      	adds	r0, r0, r1
    1920:	bd10      	pop	{r4, pc}
    1922:	0000      	.short	0x0000
    1924:	1e847fff 	.word	0x1e847fff
    1928:	07a12000 	.word	0x07a12000
    192c:	f85ee000 	.word	0xf85ee000
    1930:	1e848000 	.word	0x1e848000
    1934:	e17b8000 	.word	0xe17b8000

00001938 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1938:	4a10      	ldr	r2, [pc, #64]	; (197c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    193a:	1a0b      	subs	r3, r1, r0
    193c:	f102 0c01 	add.w	ip, r2, #1
    1940:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1944:	bf3c      	itt	cc
    1946:	4618      	movcc	r0, r3
    1948:	4770      	bxcc	lr
    194a:	b510      	push	{r4, lr}
    194c:	1a44      	subs	r4, r0, r1
    194e:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1952:	bf3c      	itt	cc
    1954:	4618      	movcc	r0, r3
    1956:	bd10      	popcc	{r4, pc}
    1958:	429a      	cmp	r2, r3
    195a:	d203      	bcs.n	1964 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    195c:	1a10      	subs	r0, r2, r0
    195e:	4408      	add	r0, r1
    1960:	1c40      	adds	r0, r0, #1
    1962:	bd10      	pop	{r4, pc}
    1964:	42a2      	cmp	r2, r4
    1966:	d204      	bcs.n	1972 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1968:	1a51      	subs	r1, r2, r1
    196a:	4408      	add	r0, r1
    196c:	1c40      	adds	r0, r0, #1
    196e:	4240      	negs	r0, r0
    1970:	bd10      	pop	{r4, pc}
    1972:	f640 21e5 	movw	r1, #2789	; 0xae5
    1976:	2070      	movs	r0, #112	; 0x70
    1978:	f002 f8ce 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    197c:	1e847fff 	.word	0x1e847fff

00001980 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1980:	490b      	ldr	r1, [pc, #44]	; (19b0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    1982:	b510      	push	{r4, lr}
    1984:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1988:	2820      	cmp	r0, #32
    198a:	d00c      	beq.n	19a6 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    198c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1990:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1994:	4a07      	ldr	r2, [pc, #28]	; (19b4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    1996:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    199a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    199e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    19a2:	2104      	movs	r1, #4
    19a4:	4710      	bx	r2
    19a6:	f640 0197 	movw	r1, #2199	; 0x897
    19aa:	2070      	movs	r0, #112	; 0x70
    19ac:	f002 f8b4 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19b0:	20000dcc 	.word	0x20000dcc
    19b4:	20000acc 	.word	0x20000acc

000019b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    19b8:	b570      	push	{r4, r5, r6, lr}
    19ba:	4e60      	ldr	r6, [pc, #384]	; (1b3c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    19bc:	4960      	ldr	r1, [pc, #384]	; (1b40 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    19be:	2501      	movs	r5, #1
    19c0:	f506 7440 	add.w	r4, r6, #768	; 0x300
    19c4:	2808      	cmp	r0, #8
    19c6:	d27c      	bcs.n	1ac2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    19c8:	e8df f000 	tbb	[pc, r0]
    19cc:	9a885704 	.word	0x9a885704
    19d0:	a49f3eb2 	.word	0xa49f3eb2
    19d4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    19d8:	b918      	cbnz	r0, 19e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    19da:	f001 feff 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    19de:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    19e2:	8ae0      	ldrh	r0, [r4, #22]
    19e4:	b110      	cbz	r0, 19ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    19e6:	f002 f833 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    19ea:	b188      	cbz	r0, 1a10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    19ec:	f7ff fc9c 	bl	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    19f0:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    19f4:	68a1      	ldr	r1, [r4, #8]
    19f6:	f1b1 3fff 	cmp.w	r1, #4294967295
    19fa:	d005      	beq.n	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    19fc:	2301      	movs	r3, #1
    19fe:	2203      	movs	r2, #3
    1a00:	2005      	movs	r0, #5
    1a02:	f001 fb19 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a06:	b140      	cbz	r0, 1a1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1a08:	7e60      	ldrb	r0, [r4, #25]
    1a0a:	2801      	cmp	r0, #1
    1a0c:	d110      	bne.n	1a30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1a0e:	e009      	b.n	1a24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1a10:	f640 014f 	movw	r1, #2127	; 0x84f
    1a14:	2070      	movs	r0, #112	; 0x70
    1a16:	f002 f87f 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a1a:	f640 0154 	movw	r1, #2132	; 0x854
    1a1e:	2070      	movs	r0, #112	; 0x70
    1a20:	f002 f87a 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a24:	6920      	ldr	r0, [r4, #16]
    1a26:	1e40      	subs	r0, r0, #1
    1a28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a2c:	f001 fa1e 	bl	2e6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1a30:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1a34:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1a38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1a3c:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1a44:	2101      	movs	r1, #1
    1a46:	4710      	bx	r2
    1a48:	f7ff fc6e 	bl	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    1a4c:	f04f 30ff 	mov.w	r0, #4294967295
    1a50:	60a0      	str	r0, [r4, #8]
    1a52:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1a56:	b158      	cbz	r0, 1a70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    1a58:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1a5c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1a60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1a64:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1a6c:	2106      	movs	r1, #6
    1a6e:	4710      	bx	r2
    1a70:	f640 0164 	movw	r1, #2148	; 0x864
    1a74:	2070      	movs	r0, #112	; 0x70
    1a76:	f002 f84f 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a7a:	f7ff fc55 	bl	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    1a7e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    1a82:	f001 ffe5 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1a86:	b118      	cbz	r0, 1a90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1a88:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1a8c:	b128      	cbz	r0, 1a9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    1a8e:	e008      	b.n	1aa2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    1a90:	f640 0173 	movw	r1, #2163	; 0x873
    1a94:	2070      	movs	r0, #112	; 0x70
    1a96:	f002 f83f 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a9a:	f001 fe9f 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1a9e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    1aa2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1aa6:	b158      	cbz	r0, 1ac0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    1aa8:	4926      	ldr	r1, [pc, #152]	; (1b44 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    1aaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1aae:	6008      	str	r0, [r1, #0]
    1ab0:	2005      	movs	r0, #5
    1ab2:	f001 fb89 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ab6:	f001 fedd 	bl	3874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1aba:	2000      	movs	r0, #0
    1abc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1ac0:	e000      	b.n	1ac4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1ac2:	e035      	b.n	1b30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    1ac4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ac8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1acc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1ad0:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1ad8:	2100      	movs	r1, #0
    1ada:	4710      	bx	r2
    1adc:	f001 fc1a 	bl	3314 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1ae0:	8ae0      	ldrh	r0, [r4, #22]
    1ae2:	b110      	cbz	r0, 1aea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    1ae4:	f001 ffb4 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ae8:	b128      	cbz	r0, 1af6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    1aea:	4817      	ldr	r0, [pc, #92]	; (1b48 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    1aec:	7800      	ldrb	r0, [r0, #0]
    1aee:	2803      	cmp	r0, #3
    1af0:	bf08      	it	eq
    1af2:	7765      	strbeq	r5, [r4, #29]
    1af4:	bd70      	pop	{r4, r5, r6, pc}
    1af6:	f640 017d 	movw	r1, #2173	; 0x87d
    1afa:	2070      	movs	r0, #112	; 0x70
    1afc:	f002 f80c 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b00:	4812      	ldr	r0, [pc, #72]	; (1b4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1b02:	6005      	str	r5, [r0, #0]
    1b04:	6888      	ldr	r0, [r1, #8]
    1b06:	6005      	str	r5, [r0, #0]
    1b08:	bd70      	pop	{r4, r5, r6, pc}
    1b0a:	7808      	ldrb	r0, [r1, #0]
    1b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1b10:	f002 b8d2 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b14:	f7ff fc08 	bl	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    1b18:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1b1c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1b20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1b24:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1b2c:	2105      	movs	r1, #5
    1b2e:	4710      	bx	r2
    1b30:	f640 018f 	movw	r1, #2191	; 0x88f
    1b34:	2070      	movs	r0, #112	; 0x70
    1b36:	f001 ffef 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b3a:	0000      	.short	0x0000
    1b3c:	20000acc 	.word	0x20000acc
    1b40:	20000008 	.word	0x20000008
    1b44:	4001f508 	.word	0x4001f508
    1b48:	2000000a 	.word	0x2000000a
    1b4c:	40000508 	.word	0x40000508

00001b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1b50:	4803      	ldr	r0, [pc, #12]	; (1b60 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1b52:	b510      	push	{r4, lr}
    1b54:	7840      	ldrb	r0, [r0, #1]
    1b56:	f00a f956 	bl	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1b5a:	b280      	uxth	r0, r0
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	0000      	.short	0x0000
    1b60:	2000000a 	.word	0x2000000a

00001b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1b64:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b68:	48ff      	ldr	r0, [pc, #1020]	; (1f68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>)
    1b6a:	b093      	sub	sp, #76	; 0x4c
    1b6c:	4688      	mov	r8, r1
    1b6e:	6800      	ldr	r0, [r0, #0]
    1b70:	4dfe      	ldr	r5, [pc, #1016]	; (1f6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x220>)
    1b72:	05c0      	lsls	r0, r0, #23
    1b74:	0dc0      	lsrs	r0, r0, #23
    1b76:	d00e      	beq.n	1b96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1b78:	3810      	subs	r0, #16
    1b7a:	b240      	sxtb	r0, r0
    1b7c:	2800      	cmp	r0, #0
    1b7e:	bfb8      	it	lt
    1b80:	f000 000f 	andlt.w	r0, r0, #15
    1b84:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b88:	bfac      	ite	ge
    1b8a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b8e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b92:	0940      	lsrs	r0, r0, #5
    1b94:	d00d      	beq.n	1bb2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1b96:	f898 0000 	ldrb.w	r0, [r8]
    1b9a:	f04f 0b00 	mov.w	fp, #0
    1b9e:	2800      	cmp	r0, #0
    1ba0:	bf18      	it	ne
    1ba2:	2801      	cmpne	r0, #1
    1ba4:	d018      	beq.n	1bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1ba6:	f240 713c 	movw	r1, #1852	; 0x73c
    1baa:	f04f 0070 	mov.w	r0, #112	; 0x70
    1bae:	f001 ffb3 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bb2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1bb6:	f04f 0b01 	mov.w	fp, #1
    1bba:	2820      	cmp	r0, #32
    1bbc:	d007      	beq.n	1bce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1bbe:	f898 0000 	ldrb.w	r0, [r8]
    1bc2:	b148      	cbz	r0, 1bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1bc4:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    1bc8:	2070      	movs	r0, #112	; 0x70
    1bca:	f001 ffa5 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bce:	f240 7135 	movw	r1, #1845	; 0x735
    1bd2:	2070      	movs	r0, #112	; 0x70
    1bd4:	f001 ffa0 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bd8:	4ce5      	ldr	r4, [pc, #916]	; (1f70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1bda:	b124      	cbz	r4, 1be6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1bdc:	2100      	movs	r1, #0
    1bde:	f240 703f 	movw	r0, #1855	; 0x73f
    1be2:	f3af 8000 	nop.w
    1be6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    1be8:	49e2      	ldr	r1, [pc, #904]	; (1f74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1bee:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1bf2:	f04f 0901 	mov.w	r9, #1
    1bf6:	9001      	str	r0, [sp, #4]
    1bf8:	b124      	cbz	r4, 1c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    1bfa:	2100      	movs	r1, #0
    1bfc:	f240 7047 	movw	r0, #1863	; 0x747
    1c00:	f3af 8000 	nop.w
    1c04:	f1b9 0f00 	cmp.w	r9, #0
    1c08:	d00a      	beq.n	1c20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    1c0a:	bf00      	nop
    1c0c:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1c10:	f04f 0a00 	mov.w	sl, #0
    1c14:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    1c18:	f1bb 0f00 	cmp.w	fp, #0
    1c1c:	d007      	beq.n	1c2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1c1e:	e02e      	b.n	1c7e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1c20:	48d5      	ldr	r0, [pc, #852]	; (1f78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>)
    1c22:	2800      	cmp	r0, #0
    1c24:	bf18      	it	ne
    1c26:	f3af 8000 	nopne.w
    1c2a:	b662      	cpsie	i
    1c2c:	e7ee      	b.n	1c0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1c2e:	4637      	mov	r7, r6
    1c30:	2001      	movs	r0, #1
    1c32:	ea20 0607 	bic.w	r6, r0, r7
    1c36:	48d1      	ldr	r0, [pc, #836]	; (1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1c38:	2240      	movs	r2, #64	; 0x40
    1c3a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c3e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c42:	f00a fa4e 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c46:	b124      	cbz	r4, 1c52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    1c48:	2100      	movs	r1, #0
    1c4a:	f44f 60b5 	mov.w	r0, #1448	; 0x5a8
    1c4e:	f3af 8000 	nop.w
    1c52:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1c56:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1c5a:	6a09      	ldr	r1, [r1, #32]
    1c5c:	6201      	str	r1, [r0, #32]
    1c5e:	b124      	cbz	r4, 1c6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    1c60:	2100      	movs	r1, #0
    1c62:	f240 50ac 	movw	r0, #1452	; 0x5ac
    1c66:	f3af 8000 	nop.w
    1c6a:	b124      	cbz	r4, 1c76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    1c6c:	2100      	movs	r1, #0
    1c6e:	f240 7051 	movw	r0, #1873	; 0x751
    1c72:	f3af 8000 	nop.w
    1c76:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d1bc      	bne.n	1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1c7e:	b124      	cbz	r4, 1c8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    1c80:	2100      	movs	r1, #0
    1c82:	f240 705b 	movw	r0, #1883	; 0x75b
    1c86:	f3af 8000 	nop.w
    1c8a:	f001 f84f 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c8e:	4607      	mov	r7, r0
    1c90:	f898 0000 	ldrb.w	r0, [r8]
    1c94:	f10d 0908 	add.w	r9, sp, #8
    1c98:	2800      	cmp	r0, #0
    1c9a:	f898 000b 	ldrb.w	r0, [r8, #11]
    1c9e:	f88d 0015 	strb.w	r0, [sp, #21]
    1ca2:	f898 100a 	ldrb.w	r1, [r8, #10]
    1ca6:	f88d 1014 	strb.w	r1, [sp, #20]
    1caa:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1cae:	f8ad 1012 	strh.w	r1, [sp, #18]
    1cb2:	9000      	str	r0, [sp, #0]
    1cb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1cb8:	d013      	beq.n	1ce2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x17e>
    1cba:	2200      	movs	r2, #0
    1cbc:	4648      	mov	r0, r9
    1cbe:	f7fe fe1f 	bl	900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1cc2:	9707      	str	r7, [sp, #28]
    1cc4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1cc8:	aa0f      	add	r2, sp, #60	; 0x3c
    1cca:	a90e      	add	r1, sp, #56	; 0x38
    1ccc:	f001 fb8c 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1cd0:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1cd4:	2820      	cmp	r0, #32
    1cd6:	d00a      	beq.n	1cee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x18a>
    1cd8:	6928      	ldr	r0, [r5, #16]
    1cda:	1d40      	adds	r0, r0, #5
    1cdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ce0:	e01e      	b.n	1d20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    1ce2:	4648      	mov	r0, r9
    1ce4:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1ce8:	f7fe fe0a 	bl	900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1cec:	e04b      	b.n	1d86 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a>
    1cee:	9807      	ldr	r0, [sp, #28]
    1cf0:	3009      	adds	r0, #9
    1cf2:	9000      	str	r0, [sp, #0]
    1cf4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1cf8:	b128      	cbz	r0, 1d06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a2>
    1cfa:	f001 fea9 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cfe:	b910      	cbnz	r0, 1d06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a2>
    1d00:	9800      	ldr	r0, [sp, #0]
    1d02:	3032      	adds	r0, #50	; 0x32
    1d04:	9000      	str	r0, [sp, #0]
    1d06:	489e      	ldr	r0, [pc, #632]	; (1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1d08:	7841      	ldrb	r1, [r0, #1]
    1d0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    1d0c:	4281      	cmp	r1, r0
    1d0e:	bf98      	it	ls
    1d10:	9800      	ldrls	r0, [sp, #0]
    1d12:	d903      	bls.n	1d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1b8>
    1d14:	1a09      	subs	r1, r1, r0
    1d16:	9800      	ldr	r0, [sp, #0]
    1d18:	4408      	add	r0, r1
    1d1a:	9000      	str	r0, [sp, #0]
    1d1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d20:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d24:	1a89      	subs	r1, r1, r2
    1d26:	9002      	str	r0, [sp, #8]
    1d28:	4408      	add	r0, r1
    1d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d2e:	9003      	str	r0, [sp, #12]
    1d30:	4631      	mov	r1, r6
    1d32:	4648      	mov	r0, r9
    1d34:	f7fe fe82 	bl	a3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x154>
    1d38:	f898 000b 	ldrb.w	r0, [r8, #11]
    1d3c:	9000      	str	r0, [sp, #0]
    1d3e:	46b9      	mov	r9, r7
    1d40:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1d44:	a80e      	add	r0, sp, #56	; 0x38
    1d46:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1d4a:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1d4e:	f7fe fdd7 	bl	900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1d52:	9802      	ldr	r0, [sp, #8]
    1d54:	9a03      	ldr	r2, [sp, #12]
    1d56:	eba0 0009 	sub.w	r0, r0, r9
    1d5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d5e:	eba2 0209 	sub.w	r2, r2, r9
    1d62:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1d64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d68:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d6c:	d201      	bcs.n	1d72 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d6e:	4291      	cmp	r1, r2
    1d70:	d209      	bcs.n	1d86 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a>
    1d72:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d76:	1a89      	subs	r1, r1, r2
    1d78:	1878      	adds	r0, r7, r1
    1d7a:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    1d7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d82:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1d86:	b124      	cbz	r4, 1d92 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46>
    1d88:	2100      	movs	r1, #0
    1d8a:	f240 7062 	movw	r0, #1890	; 0x762
    1d8e:	f3af 8000 	nop.w
    1d92:	4a7a      	ldr	r2, [pc, #488]	; (1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1d94:	4639      	mov	r1, r7
    1d96:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    1d9a:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1d9e:	a802      	add	r0, sp, #8
    1da0:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    1da4:	2a01      	cmp	r2, #1
    1da6:	bf18      	it	ne
    1da8:	2a02      	cmpne	r2, #2
    1daa:	d13d      	bne.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1dac:	9a02      	ldr	r2, [sp, #8]
    1dae:	f8dd c00c 	ldr.w	ip, [sp, #12]
    1db2:	eba2 0201 	sub.w	r2, r2, r1
    1db6:	4b73      	ldr	r3, [pc, #460]	; (1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1db8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1dbc:	ebac 0101 	sub.w	r1, ip, r1
    1dc0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1dc4:	2a02      	cmp	r2, #2
    1dc6:	d369      	bcc.n	1e9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>
    1dc8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    1dcc:	d266      	bcs.n	1e9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>
    1dce:	428b      	cmp	r3, r1
    1dd0:	d364      	bcc.n	1e9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>
    1dd2:	f04f 0a01 	mov.w	sl, #1
    1dd6:	ab0e      	add	r3, sp, #56	; 0x38
    1dd8:	aa0d      	add	r2, sp, #52	; 0x34
    1dda:	4631      	mov	r1, r6
    1ddc:	f7fe ff78 	bl	cd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e8>
    1de0:	b3f0      	cbz	r0, 1e60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1de2:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    1de6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1dea:	4633      	mov	r3, r6
    1dec:	428a      	cmp	r2, r1
    1dee:	d061      	beq.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1df0:	2005      	movs	r0, #5
    1df2:	f7fe fde7 	bl	9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>
    1df6:	bf00      	nop
    1df8:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    1dfc:	7048      	strb	r0, [r1, #1]
    1dfe:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1e02:	2820      	cmp	r0, #32
    1e04:	bf03      	ittte	eq
    1e06:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1e0a:	f880 9020 	strbeq.w	r9, [r0, #32]
    1e0e:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    1e12:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1e16:	bf18      	it	ne
    1e18:	f880 9001 	strbne.w	r9, [r0, #1]
    1e1c:	4632      	mov	r2, r6
    1e1e:	4649      	mov	r1, r9
    1e20:	f05f 0003 	movs.w	r0, #3
    1e24:	f7ff fb54 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    1e28:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1e2c:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1e30:	b124      	cbz	r4, 1e3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1e32:	2100      	movs	r1, #0
    1e34:	f240 7069 	movw	r0, #1897	; 0x769
    1e38:	f3af 8000 	nop.w
    1e3c:	4852      	ldr	r0, [pc, #328]	; (1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>)
    1e3e:	2800      	cmp	r0, #0
    1e40:	bf18      	it	ne
    1e42:	f3af 8000 	nopne.w
    1e46:	f3ef 8910 	mrs	r9, PRIMASK
    1e4a:	b672      	cpsid	i
    1e4c:	b124      	cbz	r4, 1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e4e:	2100      	movs	r1, #0
    1e50:	f240 706f 	movw	r0, #1903	; 0x76f
    1e54:	f3af 8000 	nop.w
    1e58:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1e5c:	2800      	cmp	r0, #0
    1e5e:	e000      	b.n	1e62 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1e60:	e024      	b.n	1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    1e62:	f47f aec9 	bne.w	1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1e66:	b124      	cbz	r4, 1e72 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e68:	2100      	movs	r1, #0
    1e6a:	f240 7077 	movw	r0, #1911	; 0x777
    1e6e:	f3af 8000 	nop.w
    1e72:	f10d 0e04 	add.w	lr, sp, #4
    1e76:	f1ba 0f00 	cmp.w	sl, #0
    1e7a:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    1e7e:	f100 0004 	add.w	r0, r0, #4
    1e82:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1e86:	d041      	beq.n	1f0c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1e88:	b124      	cbz	r4, 1e94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e8a:	2100      	movs	r1, #0
    1e8c:	f240 7084 	movw	r0, #1924	; 0x784
    1e90:	f3af 8000 	nop.w
    1e94:	f1bb 0f00 	cmp.w	fp, #0
    1e98:	d12b      	bne.n	1ef2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1e9a:	e015      	b.n	1ec8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    1e9c:	4632      	mov	r2, r6
    1e9e:	4649      	mov	r1, r9
    1ea0:	2004      	movs	r0, #4
    1ea2:	f7ff fb15 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    1ea6:	f04f 0a01 	mov.w	sl, #1
    1eaa:	e7bd      	b.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1eac:	4632      	mov	r2, r6
    1eae:	4649      	mov	r1, r9
    1eb0:	2004      	movs	r0, #4
    1eb2:	e7b7      	b.n	1e24 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1eb4:	2920      	cmp	r1, #32
    1eb6:	bf19      	ittee	ne
    1eb8:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1ebc:	7840      	ldrbne	r0, [r0, #1]
    1ebe:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1ec2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1ec6:	e797      	b.n	1df8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xac>
    1ec8:	b19f      	cbz	r7, 1ef2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1eca:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1ece:	2820      	cmp	r0, #32
    1ed0:	d10f      	bne.n	1ef2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed2:	b124      	cbz	r4, 1ede <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x192>
    1ed4:	2100      	movs	r1, #0
    1ed6:	f240 7089 	movw	r0, #1929	; 0x789
    1eda:	f3af 8000 	nop.w
    1ede:	4631      	mov	r1, r6
    1ee0:	2002      	movs	r0, #2
    1ee2:	f7ff fb25 	bl	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    1ee6:	b920      	cbnz	r0, 1ef2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ee8:	f898 0000 	ldrb.w	r0, [r8]
    1eec:	b3d0      	cbz	r0, 1f64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>
    1eee:	2801      	cmp	r0, #1
    1ef0:	d05e      	beq.n	1fb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1ef2:	b124      	cbz	r4, 1efe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b2>
    1ef4:	2100      	movs	r1, #0
    1ef6:	f240 70a6 	movw	r0, #1958	; 0x7a6
    1efa:	f3af 8000 	nop.w
    1efe:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1f02:	2001      	movs	r0, #1
    1f04:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1f08:	f04f 0a01 	mov.w	sl, #1
    1f0c:	b124      	cbz	r4, 1f18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1f0e:	2100      	movs	r1, #0
    1f10:	f240 70af 	movw	r0, #1967	; 0x7af
    1f14:	f3af 8000 	nop.w
    1f18:	f1b9 0f00 	cmp.w	r9, #0
    1f1c:	d051      	beq.n	1fc2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x276>
    1f1e:	b124      	cbz	r4, 1f2a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1de>
    1f20:	2100      	movs	r1, #0
    1f22:	f240 70b3 	movw	r0, #1971	; 0x7b3
    1f26:	f3af 8000 	nop.w
    1f2a:	f1ba 0f00 	cmp.w	sl, #0
    1f2e:	d011      	beq.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f30:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1f34:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1f38:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1f3c:	2820      	cmp	r0, #32
    1f3e:	d009      	beq.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f40:	b124      	cbz	r4, 1f4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x200>
    1f42:	2100      	movs	r1, #0
    1f44:	f240 70ba 	movw	r0, #1978	; 0x7ba
    1f48:	f3af 8000 	nop.w
    1f4c:	480f      	ldr	r0, [pc, #60]	; (1f8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>)
    1f4e:	7840      	ldrb	r0, [r0, #1]
    1f50:	f001 feb2 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1f54:	b124      	cbz	r4, 1f60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1f56:	2100      	movs	r1, #0
    1f58:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1f5c:	f3af 8000 	nop.w
    1f60:	4650      	mov	r0, sl
    1f62:	e015      	b.n	1f90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>
    1f64:	e017      	b.n	1f96 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24a>
    1f66:	0000      	.short	0x0000
    1f68:	e000ed04 	.word	0xe000ed04
    1f6c:	20000dcc 	.word	0x20000dcc
    1f70:	00000000 	.word	0x00000000
    1f74:	20000acc 	.word	0x20000acc
    1f78:	00000000 	.word	0x00000000
    1f7c:	20000d4c 	.word	0x20000d4c
    1f80:	2000000a 	.word	0x2000000a
    1f84:	003fffff 	.word	0x003fffff
    1f88:	00000000 	.word	0x00000000
    1f8c:	20000008 	.word	0x20000008
    1f90:	b015      	add	sp, #84	; 0x54
    1f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f96:	b124      	cbz	r4, 1fa2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x256>
    1f98:	2100      	movs	r1, #0
    1f9a:	f240 7091 	movw	r0, #1937	; 0x791
    1f9e:	f3af 8000 	nop.w
    1fa2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1fa6:	2004      	movs	r0, #4
    1fa8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1faa:	f7ff fa91 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    1fae:	e7ab      	b.n	1f08 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>
    1fb0:	2c00      	cmp	r4, #0
    1fb2:	f43f ae21 	beq.w	1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1fb6:	2100      	movs	r1, #0
    1fb8:	f240 709c 	movw	r0, #1948	; 0x79c
    1fbc:	f3af 8000 	nop.w
    1fc0:	e61a      	b.n	1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1fc2:	4803      	ldr	r0, [pc, #12]	; (1fd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>)
    1fc4:	2800      	cmp	r0, #0
    1fc6:	bf18      	it	ne
    1fc8:	f3af 8000 	nopne.w
    1fcc:	b662      	cpsie	i
    1fce:	e7a6      	b.n	1f1e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1fd0:	00000000 	.word	0x00000000

00001fd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fd8:	4605      	mov	r5, r0
    1fda:	48e1      	ldr	r0, [pc, #900]	; (2360 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38c>)
    1fdc:	b08d      	sub	sp, #52	; 0x34
    1fde:	6800      	ldr	r0, [r0, #0]
    1fe0:	05c0      	lsls	r0, r0, #23
    1fe2:	0dc0      	lsrs	r0, r0, #23
    1fe4:	d011      	beq.n	200a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1fe6:	3810      	subs	r0, #16
    1fe8:	b240      	sxtb	r0, r0
    1fea:	2800      	cmp	r0, #0
    1fec:	bfb8      	it	lt
    1fee:	f000 000f 	andlt.w	r0, r0, #15
    1ff2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1ff6:	bfac      	ite	ge
    1ff8:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1ffc:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2000:	0940      	lsrs	r0, r0, #5
    2002:	bf08      	it	eq
    2004:	f04f 0b01 	moveq.w	fp, #1
    2008:	d001      	beq.n	200e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    200a:	f04f 0b00 	mov.w	fp, #0
    200e:	7828      	ldrb	r0, [r5, #0]
    2010:	2800      	cmp	r0, #0
    2012:	f04f 0000 	mov.w	r0, #0
    2016:	bf1c      	itt	ne
    2018:	b00d      	addne	sp, #52	; 0x34
    201a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    201e:	f8df 8344 	ldr.w	r8, [pc, #836]	; 2364 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x390>
    2022:	4ed1      	ldr	r6, [pc, #836]	; (2368 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x394>)
    2024:	f04f 0900 	mov.w	r9, #0
    2028:	f8cd 0018 	str.w	r0, [sp, #24]
    202c:	f1b8 0f00 	cmp.w	r8, #0
    2030:	d004      	beq.n	203c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    2032:	2100      	movs	r1, #0
    2034:	f240 6033 	movw	r0, #1587	; 0x633
    2038:	f3af 8000 	nop.w
    203c:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    2040:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    2044:	f04f 0a00 	mov.w	sl, #0
    2048:	f1b8 0f00 	cmp.w	r8, #0
    204c:	d004      	beq.n	2058 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    204e:	2100      	movs	r1, #0
    2050:	f44f 60c7 	mov.w	r0, #1592	; 0x638
    2054:	f3af 8000 	nop.w
    2058:	f1bb 0f00 	cmp.w	fp, #0
    205c:	d121      	bne.n	20a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    205e:	463c      	mov	r4, r7
    2060:	2001      	movs	r0, #1
    2062:	ea20 0704 	bic.w	r7, r0, r4
    2066:	48c1      	ldr	r0, [pc, #772]	; (236c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x398>)
    2068:	2240      	movs	r2, #64	; 0x40
    206a:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    206e:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2072:	f00a f836 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2076:	f1b8 0f00 	cmp.w	r8, #0
    207a:	d004      	beq.n	2086 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    207c:	2100      	movs	r1, #0
    207e:	f44f 60b5 	mov.w	r0, #1448	; 0x5a8
    2082:	f3af 8000 	nop.w
    2086:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    208a:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    208e:	6a09      	ldr	r1, [r1, #32]
    2090:	6201      	str	r1, [r0, #32]
    2092:	f1b8 0f00 	cmp.w	r8, #0
    2096:	d004      	beq.n	20a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    2098:	2100      	movs	r1, #0
    209a:	f240 50ac 	movw	r0, #1452	; 0x5ac
    209e:	f3af 8000 	nop.w
    20a2:	f1b8 0f00 	cmp.w	r8, #0
    20a6:	d004      	beq.n	20b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    20a8:	2100      	movs	r1, #0
    20aa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    20ae:	f3af 8000 	nop.w
    20b2:	f000 fe3b 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    20b6:	4604      	mov	r4, r0
    20b8:	a802      	add	r0, sp, #8
    20ba:	9001      	str	r0, [sp, #4]
    20bc:	7828      	ldrb	r0, [r5, #0]
    20be:	2800      	cmp	r0, #0
    20c0:	7ae8      	ldrb	r0, [r5, #11]
    20c2:	f88d 0015 	strb.w	r0, [sp, #21]
    20c6:	7aa9      	ldrb	r1, [r5, #10]
    20c8:	f88d 1014 	strb.w	r1, [sp, #20]
    20cc:	8929      	ldrh	r1, [r5, #8]
    20ce:	f8ad 1012 	strh.w	r1, [sp, #18]
    20d2:	9000      	str	r0, [sp, #0]
    20d4:	686b      	ldr	r3, [r5, #4]
    20d6:	d013      	beq.n	2100 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12c>
    20d8:	2200      	movs	r2, #0
    20da:	9801      	ldr	r0, [sp, #4]
    20dc:	f7fe fc10 	bl	900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    20e0:	9400      	str	r4, [sp, #0]
    20e2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    20e6:	aa08      	add	r2, sp, #32
    20e8:	a907      	add	r1, sp, #28
    20ea:	f001 f97d 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    20ee:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    20f2:	2820      	cmp	r0, #32
    20f4:	d009      	beq.n	210a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x136>
    20f6:	6930      	ldr	r0, [r6, #16]
    20f8:	1d40      	adds	r0, r0, #5
    20fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20fe:	e01d      	b.n	213c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2100:	68ea      	ldr	r2, [r5, #12]
    2102:	9801      	ldr	r0, [sp, #4]
    2104:	f7fe fbfc 	bl	900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2108:	e046      	b.n	2198 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    210a:	9800      	ldr	r0, [sp, #0]
    210c:	3009      	adds	r0, #9
    210e:	9000      	str	r0, [sp, #0]
    2110:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2114:	b128      	cbz	r0, 2122 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14e>
    2116:	f001 fc9b 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    211a:	b910      	cbnz	r0, 2122 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14e>
    211c:	9800      	ldr	r0, [sp, #0]
    211e:	3032      	adds	r0, #50	; 0x32
    2120:	9000      	str	r0, [sp, #0]
    2122:	4893      	ldr	r0, [pc, #588]	; (2370 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x39c>)
    2124:	9907      	ldr	r1, [sp, #28]
    2126:	7840      	ldrb	r0, [r0, #1]
    2128:	4288      	cmp	r0, r1
    212a:	bf98      	it	ls
    212c:	9800      	ldrls	r0, [sp, #0]
    212e:	d903      	bls.n	2138 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    2130:	1a41      	subs	r1, r0, r1
    2132:	9800      	ldr	r0, [sp, #0]
    2134:	4408      	add	r0, r1
    2136:	9000      	str	r0, [sp, #0]
    2138:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    213c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2140:	1a89      	subs	r1, r1, r2
    2142:	9002      	str	r0, [sp, #8]
    2144:	4408      	add	r0, r1
    2146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    214a:	9003      	str	r0, [sp, #12]
    214c:	4639      	mov	r1, r7
    214e:	9801      	ldr	r0, [sp, #4]
    2150:	f7fe fc74 	bl	a3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x154>
    2154:	9401      	str	r4, [sp, #4]
    2156:	7ae8      	ldrb	r0, [r5, #11]
    2158:	9000      	str	r0, [sp, #0]
    215a:	8929      	ldrh	r1, [r5, #8]
    215c:	a808      	add	r0, sp, #32
    215e:	686b      	ldr	r3, [r5, #4]
    2160:	68ea      	ldr	r2, [r5, #12]
    2162:	f7fe fbcd 	bl	900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2166:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    216a:	9a03      	ldr	r2, [sp, #12]
    216c:	1ac0      	subs	r0, r0, r3
    216e:	1ad2      	subs	r2, r2, r3
    2170:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2174:	9909      	ldr	r1, [sp, #36]	; 0x24
    2176:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    217a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    217e:	d201      	bcs.n	2184 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2180:	4291      	cmp	r1, r2
    2182:	d209      	bcs.n	2198 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    2184:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2188:	1a89      	subs	r1, r1, r2
    218a:	1860      	adds	r0, r4, r1
    218c:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    2190:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2194:	e9cd 2002 	strd	r2, r0, [sp, #8]
    2198:	f1b8 0f00 	cmp.w	r8, #0
    219c:	d004      	beq.n	21a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    219e:	2100      	movs	r1, #0
    21a0:	f240 6046 	movw	r0, #1606	; 0x646
    21a4:	f3af 8000 	nop.w
    21a8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    21ac:	2820      	cmp	r0, #32
    21ae:	d014      	beq.n	21da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x206>
    21b0:	6930      	ldr	r0, [r6, #16]
    21b2:	9902      	ldr	r1, [sp, #8]
    21b4:	1a09      	subs	r1, r1, r0
    21b6:	0209      	lsls	r1, r1, #8
    21b8:	17ca      	asrs	r2, r1, #31
    21ba:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    21be:	1209      	asrs	r1, r1, #8
    21c0:	d50b      	bpl.n	21da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x206>
    21c2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    21c6:	1a89      	subs	r1, r1, r2
    21c8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    21cc:	4408      	add	r0, r1
    21ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21d2:	e9cd 2002 	strd	r2, r0, [sp, #8]
    21d6:	f04f 0a01 	mov.w	sl, #1
    21da:	f1b8 0f00 	cmp.w	r8, #0
    21de:	d009      	beq.n	21f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x220>
    21e0:	2100      	movs	r1, #0
    21e2:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    21e6:	f3af 8000 	nop.w
    21ea:	2100      	movs	r1, #0
    21ec:	f240 6056 	movw	r0, #1622	; 0x656
    21f0:	f3af 8000 	nop.w
    21f4:	9902      	ldr	r1, [sp, #8]
    21f6:	9a03      	ldr	r2, [sp, #12]
    21f8:	1b09      	subs	r1, r1, r4
    21fa:	1b12      	subs	r2, r2, r4
    21fc:	485d      	ldr	r0, [pc, #372]	; (2374 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a0>)
    21fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2202:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2206:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    220a:	d205      	bcs.n	2218 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    220c:	4290      	cmp	r0, r2
    220e:	d303      	bcc.n	2218 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2210:	f1bb 0f00 	cmp.w	fp, #0
    2214:	d10b      	bne.n	222e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    2216:	e004      	b.n	2222 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2218:	464f      	mov	r7, r9
    221a:	f1bb 0f00 	cmp.w	fp, #0
    221e:	d039      	beq.n	2294 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    2220:	e094      	b.n	234c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>
    2222:	4639      	mov	r1, r7
    2224:	a802      	add	r0, sp, #8
    2226:	f7fe fc09 	bl	a3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x154>
    222a:	ea4a 0a00 	orr.w	sl, sl, r0
    222e:	f1ba 0f00 	cmp.w	sl, #0
    2232:	d023      	beq.n	227c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    2234:	9802      	ldr	r0, [sp, #8]
    2236:	f009 fde6 	bl	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    223a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    223e:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    2242:	f8df c134 	ldr.w	ip, [pc, #308]	; 2378 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a4>
    2246:	4411      	add	r1, r2
    2248:	1cca      	adds	r2, r1, #3
    224a:	1881      	adds	r1, r0, r2
    224c:	2400      	movs	r4, #0
    224e:	ebbc 0000 	subs.w	r0, ip, r0
    2252:	eb74 0009 	sbcs.w	r0, r4, r9
    2256:	d343      	bcc.n	22e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    2258:	4848      	ldr	r0, [pc, #288]	; (237c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    225a:	4282      	cmp	r2, r0
    225c:	dc5b      	bgt.n	2316 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    225e:	4240      	negs	r0, r0
    2260:	4282      	cmp	r2, r0
    2262:	db60      	blt.n	2326 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x352>
    2264:	f10c 0001 	add.w	r0, ip, #1
    2268:	4281      	cmp	r1, r0
    226a:	bfa8      	it	ge
    226c:	4844      	ldrge	r0, [pc, #272]	; (2380 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3ac>)
    226e:	da03      	bge.n	2278 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>
    2270:	2900      	cmp	r1, #0
    2272:	bfb8      	it	lt
    2274:	4843      	ldrlt	r0, [pc, #268]	; (2384 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    2276:	da00      	bge.n	227a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    2278:	1809      	adds	r1, r1, r0
    227a:	60e9      	str	r1, [r5, #12]
    227c:	f04f 0001 	mov.w	r0, #1
    2280:	9006      	str	r0, [sp, #24]
    2282:	f1b8 0f00 	cmp.w	r8, #0
    2286:	d061      	beq.n	234c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>
    2288:	2100      	movs	r1, #0
    228a:	f240 6069 	movw	r0, #1641	; 0x669
    228e:	f3af 8000 	nop.w
    2292:	e05b      	b.n	234c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>
    2294:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2298:	aa01      	add	r2, sp, #4
    229a:	4669      	mov	r1, sp
    229c:	f001 f8a4 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    22a0:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    22a4:	2820      	cmp	r0, #32
    22a6:	d020      	beq.n	22ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x316>
    22a8:	6930      	ldr	r0, [r6, #16]
    22aa:	1d40      	adds	r0, r0, #5
    22ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    22b4:	1a89      	subs	r1, r1, r2
    22b6:	4401      	add	r1, r0
    22b8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    22bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    22c0:	f009 fda1 	bl	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    22c4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    22c8:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    22cc:	4b2a      	ldr	r3, [pc, #168]	; (2378 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a4>)
    22ce:	4411      	add	r1, r2
    22d0:	1cc9      	adds	r1, r1, #3
    22d2:	1842      	adds	r2, r0, r1
    22d4:	f04f 0c00 	mov.w	ip, #0
    22d8:	1a18      	subs	r0, r3, r0
    22da:	eb7c 0007 	sbcs.w	r0, ip, r7
    22de:	d217      	bcs.n	2310 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    22e0:	f240 51e4 	movw	r1, #1508	; 0x5e4
    22e4:	2070      	movs	r0, #112	; 0x70
    22e6:	f001 fc17 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22ea:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    22ee:	3409      	adds	r4, #9
    22f0:	b120      	cbz	r0, 22fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x328>
    22f2:	f001 fbad 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    22f6:	2800      	cmp	r0, #0
    22f8:	bf08      	it	eq
    22fa:	3432      	addeq	r4, #50	; 0x32
    22fc:	481c      	ldr	r0, [pc, #112]	; (2370 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x39c>)
    22fe:	7841      	ldrb	r1, [r0, #1]
    2300:	9800      	ldr	r0, [sp, #0]
    2302:	4281      	cmp	r1, r0
    2304:	bf84      	itt	hi
    2306:	1a08      	subhi	r0, r1, r0
    2308:	4404      	addhi	r4, r0
    230a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    230e:	e7cf      	b.n	22b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2dc>
    2310:	481a      	ldr	r0, [pc, #104]	; (237c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    2312:	4281      	cmp	r1, r0
    2314:	dd04      	ble.n	2320 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34c>
    2316:	f240 51e5 	movw	r1, #1509	; 0x5e5
    231a:	2070      	movs	r0, #112	; 0x70
    231c:	f001 fbfc 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2320:	4819      	ldr	r0, [pc, #100]	; (2388 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b4>)
    2322:	4281      	cmp	r1, r0
    2324:	da04      	bge.n	2330 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>
    2326:	f240 51e6 	movw	r1, #1510	; 0x5e6
    232a:	2070      	movs	r0, #112	; 0x70
    232c:	f001 fbf4 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2330:	4814      	ldr	r0, [pc, #80]	; (2384 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    2332:	4282      	cmp	r2, r0
    2334:	bfa8      	it	ge
    2336:	4812      	ldrge	r0, [pc, #72]	; (2380 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3ac>)
    2338:	da03      	bge.n	2342 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36e>
    233a:	2a00      	cmp	r2, #0
    233c:	bfb8      	it	lt
    233e:	4811      	ldrlt	r0, [pc, #68]	; (2384 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    2340:	da00      	bge.n	2344 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>
    2342:	1812      	adds	r2, r2, r0
    2344:	f04f 0001 	mov.w	r0, #1
    2348:	60ea      	str	r2, [r5, #12]
    234a:	9006      	str	r0, [sp, #24]
    234c:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2350:	2800      	cmp	r0, #0
    2352:	f47f ae6b 	bne.w	202c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2356:	9806      	ldr	r0, [sp, #24]
    2358:	b00d      	add	sp, #52	; 0x34
    235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    235e:	0000      	.short	0x0000
    2360:	e000ed04 	.word	0xe000ed04
    2364:	00000000 	.word	0x00000000
    2368:	20000dcc 	.word	0x20000dcc
    236c:	20000d4c 	.word	0x20000d4c
    2370:	2000000a 	.word	0x2000000a
    2374:	003fffff 	.word	0x003fffff
    2378:	1e847fff 	.word	0x1e847fff
    237c:	07a12000 	.word	0x07a12000
    2380:	e17b8000 	.word	0xe17b8000
    2384:	1e848000 	.word	0x1e848000
    2388:	f85ee000 	.word	0xf85ee000

0000238c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    238c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2390:	4d80      	ldr	r5, [pc, #512]	; (2594 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    2392:	b08c      	sub	sp, #48	; 0x30
    2394:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2398:	2000      	movs	r0, #0
    239a:	9009      	str	r0, [sp, #36]	; 0x24
    239c:	2001      	movs	r0, #1
    239e:	4c7e      	ldr	r4, [pc, #504]	; (2598 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    23a0:	f04f 0800 	mov.w	r8, #0
    23a4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    23a8:	4683      	mov	fp, r0
    23aa:	9008      	str	r0, [sp, #32]
    23ac:	b124      	cbz	r4, 23b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    23ae:	2100      	movs	r1, #0
    23b0:	f240 70ce 	movw	r0, #1998	; 0x7ce
    23b4:	f3af 8000 	nop.w
    23b8:	9808      	ldr	r0, [sp, #32]
    23ba:	b390      	cbz	r0, 2422 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    23bc:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    23c0:	b124      	cbz	r4, 23cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    23c2:	2100      	movs	r1, #0
    23c4:	f240 70d3 	movw	r0, #2003	; 0x7d3
    23c8:	f3af 8000 	nop.w
    23cc:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    23d0:	2240      	movs	r2, #64	; 0x40
    23d2:	ea2b 0609 	bic.w	r6, fp, r9
    23d6:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    23da:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    23de:	4682      	mov	sl, r0
    23e0:	f009 fe7f 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    23e4:	b124      	cbz	r4, 23f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    23e6:	2100      	movs	r1, #0
    23e8:	f44f 60b5 	mov.w	r0, #1448	; 0x5a8
    23ec:	f3af 8000 	nop.w
    23f0:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    23f4:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    23f8:	9000      	str	r0, [sp, #0]
    23fa:	6a09      	ldr	r1, [r1, #32]
    23fc:	6201      	str	r1, [r0, #32]
    23fe:	b124      	cbz	r4, 240a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    2400:	2100      	movs	r1, #0
    2402:	f240 50ac 	movw	r0, #1452	; 0x5ac
    2406:	f3af 8000 	nop.w
    240a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    240e:	b180      	cbz	r0, 2432 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    2410:	2c00      	cmp	r4, #0
    2412:	bf1c      	itt	ne
    2414:	2100      	movne	r1, #0
    2416:	f240 70d9 	movwne	r0, #2009	; 0x7d9
    241a:	d0c7      	beq.n	23ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    241c:	f3af 8000 	nop.w
    2420:	e7c4      	b.n	23ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2422:	e7ff      	b.n	2424 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    2424:	485d      	ldr	r0, [pc, #372]	; (259c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2426:	2800      	cmp	r0, #0
    2428:	bf18      	it	ne
    242a:	f3af 8000 	nopne.w
    242e:	b662      	cpsie	i
    2430:	e7c4      	b.n	23bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    2432:	b124      	cbz	r4, 243e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    2434:	2100      	movs	r1, #0
    2436:	f240 70dd 	movw	r0, #2013	; 0x7dd
    243a:	f3af 8000 	nop.w
    243e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2440:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    2444:	2803      	cmp	r0, #3
    2446:	d178      	bne.n	253a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2448:	f8dd 9000 	ldr.w	r9, [sp]
    244c:	f8cd 9018 	str.w	r9, [sp, #24]
    2450:	990c      	ldr	r1, [sp, #48]	; 0x30
    2452:	f899 0020 	ldrb.w	r0, [r9, #32]
    2456:	4288      	cmp	r0, r1
    2458:	bf14      	ite	ne
    245a:	f04f 0a00 	movne.w	sl, #0
    245e:	f04f 0a01 	moveq.w	sl, #1
    2462:	f109 0c20 	add.w	ip, r9, #32
    2466:	4686      	mov	lr, r0
    2468:	2220      	movs	r2, #32
    246a:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    246e:	e003      	b.n	2478 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    2470:	4602      	mov	r2, r0
    2472:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2476:	7840      	ldrb	r0, [r0, #1]
    2478:	4288      	cmp	r0, r1
    247a:	d002      	beq.n	2482 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    247c:	2820      	cmp	r0, #32
    247e:	d00a      	beq.n	2496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2480:	e7f6      	b.n	2470 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    2482:	2820      	cmp	r0, #32
    2484:	d007      	beq.n	2496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    2486:	4586      	cmp	lr, r0
    2488:	d107      	bne.n	249a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    248a:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    248e:	7840      	ldrb	r0, [r0, #1]
    2490:	f88c 0000 	strb.w	r0, [ip]
    2494:	e007      	b.n	24a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2496:	4640      	mov	r0, r8
    2498:	e00c      	b.n	24b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    249a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    249e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    24a2:	7840      	ldrb	r0, [r0, #1]
    24a4:	7048      	strb	r0, [r1, #1]
    24a6:	b124      	cbz	r4, 24b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    24a8:	2100      	movs	r1, #0
    24aa:	f240 502d 	movw	r0, #1325	; 0x52d
    24ae:	f3af 8000 	nop.w
    24b2:	4658      	mov	r0, fp
    24b4:	ea10 0f0a 	tst.w	r0, sl
    24b8:	bf18      	it	ne
    24ba:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    24be:	b3e0      	cbz	r0, 253a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    24c0:	b124      	cbz	r4, 24cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    24c2:	2100      	movs	r1, #0
    24c4:	f240 70e2 	movw	r0, #2018	; 0x7e2
    24c8:	f3af 8000 	nop.w
    24cc:	4632      	mov	r2, r6
    24ce:	2001      	movs	r0, #1
    24d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    24d2:	f7fe fffd 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    24d6:	9806      	ldr	r0, [sp, #24]
    24d8:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    24dc:	b124      	cbz	r4, 24e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    24de:	2100      	movs	r1, #0
    24e0:	f240 70ed 	movw	r0, #2029	; 0x7ed
    24e4:	f3af 8000 	nop.w
    24e8:	482d      	ldr	r0, [pc, #180]	; (25a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    24ea:	2800      	cmp	r0, #0
    24ec:	bf18      	it	ne
    24ee:	f3af 8000 	nopne.w
    24f2:	f3ef 8010 	mrs	r0, PRIMASK
    24f6:	b672      	cpsid	i
    24f8:	9008      	str	r0, [sp, #32]
    24fa:	b124      	cbz	r4, 2506 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    24fc:	2100      	movs	r1, #0
    24fe:	f240 70f2 	movw	r0, #2034	; 0x7f2
    2502:	f3af 8000 	nop.w
    2506:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    250a:	b138      	cbz	r0, 251c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    250c:	2c00      	cmp	r4, #0
    250e:	bf1c      	itt	ne
    2510:	2100      	movne	r1, #0
    2512:	f240 70f6 	movwne	r0, #2038	; 0x7f6
    2516:	f43f af49 	beq.w	23ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    251a:	e77f      	b.n	241c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    251c:	f1b9 0f00 	cmp.w	r9, #0
    2520:	d008      	beq.n	2534 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2522:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2526:	2820      	cmp	r0, #32
    2528:	d104      	bne.n	2534 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    252a:	4631      	mov	r1, r6
    252c:	2002      	movs	r0, #2
    252e:	f7fe ffff 	bl	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    2532:	b1f8      	cbz	r0, 2574 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2534:	b134      	cbz	r4, 2544 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    2536:	2100      	movs	r1, #0
    2538:	e000      	b.n	253c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    253a:	e009      	b.n	2550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    253c:	f640 000a 	movw	r0, #2058	; 0x80a
    2540:	f3af 8000 	nop.w
    2544:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2548:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    254c:	2001      	movs	r0, #1
    254e:	9009      	str	r0, [sp, #36]	; 0x24
    2550:	b124      	cbz	r4, 255c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2552:	2100      	movs	r1, #0
    2554:	f640 0013 	movw	r0, #2067	; 0x813
    2558:	f3af 8000 	nop.w
    255c:	9808      	ldr	r0, [sp, #32]
    255e:	b188      	cbz	r0, 2584 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    2560:	b124      	cbz	r4, 256c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    2562:	2100      	movs	r1, #0
    2564:	f640 0017 	movw	r0, #2071	; 0x817
    2568:	f3af 8000 	nop.w
    256c:	9809      	ldr	r0, [sp, #36]	; 0x24
    256e:	b00d      	add	sp, #52	; 0x34
    2570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2574:	2c00      	cmp	r4, #0
    2576:	d0f1      	beq.n	255c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2578:	2100      	movs	r1, #0
    257a:	f640 0005 	movw	r0, #2053	; 0x805
    257e:	f3af 8000 	nop.w
    2582:	e7e6      	b.n	2552 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2584:	4805      	ldr	r0, [pc, #20]	; (259c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2586:	2800      	cmp	r0, #0
    2588:	bf18      	it	ne
    258a:	f3af 8000 	nopne.w
    258e:	b662      	cpsie	i
    2590:	e7e6      	b.n	2560 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2592:	0000      	.short	0x0000
    2594:	20000dcc 	.word	0x20000dcc
	...

000025a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    25a4:	b510      	push	{r4, lr}
    25a6:	2820      	cmp	r0, #32
    25a8:	d211      	bcs.n	25ce <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    25aa:	490e      	ldr	r1, [pc, #56]	; (25e4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    25ac:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    25b0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    25b4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    25b8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    25bc:	b13b      	cbz	r3, 25ce <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    25be:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    25c2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    25c6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    25ca:	2a01      	cmp	r2, #1
    25cc:	d001      	beq.n	25d2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    25ce:	2000      	movs	r0, #0
    25d0:	bd10      	pop	{r4, pc}
    25d2:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    25d6:	4601      	mov	r1, r0
    25d8:	2000      	movs	r0, #0
    25da:	f7fe ff79 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    25de:	2001      	movs	r0, #1
    25e0:	bd10      	pop	{r4, pc}
    25e2:	0000      	.short	0x0000
    25e4:	20000dcc 	.word	0x20000dcc

000025e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    25e8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    25ec:	4e7e      	ldr	r6, [pc, #504]	; (27e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    25ee:	4680      	mov	r8, r0
    25f0:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    25f4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    25f8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    25fc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2600:	2800      	cmp	r0, #0
    2602:	d065      	beq.n	26d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2604:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2608:	4d78      	ldr	r5, [pc, #480]	; (27ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    260a:	b125      	cbz	r5, 2616 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    260c:	2100      	movs	r1, #0
    260e:	f640 30aa 	movw	r0, #2986	; 0xbaa
    2612:	f3af 8000 	nop.w
    2616:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    261a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    261e:	2801      	cmp	r0, #1
    2620:	d018      	beq.n	2654 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2622:	b2c0      	uxtb	r0, r0
    2624:	2804      	cmp	r0, #4
    2626:	bf1c      	itt	ne
    2628:	2805      	cmpne	r0, #5
    262a:	2806      	cmpne	r0, #6
    262c:	d055      	beq.n	26da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    262e:	b12d      	cbz	r5, 263c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2630:	f04f 0100 	mov.w	r1, #0
    2634:	f640 30b6 	movw	r0, #2998	; 0xbb6
    2638:	f3af 8000 	nop.w
    263c:	f001 fb92 	bl	3d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2640:	b125      	cbz	r5, 264c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2642:	2100      	movs	r1, #0
    2644:	f640 30ba 	movw	r0, #3002	; 0xbba
    2648:	f3af 8000 	nop.w
    264c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2650:	2801      	cmp	r0, #1
    2652:	d1e6      	bne.n	2622 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2654:	2401      	movs	r4, #1
    2656:	b125      	cbz	r5, 2662 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2658:	2100      	movs	r1, #0
    265a:	f640 30c1 	movw	r0, #3009	; 0xbc1
    265e:	f3af 8000 	nop.w
    2662:	b3a4      	cbz	r4, 26ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2664:	2000      	movs	r0, #0
    2666:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    266a:	b125      	cbz	r5, 2676 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    266c:	2100      	movs	r1, #0
    266e:	f640 30c6 	movw	r0, #3014	; 0xbc6
    2672:	f3af 8000 	nop.w
    2676:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    267a:	2001      	movs	r0, #1
    267c:	ea20 090b 	bic.w	r9, r0, fp
    2680:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2684:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2688:	2240      	movs	r2, #64	; 0x40
    268a:	f009 fd2a 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    268e:	b125      	cbz	r5, 269a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2690:	2100      	movs	r1, #0
    2692:	f44f 60b5 	mov.w	r0, #1448	; 0x5a8
    2696:	f3af 8000 	nop.w
    269a:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    269e:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    26a2:	6a00      	ldr	r0, [r0, #32]
    26a4:	f8ca 0020 	str.w	r0, [sl, #32]
    26a8:	b125      	cbz	r5, 26b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    26aa:	2100      	movs	r1, #0
    26ac:	f240 50ac 	movw	r0, #1452	; 0x5ac
    26b0:	f3af 8000 	nop.w
    26b4:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    26b8:	b1e0      	cbz	r0, 26f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    26ba:	2d00      	cmp	r5, #0
    26bc:	bf1c      	itt	ne
    26be:	2100      	movne	r1, #0
    26c0:	f640 30cc 	movwne	r0, #3020	; 0xbcc
    26c4:	d0c7      	beq.n	2656 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    26c6:	bf00      	nop
    26c8:	f3af 8000 	nop.w
    26cc:	e7c3      	b.n	2656 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    26ce:	e00a      	b.n	26e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    26d0:	f640 31a1 	movw	r1, #2977	; 0xba1
    26d4:	2070      	movs	r0, #112	; 0x70
    26d6:	f001 fa1f 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26da:	464a      	mov	r2, r9
    26dc:	4641      	mov	r1, r8
    26de:	2001      	movs	r0, #1
    26e0:	f7fe fef6 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    26e4:	e7ac      	b.n	2640 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    26e6:	4842      	ldr	r0, [pc, #264]	; (27f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    26e8:	2800      	cmp	r0, #0
    26ea:	bf18      	it	ne
    26ec:	f3af 8000 	nopne.w
    26f0:	b662      	cpsie	i
    26f2:	e7b7      	b.n	2664 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    26f4:	b125      	cbz	r5, 2700 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    26f6:	2100      	movs	r1, #0
    26f8:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    26fc:	f3af 8000 	nop.w
    2700:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2704:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2708:	4640      	mov	r0, r8
    270a:	461c      	mov	r4, r3
    270c:	f04f 0b20 	mov.w	fp, #32
    2710:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2714:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2718:	e004      	b.n	2724 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    271a:	46a3      	mov	fp, r4
    271c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2720:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2724:	4284      	cmp	r4, r0
    2726:	d002      	beq.n	272e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2728:	2c20      	cmp	r4, #32
    272a:	d02b      	beq.n	2784 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    272c:	e7f5      	b.n	271a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    272e:	2c20      	cmp	r4, #32
    2730:	d028      	beq.n	2784 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2732:	42a3      	cmp	r3, r4
    2734:	d104      	bne.n	2740 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2736:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    273a:	7840      	ldrb	r0, [r0, #1]
    273c:	7008      	strb	r0, [r1, #0]
    273e:	e005      	b.n	274c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2740:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2744:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2748:	7840      	ldrb	r0, [r0, #1]
    274a:	7048      	strb	r0, [r1, #1]
    274c:	f1ba 0f00 	cmp.w	sl, #0
    2750:	d011      	beq.n	2776 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2752:	b125      	cbz	r5, 275e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2754:	2100      	movs	r1, #0
    2756:	f240 5025 	movw	r0, #1317	; 0x525
    275a:	f3af 8000 	nop.w
    275e:	f89a 0000 	ldrb.w	r0, [sl]
    2762:	42a0      	cmp	r0, r4
    2764:	d107      	bne.n	2776 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2766:	b125      	cbz	r5, 2772 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2768:	2100      	movs	r1, #0
    276a:	f44f 60a5 	mov.w	r0, #1320	; 0x528
    276e:	f3af 8000 	nop.w
    2772:	f88a b000 	strb.w	fp, [sl]
    2776:	b15d      	cbz	r5, 2790 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2778:	2100      	movs	r1, #0
    277a:	f240 502d 	movw	r0, #1325	; 0x52d
    277e:	f3af 8000 	nop.w
    2782:	e000      	b.n	2786 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2784:	b125      	cbz	r5, 2790 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2786:	2100      	movs	r1, #0
    2788:	f640 30d4 	movw	r0, #3028	; 0xbd4
    278c:	f3af 8000 	nop.w
    2790:	4818      	ldr	r0, [pc, #96]	; (27f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2792:	2800      	cmp	r0, #0
    2794:	bf18      	it	ne
    2796:	f3af 8000 	nopne.w
    279a:	f3ef 8410 	mrs	r4, PRIMASK
    279e:	b672      	cpsid	i
    27a0:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    27a4:	b138      	cbz	r0, 27b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    27a6:	2d00      	cmp	r5, #0
    27a8:	bf1c      	itt	ne
    27aa:	2100      	movne	r1, #0
    27ac:	f640 30da 	movwne	r0, #3034	; 0xbda
    27b0:	f43f af51 	beq.w	2656 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    27b4:	e788      	b.n	26c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    27b6:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    27ba:	2001      	movs	r0, #1
    27bc:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    27c0:	b154      	cbz	r4, 27d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    27c2:	2d00      	cmp	r5, #0
    27c4:	bf08      	it	eq
    27c6:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    27ca:	2100      	movs	r1, #0
    27cc:	f640 30e7 	movw	r0, #3047	; 0xbe7
    27d0:	f3af 8000 	nop.w
    27d4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    27d8:	4805      	ldr	r0, [pc, #20]	; (27f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    27da:	2800      	cmp	r0, #0
    27dc:	bf18      	it	ne
    27de:	f3af 8000 	nopne.w
    27e2:	b662      	cpsie	i
    27e4:	e7ed      	b.n	27c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    27e6:	0000      	.short	0x0000
    27e8:	20000dcc 	.word	0x20000dcc
	...

000027f8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	4605      	mov	r5, r0
    27fc:	f001 f916 	bl	3a2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2800:	480d      	ldr	r0, [pc, #52]	; (2838 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2802:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2806:	2400      	movs	r4, #0
    2808:	3880      	subs	r0, #128	; 0x80
    280a:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    280e:	bf00      	nop
    2810:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2814:	b129      	cbz	r1, 2822 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2816:	1c61      	adds	r1, r4, #1
    2818:	b2cc      	uxtb	r4, r1
    281a:	2c20      	cmp	r4, #32
    281c:	d3f8      	bcc.n	2810 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    281e:	2020      	movs	r0, #32
    2820:	bd70      	pop	{r4, r5, r6, pc}
    2822:	4906      	ldr	r1, [pc, #24]	; (283c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    2824:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2828:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    282c:	4621      	mov	r1, r4
    282e:	2001      	movs	r0, #1
    2830:	f7fe fe4e 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    2834:	4620      	mov	r0, r4
    2836:	bd70      	pop	{r4, r5, r6, pc}
    2838:	20000dcc 	.word	0x20000dcc
    283c:	20000acc 	.word	0x20000acc

00002840 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2844:	f000 fa72 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2848:	4605      	mov	r5, r0
    284a:	f000 fd19 	bl	3280 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    284e:	4c48      	ldr	r4, [pc, #288]	; (2970 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x130>)
    2850:	68a0      	ldr	r0, [r4, #8]
    2852:	f1b0 3fff 	cmp.w	r0, #4294967295
    2856:	bf1c      	itt	ne
    2858:	f04f 30ff 	movne.w	r0, #4294967295
    285c:	60a0      	strne	r0, [r4, #8]
    285e:	7fa0      	ldrb	r0, [r4, #30]
    2860:	b9a8      	cbnz	r0, 288e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    2862:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2866:	1a08      	subs	r0, r1, r0
    2868:	0200      	lsls	r0, r0, #8
    286a:	17c1      	asrs	r1, r0, #31
    286c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2870:	1200      	asrs	r0, r0, #8
    2872:	f44f 710c 	mov.w	r1, #560	; 0x230
    2876:	f009 faf3 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    287a:	6921      	ldr	r1, [r4, #16]
    287c:	4408      	add	r0, r1
    287e:	1a28      	subs	r0, r5, r0
    2880:	0200      	lsls	r0, r0, #8
    2882:	17c1      	asrs	r1, r0, #31
    2884:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2888:	1200      	asrs	r0, r0, #8
    288a:	0fc0      	lsrs	r0, r0, #31
    288c:	d00c      	beq.n	28a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x68>
    288e:	7e60      	ldrb	r0, [r4, #25]
    2890:	b1d0      	cbz	r0, 28c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    2892:	f000 fb57 	bl	2f44 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2896:	bf00      	nop
    2898:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    289c:	b1d0      	cbz	r0, 28d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    289e:	f240 414b 	movw	r1, #1099	; 0x44b
    28a2:	2070      	movs	r0, #112	; 0x70
    28a4:	f001 f938 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28a8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    28ac:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    28b0:	4a30      	ldr	r2, [pc, #192]	; (2974 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x134>)
    28b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    28b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    28ba:	2108      	movs	r1, #8
    28bc:	4790      	blx	r2
    28be:	f240 413a 	movw	r1, #1082	; 0x43a
    28c2:	2070      	movs	r0, #112	; 0x70
    28c4:	f001 f928 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c8:	1ce8      	adds	r0, r5, #3
    28ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28ce:	f000 fa33 	bl	2d38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    28d2:	e7e1      	b.n	2898 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    28d4:	2601      	movs	r6, #1
    28d6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    28da:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    28de:	2820      	cmp	r0, #32
    28e0:	d025      	beq.n	292e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xee>
    28e2:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    28e6:	2020      	movs	r0, #32
    28e8:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    28ec:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    28f0:	2500      	movs	r5, #0
    28f2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    28f6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    28fa:	481f      	ldr	r0, [pc, #124]	; (2978 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x138>)
    28fc:	6025      	str	r5, [r4, #0]
    28fe:	7800      	ldrb	r0, [r0, #0]
    2900:	2802      	cmp	r0, #2
    2902:	bf16      	itet	ne
    2904:	2803      	cmpne	r0, #3
    2906:	2001      	moveq	r0, #1
    2908:	2000      	movne	r0, #0
    290a:	7720      	strb	r0, [r4, #28]
    290c:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
    2910:	f04f 0001 	mov.w	r0, #1
    2914:	4641      	mov	r1, r8
    2916:	f7fe fe0b 	bl	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    291a:	2800      	cmp	r0, #0
    291c:	d0f8      	beq.n	2910 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd0>
    291e:	4817      	ldr	r0, [pc, #92]	; (297c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>)
    2920:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2924:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    2928:	2802      	cmp	r0, #2
    292a:	d005      	beq.n	2938 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf8>
    292c:	e009      	b.n	2942 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x102>
    292e:	f240 414e 	movw	r1, #1102	; 0x44e
    2932:	2070      	movs	r0, #112	; 0x70
    2934:	f001 f8f0 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2938:	4642      	mov	r2, r8
    293a:	4639      	mov	r1, r7
    293c:	2006      	movs	r0, #6
    293e:	f7fe fdc7 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    2942:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
    2946:	eb04 0088 	add.w	r0, r4, r8, lsl #2
    294a:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    294e:	2820      	cmp	r0, #32
    2950:	d003      	beq.n	295a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    2952:	480b      	ldr	r0, [pc, #44]	; (2980 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>)
    2954:	7840      	ldrb	r0, [r0, #1]
    2956:	f001 f9af 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    295a:	7f20      	ldrb	r0, [r4, #28]
    295c:	2800      	cmp	r0, #0
    295e:	bf08      	it	eq
    2960:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2964:	f000 fcd6 	bl	3314 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2968:	7725      	strb	r5, [r4, #28]
    296a:	7765      	strb	r5, [r4, #29]
    296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2970:	20000dcc 	.word	0x20000dcc
    2974:	20000acc 	.word	0x20000acc
    2978:	2000000a 	.word	0x2000000a
    297c:	20000d4c 	.word	0x20000d4c
    2980:	20000008 	.word	0x20000008

00002984 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2984:	b530      	push	{r4, r5, lr}
    2986:	4c30      	ldr	r4, [pc, #192]	; (2a48 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2988:	b083      	sub	sp, #12
    298a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    298e:	2920      	cmp	r1, #32
    2990:	d008      	beq.n	29a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2992:	68a1      	ldr	r1, [r4, #8]
    2994:	f1b1 3fff 	cmp.w	r1, #4294967295
    2998:	d009      	beq.n	29ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    299a:	f640 21c2 	movw	r1, #2754	; 0xac2
    299e:	2070      	movs	r0, #112	; 0x70
    29a0:	f001 f8ba 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29a4:	f640 21c1 	movw	r1, #2753	; 0xac1
    29a8:	2070      	movs	r0, #112	; 0x70
    29aa:	f001 f8b5 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29ae:	6861      	ldr	r1, [r4, #4]
    29b0:	f8df c098 	ldr.w	ip, [pc, #152]	; 2a4c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    29b4:	180b      	adds	r3, r1, r0
    29b6:	2200      	movs	r2, #0
    29b8:	ebbc 0101 	subs.w	r1, ip, r1
    29bc:	eb72 0102 	sbcs.w	r1, r2, r2
    29c0:	d204      	bcs.n	29cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    29c2:	f240 51e4 	movw	r1, #1508	; 0x5e4
    29c6:	2070      	movs	r0, #112	; 0x70
    29c8:	f001 f8a6 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29cc:	4920      	ldr	r1, [pc, #128]	; (2a50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    29ce:	4288      	cmp	r0, r1
    29d0:	dd04      	ble.n	29dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    29d2:	f240 51e5 	movw	r1, #1509	; 0x5e5
    29d6:	2070      	movs	r0, #112	; 0x70
    29d8:	f001 f89e 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29dc:	491d      	ldr	r1, [pc, #116]	; (2a54 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    29de:	4288      	cmp	r0, r1
    29e0:	da04      	bge.n	29ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    29e2:	f240 51e6 	movw	r1, #1510	; 0x5e6
    29e6:	2070      	movs	r0, #112	; 0x70
    29e8:	f001 f896 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29ec:	481a      	ldr	r0, [pc, #104]	; (2a58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    29ee:	4283      	cmp	r3, r0
    29f0:	bfa8      	it	ge
    29f2:	481a      	ldrge	r0, [pc, #104]	; (2a5c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    29f4:	da03      	bge.n	29fe <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    29f6:	2b00      	cmp	r3, #0
    29f8:	bfb8      	it	lt
    29fa:	4817      	ldrlt	r0, [pc, #92]	; (2a58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    29fc:	da00      	bge.n	2a00 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    29fe:	181b      	adds	r3, r3, r0
    2a00:	4618      	mov	r0, r3
    2a02:	aa01      	add	r2, sp, #4
    2a04:	4669      	mov	r1, sp
    2a06:	f000 fcef 	bl	33e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2a0a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    2a0e:	280f      	cmp	r0, #15
    2a10:	bfcc      	ite	gt
    2a12:	2001      	movgt	r0, #1
    2a14:	2000      	movle	r0, #0
    2a16:	9900      	ldr	r1, [sp, #0]
    2a18:	4408      	add	r0, r1
    2a1a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2a1e:	60a1      	str	r1, [r4, #8]
    2a20:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2a24:	2800      	cmp	r0, #0
    2a26:	bf04      	itt	eq
    2a28:	b003      	addeq	sp, #12
    2a2a:	bd30      	popeq	{r4, r5, pc}
    2a2c:	2301      	movs	r3, #1
    2a2e:	2203      	movs	r2, #3
    2a30:	2005      	movs	r0, #5
    2a32:	f000 fb01 	bl	3038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2a36:	2800      	cmp	r0, #0
    2a38:	bf1c      	itt	ne
    2a3a:	b003      	addne	sp, #12
    2a3c:	bd30      	popne	{r4, r5, pc}
    2a3e:	f640 21ca 	movw	r1, #2762	; 0xaca
    2a42:	2070      	movs	r0, #112	; 0x70
    2a44:	f001 f868 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a48:	20000dcc 	.word	0x20000dcc
    2a4c:	1e847fff 	.word	0x1e847fff
    2a50:	07a12000 	.word	0x07a12000
    2a54:	f85ee000 	.word	0xf85ee000
    2a58:	1e848000 	.word	0x1e848000
    2a5c:	e17b8000 	.word	0xe17b8000

00002a60 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2a60:	b570      	push	{r4, r5, r6, lr}
    2a62:	4c1e      	ldr	r4, [pc, #120]	; (2adc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2a64:	2120      	movs	r1, #32
    2a66:	f884 1020 	strb.w	r1, [r4, #32]
    2a6a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2a6e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2a72:	2000      	movs	r0, #0
    2a74:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2a78:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2a7c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2a80:	1e42      	subs	r2, r0, #1
    2a82:	60a2      	str	r2, [r4, #8]
    2a84:	6020      	str	r0, [r4, #0]
    2a86:	77a0      	strb	r0, [r4, #30]
    2a88:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2a8c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2a90:	7720      	strb	r0, [r4, #28]
    2a92:	7760      	strb	r0, [r4, #29]
    2a94:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2a98:	4911      	ldr	r1, [pc, #68]	; (2ae0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2a9a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2a9e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2aa2:	7008      	strb	r0, [r1, #0]
    2aa4:	7048      	strb	r0, [r1, #1]
    2aa6:	8048      	strh	r0, [r1, #2]
    2aa8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2aac:	2210      	movs	r2, #16
    2aae:	7088      	strb	r0, [r1, #2]
    2ab0:	f801 0f04 	strb.w	r0, [r1, #4]!
    2ab4:	1e52      	subs	r2, r2, #1
    2ab6:	d1fa      	bne.n	2aae <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2ab8:	4d0a      	ldr	r5, [pc, #40]	; (2ae4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2aba:	2601      	movs	r6, #1
    2abc:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2ac0:	20ff      	movs	r0, #255	; 0xff
    2ac2:	7028      	strb	r0, [r5, #0]
    2ac4:	4808      	ldr	r0, [pc, #32]	; (2ae8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2ac6:	f001 f8d9 	bl	3c7c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2aca:	7068      	strb	r0, [r5, #1]
    2acc:	f001 f934 	bl	3d38 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2ad0:	60a8      	str	r0, [r5, #8]
    2ad2:	f000 fc4d 	bl	3370 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2ad6:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    2adc:	20000dcc 	.word	0x20000dcc
    2ae0:	2000000a 	.word	0x2000000a
    2ae4:	20000008 	.word	0x20000008
    2ae8:	00001389 	.word	0x00001389

00002aec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2aec:	b570      	push	{r4, r5, r6, lr}
    2aee:	4604      	mov	r4, r0
    2af0:	4615      	mov	r5, r2
    2af2:	4608      	mov	r0, r1
    2af4:	f009 f987 	bl	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2af8:	4a0f      	ldr	r2, [pc, #60]	; (2b38 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2afa:	1b01      	subs	r1, r0, r4
    2afc:	f102 0c01 	add.w	ip, r2, #1
    2b00:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    2b04:	bf24      	itt	cs
    2b06:	1a23      	subcs	r3, r4, r0
    2b08:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    2b0c:	d30b      	bcc.n	2b26 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2b0e:	428a      	cmp	r2, r1
    2b10:	d203      	bcs.n	2b1a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    2b12:	1b11      	subs	r1, r2, r4
    2b14:	4408      	add	r0, r1
    2b16:	1c41      	adds	r1, r0, #1
    2b18:	e005      	b.n	2b26 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2b1a:	429a      	cmp	r2, r3
    2b1c:	d207      	bcs.n	2b2e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    2b1e:	1a10      	subs	r0, r2, r0
    2b20:	4420      	add	r0, r4
    2b22:	1c40      	adds	r0, r0, #1
    2b24:	4241      	negs	r1, r0
    2b26:	f101 000f 	add.w	r0, r1, #15
    2b2a:	1a28      	subs	r0, r5, r0
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
    2b2e:	f640 21e5 	movw	r1, #2789	; 0xae5
    2b32:	2070      	movs	r0, #112	; 0x70
    2b34:	f000 fff0 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b38:	1e847fff 	.word	0x1e847fff

00002b3c <MPSL_IRQ_RTC0_Handler>:
    2b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b40:	4c24      	ldr	r4, [pc, #144]	; (2bd4 <MPSL_IRQ_RTC0_Handler+0x98>)
    2b42:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2b46:	f04f 0500 	mov.w	r5, #0
    2b4a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2b4e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2b52:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2b56:	bf1c      	itt	ne
    2b58:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2b5c:	2800      	cmpne	r0, #0
    2b5e:	d00b      	beq.n	2b78 <MPSL_IRQ_RTC0_Handler+0x3c>
    2b60:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2b64:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2b68:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2b6c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2b70:	f04f 0004 	mov.w	r0, #4
    2b74:	f7fe ff20 	bl	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2b78:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2b7c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2b80:	bf1c      	itt	ne
    2b82:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2b86:	2800      	cmpne	r0, #0
    2b88:	d00b      	beq.n	2ba2 <MPSL_IRQ_RTC0_Handler+0x66>
    2b8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2b8e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2b92:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2b96:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2b9a:	f04f 0005 	mov.w	r0, #5
    2b9e:	f7fe ff0b 	bl	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2ba2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2ba6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2baa:	bf1a      	itte	ne
    2bac:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2bb0:	2800      	cmpne	r0, #0
    2bb2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bb6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2bba:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2bbe:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2bc2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2bca:	f04f 0006 	mov.w	r0, #6
    2bce:	f7fe bef3 	b.w	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2bd2:	0000      	.short	0x0000
    2bd4:	4000b000 	.word	0x4000b000

00002bd8 <MPSL_IRQ_TIMER0_Handler>:
    2bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bdc:	4d3a      	ldr	r5, [pc, #232]	; (2cc8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2bde:	7828      	ldrb	r0, [r5, #0]
    2be0:	2804      	cmp	r0, #4
    2be2:	d06c      	beq.n	2cbe <MPSL_IRQ_TIMER0_Handler+0xe6>
    2be4:	1ce8      	adds	r0, r5, #3
    2be6:	2201      	movs	r2, #1
    2be8:	7801      	ldrb	r1, [r0, #0]
    2bea:	b159      	cbz	r1, 2c04 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2bec:	2901      	cmp	r1, #1
    2bee:	bf08      	it	eq
    2bf0:	706a      	strbeq	r2, [r5, #1]
    2bf2:	d002      	beq.n	2bfa <MPSL_IRQ_TIMER0_Handler+0x22>
    2bf4:	7869      	ldrb	r1, [r5, #1]
    2bf6:	2900      	cmp	r1, #0
    2bf8:	d05c      	beq.n	2cb4 <MPSL_IRQ_TIMER0_Handler+0xdc>
    2bfa:	2102      	movs	r1, #2
    2bfc:	7001      	strb	r1, [r0, #0]
    2bfe:	7840      	ldrb	r0, [r0, #1]
    2c00:	f000 fae2 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c04:	4c31      	ldr	r4, [pc, #196]	; (2ccc <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2c06:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c0a:	f04f 0800 	mov.w	r8, #0
    2c0e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2c12:	f44f 7680 	mov.w	r6, #256	; 0x100
    2c16:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2c1a:	bf1c      	itt	ne
    2c1c:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2c20:	2800      	cmpne	r0, #0
    2c22:	d008      	beq.n	2c36 <MPSL_IRQ_TIMER0_Handler+0x5e>
    2c24:	f04f 0003 	mov.w	r0, #3
    2c28:	f000 face 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c2c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2c30:	2003      	movs	r0, #3
    2c32:	f7fe fec1 	bl	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2c36:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c3a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2c3e:	bf1c      	itt	ne
    2c40:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2c44:	2800      	cmpne	r0, #0
    2c46:	d008      	beq.n	2c5a <MPSL_IRQ_TIMER0_Handler+0x82>
    2c48:	f04f 0002 	mov.w	r0, #2
    2c4c:	f000 fabc 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c50:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2c54:	2002      	movs	r0, #2
    2c56:	f7fe feaf 	bl	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2c5a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c5e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2c62:	bf1c      	itt	ne
    2c64:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2c68:	2800      	cmpne	r0, #0
    2c6a:	d008      	beq.n	2c7e <MPSL_IRQ_TIMER0_Handler+0xa6>
    2c6c:	f04f 0001 	mov.w	r0, #1
    2c70:	f000 faaa 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c74:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2c78:	2001      	movs	r0, #1
    2c7a:	f7fe fe9d 	bl	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2c7e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c82:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2c86:	bf1a      	itte	ne
    2c88:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2c8c:	2800      	cmpne	r0, #0
    2c8e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c92:	f04f 0000 	mov.w	r0, #0
    2c96:	f000 fa97 	bl	31c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c9a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2c9e:	2004      	movs	r0, #4
    2ca0:	7028      	strb	r0, [r5, #0]
    2ca2:	f8c5 8008 	str.w	r8, [r5, #8]
    2ca6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2cae:	2000      	movs	r0, #0
    2cb0:	f7fe be82 	b.w	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2cb4:	f44f 7165 	mov.w	r1, #916	; 0x394
    2cb8:	206c      	movs	r0, #108	; 0x6c
    2cba:	f000 ff2d 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2cc2:	2007      	movs	r0, #7
    2cc4:	f7fe be78 	b.w	19b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2cc8:	20000014 	.word	0x20000014
    2ccc:	40008000 	.word	0x40008000
    2cd0:	2201      	movs	r2, #1
    2cd2:	0213      	lsls	r3, r2, #8
    2cd4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2cd8:	2000      	movs	r0, #0
    2cda:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2cde:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2ce2:	f3bf 8f4f 	dsb	sy
    2ce6:	f3bf 8f6f 	isb	sy
    2cea:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2cee:	490c      	ldr	r1, [pc, #48]	; (2d20 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2cf0:	604a      	str	r2, [r1, #4]
    2cf2:	1e43      	subs	r3, r0, #1
    2cf4:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2cf8:	4b0a      	ldr	r3, [pc, #40]	; (2d24 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2cfa:	6018      	str	r0, [r3, #0]
    2cfc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2d00:	1d1b      	adds	r3, r3, #4
    2d02:	6018      	str	r0, [r3, #0]
    2d04:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2d08:	1d1b      	adds	r3, r3, #4
    2d0a:	6018      	str	r0, [r3, #0]
    2d0c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2d10:	1d1b      	adds	r3, r3, #4
    2d12:	6018      	str	r0, [r3, #0]
    2d14:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2d18:	610a      	str	r2, [r1, #16]
    2d1a:	4903      	ldr	r1, [pc, #12]	; (2d28 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2d1c:	7048      	strb	r0, [r1, #1]
    2d1e:	4770      	bx	lr
    2d20:	40008000 	.word	0x40008000
    2d24:	40008540 	.word	0x40008540
    2d28:	20000014 	.word	0x20000014

00002d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2d2c:	4801      	ldr	r0, [pc, #4]	; (2d34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2d2e:	6800      	ldr	r0, [r0, #0]
    2d30:	4770      	bx	lr
    2d32:	0000      	.short	0x0000
    2d34:	4000b504 	.word	0x4000b504

00002d38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2d38:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2d3c:	4e41      	ldr	r6, [pc, #260]	; (2e44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2d3e:	4604      	mov	r4, r0
    2d40:	1ef7      	subs	r7, r6, #3
    2d42:	f896 c000 	ldrb.w	ip, [r6]
    2d46:	68f8      	ldr	r0, [r7, #12]
    2d48:	f1bc 0f01 	cmp.w	ip, #1
    2d4c:	bf04      	itt	eq
    2d4e:	42a0      	cmpeq	r0, r4
    2d50:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2d54:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2d58:	4a3b      	ldr	r2, [pc, #236]	; (2e48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2d5a:	6011      	str	r1, [r2, #0]
    2d5c:	493b      	ldr	r1, [pc, #236]	; (2e4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2d5e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2d62:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2d66:	4a3a      	ldr	r2, [pc, #232]	; (2e50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2d68:	f04f 0500 	mov.w	r5, #0
    2d6c:	f1bc 0f00 	cmp.w	ip, #0
    2d70:	d057      	beq.n	2e22 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2d72:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2d76:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2d7a:	6015      	str	r5, [r2, #0]
    2d7c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2d80:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2d84:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2d88:	f04f 0801 	mov.w	r8, #1
    2d8c:	2a00      	cmp	r2, #0
    2d8e:	bf04      	itt	eq
    2d90:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2d94:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2d9c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2da0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2da4:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2da8:	4a2a      	ldr	r2, [pc, #168]	; (2e54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2daa:	f8d2 a000 	ldr.w	sl, [r2]
    2dae:	eba4 0a0a 	sub.w	sl, r4, sl
    2db2:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2db6:	f1bb 0f02 	cmp.w	fp, #2
    2dba:	d33c      	bcc.n	2e36 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2dbc:	f04f 0a02 	mov.w	sl, #2
    2dc0:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2dc4:	d237      	bcs.n	2e36 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2dc6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2dca:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2dce:	f1bc 0f00 	cmp.w	ip, #0
    2dd2:	d005      	beq.n	2de0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2dd4:	6811      	ldr	r1, [r2, #0]
    2dd6:	1a41      	subs	r1, r0, r1
    2dd8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ddc:	2902      	cmp	r1, #2
    2dde:	d3f9      	bcc.n	2dd4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2de0:	f8c7 8008 	str.w	r8, [r7, #8]
    2de4:	703d      	strb	r5, [r7, #0]
    2de6:	f7ff ff73 	bl	2cd0 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2dea:	481b      	ldr	r0, [pc, #108]	; (2e58 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2dec:	6005      	str	r5, [r0, #0]
    2dee:	1d00      	adds	r0, r0, #4
    2df0:	f8c0 a000 	str.w	sl, [r0]
    2df4:	4919      	ldr	r1, [pc, #100]	; (2e5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2df6:	2004      	movs	r0, #4
    2df8:	6008      	str	r0, [r1, #0]
    2dfa:	4919      	ldr	r1, [pc, #100]	; (2e60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2dfc:	f8c1 800c 	str.w	r8, [r1, #12]
    2e00:	68ba      	ldr	r2, [r7, #8]
    2e02:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2e06:	0181      	lsls	r1, r0, #6
    2e08:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2e0c:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2e10:	4a14      	ldr	r2, [pc, #80]	; (2e64 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2e12:	0741      	lsls	r1, r0, #29
    2e14:	6011      	str	r1, [r2, #0]
    2e16:	60fc      	str	r4, [r7, #12]
    2e18:	7070      	strb	r0, [r6, #1]
    2e1a:	f886 8000 	strb.w	r8, [r6]
    2e1e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2e22:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e26:	4b10      	ldr	r3, [pc, #64]	; (2e68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2e28:	601d      	str	r5, [r3, #0]
    2e2a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2e2e:	6015      	str	r5, [r2, #0]
    2e30:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2e34:	e7a4      	b.n	2d80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2e36:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2e3a:	f240 11cb 	movw	r1, #459	; 0x1cb
    2e3e:	206c      	movs	r0, #108	; 0x6c
    2e40:	f000 fe6a 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e44:	20000017 	.word	0x20000017
    2e48:	4001f508 	.word	0x4001f508
    2e4c:	4000b000 	.word	0x4000b000
    2e50:	4000b544 	.word	0x4000b544
    2e54:	4000b504 	.word	0x4000b504
    2e58:	40008504 	.word	0x40008504
    2e5c:	40008510 	.word	0x40008510
    2e60:	40008000 	.word	0x40008000
    2e64:	4001f504 	.word	0x4001f504
    2e68:	4000b540 	.word	0x4000b540

00002e6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e70:	4c2b      	ldr	r4, [pc, #172]	; (2f20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2e72:	68e1      	ldr	r1, [r4, #12]
    2e74:	4281      	cmp	r1, r0
    2e76:	bf14      	ite	ne
    2e78:	2201      	movne	r2, #1
    2e7a:	2200      	moveq	r2, #0
    2e7c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2f24 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2e80:	f89c 7000 	ldrb.w	r7, [ip]
    2e84:	2f02      	cmp	r7, #2
    2e86:	d002      	beq.n	2e8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2e88:	2a00      	cmp	r2, #0
    2e8a:	d038      	beq.n	2efe <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2e8c:	e003      	b.n	2e96 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2e8e:	2a00      	cmp	r2, #0
    2e90:	bf08      	it	eq
    2e92:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e96:	7862      	ldrb	r2, [r4, #1]
    2e98:	b382      	cbz	r2, 2efc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2e9a:	4b23      	ldr	r3, [pc, #140]	; (2f28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ea0:	601a      	str	r2, [r3, #0]
    2ea2:	4b22      	ldr	r3, [pc, #136]	; (2f2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2ea4:	1395      	asrs	r5, r2, #14
    2ea6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2eaa:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2eae:	2600      	movs	r6, #0
    2eb0:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2eb4:	4a1e      	ldr	r2, [pc, #120]	; (2f30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2eb6:	f8d2 8000 	ldr.w	r8, [r2]
    2eba:	eba0 0808 	sub.w	r8, r0, r8
    2ebe:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2ec2:	f1b8 0f02 	cmp.w	r8, #2
    2ec6:	d324      	bcc.n	2f12 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2ec8:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2ecc:	d221      	bcs.n	2f12 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2ece:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2ed2:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2ed6:	b12f      	cbz	r7, 2ee4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2ed8:	6813      	ldr	r3, [r2, #0]
    2eda:	1acb      	subs	r3, r1, r3
    2edc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2ee0:	2b02      	cmp	r3, #2
    2ee2:	d3f9      	bcc.n	2ed8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2ee4:	4b13      	ldr	r3, [pc, #76]	; (2f34 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2ee6:	2102      	movs	r1, #2
    2ee8:	074a      	lsls	r2, r1, #29
    2eea:	601a      	str	r2, [r3, #0]
    2eec:	60e0      	str	r0, [r4, #12]
    2eee:	2004      	movs	r0, #4
    2ef0:	f88c 0001 	strb.w	r0, [ip, #1]
    2ef4:	f88c 1000 	strb.w	r1, [ip]
    2ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2efc:	e004      	b.n	2f08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2efe:	f240 11d9 	movw	r1, #473	; 0x1d9
    2f02:	206c      	movs	r0, #108	; 0x6c
    2f04:	f000 fe08 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f08:	f240 11dd 	movw	r1, #477	; 0x1dd
    2f0c:	206c      	movs	r0, #108	; 0x6c
    2f0e:	f000 fe03 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f12:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2f16:	f240 11e9 	movw	r1, #489	; 0x1e9
    2f1a:	206c      	movs	r0, #108	; 0x6c
    2f1c:	f000 fdfc 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f20:	20000014 	.word	0x20000014
    2f24:	20000017 	.word	0x20000017
    2f28:	4001f508 	.word	0x4001f508
    2f2c:	4000b000 	.word	0x4000b000
    2f30:	4000b504 	.word	0x4000b504
    2f34:	4001f504 	.word	0x4001f504

00002f38 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2f38:	4801      	ldr	r0, [pc, #4]	; (2f40 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2f3a:	68c0      	ldr	r0, [r0, #12]
    2f3c:	4770      	bx	lr
    2f3e:	0000      	.short	0x0000
    2f40:	20000014 	.word	0x20000014

00002f44 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f48:	4833      	ldr	r0, [pc, #204]	; (3018 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2f4a:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2f4e:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2f52:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 301c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2f56:	4a32      	ldr	r2, [pc, #200]	; (3020 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2f58:	2100      	movs	r1, #0
    2f5a:	f89c 3000 	ldrb.w	r3, [ip]
    2f5e:	b163      	cbz	r3, 2f7a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2f60:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2f64:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2f68:	6011      	str	r1, [r2, #0]
    2f6a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2f6e:	bf00      	nop
    2f70:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2f74:	2201      	movs	r2, #1
    2f76:	b980      	cbnz	r0, 2f9a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2f78:	e009      	b.n	2f8e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2f7a:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2f7e:	4c29      	ldr	r4, [pc, #164]	; (3024 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2f80:	6021      	str	r1, [r4, #0]
    2f82:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2f86:	6011      	str	r1, [r2, #0]
    2f88:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2f8c:	e7f0      	b.n	2f70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2f8e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2f92:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2f96:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2f9a:	2b02      	cmp	r3, #2
    2f9c:	d004      	beq.n	2fa8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2f9e:	f240 11f5 	movw	r1, #501	; 0x1f5
    2fa2:	206c      	movs	r0, #108	; 0x6c
    2fa4:	f000 fdb8 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fa8:	4e1f      	ldr	r6, [pc, #124]	; (3028 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2faa:	6830      	ldr	r0, [r6, #0]
    2fac:	4c1f      	ldr	r4, [pc, #124]	; (302c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2fae:	1cc0      	adds	r0, r0, #3
    2fb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb4:	68e3      	ldr	r3, [r4, #12]
    2fb6:	4d1e      	ldr	r5, [pc, #120]	; (3030 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2fb8:	4298      	cmp	r0, r3
    2fba:	d00b      	beq.n	2fd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2fbc:	6837      	ldr	r7, [r6, #0]
    2fbe:	1bdf      	subs	r7, r3, r7
    2fc0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2fc4:	2f04      	cmp	r7, #4
    2fc6:	d305      	bcc.n	2fd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2fc8:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2fcc:	d202      	bcs.n	2fd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2fce:	f7ff feb3 	bl	2d38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2fd2:	e01b      	b.n	300c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2fd4:	6830      	ldr	r0, [r6, #0]
    2fd6:	1a18      	subs	r0, r3, r0
    2fd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fdc:	2802      	cmp	r0, #2
    2fde:	d313      	bcc.n	3008 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2fe0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2fe4:	d210      	bcs.n	3008 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2fe6:	4b13      	ldr	r3, [pc, #76]	; (3034 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2fe8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2fec:	6018      	str	r0, [r3, #0]
    2fee:	60a2      	str	r2, [r4, #8]
    2ff0:	7021      	strb	r1, [r4, #0]
    2ff2:	606a      	str	r2, [r5, #4]
    2ff4:	60ea      	str	r2, [r5, #12]
    2ff6:	0040      	lsls	r0, r0, #1
    2ff8:	1f19      	subs	r1, r3, #4
    2ffa:	6008      	str	r0, [r1, #0]
    2ffc:	2004      	movs	r0, #4
    2ffe:	f88c 0001 	strb.w	r0, [ip, #1]
    3002:	f88c 2000 	strb.w	r2, [ip]
    3006:	e001      	b.n	300c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3008:	60a2      	str	r2, [r4, #8]
    300a:	7021      	strb	r1, [r4, #0]
    300c:	68a0      	ldr	r0, [r4, #8]
    300e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3016:	0000      	.short	0x0000
    3018:	4000b000 	.word	0x4000b000
    301c:	20000017 	.word	0x20000017
    3020:	4000b544 	.word	0x4000b544
    3024:	4000b540 	.word	0x4000b540
    3028:	4000b504 	.word	0x4000b504
    302c:	20000014 	.word	0x20000014
    3030:	40008000 	.word	0x40008000
    3034:	4001f508 	.word	0x4001f508

00003038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    303c:	f8df c174 	ldr.w	ip, [pc, #372]	; 31b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3040:	2701      	movs	r7, #1
    3042:	f04f 0800 	mov.w	r8, #0
    3046:	f89c 5000 	ldrb.w	r5, [ip]
    304a:	f89c c001 	ldrb.w	ip, [ip, #1]
    304e:	2807      	cmp	r0, #7
    3050:	d27e      	bcs.n	3150 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3052:	e8df f000 	tbb	[pc, r0]
    3056:	0404      	.short	0x0404
    3058:	6a6a0404 	.word	0x6a6a0404
    305c:	006a      	.short	0x006a
    305e:	4c56      	ldr	r4, [pc, #344]	; (31b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3060:	68e6      	ldr	r6, [r4, #12]
    3062:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3066:	bf04      	itt	eq
    3068:	7864      	ldrbeq	r4, [r4, #1]
    306a:	2c00      	cmpeq	r4, #0
    306c:	d002      	beq.n	3074 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    306e:	2d02      	cmp	r5, #2
    3070:	d005      	beq.n	307e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3072:	e03c      	b.n	30ee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3074:	f44f 710a 	mov.w	r1, #552	; 0x228
    3078:	206c      	movs	r0, #108	; 0x6c
    307a:	f000 fd4d 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    307e:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3082:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3086:	f1ac 0404 	sub.w	r4, ip, #4
    308a:	0624      	lsls	r4, r4, #24
    308c:	0da4      	lsrs	r4, r4, #22
    308e:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3092:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3096:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    309a:	2400      	movs	r4, #0
    309c:	2d01      	cmp	r5, #1
    309e:	d002      	beq.n	30a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    30a0:	2d02      	cmp	r5, #2
    30a2:	d011      	beq.n	30c8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    30a4:	e020      	b.n	30e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    30a6:	f1bc 0f04 	cmp.w	ip, #4
    30aa:	d205      	bcs.n	30b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    30ac:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    30b0:	f1ba 0f00 	cmp.w	sl, #0
    30b4:	d118      	bne.n	30e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    30b6:	e004      	b.n	30c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    30b8:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    30bc:	f1ba 0f00 	cmp.w	sl, #0
    30c0:	d112      	bne.n	30e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    30c2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    30c6:	e00f      	b.n	30e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    30c8:	f1bc 0f04 	cmp.w	ip, #4
    30cc:	d205      	bcs.n	30da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    30ce:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    30d2:	f1ba 0f00 	cmp.w	sl, #0
    30d6:	d107      	bne.n	30e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    30d8:	e004      	b.n	30e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    30da:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    30de:	f1ba 0f00 	cmp.w	sl, #0
    30e2:	d101      	bne.n	30e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    30e4:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    30e8:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    30ec:	d1d5      	bne.n	309a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    30ee:	4c33      	ldr	r4, [pc, #204]	; (31bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    30f0:	f100 0c10 	add.w	ip, r0, #16
    30f4:	fa07 fc0c 	lsl.w	ip, r7, ip
    30f8:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    30fc:	0080      	lsls	r0, r0, #2
    30fe:	4420      	add	r0, r4
    3100:	b152      	cbz	r2, 3118 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3102:	6407      	str	r7, [r0, #64]	; 0x40
    3104:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3108:	1b8d      	subs	r5, r1, r6
    310a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    310e:	42aa      	cmp	r2, r5
    3110:	bf98      	it	ls
    3112:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3116:	d243      	bcs.n	31a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3118:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    311c:	2b01      	cmp	r3, #1
    311e:	bf08      	it	eq
    3120:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3124:	2001      	movs	r0, #1
    3126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    312a:	b135      	cbz	r5, 313a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    312c:	4584      	cmp	ip, r0
    312e:	d104      	bne.n	313a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3130:	f240 214b 	movw	r1, #587	; 0x24b
    3134:	206c      	movs	r0, #108	; 0x6c
    3136:	f000 fcef 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    313a:	1f00      	subs	r0, r0, #4
    313c:	b2c0      	uxtb	r0, r0
    313e:	2b01      	cmp	r3, #1
    3140:	bf0c      	ite	eq
    3142:	2401      	moveq	r4, #1
    3144:	2400      	movne	r4, #0
    3146:	2803      	cmp	r0, #3
    3148:	d306      	bcc.n	3158 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    314a:	f240 1125 	movw	r1, #293	; 0x125
    314e:	e000      	b.n	3152 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3150:	e02b      	b.n	31aa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3152:	206c      	movs	r0, #108	; 0x6c
    3154:	f000 fce0 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3158:	f8df c064 	ldr.w	ip, [pc, #100]	; 31c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    315c:	f100 0310 	add.w	r3, r0, #16
    3160:	fa07 f303 	lsl.w	r3, r7, r3
    3164:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3168:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    316c:	0080      	lsls	r0, r0, #2
    316e:	4460      	add	r0, ip
    3170:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3174:	b14a      	cbz	r2, 318a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3176:	4d13      	ldr	r5, [pc, #76]	; (31c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3178:	682e      	ldr	r6, [r5, #0]
    317a:	1b8d      	subs	r5, r1, r6
    317c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3180:	42aa      	cmp	r2, r5
    3182:	bf98      	it	ls
    3184:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3188:	d20a      	bcs.n	31a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    318a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    318e:	2c00      	cmp	r4, #0
    3190:	bf18      	it	ne
    3192:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3196:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    319a:	2001      	movs	r0, #1
    319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31a0:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    31a4:	2000      	movs	r0, #0
    31a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31aa:	f44f 7114 	mov.w	r1, #592	; 0x250
    31ae:	206c      	movs	r0, #108	; 0x6c
    31b0:	f000 fcb2 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31b4:	20000017 	.word	0x20000017
    31b8:	20000014 	.word	0x20000014
    31bc:	40008000 	.word	0x40008000
    31c0:	4000b000 	.word	0x4000b000
    31c4:	4000b504 	.word	0x4000b504

000031c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    31c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ca:	2701      	movs	r7, #1
    31cc:	2400      	movs	r4, #0
    31ce:	2807      	cmp	r0, #7
    31d0:	d243      	bcs.n	325a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    31d2:	e8df f000 	tbb	[pc, r0]
    31d6:	0404      	.short	0x0404
    31d8:	16160404 	.word	0x16160404
    31dc:	0016      	.short	0x0016
    31de:	4a21      	ldr	r2, [pc, #132]	; (3264 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    31e0:	f100 0110 	add.w	r1, r0, #16
    31e4:	fa07 f101 	lsl.w	r1, r7, r1
    31e8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    31ec:	0081      	lsls	r1, r0, #2
    31ee:	4411      	add	r1, r2
    31f0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31f4:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    31f8:	491b      	ldr	r1, [pc, #108]	; (3268 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    31fa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    31fe:	9000      	str	r0, [sp, #0]
    3200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3202:	4d1a      	ldr	r5, [pc, #104]	; (326c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    3204:	1f01      	subs	r1, r0, #4
    3206:	b2ce      	uxtb	r6, r1
    3208:	7829      	ldrb	r1, [r5, #0]
    320a:	b179      	cbz	r1, 322c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    320c:	786a      	ldrb	r2, [r5, #1]
    320e:	4282      	cmp	r2, r0
    3210:	d10c      	bne.n	322c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3212:	4a17      	ldr	r2, [pc, #92]	; (3270 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    3214:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3218:	6010      	str	r0, [r2, #0]
    321a:	2901      	cmp	r1, #1
    321c:	bf08      	it	eq
    321e:	f7ff fd57 	bleq	2cd0 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3222:	702c      	strb	r4, [r5, #0]
    3224:	4913      	ldr	r1, [pc, #76]	; (3274 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    3226:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    322a:	60c8      	str	r0, [r1, #12]
    322c:	f106 0010 	add.w	r0, r6, #16
    3230:	fa07 f100 	lsl.w	r1, r7, r0
    3234:	4810      	ldr	r0, [pc, #64]	; (3278 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3236:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    323a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    323e:	00b0      	lsls	r0, r6, #2
    3240:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3244:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3248:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    324c:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3250:	480a      	ldr	r0, [pc, #40]	; (327c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3252:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3256:	9000      	str	r0, [sp, #0]
    3258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    325a:	f240 21bd 	movw	r1, #701	; 0x2bd
    325e:	206c      	movs	r0, #108	; 0x6c
    3260:	f000 fc5a 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3264:	40008000 	.word	0x40008000
    3268:	40008140 	.word	0x40008140
    326c:	20000017 	.word	0x20000017
    3270:	4001f508 	.word	0x4001f508
    3274:	20000014 	.word	0x20000014
    3278:	4000b000 	.word	0x4000b000
    327c:	4000b140 	.word	0x4000b140

00003280 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3280:	491e      	ldr	r1, [pc, #120]	; (32fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3282:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3286:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    328a:	481d      	ldr	r0, [pc, #116]	; (3300 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    328c:	4a1d      	ldr	r2, [pc, #116]	; (3304 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    328e:	f890 c000 	ldrb.w	ip, [r0]
    3292:	2000      	movs	r0, #0
    3294:	f1bc 0f00 	cmp.w	ip, #0
    3298:	d00a      	beq.n	32b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    329a:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    329e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    32a2:	6010      	str	r0, [r2, #0]
    32a4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    32a8:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    32ac:	b981      	cbnz	r1, 32d0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    32ae:	e009      	b.n	32c4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    32b0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    32b4:	4b14      	ldr	r3, [pc, #80]	; (3308 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    32b6:	6018      	str	r0, [r3, #0]
    32b8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    32bc:	6010      	str	r0, [r2, #0]
    32be:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    32c2:	e7f1      	b.n	32a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    32c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    32c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    32cc:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    32d0:	490e      	ldr	r1, [pc, #56]	; (330c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    32d2:	f04f 32ff 	mov.w	r2, #4294967295
    32d6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    32da:	4a0d      	ldr	r2, [pc, #52]	; (3310 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    32dc:	6010      	str	r0, [r2, #0]
    32de:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    32e2:	1d12      	adds	r2, r2, #4
    32e4:	6010      	str	r0, [r2, #0]
    32e6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    32ea:	1d12      	adds	r2, r2, #4
    32ec:	6010      	str	r0, [r2, #0]
    32ee:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    32f2:	1d12      	adds	r2, r2, #4
    32f4:	6010      	str	r0, [r2, #0]
    32f6:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    32fa:	4770      	bx	lr
    32fc:	4000b000 	.word	0x4000b000
    3300:	20000017 	.word	0x20000017
    3304:	4000b544 	.word	0x4000b544
    3308:	4000b540 	.word	0x4000b540
    330c:	40008000 	.word	0x40008000
    3310:	40008540 	.word	0x40008540

00003314 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3314:	4808      	ldr	r0, [pc, #32]	; (3338 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3316:	f990 0002 	ldrsb.w	r0, [r0, #2]
    331a:	2800      	cmp	r0, #0
    331c:	bfb8      	it	lt
    331e:	4770      	bxlt	lr
    3320:	f000 011f 	and.w	r1, r0, #31
    3324:	2201      	movs	r2, #1
    3326:	fa02 f101 	lsl.w	r1, r2, r1
    332a:	0940      	lsrs	r0, r0, #5
    332c:	0080      	lsls	r0, r0, #2
    332e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3332:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3336:	4770      	bx	lr
    3338:	20000014 	.word	0x20000014

0000333c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    333c:	b510      	push	{r4, lr}
    333e:	2807      	cmp	r0, #7
    3340:	d20d      	bcs.n	335e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3342:	e8df f000 	tbb	[pc, r0]
    3346:	0404      	.short	0x0404
    3348:	06060404 	.word	0x06060404
    334c:	0006      	.short	0x0006
    334e:	4906      	ldr	r1, [pc, #24]	; (3368 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3350:	e002      	b.n	3358 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3352:	1f00      	subs	r0, r0, #4
    3354:	4905      	ldr	r1, [pc, #20]	; (336c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3356:	b2c0      	uxtb	r0, r0
    3358:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    335c:	bd10      	pop	{r4, pc}
    335e:	f44f 711d 	mov.w	r1, #628	; 0x274
    3362:	206c      	movs	r0, #108	; 0x6c
    3364:	f000 fbd8 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3368:	40008140 	.word	0x40008140
    336c:	4000b140 	.word	0x4000b140

00003370 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3370:	b570      	push	{r4, r5, r6, lr}
    3372:	4819      	ldr	r0, [pc, #100]	; (33d8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3374:	2400      	movs	r4, #0
    3376:	2104      	movs	r1, #4
    3378:	7004      	strb	r4, [r0, #0]
    337a:	1ec0      	subs	r0, r0, #3
    337c:	7001      	strb	r1, [r0, #0]
    337e:	0589      	lsls	r1, r1, #22
    3380:	60c1      	str	r1, [r0, #12]
    3382:	f7ff fca5 	bl	2cd0 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3386:	2501      	movs	r5, #1
    3388:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    338c:	02eb      	lsls	r3, r5, #11
    338e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3392:	f3bf 8f4f 	dsb	sy
    3396:	f3bf 8f6f 	isb	sy
    339a:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    339e:	4a0f      	ldr	r2, [pc, #60]	; (33dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    33a0:	6055      	str	r5, [r2, #4]
    33a2:	6095      	str	r5, [r2, #8]
    33a4:	480e      	ldr	r0, [pc, #56]	; (33e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    33a6:	6801      	ldr	r1, [r0, #0]
    33a8:	2900      	cmp	r1, #0
    33aa:	d1fc      	bne.n	33a6 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    33ac:	1e48      	subs	r0, r1, #1
    33ae:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    33b2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    33b6:	480b      	ldr	r0, [pc, #44]	; (33e4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    33b8:	6004      	str	r4, [r0, #0]
    33ba:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    33be:	1d00      	adds	r0, r0, #4
    33c0:	6004      	str	r4, [r0, #0]
    33c2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    33c6:	1d00      	adds	r0, r0, #4
    33c8:	6004      	str	r4, [r0, #0]
    33ca:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    33ce:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    33d2:	6015      	str	r5, [r2, #0]
    33d4:	bd70      	pop	{r4, r5, r6, pc}
    33d6:	0000      	.short	0x0000
    33d8:	20000017 	.word	0x20000017
    33dc:	4000b000 	.word	0x4000b000
    33e0:	4000b504 	.word	0x4000b504
    33e4:	4000b540 	.word	0x4000b540

000033e8 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    33e8:	0b43      	lsrs	r3, r0, #13
    33ea:	f248 6c37 	movw	ip, #34359	; 0x8637
    33ee:	fb03 f30c 	mul.w	r3, r3, ip
    33f2:	0c1b      	lsrs	r3, r3, #16
    33f4:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    33f8:	f8c1 c000 	str.w	ip, [r1]
    33fc:	f8df c038 	ldr.w	ip, [pc, #56]	; 3438 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    3400:	fb03 030c 	mla	r3, r3, ip, r0
    3404:	480d      	ldr	r0, [pc, #52]	; (343c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    3406:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    340a:	4358      	muls	r0, r3
    340c:	0d40      	lsrs	r0, r0, #21
    340e:	fb10 fc0c 	smulbb	ip, r0, ip
    3412:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    3416:	f503 7380 	add.w	r3, r3, #256	; 0x100
    341a:	125b      	asrs	r3, r3, #9
    341c:	7013      	strb	r3, [r2, #0]
    341e:	680b      	ldr	r3, [r1, #0]
    3420:	4418      	add	r0, r3
    3422:	6008      	str	r0, [r1, #0]
    3424:	7810      	ldrb	r0, [r2, #0]
    3426:	281f      	cmp	r0, #31
    3428:	bf18      	it	ne
    342a:	4770      	bxne	lr
    342c:	2000      	movs	r0, #0
    342e:	7010      	strb	r0, [r2, #0]
    3430:	6808      	ldr	r0, [r1, #0]
    3432:	1c40      	adds	r0, r0, #1
    3434:	6008      	str	r0, [r1, #0]
    3436:	4770      	bx	lr
    3438:	ffffc2f7 	.word	0xffffc2f7
    343c:	00010c6f 	.word	0x00010c6f

00003440 <MPSL_IRQ_CLOCK_Handler>:
    3440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3444:	4c16      	ldr	r4, [pc, #88]	; (34a0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3446:	7a60      	ldrb	r0, [r4, #9]
    3448:	2800      	cmp	r0, #0
    344a:	d027      	beq.n	349c <MPSL_IRQ_CLOCK_Handler+0x5c>
    344c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3450:	058d      	lsls	r5, r1, #22
    3452:	4628      	mov	r0, r5
    3454:	f008 fd28 	bl	bea8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3458:	4680      	mov	r8, r0
    345a:	f44f 7182 	mov.w	r1, #260	; 0x104
    345e:	4628      	mov	r0, r5
    3460:	f008 fd22 	bl	bea8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3464:	2600      	movs	r6, #0
    3466:	4607      	mov	r7, r0
    3468:	f1b8 0f00 	cmp.w	r8, #0
    346c:	d009      	beq.n	3482 <MPSL_IRQ_CLOCK_Handler+0x42>
    346e:	2001      	movs	r0, #1
    3470:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3474:	7920      	ldrb	r0, [r4, #4]
    3476:	b120      	cbz	r0, 3482 <MPSL_IRQ_CLOCK_Handler+0x42>
    3478:	7126      	strb	r6, [r4, #4]
    347a:	69e0      	ldr	r0, [r4, #28]
    347c:	b108      	cbz	r0, 3482 <MPSL_IRQ_CLOCK_Handler+0x42>
    347e:	4780      	blx	r0
    3480:	61e6      	str	r6, [r4, #28]
    3482:	b137      	cbz	r7, 3492 <MPSL_IRQ_CLOCK_Handler+0x52>
    3484:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3488:	2002      	movs	r0, #2
    348a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    348e:	f000 fa8b 	bl	39a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3492:	4640      	mov	r0, r8
    3494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3498:	f000 b85a 	b.w	3550 <MPSL_IRQ_CLOCK_Handler+0x110>
    349c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34a0:	20000024 	.word	0x20000024
    34a4:	b510      	push	{r4, lr}
    34a6:	f008 fda9 	bl	bffc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    34aa:	b930      	cbnz	r0, 34ba <MPSL_IRQ_CLOCK_Handler+0x7a>
    34ac:	f008 fdc7 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    34b0:	b918      	cbnz	r0, 34ba <MPSL_IRQ_CLOCK_Handler+0x7a>
    34b2:	f008 fdfa 	bl	c0aa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    34b6:	2800      	cmp	r0, #0
    34b8:	d002      	beq.n	34c0 <MPSL_IRQ_CLOCK_Handler+0x80>
    34ba:	4902      	ldr	r1, [pc, #8]	; (34c4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    34bc:	2002      	movs	r0, #2
    34be:	6008      	str	r0, [r1, #0]
    34c0:	bd10      	pop	{r4, pc}
    34c2:	0000      	.short	0x0000
    34c4:	40000c34 	.word	0x40000c34
    34c8:	b570      	push	{r4, r5, r6, lr}
    34ca:	f000 f987 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34ce:	f000 fabf 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34d2:	4c09      	ldr	r4, [pc, #36]	; (34f8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    34d4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    34d8:	b130      	cbz	r0, 34e8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    34da:	f7ff ffe3 	bl	34a4 <MPSL_IRQ_CLOCK_Handler+0x64>
    34de:	2001      	movs	r0, #1
    34e0:	6128      	str	r0, [r5, #16]
    34e2:	2004      	movs	r0, #4
    34e4:	72a0      	strb	r0, [r4, #10]
    34e6:	e004      	b.n	34f2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    34e8:	2003      	movs	r0, #3
    34ea:	72a0      	strb	r0, [r4, #10]
    34ec:	2001      	movs	r0, #1
    34ee:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    34f2:	2000      	movs	r0, #0
    34f4:	71e0      	strb	r0, [r4, #7]
    34f6:	bd70      	pop	{r4, r5, r6, pc}
    34f8:	20000024 	.word	0x20000024
    34fc:	b570      	push	{r4, r5, r6, lr}
    34fe:	4c13      	ldr	r4, [pc, #76]	; (354c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3500:	79a0      	ldrb	r0, [r4, #6]
    3502:	b1f0      	cbz	r0, 3542 <MPSL_IRQ_CLOCK_Handler+0x102>
    3504:	2801      	cmp	r0, #1
    3506:	d003      	beq.n	3510 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3508:	79e1      	ldrb	r1, [r4, #7]
    350a:	1e40      	subs	r0, r0, #1
    350c:	4281      	cmp	r1, r0
    350e:	da18      	bge.n	3542 <MPSL_IRQ_CLOCK_Handler+0x102>
    3510:	f000 fa9e 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3514:	4605      	mov	r5, r0
    3516:	f000 fb6f 	bl	3bf8 <mpsl_temperature_get>
    351a:	79a1      	ldrb	r1, [r4, #6]
    351c:	2901      	cmp	r1, #1
    351e:	d902      	bls.n	3526 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3520:	79e1      	ldrb	r1, [r4, #7]
    3522:	1c49      	adds	r1, r1, #1
    3524:	71e1      	strb	r1, [r4, #7]
    3526:	b10d      	cbz	r5, 352c <MPSL_IRQ_CLOCK_Handler+0xec>
    3528:	6961      	ldr	r1, [r4, #20]
    352a:	e000      	b.n	352e <MPSL_IRQ_CLOCK_Handler+0xee>
    352c:	6921      	ldr	r1, [r4, #16]
    352e:	1a41      	subs	r1, r0, r1
    3530:	2902      	cmp	r1, #2
    3532:	da02      	bge.n	353a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3534:	f111 0f02 	cmn.w	r1, #2
    3538:	dc07      	bgt.n	354a <MPSL_IRQ_CLOCK_Handler+0x10a>
    353a:	b10d      	cbz	r5, 3540 <MPSL_IRQ_CLOCK_Handler+0x100>
    353c:	6160      	str	r0, [r4, #20]
    353e:	e000      	b.n	3542 <MPSL_IRQ_CLOCK_Handler+0x102>
    3540:	6120      	str	r0, [r4, #16]
    3542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3546:	f7ff bfbf 	b.w	34c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    354a:	bd70      	pop	{r4, r5, r6, pc}
    354c:	20000024 	.word	0x20000024
    3550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3554:	4606      	mov	r6, r0
    3556:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    355a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    355e:	4628      	mov	r0, r5
    3560:	f008 fca2 	bl	bea8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3564:	4680      	mov	r8, r0
    3566:	f44f 7188 	mov.w	r1, #272	; 0x110
    356a:	4628      	mov	r0, r5
    356c:	f008 fc9c 	bl	bea8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3570:	4c27      	ldr	r4, [pc, #156]	; (3610 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3572:	4682      	mov	sl, r0
    3574:	7827      	ldrb	r7, [r4, #0]
    3576:	f104 0008 	add.w	r0, r4, #8
    357a:	f008 fd09 	bl	bf90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    357e:	b110      	cbz	r0, 3586 <MPSL_IRQ_CLOCK_Handler+0x146>
    3580:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3584:	e016      	b.n	35b4 <MPSL_IRQ_CLOCK_Handler+0x174>
    3586:	f04f 0901 	mov.w	r9, #1
    358a:	b146      	cbz	r6, 359e <MPSL_IRQ_CLOCK_Handler+0x15e>
    358c:	7aa0      	ldrb	r0, [r4, #10]
    358e:	2803      	cmp	r0, #3
    3590:	d105      	bne.n	359e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3592:	2004      	movs	r0, #4
    3594:	72a0      	strb	r0, [r4, #10]
    3596:	f7ff ff85 	bl	34a4 <MPSL_IRQ_CLOCK_Handler+0x64>
    359a:	f8c5 9010 	str.w	r9, [r5, #16]
    359e:	2600      	movs	r6, #0
    35a0:	f1b8 0f00 	cmp.w	r8, #0
    35a4:	d018      	beq.n	35d8 <MPSL_IRQ_CLOCK_Handler+0x198>
    35a6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    35aa:	7aa0      	ldrb	r0, [r4, #10]
    35ac:	2804      	cmp	r0, #4
    35ae:	d004      	beq.n	35ba <MPSL_IRQ_CLOCK_Handler+0x17a>
    35b0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    35b4:	206d      	movs	r0, #109	; 0x6d
    35b6:	f000 faaf 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35ba:	f008 fd1f 	bl	bffc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    35be:	b928      	cbnz	r0, 35cc <MPSL_IRQ_CLOCK_Handler+0x18c>
    35c0:	f008 fd3d 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    35c4:	b910      	cbnz	r0, 35cc <MPSL_IRQ_CLOCK_Handler+0x18c>
    35c6:	f008 fd70 	bl	c0aa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    35ca:	b108      	cbz	r0, 35d0 <MPSL_IRQ_CLOCK_Handler+0x190>
    35cc:	4811      	ldr	r0, [pc, #68]	; (3614 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    35ce:	6006      	str	r6, [r0, #0]
    35d0:	2002      	movs	r0, #2
    35d2:	72a0      	strb	r0, [r4, #10]
    35d4:	f000 f8e6 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    35d8:	f1ba 0f00 	cmp.w	sl, #0
    35dc:	d008      	beq.n	35f0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    35de:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    35e2:	7aa0      	ldrb	r0, [r4, #10]
    35e4:	2802      	cmp	r0, #2
    35e6:	d101      	bne.n	35ec <MPSL_IRQ_CLOCK_Handler+0x1ac>
    35e8:	f7ff ff88 	bl	34fc <MPSL_IRQ_CLOCK_Handler+0xbc>
    35ec:	f8c5 9014 	str.w	r9, [r5, #20]
    35f0:	b13f      	cbz	r7, 3602 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    35f2:	7026      	strb	r6, [r4, #0]
    35f4:	7aa0      	ldrb	r0, [r4, #10]
    35f6:	2802      	cmp	r0, #2
    35f8:	d101      	bne.n	35fe <MPSL_IRQ_CLOCK_Handler+0x1be>
    35fa:	f7ff ff65 	bl	34c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    35fe:	f000 f8d1 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3602:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3606:	4802      	ldr	r0, [pc, #8]	; (3610 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3608:	3008      	adds	r0, #8
    360a:	f008 bcd8 	b.w	bfbe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    360e:	0000      	.short	0x0000
    3610:	20000024 	.word	0x20000024
    3614:	40000c34 	.word	0x40000c34
    3618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    361c:	4c5c      	ldr	r4, [pc, #368]	; (3790 <MPSL_IRQ_CLOCK_Handler+0x350>)
    361e:	f04f 0800 	mov.w	r8, #0
    3622:	4606      	mov	r6, r0
    3624:	f8c4 8018 	str.w	r8, [r4, #24]
    3628:	7843      	ldrb	r3, [r0, #1]
    362a:	7882      	ldrb	r2, [r0, #2]
    362c:	7800      	ldrb	r0, [r0, #0]
    362e:	72e0      	strb	r0, [r4, #11]
    3630:	7163      	strb	r3, [r4, #5]
    3632:	2701      	movs	r7, #1
    3634:	71a2      	strb	r2, [r4, #6]
    3636:	07bd      	lsls	r5, r7, #30
    3638:	f884 8007 	strb.w	r8, [r4, #7]
    363c:	2805      	cmp	r0, #5
    363e:	d224      	bcs.n	368a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3640:	e8df f000 	tbb	[pc, r0]
    3644:	1f05030f 	.word	0x1f05030f
    3648:	0021      	.short	0x0021
    364a:	61a7      	str	r7, [r4, #24]
    364c:	e009      	b.n	3662 <MPSL_IRQ_CLOCK_Handler+0x222>
    364e:	f000 f8c5 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3652:	2101      	movs	r1, #1
    3654:	4628      	mov	r0, r5
    3656:	f008 fc2c 	bl	beb2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    365a:	2800      	cmp	r0, #0
    365c:	d0f9      	beq.n	3652 <MPSL_IRQ_CLOCK_Handler+0x212>
    365e:	2002      	movs	r0, #2
    3660:	61a0      	str	r0, [r4, #24]
    3662:	f008 fc52 	bl	bf0a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3666:	b1b0      	cbz	r0, 3696 <MPSL_IRQ_CLOCK_Handler+0x256>
    3668:	f000 fa0c 	bl	3a84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    366c:	7e21      	ldrb	r1, [r4, #24]
    366e:	f001 0103 	and.w	r1, r1, #3
    3672:	4288      	cmp	r0, r1
    3674:	d10f      	bne.n	3696 <MPSL_IRQ_CLOCK_Handler+0x256>
    3676:	79b0      	ldrb	r0, [r6, #6]
    3678:	b150      	cbz	r0, 3690 <MPSL_IRQ_CLOCK_Handler+0x250>
    367a:	2002      	movs	r0, #2
    367c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3680:	e06a      	b.n	3758 <MPSL_IRQ_CLOCK_Handler+0x318>
    3682:	4844      	ldr	r0, [pc, #272]	; (3794 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3684:	e7ec      	b.n	3660 <MPSL_IRQ_CLOCK_Handler+0x220>
    3686:	4844      	ldr	r0, [pc, #272]	; (3798 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3688:	e7ea      	b.n	3660 <MPSL_IRQ_CLOCK_Handler+0x220>
    368a:	f44f 714c 	mov.w	r1, #816	; 0x330
    368e:	e049      	b.n	3724 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3690:	f000 f9cc 	bl	3a2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3694:	e060      	b.n	3758 <MPSL_IRQ_CLOCK_Handler+0x318>
    3696:	60ef      	str	r7, [r5, #12]
    3698:	f44f 7a82 	mov.w	sl, #260	; 0x104
    369c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    36a0:	69a0      	ldr	r0, [r4, #24]
    36a2:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    36a6:	f008 fc95 	bl	bfd4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    36aa:	b940      	cbnz	r0, 36be <MPSL_IRQ_CLOCK_Handler+0x27e>
    36ac:	f008 fc9c 	bl	bfe8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    36b0:	b928      	cbnz	r0, 36be <MPSL_IRQ_CLOCK_Handler+0x27e>
    36b2:	f008 fcb0 	bl	c016 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    36b6:	b910      	cbnz	r0, 36be <MPSL_IRQ_CLOCK_Handler+0x27e>
    36b8:	f008 fcc1 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    36bc:	b138      	cbz	r0, 36ce <MPSL_IRQ_CLOCK_Handler+0x28e>
    36be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    36c2:	4836      	ldr	r0, [pc, #216]	; (379c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    36c4:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    36c8:	f3c1 3142 	ubfx	r1, r1, #13, #3
    36cc:	6001      	str	r1, [r0, #0]
    36ce:	f008 fc81 	bl	bfd4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    36d2:	b940      	cbnz	r0, 36e6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    36d4:	f008 fc88 	bl	bfe8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    36d8:	b928      	cbnz	r0, 36e6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    36da:	f008 fc9c 	bl	c016 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    36de:	b910      	cbnz	r0, 36e6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    36e0:	f008 fcad 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    36e4:	b110      	cbz	r0, 36ec <MPSL_IRQ_CLOCK_Handler+0x2ac>
    36e6:	482d      	ldr	r0, [pc, #180]	; (379c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    36e8:	3010      	adds	r0, #16
    36ea:	6007      	str	r7, [r0, #0]
    36ec:	60af      	str	r7, [r5, #8]
    36ee:	2002      	movs	r0, #2
    36f0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    36f4:	79b0      	ldrb	r0, [r6, #6]
    36f6:	bb78      	cbnz	r0, 3758 <MPSL_IRQ_CLOCK_Handler+0x318>
    36f8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    36fc:	f010 0f02 	tst.w	r0, #2
    3700:	d00e      	beq.n	3720 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3702:	f8df 909c 	ldr.w	r9, [pc, #156]	; 37a0 <MPSL_IRQ_CLOCK_Handler+0x360>
    3706:	f8d9 1000 	ldr.w	r1, [r9]
    370a:	43c9      	mvns	r1, r1
    370c:	f341 1700 	sbfx	r7, r1, #4, #1
    3710:	f8d9 1000 	ldr.w	r1, [r9]
    3714:	f041 0110 	orr.w	r1, r1, #16
    3718:	f8c9 1000 	str.w	r1, [r9]
    371c:	1c7f      	adds	r7, r7, #1
    371e:	e007      	b.n	3730 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3720:	f240 21f1 	movw	r1, #753	; 0x2f1
    3724:	206d      	movs	r0, #109	; 0x6d
    3726:	f000 f9f7 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    372a:	bf00      	nop
    372c:	f000 fb1a 	bl	3d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3730:	4651      	mov	r1, sl
    3732:	4628      	mov	r0, r5
    3734:	f008 fbb8 	bl	bea8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3738:	2800      	cmp	r0, #0
    373a:	d0f7      	beq.n	372c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    373c:	f000 f976 	bl	3a2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3740:	b92f      	cbnz	r7, 374e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3742:	f8d9 1000 	ldr.w	r1, [r9]
    3746:	f021 0110 	bic.w	r1, r1, #16
    374a:	f8c9 1000 	str.w	r1, [r9]
    374e:	2002      	movs	r0, #2
    3750:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3754:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3758:	79a0      	ldrb	r0, [r4, #6]
    375a:	b170      	cbz	r0, 377a <MPSL_IRQ_CLOCK_Handler+0x33a>
    375c:	7830      	ldrb	r0, [r6, #0]
    375e:	b960      	cbnz	r0, 377a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3760:	f000 f976 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3764:	4606      	mov	r6, r0
    3766:	f000 fa47 	bl	3bf8 <mpsl_temperature_get>
    376a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    376e:	b116      	cbz	r6, 3776 <MPSL_IRQ_CLOCK_Handler+0x336>
    3770:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3774:	e001      	b.n	377a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3776:	e9c4 0204 	strd	r0, r2, [r4, #16]
    377a:	2101      	movs	r1, #1
    377c:	4628      	mov	r0, r5
    377e:	f008 fb98 	bl	beb2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3782:	b108      	cbz	r0, 3788 <MPSL_IRQ_CLOCK_Handler+0x348>
    3784:	f000 f95e 	bl	3a44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3788:	f884 800a 	strb.w	r8, [r4, #10]
    378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3790:	20000024 	.word	0x20000024
    3794:	00020001 	.word	0x00020001
    3798:	00030001 	.word	0x00030001
    379c:	4000053c 	.word	0x4000053c
    37a0:	e000ed10 	.word	0xe000ed10

000037a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    37a4:	b510      	push	{r4, lr}
    37a6:	f3ef 8410 	mrs	r4, PRIMASK
    37aa:	b672      	cpsid	i
    37ac:	480a      	ldr	r0, [pc, #40]	; (37d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    37ae:	7841      	ldrb	r1, [r0, #1]
    37b0:	b129      	cbz	r1, 37be <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    37b2:	7841      	ldrb	r1, [r0, #1]
    37b4:	1e49      	subs	r1, r1, #1
    37b6:	7041      	strb	r1, [r0, #1]
    37b8:	7841      	ldrb	r1, [r0, #1]
    37ba:	b129      	cbz	r1, 37c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    37bc:	e008      	b.n	37d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    37be:	f240 110d 	movw	r1, #269	; 0x10d
    37c2:	206d      	movs	r0, #109	; 0x6d
    37c4:	f000 f9a8 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37c8:	7880      	ldrb	r0, [r0, #2]
    37ca:	b908      	cbnz	r0, 37d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    37cc:	f000 f94e 	bl	3a6c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    37d0:	2c00      	cmp	r4, #0
    37d2:	d100      	bne.n	37d6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    37d4:	b662      	cpsie	i
    37d6:	bd10      	pop	{r4, pc}
    37d8:	20000024 	.word	0x20000024

000037dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    37dc:	b510      	push	{r4, lr}
    37de:	f3ef 8410 	mrs	r4, PRIMASK
    37e2:	b672      	cpsid	i
    37e4:	4806      	ldr	r0, [pc, #24]	; (3800 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    37e6:	7841      	ldrb	r1, [r0, #1]
    37e8:	1c49      	adds	r1, r1, #1
    37ea:	7041      	strb	r1, [r0, #1]
    37ec:	7840      	ldrb	r0, [r0, #1]
    37ee:	2801      	cmp	r0, #1
    37f0:	d101      	bne.n	37f6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    37f2:	f008 fb75 	bl	bee0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    37f6:	2c00      	cmp	r4, #0
    37f8:	d100      	bne.n	37fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    37fa:	b662      	cpsie	i
    37fc:	bd10      	pop	{r4, pc}
    37fe:	0000      	.short	0x0000
    3800:	20000024 	.word	0x20000024

00003804 <mpsl_clock_hfclk_release>:
    3804:	4805      	ldr	r0, [pc, #20]	; (381c <mpsl_clock_hfclk_release+0x18>)
    3806:	b510      	push	{r4, lr}
    3808:	78c1      	ldrb	r1, [r0, #3]
    380a:	b121      	cbz	r1, 3816 <mpsl_clock_hfclk_release+0x12>
    380c:	2100      	movs	r1, #0
    380e:	7101      	strb	r1, [r0, #4]
    3810:	70c1      	strb	r1, [r0, #3]
    3812:	f7ff ffc7 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3816:	2000      	movs	r0, #0
    3818:	bd10      	pop	{r4, pc}
    381a:	0000      	.short	0x0000
    381c:	20000024 	.word	0x20000024

00003820 <mpsl_clock_hfclk_request>:
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	4c0c      	ldr	r4, [pc, #48]	; (3854 <mpsl_clock_hfclk_request+0x34>)
    3824:	78e1      	ldrb	r1, [r4, #3]
    3826:	b961      	cbnz	r1, 3842 <mpsl_clock_hfclk_request+0x22>
    3828:	2501      	movs	r5, #1
    382a:	70e5      	strb	r5, [r4, #3]
    382c:	61e0      	str	r0, [r4, #28]
    382e:	f7ff ffd5 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3832:	f000 f90d 	bl	3a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3836:	b130      	cbz	r0, 3846 <mpsl_clock_hfclk_request+0x26>
    3838:	69e0      	ldr	r0, [r4, #28]
    383a:	b110      	cbz	r0, 3842 <mpsl_clock_hfclk_request+0x22>
    383c:	4780      	blx	r0
    383e:	2000      	movs	r0, #0
    3840:	61e0      	str	r0, [r4, #28]
    3842:	2000      	movs	r0, #0
    3844:	bd70      	pop	{r4, r5, r6, pc}
    3846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    384a:	7125      	strb	r5, [r4, #4]
    384c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3850:	e7f7      	b.n	3842 <mpsl_clock_hfclk_request+0x22>
    3852:	0000      	.short	0x0000
    3854:	20000024 	.word	0x20000024

00003858 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3858:	f3ef 8010 	mrs	r0, PRIMASK
    385c:	b672      	cpsid	i
    385e:	4904      	ldr	r1, [pc, #16]	; (3870 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3860:	788a      	ldrb	r2, [r1, #2]
    3862:	1c52      	adds	r2, r2, #1
    3864:	708a      	strb	r2, [r1, #2]
    3866:	2800      	cmp	r0, #0
    3868:	d100      	bne.n	386c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    386a:	b662      	cpsie	i
    386c:	4770      	bx	lr
    386e:	0000      	.short	0x0000
    3870:	20000024 	.word	0x20000024

00003874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3874:	b510      	push	{r4, lr}
    3876:	f3ef 8410 	mrs	r4, PRIMASK
    387a:	b672      	cpsid	i
    387c:	480a      	ldr	r0, [pc, #40]	; (38a8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    387e:	7881      	ldrb	r1, [r0, #2]
    3880:	b129      	cbz	r1, 388e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3882:	7881      	ldrb	r1, [r0, #2]
    3884:	1e49      	subs	r1, r1, #1
    3886:	7081      	strb	r1, [r0, #2]
    3888:	7841      	ldrb	r1, [r0, #1]
    388a:	b129      	cbz	r1, 3898 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    388c:	e008      	b.n	38a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    388e:	f240 1125 	movw	r1, #293	; 0x125
    3892:	206d      	movs	r0, #109	; 0x6d
    3894:	f000 f940 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3898:	7880      	ldrb	r0, [r0, #2]
    389a:	b908      	cbnz	r0, 38a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    389c:	f000 f8e6 	bl	3a6c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    38a0:	2c00      	cmp	r4, #0
    38a2:	d100      	bne.n	38a6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    38a4:	b662      	cpsie	i
    38a6:	bd10      	pop	{r4, pc}
    38a8:	20000024 	.word	0x20000024

000038ac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    38ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b0:	0004      	movs	r4, r0
    38b2:	f06f 0015 	mvn.w	r0, #21
    38b6:	d03c      	beq.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    38b8:	7821      	ldrb	r1, [r4, #0]
    38ba:	2904      	cmp	r1, #4
    38bc:	d839      	bhi.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    38be:	2900      	cmp	r1, #0
    38c0:	7861      	ldrb	r1, [r4, #1]
    38c2:	d038      	beq.n	3936 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    38c4:	2900      	cmp	r1, #0
    38c6:	d134      	bne.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    38c8:	78a1      	ldrb	r1, [r4, #2]
    38ca:	2900      	cmp	r1, #0
    38cc:	d131      	bne.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    38ce:	2000      	movs	r0, #0
    38d0:	f008 fab5 	bl	be3e <MPSL_IRQ_RADIO_Handler+0x1e>
    38d4:	2000      	movs	r0, #0
    38d6:	f008 faa5 	bl	be24 <MPSL_IRQ_RADIO_Handler+0x4>
    38da:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    38de:	f04f 31ff 	mov.w	r1, #4294967295
    38e2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    38e6:	2600      	movs	r6, #0
    38e8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    38ec:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    38f0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    38f4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    38f8:	4f14      	ldr	r7, [pc, #80]	; (394c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    38fa:	707e      	strb	r6, [r7, #1]
    38fc:	88a0      	ldrh	r0, [r4, #4]
    38fe:	81b8      	strh	r0, [r7, #12]
    3900:	f008 fae5 	bl	bece <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3904:	2501      	movs	r5, #1
    3906:	b108      	cbz	r0, 390c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3908:	70fd      	strb	r5, [r7, #3]
    390a:	707d      	strb	r5, [r7, #1]
    390c:	2101      	movs	r1, #1
    390e:	4640      	mov	r0, r8
    3910:	f008 facf 	bl	beb2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3914:	b108      	cbz	r0, 391a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3916:	f000 f895 	bl	3a44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    391a:	4620      	mov	r0, r4
    391c:	f7ff fe7c 	bl	3618 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3920:	727d      	strb	r5, [r7, #9]
    3922:	2000      	movs	r0, #0
    3924:	f008 fa7e 	bl	be24 <MPSL_IRQ_RADIO_Handler+0x4>
    3928:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    392c:	4630      	mov	r0, r6
    392e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3936:	2900      	cmp	r1, #0
    3938:	d0fb      	beq.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    393a:	2920      	cmp	r1, #32
    393c:	d8f9      	bhi.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    393e:	78a1      	ldrb	r1, [r4, #2]
    3940:	2921      	cmp	r1, #33	; 0x21
    3942:	d8f6      	bhi.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3944:	2901      	cmp	r1, #1
    3946:	d1c2      	bne.n	38ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3948:	e7f3      	b.n	3932 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    394a:	0000      	.short	0x0000
    394c:	20000024 	.word	0x20000024

00003950 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3950:	4801      	ldr	r0, [pc, #4]	; (3958 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3952:	8980      	ldrh	r0, [r0, #12]
    3954:	4770      	bx	lr
    3956:	0000      	.short	0x0000
    3958:	20000024 	.word	0x20000024

0000395c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    395c:	b510      	push	{r4, lr}
    395e:	480d      	ldr	r0, [pc, #52]	; (3994 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3960:	f008 fb16 	bl	bf90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3964:	490b      	ldr	r1, [pc, #44]	; (3994 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3966:	3908      	subs	r1, #8
    3968:	b148      	cbz	r0, 397e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    396a:	2001      	movs	r0, #1
    396c:	7008      	strb	r0, [r1, #0]
    396e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3972:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    397a:	f7ff bf2f 	b.w	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    397e:	7a88      	ldrb	r0, [r1, #10]
    3980:	2802      	cmp	r0, #2
    3982:	d101      	bne.n	3988 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3984:	f7ff fda0 	bl	34c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    398c:	4801      	ldr	r0, [pc, #4]	; (3994 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    398e:	f008 bb16 	b.w	bfbe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3992:	0000      	.short	0x0000
    3994:	2000002c 	.word	0x2000002c

00003998 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3998:	4802      	ldr	r0, [pc, #8]	; (39a4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    399a:	7a80      	ldrb	r0, [r0, #10]
    399c:	2800      	cmp	r0, #0
    399e:	d000      	beq.n	39a2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    39a0:	2001      	movs	r0, #1
    39a2:	4770      	bx	lr
    39a4:	20000024 	.word	0x20000024

000039a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    39a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39aa:	4d1f      	ldr	r5, [pc, #124]	; (3a28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    39ac:	7ae8      	ldrb	r0, [r5, #11]
    39ae:	2800      	cmp	r0, #0
    39b0:	d10f      	bne.n	39d2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    39b2:	7e28      	ldrb	r0, [r5, #24]
    39b4:	f000 0003 	and.w	r0, r0, #3
    39b8:	f008 fa97 	bl	beea <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    39bc:	2800      	cmp	r0, #0
    39be:	d008      	beq.n	39d2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    39c0:	f3ef 8110 	mrs	r1, PRIMASK
    39c4:	b672      	cpsid	i
    39c6:	f7ff ffe7 	bl	3998 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    39ca:	b118      	cbz	r0, 39d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    39cc:	2900      	cmp	r1, #0
    39ce:	d100      	bne.n	39d2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    39d0:	b662      	cpsie	i
    39d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39d4:	2601      	movs	r6, #1
    39d6:	72ae      	strb	r6, [r5, #10]
    39d8:	b901      	cbnz	r1, 39dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    39da:	b662      	cpsie	i
    39dc:	2018      	movs	r0, #24
    39de:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    39e2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    39e6:	61a6      	str	r6, [r4, #24]
    39e8:	f44f 7020 	mov.w	r0, #640	; 0x280
    39ec:	f8ad 0000 	strh.w	r0, [sp]
    39f0:	f8bd 0000 	ldrh.w	r0, [sp]
    39f4:	1e41      	subs	r1, r0, #1
    39f6:	f8ad 1000 	strh.w	r1, [sp]
    39fa:	d2f9      	bcs.n	39f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    39fc:	2700      	movs	r7, #0
    39fe:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3a02:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3a06:	4808      	ldr	r0, [pc, #32]	; (3a28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3a08:	3008      	adds	r0, #8
    3a0a:	f008 fad4 	bl	bfb6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3a0e:	702f      	strb	r7, [r5, #0]
    3a10:	f7ff fd5a 	bl	34c8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3a14:	6166      	str	r6, [r4, #20]
    3a16:	7968      	ldrb	r0, [r5, #5]
    3a18:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3a1c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3a20:	2018      	movs	r0, #24
    3a22:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a28:	20000024 	.word	0x20000024

00003a2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3a2c:	b510      	push	{r4, lr}
    3a2e:	4c04      	ldr	r4, [pc, #16]	; (3a40 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3a30:	7e20      	ldrb	r0, [r4, #24]
    3a32:	f000 0003 	and.w	r0, r0, #3
    3a36:	f008 fa58 	bl	beea <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d0f8      	beq.n	3a30 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3a3e:	bd10      	pop	{r4, pc}
    3a40:	20000024 	.word	0x20000024

00003a44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3a44:	4901      	ldr	r1, [pc, #4]	; (3a4c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3a46:	2001      	movs	r0, #1
    3a48:	7008      	strb	r0, [r1, #0]
    3a4a:	4770      	bx	lr
    3a4c:	2000027c 	.word	0x2000027c

00003a50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3a50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3a54:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3a58:	b918      	cbnz	r0, 3a62 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3a5a:	4803      	ldr	r0, [pc, #12]	; (3a68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3a5c:	7800      	ldrb	r0, [r0, #0]
    3a5e:	2800      	cmp	r0, #0
    3a60:	d000      	beq.n	3a64 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3a62:	2001      	movs	r0, #1
    3a64:	4770      	bx	lr
    3a66:	0000      	.short	0x0000
    3a68:	2000027c 	.word	0x2000027c

00003a6c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3a6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3a70:	2101      	movs	r1, #1
    3a72:	6041      	str	r1, [r0, #4]
    3a74:	2100      	movs	r1, #0
    3a76:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3a7a:	4801      	ldr	r0, [pc, #4]	; (3a80 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3a7c:	7001      	strb	r1, [r0, #0]
    3a7e:	4770      	bx	lr
    3a80:	2000027c 	.word	0x2000027c

00003a84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3a84:	4802      	ldr	r0, [pc, #8]	; (3a90 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3a86:	6800      	ldr	r0, [r0, #0]
    3a88:	f000 0003 	and.w	r0, r0, #3
    3a8c:	4770      	bx	lr
    3a8e:	0000      	.short	0x0000
    3a90:	4000041c 	.word	0x4000041c
    3a94:	b510      	push	{r4, lr}
    3a96:	b131      	cbz	r1, 3aa6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3a98:	2901      	cmp	r1, #1
    3a9a:	d007      	beq.n	3aac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3a9c:	f44f 7142 	mov.w	r1, #776	; 0x308
    3aa0:	a005      	add	r0, pc, #20	; (adr r0, 3ab8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3aa2:	f000 f80f 	bl	3ac4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3aa6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3aaa:	e001      	b.n	3ab0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3aac:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3ab0:	f000 0001 	and.w	r0, r0, #1
    3ab4:	bd10      	pop	{r4, pc}
    3ab6:	0000      	.short	0x0000
    3ab8:	5f66726e 	.word	0x5f66726e
    3abc:	636f6c63 	.word	0x636f6c63
    3ac0:	00682e6b 	.word	0x00682e6b

00003ac4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3ac4:	4a02      	ldr	r2, [pc, #8]	; (3ad0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3ac6:	6852      	ldr	r2, [r2, #4]
    3ac8:	b102      	cbz	r2, 3acc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3aca:	4710      	bx	r2
    3acc:	e7fe      	b.n	3acc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3ace:	0000      	.short	0x0000
    3ad0:	20000044 	.word	0x20000044
    3ad4:	4806      	ldr	r0, [pc, #24]	; (3af0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3ad6:	b510      	push	{r4, lr}
    3ad8:	2100      	movs	r1, #0
    3ada:	6001      	str	r1, [r0, #0]
    3adc:	2101      	movs	r1, #1
    3ade:	6001      	str	r1, [r0, #0]
    3ae0:	4608      	mov	r0, r1
    3ae2:	f008 fa29 	bl	bf38 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3aea:	2001      	movs	r0, #1
    3aec:	f008 ba17 	b.w	bf1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3af0:	40001ffc 	.word	0x40001ffc
    3af4:	4807      	ldr	r0, [pc, #28]	; (3b14 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    3af6:	b510      	push	{r4, lr}
    3af8:	2101      	movs	r1, #1
    3afa:	6041      	str	r1, [r0, #4]
    3afc:	1e89      	subs	r1, r1, #2
    3afe:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3b02:	200c      	movs	r0, #12
    3b04:	f008 fa18 	bl	bf38 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b0c:	200c      	movs	r0, #12
    3b0e:	f008 ba06 	b.w	bf1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3b12:	0000      	.short	0x0000
    3b14:	4000c000 	.word	0x4000c000

00003b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3b18:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3b1a:	4a10      	ldr	r2, [pc, #64]	; (3b5c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3b1c:	6855      	ldr	r5, [r2, #4]
    3b1e:	b1e5      	cbz	r5, 3b5a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3b20:	2200      	movs	r2, #0
    3b22:	4603      	mov	r3, r0
    3b24:	466e      	mov	r6, sp
    3b26:	240a      	movs	r4, #10
    3b28:	e003      	b.n	3b32 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    3b2a:	fbb0 f0f4 	udiv	r0, r0, r4
    3b2e:	1c52      	adds	r2, r2, #1
    3b30:	b2d2      	uxtb	r2, r2
    3b32:	2800      	cmp	r0, #0
    3b34:	d1f9      	bne.n	3b2a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    3b36:	54b0      	strb	r0, [r6, r2]
    3b38:	e00a      	b.n	3b50 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3b3a:	bf00      	nop
    3b3c:	fbb3 f0f4 	udiv	r0, r3, r4
    3b40:	fb04 3010 	mls	r0, r4, r0, r3
    3b44:	fbb3 f3f4 	udiv	r3, r3, r4
    3b48:	1e52      	subs	r2, r2, #1
    3b4a:	b2d2      	uxtb	r2, r2
    3b4c:	3030      	adds	r0, #48	; 0x30
    3b4e:	54b0      	strb	r0, [r6, r2]
    3b50:	2a00      	cmp	r2, #0
    3b52:	d1f3      	bne.n	3b3c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3b54:	4630      	mov	r0, r6
    3b56:	47a8      	blx	r5
    3b58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b5a:	e7fe      	b.n	3b5a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3b5c:	20000044 	.word	0x20000044

00003b60 <mpsl_init>:
    3b60:	b570      	push	{r4, r5, r6, lr}
    3b62:	4c17      	ldr	r4, [pc, #92]	; (3bc0 <mpsl_init+0x60>)
    3b64:	4606      	mov	r6, r0
    3b66:	460d      	mov	r5, r1
    3b68:	7860      	ldrb	r0, [r4, #1]
    3b6a:	b110      	cbz	r0, 3b72 <mpsl_init+0x12>
    3b6c:	f04f 30ff 	mov.w	r0, #4294967295
    3b70:	bd70      	pop	{r4, r5, r6, pc}
    3b72:	b906      	cbnz	r6, 3b76 <mpsl_init+0x16>
    3b74:	4e13      	ldr	r6, [pc, #76]	; (3bc4 <mpsl_init+0x64>)
    3b76:	6062      	str	r2, [r4, #4]
    3b78:	7025      	strb	r5, [r4, #0]
    3b7a:	f7ff ffab 	bl	3ad4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    3b7e:	f7ff ffb9 	bl	3af4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3b82:	4630      	mov	r0, r6
    3b84:	f7ff fe92 	bl	38ac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3b88:	0006      	movs	r6, r0
    3b8a:	d1f1      	bne.n	3b70 <mpsl_init+0x10>
    3b8c:	f7fe ff68 	bl	2a60 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3b90:	f7ff ff0a 	bl	39a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3b94:	f008 f91d 	bl	bdd2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3b98:	4628      	mov	r0, r5
    3b9a:	f008 f9c0 	bl	bf1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3b9e:	2001      	movs	r0, #1
    3ba0:	2d00      	cmp	r5, #0
    3ba2:	db09      	blt.n	3bb8 <mpsl_init+0x58>
    3ba4:	f005 011f 	and.w	r1, r5, #31
    3ba8:	fa00 f101 	lsl.w	r1, r0, r1
    3bac:	096a      	lsrs	r2, r5, #5
    3bae:	0092      	lsls	r2, r2, #2
    3bb0:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3bb4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3bb8:	7060      	strb	r0, [r4, #1]
    3bba:	4630      	mov	r0, r6
    3bbc:	bd70      	pop	{r4, r5, r6, pc}
    3bbe:	0000      	.short	0x0000
    3bc0:	20000044 	.word	0x20000044
    3bc4:	0000bf5a 	.word	0x0000bf5a

00003bc8 <mpsl_is_initialized>:
    3bc8:	4801      	ldr	r0, [pc, #4]	; (3bd0 <mpsl_is_initialized+0x8>)
    3bca:	7840      	ldrb	r0, [r0, #1]
    3bcc:	4770      	bx	lr
    3bce:	0000      	.short	0x0000
    3bd0:	20000044 	.word	0x20000044

00003bd4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3bd4:	4807      	ldr	r0, [pc, #28]	; (3bf4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3bd6:	f990 0000 	ldrsb.w	r0, [r0]
    3bda:	2800      	cmp	r0, #0
    3bdc:	db09      	blt.n	3bf2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3bde:	f000 021f 	and.w	r2, r0, #31
    3be2:	2101      	movs	r1, #1
    3be4:	4091      	lsls	r1, r2
    3be6:	0940      	lsrs	r0, r0, #5
    3be8:	0080      	lsls	r0, r0, #2
    3bea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3bee:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3bf2:	4770      	bx	lr
    3bf4:	20000044 	.word	0x20000044

00003bf8 <mpsl_temperature_get>:
    3bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bfc:	2601      	movs	r6, #1
    3bfe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3c02:	0331      	lsls	r1, r6, #12
    3c04:	f04f 0800 	mov.w	r8, #0
    3c08:	4640      	mov	r0, r8
    3c0a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3c0e:	f3bf 8f4f 	dsb	sy
    3c12:	f3bf 8f6f 	isb	sy
    3c16:	4c16      	ldr	r4, [pc, #88]	; (3c70 <mpsl_temperature_get+0x78>)
    3c18:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3c1c:	200c      	movs	r0, #12
    3c1e:	f008 f9aa 	bl	bf76 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3c22:	4d14      	ldr	r5, [pc, #80]	; (3c74 <mpsl_temperature_get+0x7c>)
    3c24:	6828      	ldr	r0, [r5, #0]
    3c26:	43c0      	mvns	r0, r0
    3c28:	f340 1700 	sbfx	r7, r0, #4, #1
    3c2c:	6828      	ldr	r0, [r5, #0]
    3c2e:	f040 0010 	orr.w	r0, r0, #16
    3c32:	6028      	str	r0, [r5, #0]
    3c34:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3c38:	6026      	str	r6, [r4, #0]
    3c3a:	1c7f      	adds	r7, r7, #1
    3c3c:	e002      	b.n	3c44 <mpsl_temperature_get+0x4c>
    3c3e:	bf00      	nop
    3c40:	f000 f890 	bl	3d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3c44:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3c48:	2800      	cmp	r0, #0
    3c4a:	d0f9      	beq.n	3c40 <mpsl_temperature_get+0x48>
    3c4c:	b91f      	cbnz	r7, 3c56 <mpsl_temperature_get+0x5e>
    3c4e:	6828      	ldr	r0, [r5, #0]
    3c50:	f020 0010 	bic.w	r0, r0, #16
    3c54:	6028      	str	r0, [r5, #0]
    3c56:	4808      	ldr	r0, [pc, #32]	; (3c78 <mpsl_temperature_get+0x80>)
    3c58:	6805      	ldr	r5, [r0, #0]
    3c5a:	6066      	str	r6, [r4, #4]
    3c5c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3c60:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3c64:	200c      	movs	r0, #12
    3c66:	f008 f986 	bl	bf76 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3c6a:	4628      	mov	r0, r5
    3c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c70:	4000c000 	.word	0x4000c000
    3c74:	e000ed10 	.word	0xe000ed10
    3c78:	4000c508 	.word	0x4000c508

00003c7c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3c7c:	b510      	push	{r4, lr}
    3c7e:	4602      	mov	r2, r0
    3c80:	2005      	movs	r0, #5
    3c82:	490c      	ldr	r1, [pc, #48]	; (3cb4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3c84:	e004      	b.n	3c90 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3c86:	bf00      	nop
    3c88:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3c8c:	791b      	ldrb	r3, [r3, #4]
    3c8e:	b133      	cbz	r3, 3c9e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3c90:	1e40      	subs	r0, r0, #1
    3c92:	b2c0      	uxtb	r0, r0
    3c94:	d2f8      	bcs.n	3c88 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3c96:	214b      	movs	r1, #75	; 0x4b
    3c98:	2069      	movs	r0, #105	; 0x69
    3c9a:	f7ff ff3d 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c9e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3ca2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3ca6:	2200      	movs	r2, #0
    3ca8:	714a      	strb	r2, [r1, #5]
    3caa:	718a      	strb	r2, [r1, #6]
    3cac:	2201      	movs	r2, #1
    3cae:	710a      	strb	r2, [r1, #4]
    3cb0:	bd10      	pop	{r4, pc}
    3cb2:	0000      	.short	0x0000
    3cb4:	20000e00 	.word	0x20000e00

00003cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3cb8:	b510      	push	{r4, lr}
    3cba:	2805      	cmp	r0, #5
    3cbc:	d301      	bcc.n	3cc2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3cbe:	215a      	movs	r1, #90	; 0x5a
    3cc0:	e006      	b.n	3cd0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3cc2:	490a      	ldr	r1, [pc, #40]	; (3cec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3cc4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3cc8:	7901      	ldrb	r1, [r0, #4]
    3cca:	2901      	cmp	r1, #1
    3ccc:	d003      	beq.n	3cd6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3cce:	215b      	movs	r1, #91	; 0x5b
    3cd0:	2069      	movs	r0, #105	; 0x69
    3cd2:	f7ff ff21 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cd6:	7941      	ldrb	r1, [r0, #5]
    3cd8:	7982      	ldrb	r2, [r0, #6]
    3cda:	1c49      	adds	r1, r1, #1
    3cdc:	b2c9      	uxtb	r1, r1
    3cde:	428a      	cmp	r2, r1
    3ce0:	d000      	beq.n	3ce4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3ce2:	7141      	strb	r1, [r0, #5]
    3ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ce8:	f7ff bf74 	b.w	3bd4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3cec:	20000e00 	.word	0x20000e00

00003cf0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3cf0:	b570      	push	{r4, r5, r6, lr}
    3cf2:	2505      	movs	r5, #5
    3cf4:	4e0e      	ldr	r6, [pc, #56]	; (3d30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3cf6:	4c0f      	ldr	r4, [pc, #60]	; (3d34 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3cf8:	e016      	b.n	3d28 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3cfa:	7821      	ldrb	r1, [r4, #0]
    3cfc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3d00:	7902      	ldrb	r2, [r0, #4]
    3d02:	2a01      	cmp	r2, #1
    3d04:	d108      	bne.n	3d18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3d06:	7942      	ldrb	r2, [r0, #5]
    3d08:	7983      	ldrb	r3, [r0, #6]
    3d0a:	429a      	cmp	r2, r3
    3d0c:	d004      	beq.n	3d18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3d0e:	7942      	ldrb	r2, [r0, #5]
    3d10:	7182      	strb	r2, [r0, #6]
    3d12:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3d16:	4780      	blx	r0
    3d18:	7820      	ldrb	r0, [r4, #0]
    3d1a:	1c40      	adds	r0, r0, #1
    3d1c:	b2c0      	uxtb	r0, r0
    3d1e:	7020      	strb	r0, [r4, #0]
    3d20:	2805      	cmp	r0, #5
    3d22:	d301      	bcc.n	3d28 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3d24:	2000      	movs	r0, #0
    3d26:	7020      	strb	r0, [r4, #0]
    3d28:	1e6d      	subs	r5, r5, #1
    3d2a:	b2ed      	uxtb	r5, r5
    3d2c:	d2e5      	bcs.n	3cfa <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3d2e:	bd70      	pop	{r4, r5, r6, pc}
    3d30:	20000e00 	.word	0x20000e00
    3d34:	2000027d 	.word	0x2000027d

00003d38 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3d38:	b500      	push	{lr}
    3d3a:	f008 f94b 	bl	bfd4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d3e:	b940      	cbnz	r0, 3d52 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3d40:	f008 f952 	bl	bfe8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d44:	b928      	cbnz	r0, 3d52 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3d46:	f008 f966 	bl	c016 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3d4a:	b910      	cbnz	r0, 3d52 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3d4c:	f008 f977 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d50:	b108      	cbz	r0, 3d56 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3d52:	4802      	ldr	r0, [pc, #8]	; (3d5c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3d54:	bd00      	pop	{pc}
    3d56:	4802      	ldr	r0, [pc, #8]	; (3d60 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3d58:	bd00      	pop	{pc}
    3d5a:	0000      	.short	0x0000
    3d5c:	4000050c 	.word	0x4000050c
    3d60:	4001e700 	.word	0x4001e700

00003d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3d64:	b510      	push	{r4, lr}
    3d66:	f008 f96a 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d6a:	b330      	cbz	r0, 3dba <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3d6c:	f3ef 8010 	mrs	r0, PRIMASK
    3d70:	b1c8      	cbz	r0, 3da6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3d72:	2100      	movs	r1, #0
    3d74:	b672      	cpsid	i
    3d76:	4812      	ldr	r0, [pc, #72]	; (3dc0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3d78:	6802      	ldr	r2, [r0, #0]
    3d7a:	6803      	ldr	r3, [r0, #0]
    3d7c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3d80:	f043 0310 	orr.w	r3, r3, #16
    3d84:	6003      	str	r3, [r0, #0]
    3d86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d8a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3d8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3d92:	431c      	orrs	r4, r3
    3d94:	d000      	beq.n	3d98 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3d96:	bf40      	sev
    3d98:	bf20      	wfe
    3d9a:	bf00      	nop
    3d9c:	bf00      	nop
    3d9e:	bf00      	nop
    3da0:	bf00      	nop
    3da2:	b112      	cbz	r2, 3daa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3da4:	e005      	b.n	3db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3da6:	2101      	movs	r1, #1
    3da8:	e7e4      	b.n	3d74 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3daa:	6802      	ldr	r2, [r0, #0]
    3dac:	f022 0210 	bic.w	r2, r2, #16
    3db0:	6002      	str	r2, [r0, #0]
    3db2:	2900      	cmp	r1, #0
    3db4:	d000      	beq.n	3db8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3db6:	b662      	cpsie	i
    3db8:	bd10      	pop	{r4, pc}
    3dba:	bf20      	wfe
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	0000      	.short	0x0000
    3dc0:	e000ed10 	.word	0xe000ed10

00003dc4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3dc4:	0000c2c7 0000c2b5 0000c2c1 0000c2af     ................
    3dd4:	0000c2ad 0000c2ab 0000c2cd 0000c2bb     ................
    3de4:	0000c2a5 0000c29d 0000c2a1 0000c297     ................

00003df4 <mpsl_fem_lna_configuration_clear>:
    3df4:	4801      	ldr	r0, [pc, #4]	; (3dfc <mpsl_fem_lna_configuration_clear+0x8>)
    3df6:	6800      	ldr	r0, [r0, #0]
    3df8:	68c0      	ldr	r0, [r0, #12]
    3dfa:	4700      	bx	r0
    3dfc:	2000004c 	.word	0x2000004c

00003e00 <mpsl_fem_lna_configuration_set>:
    3e00:	4a01      	ldr	r2, [pc, #4]	; (3e08 <mpsl_fem_lna_configuration_set+0x8>)
    3e02:	6812      	ldr	r2, [r2, #0]
    3e04:	6852      	ldr	r2, [r2, #4]
    3e06:	4710      	bx	r2
    3e08:	2000004c 	.word	0x2000004c

00003e0c <mpsl_fem_pa_configuration_clear>:
    3e0c:	4801      	ldr	r0, [pc, #4]	; (3e14 <mpsl_fem_pa_configuration_clear+0x8>)
    3e0e:	6800      	ldr	r0, [r0, #0]
    3e10:	6880      	ldr	r0, [r0, #8]
    3e12:	4700      	bx	r0
    3e14:	2000004c 	.word	0x2000004c

00003e18 <mpsl_fem_pa_configuration_set>:
    3e18:	4a01      	ldr	r2, [pc, #4]	; (3e20 <mpsl_fem_pa_configuration_set+0x8>)
    3e1a:	6812      	ldr	r2, [r2, #0]
    3e1c:	6812      	ldr	r2, [r2, #0]
    3e1e:	4710      	bx	r2
    3e20:	2000004c 	.word	0x2000004c
    3e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3e26:	4c17      	ldr	r4, [pc, #92]	; (3e84 <mpsl_fem_pa_configuration_set+0x6c>)
    3e28:	7960      	ldrb	r0, [r4, #5]
    3e2a:	2803      	cmp	r0, #3
    3e2c:	d200      	bcs.n	3e30 <mpsl_fem_pa_configuration_set+0x18>
    3e2e:	2003      	movs	r0, #3
    3e30:	f88d 0001 	strb.w	r0, [sp, #1]
    3e34:	7920      	ldrb	r0, [r4, #4]
    3e36:	2803      	cmp	r0, #3
    3e38:	d200      	bcs.n	3e3c <mpsl_fem_pa_configuration_set+0x24>
    3e3a:	2003      	movs	r0, #3
    3e3c:	f88d 0000 	strb.w	r0, [sp]
    3e40:	78e0      	ldrb	r0, [r4, #3]
    3e42:	f8ad 0004 	strh.w	r0, [sp, #4]
    3e46:	78a0      	ldrb	r0, [r4, #2]
    3e48:	f8ad 0002 	strh.w	r0, [sp, #2]
    3e4c:	4668      	mov	r0, sp
    3e4e:	f006 fb85 	bl	a55c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3e52:	b108      	cbz	r0, 3e58 <mpsl_fem_pa_configuration_set+0x40>
    3e54:	219c      	movs	r1, #156	; 0x9c
    3e56:	e010      	b.n	3e7a <mpsl_fem_pa_configuration_set+0x62>
    3e58:	68a0      	ldr	r0, [r4, #8]
    3e5a:	9002      	str	r0, [sp, #8]
    3e5c:	a802      	add	r0, sp, #8
    3e5e:	f006 fb93 	bl	a588 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3e62:	b108      	cbz	r0, 3e68 <mpsl_fem_pa_configuration_set+0x50>
    3e64:	21a0      	movs	r1, #160	; 0xa0
    3e66:	e008      	b.n	3e7a <mpsl_fem_pa_configuration_set+0x62>
    3e68:	4807      	ldr	r0, [pc, #28]	; (3e88 <mpsl_fem_pa_configuration_set+0x70>)
    3e6a:	6800      	ldr	r0, [r0, #0]
    3e6c:	9003      	str	r0, [sp, #12]
    3e6e:	a803      	add	r0, sp, #12
    3e70:	f00a fd29 	bl	e8c6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3e74:	2800      	cmp	r0, #0
    3e76:	d003      	beq.n	3e80 <mpsl_fem_pa_configuration_set+0x68>
    3e78:	21a4      	movs	r1, #164	; 0xa4
    3e7a:	2003      	movs	r0, #3
    3e7c:	f000 f8b4 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e80:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3e82:	0000      	.short	0x0000
    3e84:	20000058 	.word	0x20000058
    3e88:	000040c0 	.word	0x000040c0

00003e8c <sdc_build_revision_get>:
    3e8c:	b510      	push	{r4, lr}
    3e8e:	b128      	cbz	r0, 3e9c <sdc_build_revision_get+0x10>
    3e90:	2214      	movs	r2, #20
    3e92:	4904      	ldr	r1, [pc, #16]	; (3ea4 <sdc_build_revision_get+0x18>)
    3e94:	f008 f925 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e98:	2000      	movs	r0, #0
    3e9a:	bd10      	pop	{r4, pc}
    3e9c:	f06f 0015 	mvn.w	r0, #21
    3ea0:	bd10      	pop	{r4, pc}
    3ea2:	0000      	.short	0x0000
    3ea4:	000040f2 	.word	0x000040f2

00003ea8 <sdc_cfg_set>:
    3ea8:	b510      	push	{r4, lr}
    3eaa:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3eae:	bb28      	cbnz	r0, 3efc <sdc_cfg_set+0x54>
    3eb0:	b1d9      	cbz	r1, 3eea <sdc_cfg_set+0x42>
    3eb2:	b13a      	cbz	r2, 3ec4 <sdc_cfg_set+0x1c>
    3eb4:	4b12      	ldr	r3, [pc, #72]	; (3f00 <sdc_cfg_set+0x58>)
    3eb6:	2906      	cmp	r1, #6
    3eb8:	d220      	bcs.n	3efc <sdc_cfg_set+0x54>
    3eba:	e8df f001 	tbb	[pc, r1]
    3ebe:	061f      	.short	0x061f
    3ec0:	13100c09 	.word	0x13100c09
    3ec4:	f06f 0015 	mvn.w	r0, #21
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	7810      	ldrb	r0, [r2, #0]
    3ecc:	7218      	strb	r0, [r3, #8]
    3ece:	e00c      	b.n	3eea <sdc_cfg_set+0x42>
    3ed0:	7810      	ldrb	r0, [r2, #0]
    3ed2:	7258      	strb	r0, [r3, #9]
    3ed4:	e009      	b.n	3eea <sdc_cfg_set+0x42>
    3ed6:	6810      	ldr	r0, [r2, #0]
    3ed8:	f8c3 000a 	str.w	r0, [r3, #10]
    3edc:	e005      	b.n	3eea <sdc_cfg_set+0x42>
    3ede:	6810      	ldr	r0, [r2, #0]
    3ee0:	6118      	str	r0, [r3, #16]
    3ee2:	e002      	b.n	3eea <sdc_cfg_set+0x42>
    3ee4:	7810      	ldrb	r0, [r2, #0]
    3ee6:	2801      	cmp	r0, #1
    3ee8:	d808      	bhi.n	3efc <sdc_cfg_set+0x54>
    3eea:	4905      	ldr	r1, [pc, #20]	; (3f00 <sdc_cfg_set+0x58>)
    3eec:	2201      	movs	r2, #1
    3eee:	3108      	adds	r1, #8
    3ef0:	2000      	movs	r0, #0
    3ef2:	f008 f9ed 	bl	c2d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3ef6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3efa:	dbe5      	blt.n	3ec8 <sdc_cfg_set+0x20>
    3efc:	4620      	mov	r0, r4
    3efe:	bd10      	pop	{r4, pc}
    3f00:	20000050 	.word	0x20000050

00003f04 <sdc_enable>:
    3f04:	b538      	push	{r3, r4, r5, lr}
    3f06:	460d      	mov	r5, r1
    3f08:	0004      	movs	r4, r0
    3f0a:	d01e      	beq.n	3f4a <sdc_enable+0x46>
    3f0c:	b1ed      	cbz	r5, 3f4a <sdc_enable+0x46>
    3f0e:	f000 f925 	bl	415c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3f12:	b1e8      	cbz	r0, 3f50 <sdc_enable+0x4c>
    3f14:	4620      	mov	r0, r4
    3f16:	f7ff feb1 	bl	3c7c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3f1a:	4c0f      	ldr	r4, [pc, #60]	; (3f58 <sdc_enable+0x54>)
    3f1c:	2200      	movs	r2, #0
    3f1e:	f104 0108 	add.w	r1, r4, #8
    3f22:	7020      	strb	r0, [r4, #0]
    3f24:	4628      	mov	r0, r5
    3f26:	f008 f9d3 	bl	c2d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3f2a:	f00b f810 	bl	ef4e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3f2e:	2100      	movs	r1, #0
    3f30:	7820      	ldrb	r0, [r4, #0]
    3f32:	f006 fdc7 	bl	aac4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3f36:	7860      	ldrb	r0, [r4, #1]
    3f38:	f88d 0000 	strb.w	r0, [sp]
    3f3c:	4668      	mov	r0, sp
    3f3e:	f00a fcb6 	bl	e8ae <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3f42:	2001      	movs	r0, #1
    3f44:	70a0      	strb	r0, [r4, #2]
    3f46:	2000      	movs	r0, #0
    3f48:	bd38      	pop	{r3, r4, r5, pc}
    3f4a:	f06f 0015 	mvn.w	r0, #21
    3f4e:	bd38      	pop	{r3, r4, r5, pc}
    3f50:	f04f 30ff 	mov.w	r0, #4294967295
    3f54:	bd38      	pop	{r3, r4, r5, pc}
    3f56:	0000      	.short	0x0000
    3f58:	20000050 	.word	0x20000050

00003f5c <sdc_init>:
    3f5c:	b570      	push	{r4, r5, r6, lr}
    3f5e:	0004      	movs	r4, r0
    3f60:	d00b      	beq.n	3f7a <sdc_init+0x1e>
    3f62:	f7ff fe31 	bl	3bc8 <mpsl_is_initialized>
    3f66:	f04f 35ff 	mov.w	r5, #4294967295
    3f6a:	b120      	cbz	r0, 3f76 <sdc_init+0x1a>
    3f6c:	f7ff fcf0 	bl	3950 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3f70:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3f74:	d904      	bls.n	3f80 <sdc_init+0x24>
    3f76:	4628      	mov	r0, r5
    3f78:	bd70      	pop	{r4, r5, r6, pc}
    3f7a:	f06f 0015 	mvn.w	r0, #21
    3f7e:	bd70      	pop	{r4, r5, r6, pc}
    3f80:	2200      	movs	r2, #0
    3f82:	4b14      	ldr	r3, [pc, #80]	; (3fd4 <sdc_init+0x78>)
    3f84:	4611      	mov	r1, r2
    3f86:	bf00      	nop
    3f88:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3f8c:	4285      	cmp	r5, r0
    3f8e:	d303      	bcc.n	3f98 <sdc_init+0x3c>
    3f90:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3f94:	7882      	ldrb	r2, [r0, #2]
    3f96:	e003      	b.n	3fa0 <sdc_init+0x44>
    3f98:	1c49      	adds	r1, r1, #1
    3f9a:	b2c9      	uxtb	r1, r1
    3f9c:	290c      	cmp	r1, #12
    3f9e:	d3f3      	bcc.n	3f88 <sdc_init+0x2c>
    3fa0:	480d      	ldr	r0, [pc, #52]	; (3fd8 <sdc_init+0x7c>)
    3fa2:	7042      	strb	r2, [r0, #1]
    3fa4:	6044      	str	r4, [r0, #4]
    3fa6:	480d      	ldr	r0, [pc, #52]	; (3fdc <sdc_init+0x80>)
    3fa8:	f000 f9f0 	bl	438c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3fac:	f3ef 8410 	mrs	r4, PRIMASK
    3fb0:	b672      	cpsid	i
    3fb2:	480b      	ldr	r0, [pc, #44]	; (3fe0 <sdc_init+0x84>)
    3fb4:	f06f 010c 	mvn.w	r1, #12
    3fb8:	f000 fcd6 	bl	4968 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3fbc:	4809      	ldr	r0, [pc, #36]	; (3fe4 <sdc_init+0x88>)
    3fbe:	f000 fd97 	bl	4af0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3fc2:	b118      	cbz	r0, 3fcc <sdc_init+0x70>
    3fc4:	21b2      	movs	r1, #178	; 0xb2
    3fc6:	2003      	movs	r0, #3
    3fc8:	f000 f80e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fcc:	b904      	cbnz	r4, 3fd0 <sdc_init+0x74>
    3fce:	b662      	cpsie	i
    3fd0:	2000      	movs	r0, #0
    3fd2:	bd70      	pop	{r4, r5, r6, pc}
    3fd4:	000040c2 	.word	0x000040c2
    3fd8:	20000050 	.word	0x20000050
    3fdc:	00003e25 	.word	0x00003e25
    3fe0:	4000c000 	.word	0x4000c000
    3fe4:	00004189 	.word	0x00004189

00003fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3fe8:	b50e      	push	{r1, r2, r3, lr}
    3fea:	b672      	cpsid	i
    3fec:	4a15      	ldr	r2, [pc, #84]	; (4044 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3fee:	6855      	ldr	r5, [r2, #4]
    3ff0:	b1d5      	cbz	r5, 4028 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3ff2:	2200      	movs	r2, #0
    3ff4:	4603      	mov	r3, r0
    3ff6:	466e      	mov	r6, sp
    3ff8:	240a      	movs	r4, #10
    3ffa:	e003      	b.n	4004 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3ffc:	fbb0 f0f4 	udiv	r0, r0, r4
    4000:	1c52      	adds	r2, r2, #1
    4002:	b2d2      	uxtb	r2, r2
    4004:	2800      	cmp	r0, #0
    4006:	d1f9      	bne.n	3ffc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4008:	54b0      	strb	r0, [r6, r2]
    400a:	e009      	b.n	4020 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    400c:	fbb3 f0f4 	udiv	r0, r3, r4
    4010:	fb04 3010 	mls	r0, r4, r0, r3
    4014:	fbb3 f3f4 	udiv	r3, r3, r4
    4018:	1e52      	subs	r2, r2, #1
    401a:	b2d2      	uxtb	r2, r2
    401c:	3030      	adds	r0, #48	; 0x30
    401e:	54b0      	strb	r0, [r6, r2]
    4020:	2a00      	cmp	r2, #0
    4022:	d1f3      	bne.n	400c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4024:	4630      	mov	r0, r6
    4026:	47a8      	blx	r5
    4028:	f3bf 8f4f 	dsb	sy
    402c:	4806      	ldr	r0, [pc, #24]	; (4048 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    402e:	6801      	ldr	r1, [r0, #0]
    4030:	4a06      	ldr	r2, [pc, #24]	; (404c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4032:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4036:	4311      	orrs	r1, r2
    4038:	6001      	str	r1, [r0, #0]
    403a:	f3bf 8f4f 	dsb	sy
    403e:	bf00      	nop
    4040:	e7fd      	b.n	403e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4042:	0000      	.short	0x0000
    4044:	20000050 	.word	0x20000050
    4048:	e000ed0c 	.word	0xe000ed0c
    404c:	05fa0004 	.word	0x05fa0004

00004050 <sdc_support_adv>:
    4050:	4805      	ldr	r0, [pc, #20]	; (4068 <sdc_support_adv+0x18>)
    4052:	b510      	push	{r4, lr}
    4054:	7880      	ldrb	r0, [r0, #2]
    4056:	b110      	cbz	r0, 405e <sdc_support_adv+0xe>
    4058:	f04f 30ff 	mov.w	r0, #4294967295
    405c:	bd10      	pop	{r4, pc}
    405e:	f006 fd51 	bl	ab04 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4062:	2000      	movs	r0, #0
    4064:	bd10      	pop	{r4, pc}
    4066:	0000      	.short	0x0000
    4068:	20000050 	.word	0x20000050

0000406c <sdc_support_dle>:
    406c:	4805      	ldr	r0, [pc, #20]	; (4084 <sdc_support_dle+0x18>)
    406e:	b510      	push	{r4, lr}
    4070:	7880      	ldrb	r0, [r0, #2]
    4072:	b110      	cbz	r0, 407a <sdc_support_dle+0xe>
    4074:	f04f 30ff 	mov.w	r0, #4294967295
    4078:	bd10      	pop	{r4, pc}
    407a:	f006 fa9d 	bl	a5b8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    407e:	2000      	movs	r0, #0
    4080:	bd10      	pop	{r4, pc}
    4082:	0000      	.short	0x0000
    4084:	20000050 	.word	0x20000050

00004088 <sdc_support_le_2m_phy>:
    4088:	4805      	ldr	r0, [pc, #20]	; (40a0 <sdc_support_le_2m_phy+0x18>)
    408a:	b510      	push	{r4, lr}
    408c:	7880      	ldrb	r0, [r0, #2]
    408e:	b110      	cbz	r0, 4096 <sdc_support_le_2m_phy+0xe>
    4090:	f04f 30ff 	mov.w	r0, #4294967295
    4094:	bd10      	pop	{r4, pc}
    4096:	f00a fd48 	bl	eb2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    409a:	2000      	movs	r0, #0
    409c:	bd10      	pop	{r4, pc}
    409e:	0000      	.short	0x0000
    40a0:	20000050 	.word	0x20000050

000040a4 <sdc_support_slave>:
    40a4:	4805      	ldr	r0, [pc, #20]	; (40bc <sdc_support_slave+0x18>)
    40a6:	b510      	push	{r4, lr}
    40a8:	7880      	ldrb	r0, [r0, #2]
    40aa:	b110      	cbz	r0, 40b2 <sdc_support_slave+0xe>
    40ac:	f04f 30ff 	mov.w	r0, #4294967295
    40b0:	bd10      	pop	{r4, pc}
    40b2:	f006 fd39 	bl	ab28 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    40b6:	2000      	movs	r0, #0
    40b8:	bd10      	pop	{r4, pc}
    40ba:	0000      	.short	0x0000
    40bc:	20000050 	.word	0x20000050
    40c0:	00010001 	.word	0x00010001
    40c4:	0002000b 	.word	0x0002000b
    40c8:	0005000a 	.word	0x0005000a
    40cc:	000a0009 	.word	0x000a0009
    40d0:	00140008 	.word	0x00140008
    40d4:	001e0007 	.word	0x001e0007
    40d8:	00320006 	.word	0x00320006
    40dc:	004b0005 	.word	0x004b0005
    40e0:	00640004 	.word	0x00640004
    40e4:	00960003 	.word	0x00960003
    40e8:	00fa0002 	.word	0x00fa0002
    40ec:	01f40001 	.word	0x01f40001
    40f0:	fefe0000 	.word	0xfefe0000
    40f4:	faa2128f 	.word	0xfaa2128f
    40f8:	f0431658 	.word	0xf0431658
    40fc:	fc3389ce 	.word	0xfc3389ce
    4100:	3fdce11b 	.word	0x3fdce11b
    4104:	0000b4f8 	.word	0x0000b4f8

00004108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4108:	4a05      	ldr	r2, [pc, #20]	; (4120 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    410a:	b510      	push	{r4, lr}
    410c:	6852      	ldr	r2, [r2, #4]
    410e:	b112      	cbz	r2, 4116 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4114:	4710      	bx	r2
    4116:	2183      	movs	r1, #131	; 0x83
    4118:	2004      	movs	r0, #4
    411a:	f7ff ff65 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    411e:	0000      	.short	0x0000
    4120:	20000e28 	.word	0x20000e28

00004124 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4124:	4a05      	ldr	r2, [pc, #20]	; (413c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4126:	b510      	push	{r4, lr}
    4128:	6812      	ldr	r2, [r2, #0]
    412a:	b112      	cbz	r2, 4132 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    412c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4130:	4710      	bx	r2
    4132:	217d      	movs	r1, #125	; 0x7d
    4134:	2004      	movs	r0, #4
    4136:	f7ff ff57 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    413a:	0000      	.short	0x0000
    413c:	20000e28 	.word	0x20000e28

00004140 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4140:	4a05      	ldr	r2, [pc, #20]	; (4158 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4142:	b510      	push	{r4, lr}
    4144:	6892      	ldr	r2, [r2, #8]
    4146:	b112      	cbz	r2, 414e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    414c:	4710      	bx	r2
    414e:	2189      	movs	r1, #137	; 0x89
    4150:	2004      	movs	r0, #4
    4152:	f7ff ff49 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4156:	0000      	.short	0x0000
    4158:	20000e28 	.word	0x20000e28

0000415c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    415c:	4805      	ldr	r0, [pc, #20]	; (4174 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    415e:	6801      	ldr	r1, [r0, #0]
    4160:	b129      	cbz	r1, 416e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4162:	6841      	ldr	r1, [r0, #4]
    4164:	b119      	cbz	r1, 416e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4166:	6880      	ldr	r0, [r0, #8]
    4168:	b108      	cbz	r0, 416e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    416a:	2001      	movs	r0, #1
    416c:	4770      	bx	lr
    416e:	2000      	movs	r0, #0
    4170:	4770      	bx	lr
    4172:	0000      	.short	0x0000
    4174:	20000e28 	.word	0x20000e28

00004178 <sdc_rand_source_register>:
    4178:	4902      	ldr	r1, [pc, #8]	; (4184 <sdc_rand_source_register+0xc>)
    417a:	c80d      	ldmia	r0, {r0, r2, r3}
    417c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4180:	2000      	movs	r0, #0
    4182:	4770      	bx	lr
    4184:	20000e28 	.word	0x20000e28

00004188 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    418a:	4c12      	ldr	r4, [pc, #72]	; (41d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    418c:	2600      	movs	r6, #0
    418e:	6825      	ldr	r5, [r4, #0]
    4190:	e011      	b.n	41b6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4192:	9800      	ldr	r0, [sp, #0]
    4194:	2802      	cmp	r0, #2
    4196:	d002      	beq.n	419e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4198:	2803      	cmp	r0, #3
    419a:	d10c      	bne.n	41b6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    419c:	e006      	b.n	41ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    419e:	6820      	ldr	r0, [r4, #0]
    41a0:	b110      	cbz	r0, 41a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    41a2:	2000      	movs	r0, #0
    41a4:	6026      	str	r6, [r4, #0]
    41a6:	e005      	b.n	41b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    41a8:	2128      	movs	r1, #40	; 0x28
    41aa:	e00c      	b.n	41c6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    41ac:	6820      	ldr	r0, [r4, #0]
    41ae:	b168      	cbz	r0, 41cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    41b0:	2001      	movs	r0, #1
    41b2:	6026      	str	r6, [r4, #0]
    41b4:	47a8      	blx	r5
    41b6:	4668      	mov	r0, sp
    41b8:	f000 fc6c 	bl	4a94 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    41bc:	2800      	cmp	r0, #0
    41be:	d0e8      	beq.n	4192 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    41c0:	2805      	cmp	r0, #5
    41c2:	d005      	beq.n	41d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    41c4:	2135      	movs	r1, #53	; 0x35
    41c6:	2004      	movs	r0, #4
    41c8:	f7ff ff0e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41cc:	212d      	movs	r1, #45	; 0x2d
    41ce:	e7fa      	b.n	41c6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    41d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41d2:	0000      	.short	0x0000
    41d4:	20000064 	.word	0x20000064

000041d8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    41d8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    41da:	4d24      	ldr	r5, [pc, #144]	; (426c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>)
    41dc:	4606      	mov	r6, r0
    41de:	7828      	ldrb	r0, [r5, #0]
    41e0:	b148      	cbz	r0, 41f6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    41e2:	78ac      	ldrb	r4, [r5, #2]
    41e4:	1c69      	adds	r1, r5, #1
    41e6:	1ca4      	adds	r4, r4, #2
    41e8:	4622      	mov	r2, r4
    41ea:	4630      	mov	r0, r6
    41ec:	f007 ff79 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    41f0:	2000      	movs	r0, #0
    41f2:	7028      	strb	r0, [r5, #0]
    41f4:	e024      	b.n	4240 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    41f6:	481d      	ldr	r0, [pc, #116]	; (426c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>)
    41f8:	3844      	subs	r0, #68	; 0x44
    41fa:	f006 fa2b 	bl	a654 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    41fe:	2800      	cmp	r0, #0
    4200:	d032      	beq.n	4268 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    4202:	4c1a      	ldr	r4, [pc, #104]	; (426c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>)
    4204:	3c44      	subs	r4, #68	; 0x44
    4206:	7820      	ldrb	r0, [r4, #0]
    4208:	2811      	cmp	r0, #17
    420a:	d104      	bne.n	4216 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3e>
    420c:	210a      	movs	r1, #10
    420e:	203e      	movs	r0, #62	; 0x3e
    4210:	f008 f8e2 	bl	c3d8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4214:	b118      	cbz	r0, 421e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x46>
    4216:	7820      	ldrb	r0, [r4, #0]
    4218:	2808      	cmp	r0, #8
    421a:	d006      	beq.n	422a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x52>
    421c:	e00a      	b.n	4234 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5c>
    421e:	4913      	ldr	r1, [pc, #76]	; (426c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>)
    4220:	4630      	mov	r0, r6
    4222:	3944      	subs	r1, #68	; 0x44
    4224:	f008 fae1 	bl	c7ea <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4228:	e009      	b.n	423e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x66>
    422a:	2105      	movs	r1, #5
    422c:	203e      	movs	r0, #62	; 0x3e
    422e:	f008 f8d3 	bl	c3d8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4232:	b160      	cbz	r0, 424e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x76>
    4234:	490d      	ldr	r1, [pc, #52]	; (426c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>)
    4236:	4630      	mov	r0, r6
    4238:	3944      	subs	r1, #68	; 0x44
    423a:	f008 f92b 	bl	c494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    423e:	4604      	mov	r4, r0
    4240:	b18c      	cbz	r4, 4266 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x8e>
    4242:	78b1      	ldrb	r1, [r6, #2]
    4244:	7830      	ldrb	r0, [r6, #0]
    4246:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    424a:	f008 b8c5 	b.w	c3d8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    424e:	88a0      	ldrh	r0, [r4, #4]
    4250:	f8ad 0000 	strh.w	r0, [sp]
    4254:	a901      	add	r1, sp, #4
    4256:	4668      	mov	r0, sp
    4258:	f008 fbe1 	bl	ca1e <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    425c:	b118      	cbz	r0, 4266 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x8e>
    425e:	2195      	movs	r1, #149	; 0x95
    4260:	2008      	movs	r0, #8
    4262:	f7ff fec1 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4266:	2000      	movs	r0, #0
    4268:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    426a:	0000      	.short	0x0000
    426c:	20001098 	.word	0x20001098
    4270:	b570      	push	{r4, r5, r6, lr}
    4272:	780a      	ldrb	r2, [r1, #0]
    4274:	7082      	strb	r2, [r0, #2]
    4276:	b33a      	cbz	r2, 42c8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xf0>
    4278:	2a01      	cmp	r2, #1
    427a:	d825      	bhi.n	42c8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xf0>
    427c:	2313      	movs	r3, #19
    427e:	7003      	strb	r3, [r0, #0]
    4280:	2300      	movs	r3, #0
    4282:	e00a      	b.n	429a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xc2>
    4284:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4288:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    428c:	78a6      	ldrb	r6, [r4, #2]
    428e:	70ee      	strb	r6, [r5, #3]
    4290:	8864      	ldrh	r4, [r4, #2]
    4292:	0a24      	lsrs	r4, r4, #8
    4294:	1c5b      	adds	r3, r3, #1
    4296:	712c      	strb	r4, [r5, #4]
    4298:	b2db      	uxtb	r3, r3
    429a:	4293      	cmp	r3, r2
    429c:	d3f2      	bcc.n	4284 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xac>
    429e:	2300      	movs	r3, #0
    42a0:	e00b      	b.n	42ba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xe2>
    42a2:	bf00      	nop
    42a4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    42a8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    42ac:	792e      	ldrb	r6, [r5, #4]
    42ae:	7166      	strb	r6, [r4, #5]
    42b0:	88ad      	ldrh	r5, [r5, #4]
    42b2:	0a2d      	lsrs	r5, r5, #8
    42b4:	1c5b      	adds	r3, r3, #1
    42b6:	71a5      	strb	r5, [r4, #6]
    42b8:	b2db      	uxtb	r3, r3
    42ba:	4293      	cmp	r3, r2
    42bc:	d3f2      	bcc.n	42a4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xcc>
    42be:	2101      	movs	r1, #1
    42c0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    42c4:	b2c0      	uxtb	r0, r0
    42c6:	bd70      	pop	{r4, r5, r6, pc}
    42c8:	2000      	movs	r0, #0
    42ca:	bd70      	pop	{r4, r5, r6, pc}

000042cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    42cc:	2101      	movs	r1, #1
    42ce:	4a0c      	ldr	r2, [pc, #48]	; (4300 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    42d0:	2840      	cmp	r0, #64	; 0x40
    42d2:	d20c      	bcs.n	42ee <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    42d4:	2820      	cmp	r0, #32
    42d6:	d803      	bhi.n	42e0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    42d8:	1e40      	subs	r0, r0, #1
    42da:	4081      	lsls	r1, r0
    42dc:	6810      	ldr	r0, [r2, #0]
    42de:	e002      	b.n	42e6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    42e0:	3821      	subs	r0, #33	; 0x21
    42e2:	4081      	lsls	r1, r0
    42e4:	6850      	ldr	r0, [r2, #4]
    42e6:	4201      	tst	r1, r0
    42e8:	d107      	bne.n	42fa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    42ea:	2000      	movs	r0, #0
    42ec:	4770      	bx	lr
    42ee:	28ff      	cmp	r0, #255	; 0xff
    42f0:	d003      	beq.n	42fa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    42f2:	3840      	subs	r0, #64	; 0x40
    42f4:	4081      	lsls	r1, r0
    42f6:	6890      	ldr	r0, [r2, #8]
    42f8:	e7f5      	b.n	42e6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    42fa:	2001      	movs	r0, #1
    42fc:	4770      	bx	lr
    42fe:	0000      	.short	0x0000
    4300:	20000068 	.word	0x20000068

00004304 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4304:	2101      	movs	r1, #1
    4306:	1e40      	subs	r0, r0, #1
    4308:	4081      	lsls	r1, r0
    430a:	4804      	ldr	r0, [pc, #16]	; (431c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    430c:	68c0      	ldr	r0, [r0, #12]
    430e:	4201      	tst	r1, r0
    4310:	d001      	beq.n	4316 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4312:	2001      	movs	r0, #1
    4314:	4770      	bx	lr
    4316:	2000      	movs	r0, #0
    4318:	4770      	bx	lr
    431a:	0000      	.short	0x0000
    431c:	20000068 	.word	0x20000068

00004320 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4320:	4901      	ldr	r1, [pc, #4]	; (4328 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4322:	6800      	ldr	r0, [r0, #0]
    4324:	60c8      	str	r0, [r1, #12]
    4326:	4770      	bx	lr
    4328:	20000068 	.word	0x20000068

0000432c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    432c:	4904      	ldr	r1, [pc, #16]	; (4340 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    432e:	6802      	ldr	r2, [r0, #0]
    4330:	6840      	ldr	r0, [r0, #4]
    4332:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4336:	600a      	str	r2, [r1, #0]
    4338:	4a02      	ldr	r2, [pc, #8]	; (4344 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    433a:	4310      	orrs	r0, r2
    433c:	6048      	str	r0, [r1, #4]
    433e:	4770      	bx	lr
    4340:	20000068 	.word	0x20000068
    4344:	024007f8 	.word	0x024007f8

00004348 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4348:	4901      	ldr	r1, [pc, #4]	; (4350 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    434a:	6800      	ldr	r0, [r0, #0]
    434c:	6088      	str	r0, [r1, #8]
    434e:	4770      	bx	lr
    4350:	20000068 	.word	0x20000068

00004354 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4354:	4805      	ldr	r0, [pc, #20]	; (436c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4356:	f04f 31ff 	mov.w	r1, #4294967295
    435a:	6001      	str	r1, [r0, #0]
    435c:	0cc9      	lsrs	r1, r1, #19
    435e:	6041      	str	r1, [r0, #4]
    4360:	2100      	movs	r1, #0
    4362:	6081      	str	r1, [r0, #8]
    4364:	211f      	movs	r1, #31
    4366:	60c1      	str	r1, [r0, #12]
    4368:	4770      	bx	lr
    436a:	0000      	.short	0x0000
    436c:	20000068 	.word	0x20000068

00004370 <sdc_hci_cmd_cb_reset>:
    4370:	b510      	push	{r4, lr}
    4372:	f7ff ffef 	bl	4354 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4376:	f00a fb59 	bl	ea2c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    437a:	4604      	mov	r4, r0
    437c:	4802      	ldr	r0, [pc, #8]	; (4388 <sdc_hci_cmd_cb_reset+0x18>)
    437e:	6800      	ldr	r0, [r0, #0]
    4380:	b100      	cbz	r0, 4384 <sdc_hci_cmd_cb_reset+0x14>
    4382:	4780      	blx	r0
    4384:	4620      	mov	r0, r4
    4386:	bd10      	pop	{r4, pc}
    4388:	20000078 	.word	0x20000078

0000438c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    438c:	4901      	ldr	r1, [pc, #4]	; (4394 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    438e:	6008      	str	r0, [r1, #0]
    4390:	4770      	bx	lr
    4392:	0000      	.short	0x0000
    4394:	20000078 	.word	0x20000078

00004398 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4398:	2102      	movs	r1, #2
    439a:	8001      	strh	r1, [r0, #0]
    439c:	8041      	strh	r1, [r0, #2]
    439e:	2100      	movs	r1, #0
    43a0:	7101      	strb	r1, [r0, #4]
    43a2:	21fe      	movs	r1, #254	; 0xfe
    43a4:	7141      	strb	r1, [r0, #5]
    43a6:	f648 71fe 	movw	r1, #36862	; 0x8ffe
    43aa:	80c1      	strh	r1, [r0, #6]
    43ac:	4901      	ldr	r1, [pc, #4]	; (43b4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    43ae:	6081      	str	r1, [r0, #8]
    43b0:	2000      	movs	r0, #0
    43b2:	4770      	bx	lr
    43b4:	58faa212 	.word	0x58faa212

000043b8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    43b8:	b510      	push	{r4, lr}
    43ba:	2802      	cmp	r0, #2
    43bc:	d304      	bcc.n	43c8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    43be:	f240 1179 	movw	r1, #377	; 0x179
    43c2:	2017      	movs	r0, #23
    43c4:	f7ff fe10 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43c8:	4901      	ldr	r1, [pc, #4]	; (43d0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    43ca:	5c08      	ldrb	r0, [r1, r0]
    43cc:	bd10      	pop	{r4, pc}
    43ce:	0000      	.short	0x0000
    43d0:	20000e34 	.word	0x20000e34

000043d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    43d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43d6:	4605      	mov	r5, r0
    43d8:	9000      	str	r0, [sp, #0]
    43da:	4291      	cmp	r1, r2
    43dc:	d201      	bcs.n	43e2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    43de:	4614      	mov	r4, r2
    43e0:	e000      	b.n	43e4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    43e2:	460c      	mov	r4, r1
    43e4:	b155      	cbz	r5, 43fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    43e6:	2700      	movs	r7, #0
    43e8:	1ce8      	adds	r0, r5, #3
    43ea:	f020 0003 	bic.w	r0, r0, #3
    43ee:	42a8      	cmp	r0, r5
    43f0:	d006      	beq.n	4400 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    43f2:	f240 114d 	movw	r1, #333	; 0x14d
    43f6:	2017      	movs	r0, #23
    43f8:	f7ff fdf6 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43fc:	2701      	movs	r7, #1
    43fe:	e7f3      	b.n	43e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4400:	4e12      	ldr	r6, [pc, #72]	; (444c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    4402:	4668      	mov	r0, sp
    4404:	7031      	strb	r1, [r6, #0]
    4406:	7072      	strb	r2, [r6, #1]
    4408:	4639      	mov	r1, r7
    440a:	f000 f8ed 	bl	45e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    440e:	2000      	movs	r0, #0
    4410:	4603      	mov	r3, r0
    4412:	9900      	ldr	r1, [sp, #0]
    4414:	1cc9      	adds	r1, r1, #3
    4416:	f021 0103 	bic.w	r1, r1, #3
    441a:	9100      	str	r1, [sp, #0]
    441c:	b967      	cbnz	r7, 4438 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    441e:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    4422:	60d1      	str	r1, [r2, #12]
    4424:	2100      	movs	r1, #0
    4426:	e005      	b.n	4434 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4428:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    442c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4430:	1c49      	adds	r1, r1, #1
    4432:	b2c9      	uxtb	r1, r1
    4434:	42a1      	cmp	r1, r4
    4436:	d3f7      	bcc.n	4428 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4438:	9900      	ldr	r1, [sp, #0]
    443a:	1c40      	adds	r0, r0, #1
    443c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4440:	b2c0      	uxtb	r0, r0
    4442:	9100      	str	r1, [sp, #0]
    4444:	2802      	cmp	r0, #2
    4446:	d3e4      	bcc.n	4412 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4448:	1b48      	subs	r0, r1, r5
    444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    444c:	20000e34 	.word	0x20000e34

00004450 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4450:	b570      	push	{r4, r5, r6, lr}
    4452:	4604      	mov	r4, r0
    4454:	f008 fe96 	bl	d184 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4458:	b108      	cbz	r0, 445e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    445a:	2010      	movs	r0, #16
    445c:	bd70      	pop	{r4, r5, r6, pc}
    445e:	7825      	ldrb	r5, [r4, #0]
    4460:	f000 f8fe 	bl	4660 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4464:	4602      	mov	r2, r0
    4466:	480c      	ldr	r0, [pc, #48]	; (4498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4468:	8861      	ldrh	r1, [r4, #2]
    446a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    446e:	e00e      	b.n	448e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4470:	68c3      	ldr	r3, [r0, #12]
    4472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4476:	b143      	cbz	r3, 448a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4478:	1c4a      	adds	r2, r1, #1
    447a:	8062      	strh	r2, [r4, #2]
    447c:	80a1      	strh	r1, [r4, #4]
    447e:	68c0      	ldr	r0, [r0, #12]
    4480:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4484:	60a0      	str	r0, [r4, #8]
    4486:	2000      	movs	r0, #0
    4488:	bd70      	pop	{r4, r5, r6, pc}
    448a:	1c49      	adds	r1, r1, #1
    448c:	b289      	uxth	r1, r1
    448e:	4291      	cmp	r1, r2
    4490:	d3ee      	bcc.n	4470 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4492:	8061      	strh	r1, [r4, #2]
    4494:	2005      	movs	r0, #5
    4496:	bd70      	pop	{r4, r5, r6, pc}
    4498:	20000e34 	.word	0x20000e34

0000449c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44a0:	b121      	cbz	r1, 44ac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    44a2:	2901      	cmp	r1, #1
    44a4:	d002      	beq.n	44ac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    44a6:	2000      	movs	r0, #0
    44a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44ac:	4c0f      	ldr	r4, [pc, #60]	; (44ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    44ae:	2700      	movs	r7, #0
    44b0:	463b      	mov	r3, r7
    44b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    44b6:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    44ba:	f814 c001 	ldrb.w	ip, [r4, r1]
    44be:	e00a      	b.n	44d6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    44c0:	19dc      	adds	r4, r3, r7
    44c2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    44c6:	b2a4      	uxth	r4, r4
    44c8:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    44cc:	f1be 0f00 	cmp.w	lr, #0
    44d0:	d004      	beq.n	44dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    44d2:	1c5b      	adds	r3, r3, #1
    44d4:	b29b      	uxth	r3, r3
    44d6:	459c      	cmp	ip, r3
    44d8:	d8f2      	bhi.n	44c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    44da:	4634      	mov	r4, r6
    44dc:	8004      	strh	r4, [r0, #0]
    44de:	4620      	mov	r0, r4
    44e0:	42b4      	cmp	r4, r6
    44e2:	d0e0      	beq.n	44a6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    44e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    44e8:	f000 b834 	b.w	4554 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    44ec:	20000e34 	.word	0x20000e34

000044f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    44f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f4:	4606      	mov	r6, r0
    44f6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    44fa:	460c      	mov	r4, r1
    44fc:	f243 0702 	movw	r7, #12290	; 0x3002
    4500:	38ff      	subs	r0, #255	; 0xff
    4502:	d020      	beq.n	4546 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4504:	2c02      	cmp	r4, #2
    4506:	d302      	bcc.n	450e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4508:	2007      	movs	r0, #7
    450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    450e:	4630      	mov	r0, r6
    4510:	f000 f85a 	bl	45c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4514:	0005      	movs	r5, r0
    4516:	d016      	beq.n	4546 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4518:	480c      	ldr	r0, [pc, #48]	; (454c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    451a:	4629      	mov	r1, r5
    451c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4520:	4630      	mov	r0, r6
    4522:	4790      	blx	r2
    4524:	480a      	ldr	r0, [pc, #40]	; (4550 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4526:	2100      	movs	r1, #0
    4528:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    452c:	68f8      	ldr	r0, [r7, #12]
    452e:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4532:	4620      	mov	r0, r4
    4534:	f000 f88a 	bl	464c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4538:	4602      	mov	r2, r0
    453a:	4629      	mov	r1, r5
    453c:	6878      	ldr	r0, [r7, #4]
    453e:	f008 fda1 	bl	d084 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4542:	2000      	movs	r0, #0
    4544:	e7e1      	b.n	450a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4546:	4638      	mov	r0, r7
    4548:	e7df      	b.n	450a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    454a:	0000      	.short	0x0000
    454c:	00004680 	.word	0x00004680
    4550:	20000e34 	.word	0x20000e34
    4554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4558:	4690      	mov	r8, r2
    455a:	460d      	mov	r5, r1
    455c:	4607      	mov	r7, r0
    455e:	f008 fdcb 	bl	d0f8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4562:	b148      	cbz	r0, 4578 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4564:	4816      	ldr	r0, [pc, #88]	; (45c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4566:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    456a:	68f0      	ldr	r0, [r6, #12]
    456c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4570:	b128      	cbz	r0, 457e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4572:	f240 1117 	movw	r1, #279	; 0x117
    4576:	e015      	b.n	45a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4578:	f44f 718b 	mov.w	r1, #278	; 0x116
    457c:	e012      	b.n	45a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    457e:	6870      	ldr	r0, [r6, #4]
    4580:	2800      	cmp	r0, #0
    4582:	d01a      	beq.n	45ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4584:	4628      	mov	r0, r5
    4586:	f000 f861 	bl	464c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    458a:	4601      	mov	r1, r0
    458c:	6870      	ldr	r0, [r6, #4]
    458e:	f008 fd2b 	bl	cfe8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4592:	0004      	movs	r4, r0
    4594:	d010      	beq.n	45b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4596:	68f0      	ldr	r0, [r6, #12]
    4598:	2d02      	cmp	r5, #2
    459a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    459e:	d304      	bcc.n	45aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    45a0:	f44f 7191 	mov.w	r1, #290	; 0x122
    45a4:	2017      	movs	r0, #23
    45a6:	f7ff fd1f 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45aa:	4806      	ldr	r0, [pc, #24]	; (45c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    45ac:	4642      	mov	r2, r8
    45ae:	4621      	mov	r1, r4
    45b0:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    45b4:	4638      	mov	r0, r7
    45b6:	4798      	blx	r3
    45b8:	4620      	mov	r0, r4
    45ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45be:	0000      	.short	0x0000
    45c0:	20000e34 	.word	0x20000e34
    45c4:	00004678 	.word	0x00004678
    45c8:	b570      	push	{r4, r5, r6, lr}
    45ca:	460c      	mov	r4, r1
    45cc:	4605      	mov	r5, r0
    45ce:	f008 fd93 	bl	d0f8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    45d2:	2800      	cmp	r0, #0
    45d4:	d005      	beq.n	45e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    45d6:	4803      	ldr	r0, [pc, #12]	; (45e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    45d8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    45dc:	68c0      	ldr	r0, [r0, #12]
    45de:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    45e2:	bd70      	pop	{r4, r5, r6, pc}
    45e4:	20000e34 	.word	0x20000e34
    45e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45ec:	4e16      	ldr	r6, [pc, #88]	; (4648 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    45ee:	4688      	mov	r8, r1
    45f0:	4605      	mov	r5, r0
    45f2:	2400      	movs	r4, #0
    45f4:	6828      	ldr	r0, [r5, #0]
    45f6:	1cc0      	adds	r0, r0, #3
    45f8:	f020 0003 	bic.w	r0, r0, #3
    45fc:	6028      	str	r0, [r5, #0]
    45fe:	4620      	mov	r0, r4
    4600:	f000 f824 	bl	464c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4604:	5d31      	ldrb	r1, [r6, r4]
    4606:	4348      	muls	r0, r1
    4608:	f1b8 0f00 	cmp.w	r8, #0
    460c:	d001      	beq.n	4612 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    460e:	2200      	movs	r2, #0
    4610:	e000      	b.n	4614 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4612:	682a      	ldr	r2, [r5, #0]
    4614:	4601      	mov	r1, r0
    4616:	9200      	str	r2, [sp, #0]
    4618:	b132      	cbz	r2, 4628 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    461a:	2700      	movs	r7, #0
    461c:	ea4f 000d 	mov.w	r0, sp
    4620:	f008 fd0f 	bl	d042 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4624:	b11f      	cbz	r7, 462e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4626:	e006      	b.n	4636 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4628:	2701      	movs	r7, #1
    462a:	2000      	movs	r0, #0
    462c:	e7f8      	b.n	4620 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    462e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4632:	9a00      	ldr	r2, [sp, #0]
    4634:	604a      	str	r2, [r1, #4]
    4636:	6829      	ldr	r1, [r5, #0]
    4638:	1c64      	adds	r4, r4, #1
    463a:	4408      	add	r0, r1
    463c:	b2e4      	uxtb	r4, r4
    463e:	6028      	str	r0, [r5, #0]
    4640:	2c02      	cmp	r4, #2
    4642:	d3d7      	bcc.n	45f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4648:	20000e34 	.word	0x20000e34
    464c:	4903      	ldr	r1, [pc, #12]	; (465c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    464e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4652:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4656:	1cc0      	adds	r0, r0, #3
    4658:	4008      	ands	r0, r1
    465a:	4770      	bx	lr
    465c:	00004674 	.word	0x00004674
    4660:	4803      	ldr	r0, [pc, #12]	; (4670 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4662:	7801      	ldrb	r1, [r0, #0]
    4664:	7840      	ldrb	r0, [r0, #1]
    4666:	4281      	cmp	r1, r0
    4668:	d300      	bcc.n	466c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    466a:	4608      	mov	r0, r1
    466c:	4770      	bx	lr
    466e:	0000      	.short	0x0000
    4670:	20000e34 	.word	0x20000e34
    4674:	00080210 	.word	0x00080210
    4678:	0000e1f1 	.word	0x0000e1f1
    467c:	0000d10d 	.word	0x0000d10d
    4680:	0000e207 	.word	0x0000e207
    4684:	0000d10f 	.word	0x0000d10f

00004688 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4688:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    468c:	4c26      	ldr	r4, [pc, #152]	; (4728 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    468e:	4680      	mov	r8, r0
    4690:	b081      	sub	sp, #4
    4692:	6820      	ldr	r0, [r4, #0]
    4694:	469a      	mov	sl, r3
    4696:	4693      	mov	fp, r2
    4698:	b158      	cbz	r0, 46b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    469a:	7a02      	ldrb	r2, [r0, #8]
    469c:	4542      	cmp	r2, r8
    469e:	d903      	bls.n	46a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    46a0:	6841      	ldr	r1, [r0, #4]
    46a2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    46a6:	b140      	cbz	r0, 46ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    46a8:	f243 0002 	movw	r0, #12290	; 0x3002
    46ac:	b005      	add	sp, #20
    46ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46b2:	21a5      	movs	r1, #165	; 0xa5
    46b4:	2018      	movs	r0, #24
    46b6:	f7ff fc97 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ba:	4619      	mov	r1, r3
    46bc:	9802      	ldr	r0, [sp, #8]
    46be:	f008 fd3e 	bl	d13e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    46c2:	b286      	uxth	r6, r0
    46c4:	4658      	mov	r0, fp
    46c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    46c8:	f008 fd30 	bl	d12c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    46cc:	b285      	uxth	r5, r0
    46ce:	1970      	adds	r0, r6, r5
    46d0:	1d00      	adds	r0, r0, #4
    46d2:	b287      	uxth	r7, r0
    46d4:	6820      	ldr	r0, [r4, #0]
    46d6:	46a1      	mov	r9, r4
    46d8:	4639      	mov	r1, r7
    46da:	6800      	ldr	r0, [r0, #0]
    46dc:	f008 fc84 	bl	cfe8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    46e0:	0004      	movs	r4, r0
    46e2:	d01f      	beq.n	4724 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    46e4:	8067      	strh	r7, [r4, #2]
    46e6:	8025      	strh	r5, [r4, #0]
    46e8:	4629      	mov	r1, r5
    46ea:	1d20      	adds	r0, r4, #4
    46ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    46ee:	4607      	mov	r7, r0
    46f0:	465a      	mov	r2, fp
    46f2:	2301      	movs	r3, #1
    46f4:	9500      	str	r5, [sp, #0]
    46f6:	f008 fbd6 	bl	cea6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    46fa:	8820      	ldrh	r0, [r4, #0]
    46fc:	4631      	mov	r1, r6
    46fe:	4438      	add	r0, r7
    4700:	2301      	movs	r3, #1
    4702:	9a02      	ldr	r2, [sp, #8]
    4704:	f8cd a000 	str.w	sl, [sp]
    4708:	f008 fbcd 	bl	cea6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    470c:	8820      	ldrh	r0, [r4, #0]
    470e:	19c1      	adds	r1, r0, r7
    4710:	4638      	mov	r0, r7
    4712:	f008 fbf9 	bl	cf08 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4716:	f8d9 0000 	ldr.w	r0, [r9]
    471a:	6841      	ldr	r1, [r0, #4]
    471c:	2000      	movs	r0, #0
    471e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4722:	e7c3      	b.n	46ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4724:	2004      	movs	r0, #4
    4726:	e7c1      	b.n	46ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4728:	2000007c 	.word	0x2000007c

0000472c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    472c:	b570      	push	{r4, r5, r6, lr}
    472e:	4c14      	ldr	r4, [pc, #80]	; (4780 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4730:	6823      	ldr	r3, [r4, #0]
    4732:	b18b      	cbz	r3, 4758 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4734:	7a19      	ldrb	r1, [r3, #8]
    4736:	4281      	cmp	r1, r0
    4738:	d912      	bls.n	4760 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    473a:	685a      	ldr	r2, [r3, #4]
    473c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4740:	b171      	cbz	r1, 4760 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4742:	2500      	movs	r5, #0
    4744:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4748:	884a      	ldrh	r2, [r1, #2]
    474a:	6818      	ldr	r0, [r3, #0]
    474c:	f008 fc9a 	bl	d084 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4750:	6821      	ldr	r1, [r4, #0]
    4752:	2000      	movs	r0, #0
    4754:	7a0a      	ldrb	r2, [r1, #8]
    4756:	e00c      	b.n	4772 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4758:	21c8      	movs	r1, #200	; 0xc8
    475a:	2018      	movs	r0, #24
    475c:	f7ff fc44 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4760:	f243 0002 	movw	r0, #12290	; 0x3002
    4764:	bd70      	pop	{r4, r5, r6, pc}
    4766:	684b      	ldr	r3, [r1, #4]
    4768:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    476c:	b933      	cbnz	r3, 477c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    476e:	1c40      	adds	r0, r0, #1
    4770:	b2c0      	uxtb	r0, r0
    4772:	4282      	cmp	r2, r0
    4774:	d8f7      	bhi.n	4766 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4776:	6808      	ldr	r0, [r1, #0]
    4778:	f008 fc79 	bl	d06e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    477c:	2000      	movs	r0, #0
    477e:	bd70      	pop	{r4, r5, r6, pc}
    4780:	2000007c 	.word	0x2000007c

00004784 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4788:	460d      	mov	r5, r1
    478a:	0004      	movs	r4, r0
    478c:	4690      	mov	r8, r2
    478e:	f04f 0600 	mov.w	r6, #0
    4792:	d009      	beq.n	47a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4794:	2700      	movs	r7, #0
    4796:	1ce0      	adds	r0, r4, #3
    4798:	f020 0003 	bic.w	r0, r0, #3
    479c:	42a0      	cmp	r0, r4
    479e:	d005      	beq.n	47ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    47a0:	2186      	movs	r1, #134	; 0x86
    47a2:	2018      	movs	r0, #24
    47a4:	f7ff fc20 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47a8:	2701      	movs	r7, #1
    47aa:	e7f4      	b.n	4796 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    47ac:	b1cd      	cbz	r5, 47e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    47ae:	4611      	mov	r1, r2
    47b0:	2000      	movs	r0, #0
    47b2:	f008 fc46 	bl	d042 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    47b6:	300c      	adds	r0, #12
    47b8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    47bc:	b98f      	cbnz	r7, 47e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    47be:	4f0a      	ldr	r7, [pc, #40]	; (47e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    47c0:	f104 000c 	add.w	r0, r4, #12
    47c4:	00aa      	lsls	r2, r5, #2
    47c6:	603c      	str	r4, [r7, #0]
    47c8:	7225      	strb	r5, [r4, #8]
    47ca:	6060      	str	r0, [r4, #4]
    47cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    47d0:	6020      	str	r0, [r4, #0]
    47d2:	2100      	movs	r1, #0
    47d4:	6860      	ldr	r0, [r4, #4]
    47d6:	f007 fcfe 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47da:	4641      	mov	r1, r8
    47dc:	6838      	ldr	r0, [r7, #0]
    47de:	f008 fc30 	bl	d042 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    47e2:	4630      	mov	r0, r6
    47e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47e8:	2000007c 	.word	0x2000007c

000047ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    47ec:	b570      	push	{r4, r5, r6, lr}
    47ee:	4d08      	ldr	r5, [pc, #32]	; (4810 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    47f0:	6828      	ldr	r0, [r5, #0]
    47f2:	2800      	cmp	r0, #0
    47f4:	d00a      	beq.n	480c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    47f6:	2400      	movs	r4, #0
    47f8:	e004      	b.n	4804 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    47fa:	4620      	mov	r0, r4
    47fc:	f7ff ff96 	bl	472c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4800:	1c64      	adds	r4, r4, #1
    4802:	b2e4      	uxtb	r4, r4
    4804:	6828      	ldr	r0, [r5, #0]
    4806:	7a00      	ldrb	r0, [r0, #8]
    4808:	42a0      	cmp	r0, r4
    480a:	d8f6      	bhi.n	47fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    480c:	bd70      	pop	{r4, r5, r6, pc}
    480e:	0000      	.short	0x0000
    4810:	2000007c 	.word	0x2000007c

00004814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4814:	4909      	ldr	r1, [pc, #36]	; (483c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4816:	b510      	push	{r4, lr}
    4818:	4602      	mov	r2, r0
    481a:	6809      	ldr	r1, [r1, #0]
    481c:	2000      	movs	r0, #0
    481e:	b149      	cbz	r1, 4834 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4820:	7a0b      	ldrb	r3, [r1, #8]
    4822:	4293      	cmp	r3, r2
    4824:	d905      	bls.n	4832 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4826:	6849      	ldr	r1, [r1, #4]
    4828:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    482c:	2900      	cmp	r1, #0
    482e:	d000      	beq.n	4832 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4830:	1d08      	adds	r0, r1, #4
    4832:	bd10      	pop	{r4, pc}
    4834:	21ee      	movs	r1, #238	; 0xee
    4836:	2018      	movs	r0, #24
    4838:	f7ff fbd6 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    483c:	2000007c 	.word	0x2000007c

00004840 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4840:	490a      	ldr	r1, [pc, #40]	; (486c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4842:	b510      	push	{r4, lr}
    4844:	4602      	mov	r2, r0
    4846:	6809      	ldr	r1, [r1, #0]
    4848:	2000      	movs	r0, #0
    484a:	b159      	cbz	r1, 4864 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    484c:	7a0b      	ldrb	r3, [r1, #8]
    484e:	4293      	cmp	r3, r2
    4850:	d907      	bls.n	4862 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4852:	6849      	ldr	r1, [r1, #4]
    4854:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4858:	2900      	cmp	r1, #0
    485a:	d002      	beq.n	4862 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    485c:	f831 0b04 	ldrh.w	r0, [r1], #4
    4860:	4408      	add	r0, r1
    4862:	bd10      	pop	{r4, pc}
    4864:	21fc      	movs	r1, #252	; 0xfc
    4866:	2018      	movs	r0, #24
    4868:	f7ff fbbe 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    486c:	2000007c 	.word	0x2000007c
    4870:	4909      	ldr	r1, [pc, #36]	; (4898 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    4872:	b510      	push	{r4, lr}
    4874:	4807      	ldr	r0, [pc, #28]	; (4894 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    4876:	6008      	str	r0, [r1, #0]
    4878:	4b08      	ldr	r3, [pc, #32]	; (489c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    487a:	2011      	movs	r0, #17
    487c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4880:	2200      	movs	r2, #0
    4882:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4886:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    488a:	1c40      	adds	r0, r0, #1
    488c:	b2c0      	uxtb	r0, r0
    488e:	2814      	cmp	r0, #20
    4890:	d3f4      	bcc.n	487c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    4892:	bd10      	pop	{r4, pc}
    4894:	fffe0000 	.word	0xfffe0000
    4898:	4001f508 	.word	0x4001f508
    489c:	4001f000 	.word	0x4001f000
    48a0:	b570      	push	{r4, r5, r6, lr}
    48a2:	2420      	movs	r4, #32
    48a4:	2100      	movs	r1, #0
    48a6:	2301      	movs	r3, #1
    48a8:	fa20 f201 	lsr.w	r2, r0, r1
    48ac:	07d2      	lsls	r2, r2, #31
    48ae:	d020      	beq.n	48f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    48b0:	b24a      	sxtb	r2, r1
    48b2:	2a00      	cmp	r2, #0
    48b4:	db10      	blt.n	48d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    48b6:	bf00      	nop
    48b8:	ea4f 1652 	mov.w	r6, r2, lsr #5
    48bc:	ea4f 0686 	mov.w	r6, r6, lsl #2
    48c0:	f002 051f 	and.w	r5, r2, #31
    48c4:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    48c8:	fa03 f505 	lsl.w	r5, r3, r5
    48cc:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    48d0:	f3bf 8f4f 	dsb	sy
    48d4:	f3bf 8f6f 	isb	sy
    48d8:	db0b      	blt.n	48f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    48da:	f002 051f 	and.w	r5, r2, #31
    48de:	ea4f 1252 	mov.w	r2, r2, lsr #5
    48e2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    48e6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    48ea:	fa03 f505 	lsl.w	r5, r3, r5
    48ee:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    48f2:	f101 0101 	add.w	r1, r1, #1
    48f6:	42a1      	cmp	r1, r4
    48f8:	d3d6      	bcc.n	48a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    48fa:	bd70      	pop	{r4, r5, r6, pc}
    48fc:	b570      	push	{r4, r5, r6, lr}
    48fe:	0042      	lsls	r2, r0, #1
    4900:	f04f 0100 	mov.w	r1, #0
    4904:	d501      	bpl.n	490a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    4906:	4a14      	ldr	r2, [pc, #80]	; (4958 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x118>)
    4908:	6011      	str	r1, [r2, #0]
    490a:	f3c0 3280 	ubfx	r2, r0, #14, #1
    490e:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4912:	429a      	cmp	r2, r3
    4914:	d003      	beq.n	491e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xde>
    4916:	2164      	movs	r1, #100	; 0x64
    4918:	201b      	movs	r0, #27
    491a:	f7ff fb65 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    491e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4922:	d014      	beq.n	494e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x10e>
    4924:	4a0d      	ldr	r2, [pc, #52]	; (495c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x11c>)
    4926:	2001      	movs	r0, #1
    4928:	6050      	str	r0, [r2, #4]
    492a:	1e83      	subs	r3, r0, #2
    492c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4930:	4a0b      	ldr	r2, [pc, #44]	; (4960 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x120>)
    4932:	6090      	str	r0, [r2, #8]
    4934:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4938:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    493c:	4c09      	ldr	r4, [pc, #36]	; (4964 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x124>)
    493e:	6021      	str	r1, [r4, #0]
    4940:	1d25      	adds	r5, r4, #4
    4942:	6028      	str	r0, [r5, #0]
    4944:	6090      	str	r0, [r2, #8]
    4946:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    494a:	6021      	str	r1, [r4, #0]
    494c:	6028      	str	r0, [r5, #0]
    494e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4952:	f7ff bf8d 	b.w	4870 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4956:	0000      	.short	0x0000
    4958:	4001e504 	.word	0x4001e504
    495c:	4000e000 	.word	0x4000e000
    4960:	4000f000 	.word	0x4000f000
    4964:	4000f500 	.word	0x4000f500

00004968 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4968:	b570      	push	{r4, r5, r6, lr}
    496a:	4c0a      	ldr	r4, [pc, #40]	; (4994 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    496c:	460d      	mov	r5, r1
    496e:	6020      	str	r0, [r4, #0]
    4970:	f7ff ffc4 	bl	48fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    4974:	6820      	ldr	r0, [r4, #0]
    4976:	f7ff ff93 	bl	48a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    497a:	f000 f877 	bl	4a6c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    497e:	f7ff ff77 	bl	4870 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4982:	f008 fbf4 	bl	d16e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4986:	4628      	mov	r0, r5
    4988:	f000 f8aa 	bl	4ae0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    498c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4990:	f000 b8c2 	b.w	4b18 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4994:	20000080 	.word	0x20000080

00004998 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4998:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    499c:	4e2f      	ldr	r6, [pc, #188]	; (4a5c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    499e:	4683      	mov	fp, r0
    49a0:	6830      	ldr	r0, [r6, #0]
    49a2:	9001      	str	r0, [sp, #4]
    49a4:	2701      	movs	r7, #1
    49a6:	482e      	ldr	r0, [pc, #184]	; (4a60 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    49a8:	f007 faf2 	bl	bf90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    49ac:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4a60 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    49b0:	b920      	cbnz	r0, 49bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    49b2:	2700      	movs	r7, #0
    49b4:	f108 0001 	add.w	r0, r8, #1
    49b8:	f007 fb01 	bl	bfbe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    49bc:	4c29      	ldr	r4, [pc, #164]	; (4a64 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    49be:	2500      	movs	r5, #0
    49c0:	f04f 0903 	mov.w	r9, #3
    49c4:	2001      	movs	r0, #1
    49c6:	6060      	str	r0, [r4, #4]
    49c8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    49cc:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    49d0:	f8c6 b000 	str.w	fp, [r6]
    49d4:	6020      	str	r0, [r4, #0]
    49d6:	f8df a090 	ldr.w	sl, [pc, #144]	; 4a68 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    49da:	e017      	b.n	4a0c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    49dc:	f8da 0000 	ldr.w	r0, [sl]
    49e0:	06c0      	lsls	r0, r0, #27
    49e2:	d513      	bpl.n	4a0c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    49e4:	200e      	movs	r0, #14
    49e6:	f008 fbb3 	bl	d150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    49ea:	f3ef 8010 	mrs	r0, PRIMASK
    49ee:	9000      	str	r0, [sp, #0]
    49f0:	b672      	cpsid	i
    49f2:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    49f6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    49fa:	b920      	cbnz	r0, 4a06 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    49fc:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4a00:	b908      	cbnz	r0, 4a06 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4a02:	f7ff f9af 	bl	3d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4a06:	9800      	ldr	r0, [sp, #0]
    4a08:	b900      	cbnz	r0, 4a0c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4a0a:	b662      	cpsie	i
    4a0c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4a10:	b918      	cbnz	r0, 4a1a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4a12:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4a16:	2800      	cmp	r0, #0
    4a18:	d0e0      	beq.n	49dc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4a1a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4a1e:	2800      	cmp	r0, #0
    4a20:	d1d0      	bne.n	49c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4a22:	b137      	cbz	r7, 4a32 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4a24:	9801      	ldr	r0, [sp, #4]
    4a26:	6030      	str	r0, [r6, #0]
    4a28:	f108 0001 	add.w	r0, r8, #1
    4a2c:	f007 fab0 	bl	bf90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a30:	e011      	b.n	4a56 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4a32:	f108 0001 	add.w	r0, r8, #1
    4a36:	f007 faab 	bl	bf90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a3a:	2800      	cmp	r0, #0
    4a3c:	d1ba      	bne.n	49b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4a3e:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    4a42:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4a46:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4a4a:	200e      	movs	r0, #14
    4a4c:	f008 fb80 	bl	d150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4a50:	4803      	ldr	r0, [pc, #12]	; (4a60 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4a52:	f007 fab4 	bl	bfbe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a56:	2000      	movs	r0, #0
    4a58:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4a5c:	4000e504 	.word	0x4000e504
    4a60:	2000027e 	.word	0x2000027e
    4a64:	4000e000 	.word	0x4000e000
    4a68:	e000ed10 	.word	0xe000ed10

00004a6c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4a6c:	b510      	push	{r4, lr}
    4a6e:	4808      	ldr	r0, [pc, #32]	; (4a90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a70:	f007 faa1 	bl	bfb6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a74:	b108      	cbz	r0, 4a7a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4a76:	2124      	movs	r1, #36	; 0x24
    4a78:	e006      	b.n	4a88 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4a7a:	4805      	ldr	r0, [pc, #20]	; (4a90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a7c:	1c40      	adds	r0, r0, #1
    4a7e:	f007 fa9a 	bl	bfb6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a82:	2800      	cmp	r0, #0
    4a84:	d003      	beq.n	4a8e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4a86:	2128      	movs	r1, #40	; 0x28
    4a88:	201d      	movs	r0, #29
    4a8a:	f7ff faad 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a8e:	bd10      	pop	{r4, pc}
    4a90:	2000027e 	.word	0x2000027e

00004a94 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4a94:	b570      	push	{r4, r5, r6, lr}
    4a96:	4911      	ldr	r1, [pc, #68]	; (4adc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4a98:	680a      	ldr	r2, [r1, #0]
    4a9a:	b1ea      	cbz	r2, 4ad8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4a9c:	2300      	movs	r3, #0
    4a9e:	461d      	mov	r5, r3
    4aa0:	2401      	movs	r4, #1
    4aa2:	684a      	ldr	r2, [r1, #4]
    4aa4:	1c52      	adds	r2, r2, #1
    4aa6:	604a      	str	r2, [r1, #4]
    4aa8:	2a09      	cmp	r2, #9
    4aaa:	d300      	bcc.n	4aae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4aac:	604d      	str	r5, [r1, #4]
    4aae:	790e      	ldrb	r6, [r1, #4]
    4ab0:	fa04 f206 	lsl.w	r2, r4, r6
    4ab4:	680e      	ldr	r6, [r1, #0]
    4ab6:	4216      	tst	r6, r2
    4ab8:	d00b      	beq.n	4ad2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4aba:	f3ef 8310 	mrs	r3, PRIMASK
    4abe:	b672      	cpsid	i
    4ac0:	680c      	ldr	r4, [r1, #0]
    4ac2:	4394      	bics	r4, r2
    4ac4:	600c      	str	r4, [r1, #0]
    4ac6:	b903      	cbnz	r3, 4aca <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4ac8:	b662      	cpsie	i
    4aca:	6849      	ldr	r1, [r1, #4]
    4acc:	6001      	str	r1, [r0, #0]
    4ace:	2000      	movs	r0, #0
    4ad0:	bd70      	pop	{r4, r5, r6, pc}
    4ad2:	1c5b      	adds	r3, r3, #1
    4ad4:	2b09      	cmp	r3, #9
    4ad6:	d3e4      	bcc.n	4aa2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4ad8:	2005      	movs	r0, #5
    4ada:	bd70      	pop	{r4, r5, r6, pc}
    4adc:	20000084 	.word	0x20000084

00004ae0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4ae0:	4802      	ldr	r0, [pc, #8]	; (4aec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4ae2:	2100      	movs	r1, #0
    4ae4:	6001      	str	r1, [r0, #0]
    4ae6:	6041      	str	r1, [r0, #4]
    4ae8:	4770      	bx	lr
    4aea:	0000      	.short	0x0000
    4aec:	20000084 	.word	0x20000084

00004af0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4af0:	b510      	push	{r4, lr}
    4af2:	4c08      	ldr	r4, [pc, #32]	; (4b14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4af4:	7861      	ldrb	r1, [r4, #1]
    4af6:	b109      	cbz	r1, 4afc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4af8:	200f      	movs	r0, #15
    4afa:	bd10      	pop	{r4, pc}
    4afc:	f7ff f8be 	bl	3c7c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4b00:	7020      	strb	r0, [r4, #0]
    4b02:	28ff      	cmp	r0, #255	; 0xff
    4b04:	d001      	beq.n	4b0a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4b06:	2000      	movs	r0, #0
    4b08:	bd10      	pop	{r4, pc}
    4b0a:	2176      	movs	r1, #118	; 0x76
    4b0c:	201f      	movs	r0, #31
    4b0e:	f7ff fa6b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b12:	0000      	.short	0x0000
    4b14:	2000008c 	.word	0x2000008c

00004b18 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4b18:	4901      	ldr	r1, [pc, #4]	; (4b20 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4b1a:	2000      	movs	r0, #0
    4b1c:	7048      	strb	r0, [r1, #1]
    4b1e:	4770      	bx	lr
    4b20:	2000008c 	.word	0x2000008c

00004b24 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4b24:	4806      	ldr	r0, [pc, #24]	; (4b40 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4b26:	4a07      	ldr	r2, [pc, #28]	; (4b44 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4b28:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4b2a:	8852      	ldrh	r2, [r2, #2]
    4b2c:	4291      	cmp	r1, r2
    4b2e:	d104      	bne.n	4b3a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4b30:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4b34:	b108      	cbz	r0, 4b3a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4b36:	2000      	movs	r0, #0
    4b38:	4770      	bx	lr
    4b3a:	2001      	movs	r0, #1
    4b3c:	4770      	bx	lr
    4b3e:	0000      	.short	0x0000
    4b40:	2000119a 	.word	0x2000119a
    4b44:	2000026c 	.word	0x2000026c

00004b48 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4b48:	4901      	ldr	r1, [pc, #4]	; (4b50 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4b4a:	8048      	strh	r0, [r1, #2]
    4b4c:	4770      	bx	lr
    4b4e:	0000      	.short	0x0000
    4b50:	2000026c 	.word	0x2000026c

00004b54 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4b54:	4808      	ldr	r0, [pc, #32]	; (4b78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4b56:	4a09      	ldr	r2, [pc, #36]	; (4b7c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4b58:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4b5a:	8852      	ldrh	r2, [r2, #2]
    4b5c:	4291      	cmp	r1, r2
    4b5e:	d109      	bne.n	4b74 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4b64:	8481      	strh	r1, [r0, #36]	; 0x24
    4b66:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b6a:	b119      	cbz	r1, 4b74 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b6c:	2100      	movs	r1, #0
    4b6e:	7001      	strb	r1, [r0, #0]
    4b70:	2001      	movs	r0, #1
    4b72:	4770      	bx	lr
    4b74:	2000      	movs	r0, #0
    4b76:	4770      	bx	lr
    4b78:	2000119a 	.word	0x2000119a
    4b7c:	2000026c 	.word	0x2000026c

00004b80 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4b80:	4807      	ldr	r0, [pc, #28]	; (4ba0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b82:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b86:	2901      	cmp	r1, #1
    4b88:	d007      	beq.n	4b9a <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4b8a:	2101      	movs	r1, #1
    4b8c:	7001      	strb	r1, [r0, #0]
    4b8e:	4805      	ldr	r0, [pc, #20]	; (4ba4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4b90:	4903      	ldr	r1, [pc, #12]	; (4ba0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b92:	8800      	ldrh	r0, [r0, #0]
    4b94:	8488      	strh	r0, [r1, #36]	; 0x24
    4b96:	2001      	movs	r0, #1
    4b98:	4770      	bx	lr
    4b9a:	2000      	movs	r0, #0
    4b9c:	4770      	bx	lr
    4b9e:	0000      	.short	0x0000
    4ba0:	2000119a 	.word	0x2000119a
    4ba4:	2000026c 	.word	0x2000026c

00004ba8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4ba8:	4906      	ldr	r1, [pc, #24]	; (4bc4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4baa:	4b07      	ldr	r3, [pc, #28]	; (4bc8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4bac:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4bae:	885b      	ldrh	r3, [r3, #2]
    4bb0:	429a      	cmp	r2, r3
    4bb2:	d105      	bne.n	4bc0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4bb4:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4bb8:	b112      	cbz	r2, 4bc0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4bba:	6001      	str	r1, [r0, #0]
    4bbc:	2001      	movs	r0, #1
    4bbe:	4770      	bx	lr
    4bc0:	2000      	movs	r0, #0
    4bc2:	4770      	bx	lr
    4bc4:	2000119a 	.word	0x2000119a
    4bc8:	2000026c 	.word	0x2000026c

00004bcc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4bcc:	4909      	ldr	r1, [pc, #36]	; (4bf4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4bce:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4bd0:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4bd4:	3bff      	subs	r3, #255	; 0xff
    4bd6:	d002      	beq.n	4bde <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4bd8:	2100      	movs	r1, #0
    4bda:	6001      	str	r1, [r0, #0]
    4bdc:	e007      	b.n	4bee <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4bde:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4be2:	4904      	ldr	r1, [pc, #16]	; (4bf4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4be4:	2a01      	cmp	r2, #1
    4be6:	d002      	beq.n	4bee <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4be8:	6001      	str	r1, [r0, #0]
    4bea:	2001      	movs	r0, #1
    4bec:	4770      	bx	lr
    4bee:	2000      	movs	r0, #0
    4bf0:	4770      	bx	lr
    4bf2:	0000      	.short	0x0000
    4bf4:	2000119a 	.word	0x2000119a

00004bf8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4bf8:	4901      	ldr	r1, [pc, #4]	; (4c00 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4bfa:	8008      	strh	r0, [r1, #0]
    4bfc:	4770      	bx	lr
    4bfe:	0000      	.short	0x0000
    4c00:	2000026c 	.word	0x2000026c

00004c04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4c04:	4905      	ldr	r1, [pc, #20]	; (4c1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4c06:	2000      	movs	r0, #0
    4c08:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4c0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4c10:	8488      	strh	r0, [r1, #36]	; 0x24
    4c12:	4903      	ldr	r1, [pc, #12]	; (4c20 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4c14:	8008      	strh	r0, [r1, #0]
    4c16:	8048      	strh	r0, [r1, #2]
    4c18:	4770      	bx	lr
    4c1a:	0000      	.short	0x0000
    4c1c:	2000119a 	.word	0x2000119a
    4c20:	2000026c 	.word	0x2000026c
    4c24:	4905      	ldr	r1, [pc, #20]	; (4c3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4c26:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4c28:	4282      	cmp	r2, r0
    4c2a:	d105      	bne.n	4c38 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4c2c:	2000      	movs	r0, #0
    4c2e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4c32:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4c36:	8488      	strh	r0, [r1, #36]	; 0x24
    4c38:	4770      	bx	lr
    4c3a:	0000      	.short	0x0000
    4c3c:	2000119a 	.word	0x2000119a

00004c40 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4c40:	4a0a      	ldr	r2, [pc, #40]	; (4c6c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4c42:	b110      	cbz	r0, 4c4a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4c44:	2801      	cmp	r0, #1
    4c46:	d007      	beq.n	4c58 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4c48:	e00e      	b.n	4c68 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c4a:	7850      	ldrb	r0, [r2, #1]
    4c4c:	b160      	cbz	r0, 4c68 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c4e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4c52:	6008      	str	r0, [r1, #0]
    4c54:	88d0      	ldrh	r0, [r2, #6]
    4c56:	e004      	b.n	4c62 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4c58:	7810      	ldrb	r0, [r2, #0]
    4c5a:	b128      	cbz	r0, 4c68 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c5c:	6890      	ldr	r0, [r2, #8]
    4c5e:	6008      	str	r0, [r1, #0]
    4c60:	8990      	ldrh	r0, [r2, #12]
    4c62:	8088      	strh	r0, [r1, #4]
    4c64:	2001      	movs	r0, #1
    4c66:	4770      	bx	lr
    4c68:	2000      	movs	r0, #0
    4c6a:	4770      	bx	lr
    4c6c:	20000280 	.word	0x20000280

00004c70 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4c70:	4a08      	ldr	r2, [pc, #32]	; (4c94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4c72:	2301      	movs	r3, #1
    4c74:	b138      	cbz	r0, 4c86 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4c76:	2801      	cmp	r0, #1
    4c78:	d104      	bne.n	4c84 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4c7a:	7013      	strb	r3, [r2, #0]
    4c7c:	6808      	ldr	r0, [r1, #0]
    4c7e:	6090      	str	r0, [r2, #8]
    4c80:	8888      	ldrh	r0, [r1, #4]
    4c82:	8190      	strh	r0, [r2, #12]
    4c84:	4770      	bx	lr
    4c86:	7053      	strb	r3, [r2, #1]
    4c88:	6808      	ldr	r0, [r1, #0]
    4c8a:	f8c2 0002 	str.w	r0, [r2, #2]
    4c8e:	8888      	ldrh	r0, [r1, #4]
    4c90:	80d0      	strh	r0, [r2, #6]
    4c92:	4770      	bx	lr
    4c94:	20000280 	.word	0x20000280

00004c98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4c98:	4906      	ldr	r1, [pc, #24]	; (4cb4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4c9a:	b110      	cbz	r0, 4ca2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4c9c:	2801      	cmp	r0, #1
    4c9e:	d002      	beq.n	4ca6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4ca0:	e005      	b.n	4cae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4ca2:	7848      	ldrb	r0, [r1, #1]
    4ca4:	e000      	b.n	4ca8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4ca6:	7808      	ldrb	r0, [r1, #0]
    4ca8:	b108      	cbz	r0, 4cae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4caa:	2001      	movs	r0, #1
    4cac:	4770      	bx	lr
    4cae:	2000      	movs	r0, #0
    4cb0:	4770      	bx	lr
    4cb2:	0000      	.short	0x0000
    4cb4:	20000280 	.word	0x20000280

00004cb8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4cb8:	4901      	ldr	r1, [pc, #4]	; (4cc0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4cba:	7448      	strb	r0, [r1, #17]
    4cbc:	4770      	bx	lr
    4cbe:	0000      	.short	0x0000
    4cc0:	20000aba 	.word	0x20000aba

00004cc4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4cc4:	4801      	ldr	r0, [pc, #4]	; (4ccc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4cc6:	78c0      	ldrb	r0, [r0, #3]
    4cc8:	4770      	bx	lr
    4cca:	0000      	.short	0x0000
    4ccc:	200000a8 	.word	0x200000a8

00004cd0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4cd0:	4801      	ldr	r0, [pc, #4]	; (4cd8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4cd2:	7900      	ldrb	r0, [r0, #4]
    4cd4:	4770      	bx	lr
    4cd6:	0000      	.short	0x0000
    4cd8:	200000a8 	.word	0x200000a8

00004cdc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4cdc:	b530      	push	{r4, r5, lr}
    4cde:	490c      	ldr	r1, [pc, #48]	; (4d10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x34>)
    4ce0:	7c4a      	ldrb	r2, [r1, #17]
    4ce2:	b19a      	cbz	r2, 4d0c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x30>
    4ce4:	7c0a      	ldrb	r2, [r1, #16]
    4ce6:	b18a      	cbz	r2, 4d0c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x30>
    4ce8:	2200      	movs	r2, #0
    4cea:	231a      	movs	r3, #26
    4cec:	f1a1 0452 	sub.w	r4, r1, #82	; 0x52
    4cf0:	740a      	strb	r2, [r1, #16]
    4cf2:	7042      	strb	r2, [r0, #1]
    4cf4:	7003      	strb	r3, [r0, #0]
    4cf6:	f8d4 505a 	ldr.w	r5, [r4, #90]	; 0x5a
    4cfa:	6045      	str	r5, [r0, #4]
    4cfc:	f8d4 505e 	ldr.w	r5, [r4, #94]	; 0x5e
    4d00:	6085      	str	r5, [r0, #8]
    4d02:	7c0d      	ldrb	r5, [r1, #16]
    4d04:	2d00      	cmp	r5, #0
    4d06:	d1f3      	bne.n	4cf0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x14>
    4d08:	2001      	movs	r0, #1
    4d0a:	bd30      	pop	{r4, r5, pc}
    4d0c:	2000      	movs	r0, #0
    4d0e:	bd30      	pop	{r4, r5, pc}
    4d10:	20000aba 	.word	0x20000aba

00004d14 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4d14:	b570      	push	{r4, r5, r6, lr}
    4d16:	460c      	mov	r4, r1
    4d18:	4605      	mov	r5, r0
    4d1a:	f000 f929 	bl	4f70 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4d1e:	b118      	cbz	r0, 4d28 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4d20:	21aa      	movs	r1, #170	; 0xaa
    4d22:	2027      	movs	r0, #39	; 0x27
    4d24:	f7ff f960 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d28:	4803      	ldr	r0, [pc, #12]	; (4d38 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4d2a:	2101      	movs	r1, #1
    4d2c:	f008 fe07 	bl	d93e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4d30:	4802      	ldr	r0, [pc, #8]	; (4d3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    4d32:	71c5      	strb	r5, [r0, #7]
    4d34:	62c4      	str	r4, [r0, #44]	; 0x2c
    4d36:	bd70      	pop	{r4, r5, r6, pc}
    4d38:	20000a98 	.word	0x20000a98
    4d3c:	200000a8 	.word	0x200000a8

00004d40 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4d40:	4901      	ldr	r1, [pc, #4]	; (4d48 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4d42:	2001      	movs	r0, #1
    4d44:	7188      	strb	r0, [r1, #6]
    4d46:	4770      	bx	lr
    4d48:	200000a8 	.word	0x200000a8

00004d4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d50:	4d4c      	ldr	r5, [pc, #304]	; (4e84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>)
    4d52:	b086      	sub	sp, #24
    4d54:	782e      	ldrb	r6, [r5, #0]
    4d56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    4d58:	2e00      	cmp	r6, #0
    4d5a:	d174      	bne.n	4e46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4d5c:	2a00      	cmp	r2, #0
    4d5e:	d072      	beq.n	4e46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4d60:	2b00      	cmp	r3, #0
    4d62:	d070      	beq.n	4e46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4d64:	2c00      	cmp	r4, #0
    4d66:	d06e      	beq.n	4e46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4d68:	f105 0714 	add.w	r7, r5, #20
    4d6c:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4d70:	e887 001c 	stmia.w	r7, {r2, r3, r4}
    4d74:	71ae      	strb	r6, [r5, #6]
    4d76:	716e      	strb	r6, [r5, #5]
    4d78:	70ee      	strb	r6, [r5, #3]
    4d7a:	70ae      	strb	r6, [r5, #2]
    4d7c:	712e      	strb	r6, [r5, #4]
    4d7e:	81ae      	strh	r6, [r5, #12]
    4d80:	81ee      	strh	r6, [r5, #14]
    4d82:	f000 f92d 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d86:	4607      	mov	r7, r0
    4d88:	f000 f924 	bl	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4d8c:	4604      	mov	r4, r0
    4d8e:	f006 fb13 	bl	b3b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4d92:	f006 f83b 	bl	ae0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4d96:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4d9a:	f006 fb89 	bl	b4b0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4d9e:	f104 0016 	add.w	r0, r4, #22
    4da2:	f006 fc8d 	bl	b6c0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4da6:	f104 0012 	add.w	r0, r4, #18
    4daa:	f006 fc7d 	bl	b6a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4dae:	7ef8      	ldrb	r0, [r7, #27]
    4db0:	f006 fca0 	bl	b6f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4db4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4db8:	6840      	ldr	r0, [r0, #4]
    4dba:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4dbe:	b108      	cbz	r0, 4dc4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4dc0:	f006 fa4a 	bl	b258 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4dc4:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4dc8:	2001      	movs	r0, #1
    4dca:	f006 f977 	bl	b0bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4dce:	2800      	cmp	r0, #0
    4dd0:	d050      	beq.n	4e74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4dd2:	46b0      	mov	r8, r6
    4dd4:	2001      	movs	r0, #1
    4dd6:	f006 fa7f 	bl	b2d8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4dda:	2214      	movs	r2, #20
    4ddc:	492a      	ldr	r1, [pc, #168]	; (4e88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13c>)
    4dde:	4668      	mov	r0, sp
    4de0:	f007 f97f 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4de4:	4668      	mov	r0, sp
    4de6:	f006 f9e3 	bl	b1b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4dea:	8820      	ldrh	r0, [r4, #0]
    4dec:	f7ff fd28 	bl	4840 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4df0:	6328      	str	r0, [r5, #48]	; 0x30
    4df2:	8820      	ldrh	r0, [r4, #0]
    4df4:	f7ff fd0e 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4df8:	6368      	str	r0, [r5, #52]	; 0x34
    4dfa:	f107 0058 	add.w	r0, r7, #88	; 0x58
    4dfe:	4e23      	ldr	r6, [pc, #140]	; (4e8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4e00:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    4e02:	f106 0c08 	add.w	ip, r6, #8
    4e06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    4e0a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4e0c:	f8c6 0021 	str.w	r0, [r6, #33]	; 0x21
    4e10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    4e12:	f8c6 0025 	str.w	r0, [r6, #37]	; 0x25
    4e16:	20ff      	movs	r0, #255	; 0xff
    4e18:	7268      	strb	r0, [r5, #9]
    4e1a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    4e1c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    4e1e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    4e22:	7cb8      	ldrb	r0, [r7, #18]
    4e24:	f008 fa17 	bl	d256 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4e28:	7cb9      	ldrb	r1, [r7, #18]
    4e2a:	b101      	cbz	r1, 4e2e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe2>
    4e2c:	2104      	movs	r1, #4
    4e2e:	4408      	add	r0, r1
    4e30:	b2c0      	uxtb	r0, r0
    4e32:	7228      	strb	r0, [r5, #8]
    4e34:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4e38:	1d09      	adds	r1, r1, #4
    4e3a:	4281      	cmp	r1, r0
    4e3c:	d205      	bcs.n	4e4a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4e3e:	f240 1169 	movw	r1, #361	; 0x169
    4e42:	e01c      	b.n	4e7e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4e44:	e7ff      	b.n	4e46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4e46:	21d3      	movs	r1, #211	; 0xd3
    4e48:	e019      	b.n	4e7e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4e4a:	4645      	mov	r5, r8
    4e4c:	2001      	movs	r0, #1
    4e4e:	f000 fb43 	bl	54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    4e52:	480f      	ldr	r0, [pc, #60]	; (4e90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>)
    4e54:	6800      	ldr	r0, [r0, #0]
    4e56:	2803      	cmp	r0, #3
    4e58:	d00f      	beq.n	4e7a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4e5a:	280b      	cmp	r0, #11
    4e5c:	d00d      	beq.n	4e7a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4e5e:	f846 5f52 	str.w	r5, [r6, #82]!
    4e62:	480a      	ldr	r0, [pc, #40]	; (4e8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4e64:	6075      	str	r5, [r6, #4]
    4e66:	3052      	adds	r0, #82	; 0x52
    4e68:	8839      	ldrh	r1, [r7, #0]
    4e6a:	8041      	strh	r1, [r0, #2]
    4e6c:	8821      	ldrh	r1, [r4, #0]
    4e6e:	8001      	strh	r1, [r0, #0]
    4e70:	7ef9      	ldrb	r1, [r7, #27]
    4e72:	7101      	strb	r1, [r0, #4]
    4e74:	b006      	add	sp, #24
    4e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e7a:	f240 1179 	movw	r1, #377	; 0x179
    4e7e:	2027      	movs	r0, #39	; 0x27
    4e80:	f7ff f8b2 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e84:	200000a8 	.word	0x200000a8
    4e88:	00005728 	.word	0x00005728
    4e8c:	20000a68 	.word	0x20000a68
    4e90:	40001550 	.word	0x40001550

00004e94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e98:	4606      	mov	r6, r0
    4e9a:	f000 f8a1 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e9e:	4d33      	ldr	r5, [pc, #204]	; (4f6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4ea0:	4604      	mov	r4, r0
    4ea2:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4ea4:	7847      	ldrb	r7, [r0, #1]
    4ea6:	b10e      	cbz	r6, 4eac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4ea8:	2e01      	cmp	r6, #1
    4eaa:	d103      	bne.n	4eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4eac:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4eae:	f007 fa7a 	bl	c3a6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4eb2:	7068      	strb	r0, [r5, #1]
    4eb4:	7868      	ldrb	r0, [r5, #1]
    4eb6:	f04f 0800 	mov.w	r8, #0
    4eba:	f04f 0901 	mov.w	r9, #1
    4ebe:	b150      	cbz	r0, 4ed6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4ec0:	2801      	cmp	r0, #1
    4ec2:	d01a      	beq.n	4efa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4ec4:	2802      	cmp	r0, #2
    4ec6:	d034      	beq.n	4f32 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4ec8:	2803      	cmp	r0, #3
    4eca:	d049      	beq.n	4f60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xcc>
    4ecc:	f240 31c7 	movw	r1, #967	; 0x3c7
    4ed0:	2027      	movs	r0, #39	; 0x27
    4ed2:	f7ff f889 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ed6:	2e01      	cmp	r6, #1
    4ed8:	d032      	beq.n	4f40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4eda:	f000 f8eb 	bl	50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4ede:	4639      	mov	r1, r7
    4ee0:	2201      	movs	r2, #1
    4ee2:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4ee4:	f007 fe74 	bl	cbd0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4ee8:	e028      	b.n	4f3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4eea:	bf00      	nop
    4eec:	f884 8007 	strb.w	r8, [r4, #7]
    4ef0:	e031      	b.n	4f56 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4ef2:	bf00      	nop
    4ef4:	f884 9007 	strb.w	r9, [r4, #7]
    4ef8:	e02d      	b.n	4f56 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4efa:	2e01      	cmp	r6, #1
    4efc:	d008      	beq.n	4f10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4efe:	f000 f8d9 	bl	50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4f02:	4639      	mov	r1, r7
    4f04:	2200      	movs	r2, #0
    4f06:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4f08:	f007 fe62 	bl	cbd0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f0c:	2e02      	cmp	r6, #2
    4f0e:	d00b      	beq.n	4f28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f10:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4f14:	1c40      	adds	r0, r0, #1
    4f16:	f141 0100 	adc.w	r1, r1, #0
    4f1a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4f1e:	79e0      	ldrb	r0, [r4, #7]
    4f20:	2801      	cmp	r0, #1
    4f22:	d003      	beq.n	4f2c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4f24:	f884 9007 	strb.w	r9, [r4, #7]
    4f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f2c:	f884 8007 	strb.w	r8, [r4, #7]
    4f30:	e7fa      	b.n	4f28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f32:	2e01      	cmp	r6, #1
    4f34:	d004      	beq.n	4f40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4f36:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4f38:	f008 f850 	bl	cfdc <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4f3c:	2e02      	cmp	r6, #2
    4f3e:	d0f3      	beq.n	4f28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f40:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4f44:	1c40      	adds	r0, r0, #1
    4f46:	f141 0100 	adc.w	r1, r1, #0
    4f4a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4f4e:	79e0      	ldrb	r0, [r4, #7]
    4f50:	2801      	cmp	r0, #1
    4f52:	d1cf      	bne.n	4ef4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4f54:	e7ca      	b.n	4eec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4f56:	79e8      	ldrb	r0, [r5, #7]
    4f58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f5c:	f7fe beac 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4f60:	2e01      	cmp	r6, #1
    4f62:	d0e1      	beq.n	4f28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f64:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4f66:	f008 f839 	bl	cfdc <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4f6a:	e7f4      	b.n	4f56 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f6c:	200000a8 	.word	0x200000a8

00004f70 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4f70:	4804      	ldr	r0, [pc, #16]	; (4f84 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4f72:	7800      	ldrb	r0, [r0, #0]
    4f74:	b108      	cbz	r0, 4f7a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4f76:	200c      	movs	r0, #12
    4f78:	4770      	bx	lr
    4f7a:	4903      	ldr	r1, [pc, #12]	; (4f88 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4f7c:	2000      	movs	r0, #0
    4f7e:	7448      	strb	r0, [r1, #17]
    4f80:	4770      	bx	lr
    4f82:	0000      	.short	0x0000
    4f84:	200000a8 	.word	0x200000a8
    4f88:	20000aba 	.word	0x20000aba

00004f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4f8c:	480c      	ldr	r0, [pc, #48]	; (4fc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4f8e:	b510      	push	{r4, lr}
    4f90:	7801      	ldrb	r1, [r0, #0]
    4f92:	b149      	cbz	r1, 4fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4f94:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4f98:	7800      	ldrb	r0, [r0, #0]
    4f9a:	2802      	cmp	r0, #2
    4f9c:	d008      	beq.n	4fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4f9e:	f240 1195 	movw	r1, #405	; 0x195
    4fa2:	2027      	movs	r0, #39	; 0x27
    4fa4:	f7ff f820 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fac:	f000 b9a8 	b.w	5300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    4fb0:	6848      	ldr	r0, [r1, #4]
    4fb2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fba:	f006 b901 	b.w	b1c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4fbe:	0000      	.short	0x0000
    4fc0:	200000a8 	.word	0x200000a8
    4fc4:	4a02      	ldr	r2, [pc, #8]	; (4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4fc6:	8993      	ldrh	r3, [r2, #12]
    4fc8:	4303      	orrs	r3, r0
    4fca:	8193      	strh	r3, [r2, #12]
    4fcc:	6952      	ldr	r2, [r2, #20]
    4fce:	4710      	bx	r2
    4fd0:	200000a8 	.word	0x200000a8
    4fd4:	4801      	ldr	r0, [pc, #4]	; (4fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4fd6:	6840      	ldr	r0, [r0, #4]
    4fd8:	4770      	bx	lr
    4fda:	0000      	.short	0x0000
    4fdc:	200000e0 	.word	0x200000e0
    4fe0:	4801      	ldr	r0, [pc, #4]	; (4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4fe2:	6840      	ldr	r0, [r0, #4]
    4fe4:	3070      	adds	r0, #112	; 0x70
    4fe6:	4770      	bx	lr
    4fe8:	200000e0 	.word	0x200000e0
    4fec:	4a01      	ldr	r2, [pc, #4]	; (4ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4fee:	2100      	movs	r1, #0
    4ff0:	6952      	ldr	r2, [r2, #20]
    4ff2:	4710      	bx	r2
    4ff4:	200000a8 	.word	0x200000a8
    4ff8:	b570      	push	{r4, r5, r6, lr}
    4ffa:	f006 fb13 	bl	b624 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    4ffe:	f7ff ffef 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5002:	4604      	mov	r4, r0
    5004:	f7ff ffe6 	bl	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5008:	4605      	mov	r5, r0
    500a:	4621      	mov	r1, r4
    500c:	f008 fab8 	bl	d580 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5010:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    5014:	2901      	cmp	r1, #1
    5016:	d116      	bne.n	5046 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xba>
    5018:	2800      	cmp	r0, #0
    501a:	d014      	beq.n	5046 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xba>
    501c:	480a      	ldr	r0, [pc, #40]	; (5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    501e:	6842      	ldr	r2, [r0, #4]
    5020:	8828      	ldrh	r0, [r5, #0]
    5022:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    5026:	7a20      	ldrb	r0, [r4, #8]
    5028:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    502c:	7a60      	ldrb	r0, [r4, #9]
    502e:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    5032:	2001      	movs	r0, #1
    5034:	f882 01ec 	strb.w	r0, [r2, #492]	; 0x1ec
    5038:	4803      	ldr	r0, [pc, #12]	; (5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    503a:	3838      	subs	r0, #56	; 0x38
    503c:	79c0      	ldrb	r0, [r0, #7]
    503e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5042:	f7fe be39 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5046:	bd70      	pop	{r4, r5, r6, pc}
    5048:	200000e0 	.word	0x200000e0
    504c:	b570      	push	{r4, r5, r6, lr}
    504e:	4c18      	ldr	r4, [pc, #96]	; (50b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    5050:	4605      	mov	r5, r0
    5052:	b939      	cbnz	r1, 5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    5054:	2d01      	cmp	r5, #1
    5056:	d105      	bne.n	5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    5058:	78e0      	ldrb	r0, [r4, #3]
    505a:	1c40      	adds	r0, r0, #1
    505c:	b2c0      	uxtb	r0, r0
    505e:	70e0      	strb	r0, [r4, #3]
    5060:	2801      	cmp	r0, #1
    5062:	d818      	bhi.n	5096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    5064:	69a1      	ldr	r1, [r4, #24]
    5066:	4628      	mov	r0, r5
    5068:	4788      	blx	r1
    506a:	b1a0      	cbz	r0, 5096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    506c:	7960      	ldrb	r0, [r4, #5]
    506e:	b990      	cbnz	r0, 5096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    5070:	b9e5      	cbnz	r5, 50ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5072:	480f      	ldr	r0, [pc, #60]	; (50b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    5074:	3010      	adds	r0, #16
    5076:	7801      	ldrb	r1, [r0, #0]
    5078:	06c8      	lsls	r0, r1, #27
    507a:	d405      	bmi.n	5088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    507c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    507e:	7800      	ldrb	r0, [r0, #0]
    5080:	06c0      	lsls	r0, r0, #27
    5082:	d401      	bmi.n	5088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    5084:	2001      	movs	r0, #1
    5086:	e000      	b.n	508a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5088:	2000      	movs	r0, #0
    508a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    508c:	b92a      	cbnz	r2, 509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    508e:	8962      	ldrh	r2, [r4, #10]
    5090:	b11a      	cbz	r2, 509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    5092:	06c9      	lsls	r1, r1, #27
    5094:	d401      	bmi.n	509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    5096:	2001      	movs	r0, #1
    5098:	bd70      	pop	{r4, r5, r6, pc}
    509a:	89a1      	ldrh	r1, [r4, #12]
    509c:	078a      	lsls	r2, r1, #30
    509e:	d503      	bpl.n	50a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    50a0:	6a22      	ldr	r2, [r4, #32]
    50a2:	78d2      	ldrb	r2, [r2, #3]
    50a4:	2a02      	cmp	r2, #2
    50a6:	d001      	beq.n	50ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    50a8:	4308      	orrs	r0, r1
    50aa:	d1f4      	bne.n	5096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    50ac:	2000      	movs	r0, #0
    50ae:	bd70      	pop	{r4, r5, r6, pc}
    50b0:	200000a8 	.word	0x200000a8
    50b4:	b510      	push	{r4, lr}
    50b6:	4c08      	ldr	r4, [pc, #32]	; (50d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>)
    50b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50ba:	b138      	cbz	r0, 50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x140>
    50bc:	8962      	ldrh	r2, [r4, #10]
    50be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    50c0:	1cd2      	adds	r2, r2, #3
    50c2:	f007 f80e 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    50c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50c8:	6260      	str	r0, [r4, #36]	; 0x24
    50ca:	bd10      	pop	{r4, pc}
    50cc:	f240 410e 	movw	r1, #1038	; 0x40e
    50d0:	2027      	movs	r0, #39	; 0x27
    50d2:	f7fe ff89 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d6:	0000      	.short	0x0000
    50d8:	200000a8 	.word	0x200000a8
    50dc:	b510      	push	{r4, lr}
    50de:	f7ff ff79 	bl	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    50e2:	4604      	mov	r4, r0
    50e4:	f7ff ff7c 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50e8:	4601      	mov	r1, r0
    50ea:	7b02      	ldrb	r2, [r0, #12]
    50ec:	4815      	ldr	r0, [pc, #84]	; (5144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b8>)
    50ee:	2a24      	cmp	r2, #36	; 0x24
    50f0:	d00e      	beq.n	5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    50f2:	7b49      	ldrb	r1, [r1, #13]
    50f4:	2924      	cmp	r1, #36	; 0x24
    50f6:	d00b      	beq.n	5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    50f8:	2a1f      	cmp	r2, #31
    50fa:	d00d      	beq.n	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    50fc:	2a20      	cmp	r2, #32
    50fe:	d00b      	beq.n	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5100:	2922      	cmp	r1, #34	; 0x22
    5102:	d00f      	beq.n	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5104:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    5108:	2804      	cmp	r0, #4
    510a:	d100      	bne.n	510e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x182>
    510c:	2008      	movs	r0, #8
    510e:	bd10      	pop	{r4, pc}
    5110:	6840      	ldr	r0, [r0, #4]
    5112:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    5116:	e00e      	b.n	5136 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    5118:	2922      	cmp	r1, #34	; 0x22
    511a:	d003      	beq.n	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    511c:	6840      	ldr	r0, [r0, #4]
    511e:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    5122:	e005      	b.n	5130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5124:	6841      	ldr	r1, [r0, #4]
    5126:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    512a:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    512e:	4008      	ands	r0, r1
    5130:	f008 f879 	bl	d226 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5134:	4601      	mov	r1, r0
    5136:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    513e:	f008 b89d 	b.w	d27c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x5a>
    5142:	0000      	.short	0x0000
    5144:	200000e0 	.word	0x200000e0
    5148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    514c:	4688      	mov	r8, r1
    514e:	4606      	mov	r6, r0
    5150:	f7ff ff46 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5154:	4c45      	ldr	r4, [pc, #276]	; (526c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    5156:	2700      	movs	r7, #0
    5158:	4605      	mov	r5, r0
    515a:	f88d 7000 	strb.w	r7, [sp]
    515e:	7820      	ldrb	r0, [r4, #0]
    5160:	2802      	cmp	r0, #2
    5162:	d004      	beq.n	516e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    5164:	f44f 618c 	mov.w	r1, #1120	; 0x460
    5168:	2027      	movs	r0, #39	; 0x27
    516a:	f7fe ff3d 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    516e:	7ba0      	ldrb	r0, [r4, #14]
    5170:	0640      	lsls	r0, r0, #25
    5172:	d406      	bmi.n	5182 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    5174:	2040      	movs	r0, #64	; 0x40
    5176:	f7ff ff39 	bl	4fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    517a:	89e0      	ldrh	r0, [r4, #14]
    517c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5180:	81e0      	strh	r0, [r4, #14]
    5182:	483b      	ldr	r0, [pc, #236]	; (5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>)
    5184:	b3ee      	cbz	r6, 5202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x276>
    5186:	7941      	ldrb	r1, [r0, #5]
    5188:	1c49      	adds	r1, r1, #1
    518a:	7141      	strb	r1, [r0, #5]
    518c:	7ca8      	ldrb	r0, [r5, #18]
    518e:	f005 feb5 	bl	aefc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5192:	f005 fe99 	bl	aec8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5196:	b968      	cbnz	r0, 51b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    5198:	7ca8      	ldrb	r0, [r5, #18]
    519a:	b158      	cbz	r0, 51b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    519c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    519e:	7841      	ldrb	r1, [r0, #1]
    51a0:	b141      	cbz	r1, 51b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    51a2:	7800      	ldrb	r0, [r0, #0]
    51a4:	79e9      	ldrb	r1, [r5, #7]
    51a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    51aa:	4288      	cmp	r0, r1
    51ac:	d102      	bne.n	51b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    51ae:	2001      	movs	r0, #1
    51b0:	70a0      	strb	r0, [r4, #2]
    51b2:	e043      	b.n	523c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    51b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51b6:	7841      	ldrb	r1, [r0, #1]
    51b8:	8161      	strh	r1, [r4, #10]
    51ba:	b121      	cbz	r1, 51c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    51bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51be:	f007 feda 	bl	cf76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    51c2:	62a0      	str	r0, [r4, #40]	; 0x28
    51c4:	e000      	b.n	51c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    51c6:	62a7      	str	r7, [r4, #40]	; 0x28
    51c8:	89e0      	ldrh	r0, [r4, #14]
    51ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    51ce:	81e0      	strh	r0, [r4, #14]
    51d0:	70e7      	strb	r7, [r4, #3]
    51d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51d4:	79a9      	ldrb	r1, [r5, #6]
    51d6:	7800      	ldrb	r0, [r0, #0]
    51d8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    51dc:	4288      	cmp	r0, r1
    51de:	d005      	beq.n	51ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    51e0:	f000 f92c 	bl	543c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    51e4:	89e0      	ldrh	r0, [r4, #14]
    51e6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    51ea:	81e0      	strh	r0, [r4, #14]
    51ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51ee:	79e9      	ldrb	r1, [r5, #7]
    51f0:	7800      	ldrb	r0, [r0, #0]
    51f2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    51f6:	4288      	cmp	r0, r1
    51f8:	d10f      	bne.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    51fa:	4668      	mov	r0, sp
    51fc:	f000 f8da 	bl	53b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>
    5200:	e00b      	b.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5202:	e7ff      	b.n	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    5204:	7981      	ldrb	r1, [r0, #6]
    5206:	1c49      	adds	r1, r1, #1
    5208:	7181      	strb	r1, [r0, #6]
    520a:	7ca8      	ldrb	r0, [r5, #18]
    520c:	b108      	cbz	r0, 5212 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    520e:	f005 fe6f 	bl	aef0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5212:	89e0      	ldrh	r0, [r4, #14]
    5214:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5218:	81e0      	strh	r0, [r4, #14]
    521a:	f1b8 0f00 	cmp.w	r8, #0
    521e:	d104      	bne.n	522a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5220:	4631      	mov	r1, r6
    5222:	2001      	movs	r0, #1
    5224:	f7ff ff12 	bl	504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    5228:	b160      	cbz	r0, 5244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    522a:	f89d 0000 	ldrb.w	r0, [sp]
    522e:	b110      	cbz	r0, 5236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5230:	2000      	movs	r0, #0
    5232:	f7ff fe2f 	bl	4e94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5236:	b10e      	cbz	r6, 523c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    5238:	f7ff fede 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    523c:	f000 f860 	bl	5300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5244:	f89d 0000 	ldrb.w	r0, [sp]
    5248:	b110      	cbz	r0, 5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    524a:	2001      	movs	r0, #1
    524c:	f7ff fe22 	bl	4e94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5250:	2000      	movs	r0, #0
    5252:	f000 f995 	bl	5580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    5256:	f89d 0000 	ldrb.w	r0, [sp]
    525a:	b110      	cbz	r0, 5262 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    525c:	2002      	movs	r0, #2
    525e:	f7ff fe19 	bl	4e94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5262:	2e00      	cmp	r6, #0
    5264:	d0ec      	beq.n	5240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5266:	f7ff fec7 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    526a:	e7e9      	b.n	5240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    526c:	200000a8 	.word	0x200000a8
    5270:	20000aba 	.word	0x20000aba
    5274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5278:	460e      	mov	r6, r1
    527a:	4680      	mov	r8, r0
    527c:	f7ff feb0 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5280:	4d1e      	ldr	r5, [pc, #120]	; (52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>)
    5282:	4604      	mov	r4, r0
    5284:	7828      	ldrb	r0, [r5, #0]
    5286:	2801      	cmp	r0, #1
    5288:	d004      	beq.n	5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    528a:	f240 411d 	movw	r1, #1053	; 0x41d
    528e:	2027      	movs	r0, #39	; 0x27
    5290:	f7fe feaa 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5294:	78a0      	ldrb	r0, [r4, #2]
    5296:	2701      	movs	r7, #1
    5298:	b130      	cbz	r0, 52a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    529a:	2000      	movs	r0, #0
    529c:	70a0      	strb	r0, [r4, #2]
    529e:	4601      	mov	r1, r0
    52a0:	2004      	movs	r0, #4
    52a2:	f7ff fe8f 	bl	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52a6:	7127      	strb	r7, [r4, #4]
    52a8:	6a29      	ldr	r1, [r5, #32]
    52aa:	7808      	ldrb	r0, [r1, #0]
    52ac:	43c0      	mvns	r0, r0
    52ae:	0780      	lsls	r0, r0, #30
    52b0:	d109      	bne.n	52c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    52b2:	7960      	ldrb	r0, [r4, #5]
    52b4:	b9d0      	cbnz	r0, 52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    52b6:	2002      	movs	r0, #2
    52b8:	f7ff fe84 	bl	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52bc:	6a28      	ldr	r0, [r5, #32]
    52be:	7800      	ldrb	r0, [r0, #0]
    52c0:	43c0      	mvns	r0, r0
    52c2:	0780      	lsls	r0, r0, #30
    52c4:	d012      	beq.n	52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    52c6:	6a28      	ldr	r0, [r5, #32]
    52c8:	7840      	ldrb	r0, [r0, #1]
    52ca:	b110      	cbz	r0, 52d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    52cc:	2002      	movs	r0, #2
    52ce:	7160      	strb	r0, [r4, #5]
    52d0:	e000      	b.n	52d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x348>
    52d2:	7167      	strb	r7, [r4, #5]
    52d4:	ea36 0608 	bics.w	r6, r6, r8
    52d8:	d004      	beq.n	52e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    52da:	2101      	movs	r1, #1
    52dc:	2000      	movs	r0, #0
    52de:	f7ff feb5 	bl	504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    52e2:	b128      	cbz	r0, 52f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    52e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52e8:	f000 b80a 	b.w	5300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    52ec:	2003      	movs	r0, #3
    52ee:	e7ee      	b.n	52ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    52f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52f4:	2000      	movs	r0, #0
    52f6:	f000 b8ef 	b.w	54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    52fa:	0000      	.short	0x0000
    52fc:	200000a8 	.word	0x200000a8
    5300:	b510      	push	{r4, lr}
    5302:	f005 fe93 	bl	b02c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5306:	f005 fd81 	bl	ae0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    530a:	f006 f98b 	bl	b624 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    530e:	4c0d      	ldr	r4, [pc, #52]	; (5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5310:	89e0      	ldrh	r0, [r4, #14]
    5312:	f7ff fe6b 	bl	4fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5316:	69e2      	ldr	r2, [r4, #28]
    5318:	7961      	ldrb	r1, [r4, #5]
    531a:	78a0      	ldrb	r0, [r4, #2]
    531c:	4790      	blx	r2
    531e:	480a      	ldr	r0, [pc, #40]	; (5348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>)
    5320:	7c41      	ldrb	r1, [r0, #17]
    5322:	b159      	cbz	r1, 533c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    5324:	f1a0 0152 	sub.w	r1, r0, #82	; 0x52
    5328:	f851 2f52 	ldr.w	r2, [r1, #82]!
    532c:	608a      	str	r2, [r1, #8]
    532e:	684a      	ldr	r2, [r1, #4]
    5330:	60ca      	str	r2, [r1, #12]
    5332:	2101      	movs	r1, #1
    5334:	7401      	strb	r1, [r0, #16]
    5336:	79e0      	ldrb	r0, [r4, #7]
    5338:	f7fe fcbe 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    533c:	2000      	movs	r0, #0
    533e:	7020      	strb	r0, [r4, #0]
    5340:	bd10      	pop	{r4, pc}
    5342:	0000      	.short	0x0000
    5344:	200000a8 	.word	0x200000a8
    5348:	20000aba 	.word	0x20000aba
    534c:	4808      	ldr	r0, [pc, #32]	; (5370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>)
    534e:	b510      	push	{r4, lr}
    5350:	7800      	ldrb	r0, [r0, #0]
    5352:	2802      	cmp	r0, #2
    5354:	d004      	beq.n	5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5356:	f240 11c7 	movw	r1, #455	; 0x1c7
    535a:	2027      	movs	r0, #39	; 0x27
    535c:	f7fe fe44 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5360:	4904      	ldr	r1, [pc, #16]	; (5374 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>)
    5362:	2001      	movs	r0, #1
    5364:	71c8      	strb	r0, [r1, #7]
    5366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    536a:	f7ff bfc9 	b.w	5300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    536e:	0000      	.short	0x0000
    5370:	200000a8 	.word	0x200000a8
    5374:	20000aba 	.word	0x20000aba
    5378:	b430      	push	{r4, r5}
    537a:	4b0d      	ldr	r3, [pc, #52]	; (53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    537c:	b94a      	cbnz	r2, 5392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x406>
    537e:	7a1a      	ldrb	r2, [r3, #8]
    5380:	7a5c      	ldrb	r4, [r3, #9]
    5382:	42a2      	cmp	r2, r4
    5384:	d105      	bne.n	5392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x406>
    5386:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    538a:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
    538e:	42a2      	cmp	r2, r4
    5390:	d00b      	beq.n	53aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41e>
    5392:	b131      	cbz	r1, 53a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x416>
    5394:	7a1a      	ldrb	r2, [r3, #8]
    5396:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    539a:	bc30      	pop	{r4, r5}
    539c:	4610      	mov	r0, r2
    539e:	f006 b997 	b.w	b6d0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    53a2:	7a5a      	ldrb	r2, [r3, #9]
    53a4:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    53a8:	e7f7      	b.n	539a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    53aa:	bc30      	pop	{r4, r5}
    53ac:	4770      	bx	lr
    53ae:	0000      	.short	0x0000
    53b0:	200000a8 	.word	0x200000a8
    53b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53b8:	4607      	mov	r7, r0
    53ba:	f7ff fe11 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    53be:	4604      	mov	r4, r0
    53c0:	481d      	ldr	r0, [pc, #116]	; (5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ac>)
    53c2:	2600      	movs	r6, #0
    53c4:	2501      	movs	r5, #1
    53c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    53c8:	780a      	ldrb	r2, [r1, #0]
    53ca:	f002 0203 	and.w	r2, r2, #3
    53ce:	2a01      	cmp	r2, #1
    53d0:	d015      	beq.n	53fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x472>
    53d2:	2a02      	cmp	r2, #2
    53d4:	d013      	beq.n	53fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x472>
    53d6:	2a03      	cmp	r2, #3
    53d8:	d003      	beq.n	53e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x456>
    53da:	7941      	ldrb	r1, [r0, #5]
    53dc:	f041 0104 	orr.w	r1, r1, #4
    53e0:	e024      	b.n	542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    53e2:	70a5      	strb	r5, [r4, #2]
    53e4:	89c2      	ldrh	r2, [r0, #14]
    53e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    53ea:	81c2      	strh	r2, [r0, #14]
    53ec:	2001      	movs	r0, #1
    53ee:	f7ff fde9 	bl	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    53f2:	e01d      	b.n	5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    53f4:	71e6      	strb	r6, [r4, #7]
    53f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53fa:	71e5      	strb	r5, [r4, #7]
    53fc:	e7fb      	b.n	53f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    53fe:	7849      	ldrb	r1, [r1, #1]
    5400:	b1b1      	cbz	r1, 5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5402:	89c2      	ldrh	r2, [r0, #14]
    5404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5408:	81c2      	strh	r2, [r0, #14]
    540a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    540c:	2a00      	cmp	r2, #0
    540e:	d0f2      	beq.n	53f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    5410:	29fb      	cmp	r1, #251	; 0xfb
    5412:	d808      	bhi.n	5426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49a>
    5414:	7980      	ldrb	r0, [r0, #6]
    5416:	b120      	cbz	r0, 5422 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    5418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    541c:	2020      	movs	r0, #32
    541e:	f7ff bde5 	b.w	4fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5422:	703d      	strb	r5, [r7, #0]
    5424:	e7e7      	b.n	53f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    5426:	7941      	ldrb	r1, [r0, #5]
    5428:	f041 0110 	orr.w	r1, r1, #16
    542c:	7141      	strb	r1, [r0, #5]
    542e:	e7e2      	b.n	53f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    5430:	79e0      	ldrb	r0, [r4, #7]
    5432:	2801      	cmp	r0, #1
    5434:	d1e1      	bne.n	53fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    5436:	e7dd      	b.n	53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5438:	200000a8 	.word	0x200000a8
    543c:	b570      	push	{r4, r5, r6, lr}
    543e:	f7ff fdcf 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5442:	4604      	mov	r4, r0
    5444:	7940      	ldrb	r0, [r0, #5]
    5446:	2800      	cmp	r0, #0
    5448:	d02f      	beq.n	54aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51e>
    544a:	2802      	cmp	r0, #2
    544c:	d10e      	bne.n	546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    544e:	4d1c      	ldr	r5, [pc, #112]	; (54c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>)
    5450:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5452:	f007 fb96 	bl	cb82 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5456:	b348      	cbz	r0, 54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x520>
    5458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    545c:	1c40      	adds	r0, r0, #1
    545e:	f141 0100 	adc.w	r1, r1, #0
    5462:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    5466:	79e8      	ldrb	r0, [r5, #7]
    5468:	f7fe fc26 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    546c:	2500      	movs	r5, #0
    546e:	7165      	strb	r5, [r4, #5]
    5470:	7920      	ldrb	r0, [r4, #4]
    5472:	b120      	cbz	r0, 547e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f2>
    5474:	7125      	strb	r5, [r4, #4]
    5476:	2100      	movs	r1, #0
    5478:	2010      	movs	r0, #16
    547a:	f7ff fda3 	bl	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    547e:	78e0      	ldrb	r0, [r4, #3]
    5480:	b170      	cbz	r0, 54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x514>
    5482:	70e5      	strb	r5, [r4, #3]
    5484:	f7ff fb66 	bl	4b54 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5488:	b198      	cbz	r0, 54b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x526>
    548a:	2100      	movs	r1, #0
    548c:	2008      	movs	r0, #8
    548e:	f7ff fd99 	bl	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    5496:	1c40      	adds	r0, r0, #1
    5498:	f141 0100 	adc.w	r1, r1, #0
    549c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    54a0:	79a0      	ldrb	r0, [r4, #6]
    54a2:	2801      	cmp	r0, #1
    54a4:	d00a      	beq.n	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x530>
    54a6:	2001      	movs	r0, #1
    54a8:	71a0      	strb	r0, [r4, #6]
    54aa:	bd70      	pop	{r4, r5, r6, pc}
    54ac:	f240 3162 	movw	r1, #866	; 0x362
    54b0:	e001      	b.n	54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    54b2:	f240 317a 	movw	r1, #890	; 0x37a
    54b6:	2027      	movs	r0, #39	; 0x27
    54b8:	f7fe fd96 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54bc:	71a5      	strb	r5, [r4, #6]
    54be:	bd70      	pop	{r4, r5, r6, pc}
    54c0:	200000a8 	.word	0x200000a8
    54c4:	4803      	ldr	r0, [pc, #12]	; (54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    54c6:	7800      	ldrb	r0, [r0, #0]
    54c8:	2800      	cmp	r0, #0
    54ca:	d001      	beq.n	54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>
    54cc:	f7ff bf18 	b.w	5300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    54d0:	4770      	bx	lr
    54d2:	0000      	.short	0x0000
    54d4:	200000a8 	.word	0x200000a8
    54d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54dc:	4681      	mov	r9, r0
    54de:	f7ff fd79 	bl	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    54e2:	4604      	mov	r4, r0
    54e4:	f7ff fd7c 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    54e8:	4607      	mov	r7, r0
    54ea:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    54ec:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    54ee:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    54f2:	7c80      	ldrb	r0, [r0, #18]
    54f4:	f007 feaf 	bl	d256 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    54f8:	4d1e      	ldr	r5, [pc, #120]	; (5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    54fa:	4606      	mov	r6, r0
    54fc:	464a      	mov	r2, r9
    54fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5500:	6268      	str	r0, [r5, #36]	; 0x24
    5502:	2101      	movs	r1, #1
    5504:	4620      	mov	r0, r4
    5506:	f7ff ff37 	bl	5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    550a:	7cb8      	ldrb	r0, [r7, #18]
    550c:	f04f 0800 	mov.w	r8, #0
    5510:	b1b8      	cbz	r0, 5542 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b6>
    5512:	4819      	ldr	r0, [pc, #100]	; (5578 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>)
    5514:	f005 ffd2 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5518:	4818      	ldr	r0, [pc, #96]	; (557c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f0>)
    551a:	2101      	movs	r1, #1
    551c:	7601      	strb	r1, [r0, #24]
    551e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5522:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5526:	4a14      	ldr	r2, [pc, #80]	; (5578 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>)
    5528:	6a69      	ldr	r1, [r5, #36]	; 0x24
    552a:	f005 fc5f 	bl	adec <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    552e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5532:	f007 fe82 	bl	d23a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5536:	4602      	mov	r2, r0
    5538:	4631      	mov	r1, r6
    553a:	2001      	movs	r0, #1
    553c:	f005 fc84 	bl	ae48 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5540:	e004      	b.n	554c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    5542:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5544:	f005 ffba 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5548:	f005 fc60 	bl	ae0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    554c:	f1b9 0f00 	cmp.w	r9, #0
    5550:	d102      	bne.n	5558 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>
    5552:	4640      	mov	r0, r8
    5554:	f005 fe58 	bl	b208 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5558:	2100      	movs	r1, #0
    555a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    555e:	2201      	movs	r2, #1
    5560:	4608      	mov	r0, r1
    5562:	f006 f837 	bl	b5d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5566:	f006 f869 	bl	b63c <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    556a:	2002      	movs	r0, #2
    556c:	7028      	strb	r0, [r5, #0]
    556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5572:	0000      	.short	0x0000
    5574:	200000a8 	.word	0x200000a8
    5578:	20000968 	.word	0x20000968
    557c:	20000a70 	.word	0x20000a70
    5580:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5584:	4604      	mov	r4, r0
    5586:	f7ff fd2b 	bl	4fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    558a:	4606      	mov	r6, r0
    558c:	f7ff fd22 	bl	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5590:	4605      	mov	r5, r0
    5592:	f8df 9188 	ldr.w	r9, [pc, #392]	; 571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    5596:	4622      	mov	r2, r4
    5598:	2100      	movs	r1, #0
    559a:	f7ff feed 	bl	5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    559e:	7970      	ldrb	r0, [r6, #5]
    55a0:	2701      	movs	r7, #1
    55a2:	f04f 0800 	mov.w	r8, #0
    55a6:	f1a9 0420 	sub.w	r4, r9, #32
    55aa:	b140      	cbz	r0, 55be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x632>
    55ac:	2801      	cmp	r0, #1
    55ae:	d028      	beq.n	5602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x676>
    55b0:	2802      	cmp	r0, #2
    55b2:	d039      	beq.n	5628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69c>
    55b4:	2803      	cmp	r0, #3
    55b6:	d045      	beq.n	5644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    55b8:	f44f 711b 	mov.w	r1, #620	; 0x26c
    55bc:	e061      	b.n	5682 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f6>
    55be:	f7ff fd8d 	bl	50dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    55c2:	4601      	mov	r1, r0
    55c4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    55c6:	f007 ff45 	bl	d454 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    55ca:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    55cc:	4281      	cmp	r1, r0
    55ce:	d200      	bcs.n	55d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x646>
    55d0:	4608      	mov	r0, r1
    55d2:	214c      	movs	r1, #76	; 0x4c
    55d4:	f8ad 0004 	strh.w	r0, [sp, #4]
    55d8:	5348      	strh	r0, [r1, r5]
    55da:	4648      	mov	r0, r9
    55dc:	f7ff fae4 	bl	4ba8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    55e0:	b128      	cbz	r0, 55ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x662>
    55e2:	2080      	movs	r0, #128	; 0x80
    55e4:	6a21      	ldr	r1, [r4, #32]
    55e6:	f7ff fced 	bl	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    55ea:	70f7      	strb	r7, [r6, #3]
    55ec:	e02e      	b.n	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    55ee:	466a      	mov	r2, sp
    55f0:	a901      	add	r1, sp, #4
    55f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55f4:	f007 fe4c 	bl	d290 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    55f8:	6220      	str	r0, [r4, #32]
    55fa:	b110      	cbz	r0, 5602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x676>
    55fc:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
    5600:	b111      	cbz	r1, 5608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67c>
    5602:	4847      	ldr	r0, [pc, #284]	; (5720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5604:	6220      	str	r0, [r4, #32]
    5606:	e021      	b.n	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    5608:	f89d 1000 	ldrb.w	r1, [sp]
    560c:	b931      	cbnz	r1, 561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x690>
    560e:	f8a0 8000 	strh.w	r8, [r0]
    5612:	f880 8002 	strb.w	r8, [r0, #2]
    5616:	2101      	movs	r1, #1
    5618:	f008 f991 	bl	d93e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    561c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5620:	6a20      	ldr	r0, [r4, #32]
    5622:	f008 f950 	bl	d8c6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5626:	e011      	b.n	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    5628:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    562c:	f8ad 0004 	strh.w	r0, [sp, #4]
    5630:	466a      	mov	r2, sp
    5632:	a901      	add	r1, sp, #4
    5634:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5636:	f007 fe2b 	bl	d290 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    563a:	6220      	str	r0, [r4, #32]
    563c:	b930      	cbnz	r0, 564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    563e:	f240 215d 	movw	r1, #605	; 0x25d
    5642:	e01e      	b.n	5682 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f6>
    5644:	4648      	mov	r0, r9
    5646:	f7ff faaf 	bl	4ba8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    564a:	b1c0      	cbz	r0, 567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    564c:	6a20      	ldr	r0, [r4, #32]
    564e:	2308      	movs	r3, #8
    5650:	7801      	ldrb	r1, [r0, #0]
    5652:	f021 0108 	bic.w	r1, r1, #8
    5656:	7001      	strb	r1, [r0, #0]
    5658:	79b2      	ldrb	r2, [r6, #6]
    565a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    565e:	4311      	orrs	r1, r2
    5660:	f021 0104 	bic.w	r1, r1, #4
    5664:	7001      	strb	r1, [r0, #0]
    5666:	79f2      	ldrb	r2, [r6, #7]
    5668:	2304      	movs	r3, #4
    566a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    566e:	4311      	orrs	r1, r2
    5670:	f021 0110 	bic.w	r1, r1, #16
    5674:	7001      	strb	r1, [r0, #0]
    5676:	43c9      	mvns	r1, r1
    5678:	0789      	lsls	r1, r1, #30
    567a:	d005      	beq.n	5688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fc>
    567c:	e007      	b.n	568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x702>
    567e:	f240 2166 	movw	r1, #614	; 0x266
    5682:	2027      	movs	r0, #39	; 0x27
    5684:	f7fe fcb0 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5688:	78c0      	ldrb	r0, [r0, #3]
    568a:	2802      	cmp	r0, #2
    568c:	d00f      	beq.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x722>
    568e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5690:	f007 fb9c 	bl	cdcc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5694:	b108      	cbz	r0, 569a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70e>
    5696:	2101      	movs	r1, #1
    5698:	e00a      	b.n	56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x724>
    569a:	6a20      	ldr	r0, [r4, #32]
    569c:	7800      	ldrb	r0, [r0, #0]
    569e:	43c0      	mvns	r0, r0
    56a0:	0780      	lsls	r0, r0, #30
    56a2:	d004      	beq.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x722>
    56a4:	f7ff fa3e 	bl	4b24 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    56a8:	f080 0101 	eor.w	r1, r0, #1
    56ac:	e000      	b.n	56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x724>
    56ae:	2100      	movs	r1, #0
    56b0:	6a20      	ldr	r0, [r4, #32]
    56b2:	7802      	ldrb	r2, [r0, #0]
    56b4:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    56b8:	7001      	strb	r1, [r0, #0]
    56ba:	7c71      	ldrb	r1, [r6, #17]
    56bc:	b1d1      	cbz	r1, 56f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    56be:	7841      	ldrb	r1, [r0, #1]
    56c0:	b1c1      	cbz	r1, 56f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    56c2:	4818      	ldr	r0, [pc, #96]	; (5724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    56c4:	f005 fefa 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    56c8:	4815      	ldr	r0, [pc, #84]	; (5720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    56ca:	3828      	subs	r0, #40	; 0x28
    56cc:	f880 8018 	strb.w	r8, [r0, #24]
    56d0:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	; 0x48
    56d4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    56d8:	4912      	ldr	r1, [pc, #72]	; (5724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    56da:	6a22      	ldr	r2, [r4, #32]
    56dc:	f005 fb86 	bl	adec <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    56e0:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    56e4:	f007 fda9 	bl	d23a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    56e8:	4602      	mov	r2, r0
    56ea:	21fb      	movs	r1, #251	; 0xfb
    56ec:	2000      	movs	r0, #0
    56ee:	f005 fbab 	bl	ae48 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    56f2:	e003      	b.n	56fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    56f4:	f005 fee2 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    56f8:	f005 fb88 	bl	ae0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    56fc:	2201      	movs	r2, #1
    56fe:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5702:	4611      	mov	r1, r2
    5704:	2000      	movs	r0, #0
    5706:	f005 ff65 	bl	b5d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    570a:	7127      	strb	r7, [r4, #4]
    570c:	6a20      	ldr	r0, [r4, #32]
    570e:	8801      	ldrh	r1, [r0, #0]
    5710:	8221      	strh	r1, [r4, #16]
    5712:	7880      	ldrb	r0, [r0, #2]
    5714:	74a0      	strb	r0, [r4, #18]
    5716:	7027      	strb	r7, [r4, #0]
    5718:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    571c:	200000c8 	.word	0x200000c8
    5720:	20000a98 	.word	0x20000a98
    5724:	20000968 	.word	0x20000968
    5728:	0000534d 	.word	0x0000534d
    572c:	00005149 	.word	0x00005149
    5730:	00005275 	.word	0x00005275
    5734:	000054c5 	.word	0x000054c5
    5738:	000076b5 	.word	0x000076b5

0000573c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    573c:	4800      	ldr	r0, [pc, #0]	; (5740 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    573e:	4770      	bx	lr
    5740:	200013d3 	.word	0x200013d3

00005744 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5744:	4904      	ldr	r1, [pc, #16]	; (5758 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5746:	788a      	ldrb	r2, [r1, #2]
    5748:	4282      	cmp	r2, r0
    574a:	d903      	bls.n	5754 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    574c:	4408      	add	r0, r1
    574e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5752:	4770      	bx	lr
    5754:	2000      	movs	r0, #0
    5756:	4770      	bx	lr
    5758:	20001200 	.word	0x20001200

0000575c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    575c:	4904      	ldr	r1, [pc, #16]	; (5770 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    575e:	788a      	ldrb	r2, [r1, #2]
    5760:	4282      	cmp	r2, r0
    5762:	d903      	bls.n	576c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5764:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5768:	3083      	adds	r0, #131	; 0x83
    576a:	4770      	bx	lr
    576c:	2000      	movs	r0, #0
    576e:	4770      	bx	lr
    5770:	20001200 	.word	0x20001200

00005774 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5774:	4a05      	ldr	r2, [pc, #20]	; (578c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5776:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    577a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    577e:	6802      	ldr	r2, [r0, #0]
    5780:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5784:	8880      	ldrh	r0, [r0, #4]
    5786:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    578a:	4770      	bx	lr
    578c:	20001200 	.word	0x20001200

00005790 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5794:	460e      	mov	r6, r1
    5796:	4607      	mov	r7, r0
    5798:	4615      	mov	r5, r2
    579a:	2106      	movs	r1, #6
    579c:	4630      	mov	r0, r6
    579e:	f007 ff78 	bl	d692 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57a2:	4c0d      	ldr	r4, [pc, #52]	; (57d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    57a4:	b160      	cbz	r0, 57c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    57a6:	2000      	movs	r0, #0
    57a8:	e004      	b.n	57b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    57aa:	1821      	adds	r1, r4, r0
    57ac:	1c40      	adds	r0, r0, #1
    57ae:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    57b2:	b2c0      	uxtb	r0, r0
    57b4:	78a1      	ldrb	r1, [r4, #2]
    57b6:	4281      	cmp	r1, r0
    57b8:	d8f7      	bhi.n	57aa <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    57ba:	2001      	movs	r0, #1
    57bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57c0:	4631      	mov	r1, r6
    57c2:	4638      	mov	r0, r7
    57c4:	f007 fd73 	bl	d2ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    57c8:	2808      	cmp	r0, #8
    57ca:	d003      	beq.n	57d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    57cc:	4420      	add	r0, r4
    57ce:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    57d2:	e7f2      	b.n	57ba <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    57d4:	2000      	movs	r0, #0
    57d6:	e7f1      	b.n	57bc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    57d8:	20001200 	.word	0x20001200

000057dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    57dc:	4904      	ldr	r1, [pc, #16]	; (57f0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    57de:	788a      	ldrb	r2, [r1, #2]
    57e0:	4282      	cmp	r2, r0
    57e2:	d903      	bls.n	57ec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    57e4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    57e8:	1cc0      	adds	r0, r0, #3
    57ea:	4770      	bx	lr
    57ec:	2000      	movs	r0, #0
    57ee:	4770      	bx	lr
    57f0:	20001200 	.word	0x20001200

000057f4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    57f4:	b510      	push	{r4, lr}
    57f6:	f240 12d3 	movw	r2, #467	; 0x1d3
    57fa:	2100      	movs	r1, #0
    57fc:	4808      	ldr	r0, [pc, #32]	; (5820 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    57fe:	f006 fcea 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5802:	2208      	movs	r2, #8
    5804:	21ff      	movs	r1, #255	; 0xff
    5806:	4807      	ldr	r0, [pc, #28]	; (5824 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5808:	f006 fce5 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    580c:	4805      	ldr	r0, [pc, #20]	; (5824 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    580e:	2100      	movs	r1, #0
    5810:	1f00      	subs	r0, r0, #4
    5812:	7001      	strb	r1, [r0, #0]
    5814:	7041      	strb	r1, [r0, #1]
    5816:	f44f 7161 	mov.w	r1, #900	; 0x384
    581a:	8041      	strh	r1, [r0, #2]
    581c:	bd10      	pop	{r4, pc}
    581e:	0000      	.short	0x0000
    5820:	20001200 	.word	0x20001200
    5824:	20000274 	.word	0x20000274

00005828 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5828:	4901      	ldr	r1, [pc, #4]	; (5830 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    582a:	7008      	strb	r0, [r1, #0]
    582c:	4770      	bx	lr
    582e:	0000      	.short	0x0000
    5830:	20000270 	.word	0x20000270

00005834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5834:	4801      	ldr	r0, [pc, #4]	; (583c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5836:	7800      	ldrb	r0, [r0, #0]
    5838:	4770      	bx	lr
    583a:	0000      	.short	0x0000
    583c:	20000270 	.word	0x20000270

00005840 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5840:	4b0b      	ldr	r3, [pc, #44]	; (5870 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5842:	b510      	push	{r4, lr}
    5844:	789c      	ldrb	r4, [r3, #2]
    5846:	4284      	cmp	r4, r0
    5848:	d90f      	bls.n	586a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    584a:	4418      	add	r0, r3
    584c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5850:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5854:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5858:	700b      	strb	r3, [r1, #0]
    585a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    585e:	6011      	str	r1, [r2, #0]
    5860:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5864:	8090      	strh	r0, [r2, #4]
    5866:	2001      	movs	r0, #1
    5868:	bd10      	pop	{r4, pc}
    586a:	2000      	movs	r0, #0
    586c:	bd10      	pop	{r4, pc}
    586e:	0000      	.short	0x0000
    5870:	20001200 	.word	0x20001200

00005874 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5874:	4907      	ldr	r1, [pc, #28]	; (5894 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5876:	788a      	ldrb	r2, [r1, #2]
    5878:	4282      	cmp	r2, r0
    587a:	d909      	bls.n	5890 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    587c:	4408      	add	r0, r1
    587e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5882:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5886:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    588a:	f000 0001 	and.w	r0, r0, #1
    588e:	4770      	bx	lr
    5890:	2000      	movs	r0, #0
    5892:	4770      	bx	lr
    5894:	20001200 	.word	0x20001200

00005898 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    589c:	4698      	mov	r8, r3
    589e:	4691      	mov	r9, r2
    58a0:	460c      	mov	r4, r1
    58a2:	4605      	mov	r5, r0
    58a4:	f000 f938 	bl	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    58a8:	4606      	mov	r6, r0
    58aa:	2810      	cmp	r0, #16
    58ac:	d006      	beq.n	58bc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58ae:	f000 f903 	bl	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    58b2:	2810      	cmp	r0, #16
    58b4:	d002      	beq.n	58bc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58b6:	2012      	movs	r0, #18
    58b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58bc:	4f18      	ldr	r7, [pc, #96]	; (5920 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    58be:	78b8      	ldrb	r0, [r7, #2]
    58c0:	2808      	cmp	r0, #8
    58c2:	d22a      	bcs.n	591a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    58c4:	2e10      	cmp	r6, #16
    58c6:	d105      	bne.n	58d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    58c8:	2200      	movs	r2, #0
    58ca:	4621      	mov	r1, r4
    58cc:	4628      	mov	r0, r5
    58ce:	f000 f907 	bl	5ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    58d2:	4606      	mov	r6, r0
    58d4:	78bc      	ldrb	r4, [r7, #2]
    58d6:	2210      	movs	r2, #16
    58d8:	1c60      	adds	r0, r4, #1
    58da:	70b8      	strb	r0, [r7, #2]
    58dc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    58e0:	1ce8      	adds	r0, r5, #3
    58e2:	4649      	mov	r1, r9
    58e4:	f007 fe3f 	bl	d566 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    58e8:	f105 0083 	add.w	r0, r5, #131	; 0x83
    58ec:	2210      	movs	r2, #16
    58ee:	4641      	mov	r1, r8
    58f0:	f007 fe39 	bl	d566 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    58f4:	2110      	movs	r1, #16
    58f6:	4640      	mov	r0, r8
    58f8:	f007 fecb 	bl	d692 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    58fc:	443c      	add	r4, r7
    58fe:	2110      	movs	r1, #16
    5900:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5904:	4648      	mov	r0, r9
    5906:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    590a:	f007 fec2 	bl	d692 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    590e:	77e0      	strb	r0, [r4, #31]
    5910:	f804 6c29 	strb.w	r6, [r4, #-41]
    5914:	2000      	movs	r0, #0
    5916:	73e0      	strb	r0, [r4, #15]
    5918:	e7ce      	b.n	58b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    591a:	2007      	movs	r0, #7
    591c:	e7cc      	b.n	58b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    591e:	0000      	.short	0x0000
    5920:	20001200 	.word	0x20001200

00005924 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5924:	4806      	ldr	r0, [pc, #24]	; (5940 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5926:	b510      	push	{r4, lr}
    5928:	7880      	ldrb	r0, [r0, #2]
    592a:	1e40      	subs	r0, r0, #1
    592c:	b244      	sxtb	r4, r0
    592e:	e004      	b.n	593a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5930:	b2e0      	uxtb	r0, r4
    5932:	f000 f939 	bl	5ba8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5936:	1e64      	subs	r4, r4, #1
    5938:	b264      	sxtb	r4, r4
    593a:	2c00      	cmp	r4, #0
    593c:	daf8      	bge.n	5930 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    593e:	bd10      	pop	{r4, pc}
    5940:	20001200 	.word	0x20001200

00005944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5944:	4801      	ldr	r0, [pc, #4]	; (594c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5946:	8840      	ldrh	r0, [r0, #2]
    5948:	4770      	bx	lr
    594a:	0000      	.short	0x0000
    594c:	20000270 	.word	0x20000270

00005950 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5950:	b138      	cbz	r0, 5962 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5952:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5956:	4288      	cmp	r0, r1
    5958:	d803      	bhi.n	5962 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    595a:	4903      	ldr	r1, [pc, #12]	; (5968 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    595c:	8048      	strh	r0, [r1, #2]
    595e:	2001      	movs	r0, #1
    5960:	4770      	bx	lr
    5962:	2000      	movs	r0, #0
    5964:	4770      	bx	lr
    5966:	0000      	.short	0x0000
    5968:	20000270 	.word	0x20000270

0000596c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    596c:	4905      	ldr	r1, [pc, #20]	; (5984 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    596e:	788a      	ldrb	r2, [r1, #2]
    5970:	4282      	cmp	r2, r0
    5972:	d903      	bls.n	597c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5974:	4408      	add	r0, r1
    5976:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    597a:	b108      	cbz	r0, 5980 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    597c:	2000      	movs	r0, #0
    597e:	4770      	bx	lr
    5980:	2001      	movs	r0, #1
    5982:	4770      	bx	lr
    5984:	20001200 	.word	0x20001200

00005988 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5988:	b570      	push	{r4, r5, r6, lr}
    598a:	460d      	mov	r5, r1
    598c:	4606      	mov	r6, r0
    598e:	f000 f8c3 	bl	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5992:	4c10      	ldr	r4, [pc, #64]	; (59d4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5994:	2810      	cmp	r0, #16
    5996:	d007      	beq.n	59a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5998:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    599c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    59a0:	07c9      	lsls	r1, r1, #31
    59a2:	d001      	beq.n	59a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59a4:	2001      	movs	r0, #1
    59a6:	bd70      	pop	{r4, r5, r6, pc}
    59a8:	7861      	ldrb	r1, [r4, #1]
    59aa:	2908      	cmp	r1, #8
    59ac:	d210      	bcs.n	59d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    59ae:	2810      	cmp	r0, #16
    59b0:	d008      	beq.n	59c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    59b2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    59b6:	2101      	movs	r1, #1
    59b8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    59bc:	7860      	ldrb	r0, [r4, #1]
    59be:	1c40      	adds	r0, r0, #1
    59c0:	7060      	strb	r0, [r4, #1]
    59c2:	e7ef      	b.n	59a4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    59c4:	2201      	movs	r2, #1
    59c6:	4629      	mov	r1, r5
    59c8:	4630      	mov	r0, r6
    59ca:	f000 f889 	bl	5ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    59ce:	e7f5      	b.n	59bc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    59d0:	2000      	movs	r0, #0
    59d2:	bd70      	pop	{r4, r5, r6, pc}
    59d4:	20001200 	.word	0x20001200

000059d8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    59d8:	b570      	push	{r4, r5, r6, lr}
    59da:	4d0b      	ldr	r5, [pc, #44]	; (5a08 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    59dc:	7828      	ldrb	r0, [r5, #0]
    59de:	1e40      	subs	r0, r0, #1
    59e0:	b244      	sxtb	r4, r0
    59e2:	e00a      	b.n	59fa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    59e4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    59e8:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    59ec:	07c0      	lsls	r0, r0, #31
    59ee:	d002      	beq.n	59f6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    59f0:	b2e0      	uxtb	r0, r4
    59f2:	f000 f921 	bl	5c38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    59f6:	1e64      	subs	r4, r4, #1
    59f8:	b264      	sxtb	r4, r4
    59fa:	2c00      	cmp	r4, #0
    59fc:	daf2      	bge.n	59e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    59fe:	4903      	ldr	r1, [pc, #12]	; (5a0c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5a00:	2000      	movs	r0, #0
    5a02:	7048      	strb	r0, [r1, #1]
    5a04:	bd70      	pop	{r4, r5, r6, pc}
    5a06:	0000      	.short	0x0000
    5a08:	20001200 	.word	0x20001200
    5a0c:	20000270 	.word	0x20000270

00005a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a14:	2400      	movs	r4, #0
    5a16:	4625      	mov	r5, r4
    5a18:	4e18      	ldr	r6, [pc, #96]	; (5a7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5a1a:	e029      	b.n	5a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5a1c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5a20:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5a24:	07c0      	lsls	r0, r0, #31
    5a26:	d021      	beq.n	5a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a28:	4628      	mov	r0, r5
    5a2a:	f000 f845 	bl	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5a2e:	4603      	mov	r3, r0
    5a30:	f7ff fed4 	bl	57dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5a34:	4601      	mov	r1, r0
    5a36:	2000      	movs	r0, #0
    5a38:	2b10      	cmp	r3, #16
    5a3a:	d009      	beq.n	5a50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5a3c:	18f2      	adds	r2, r6, r3
    5a3e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5a42:	f1bc 0f01 	cmp.w	ip, #1
    5a46:	d002      	beq.n	5a4e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5a48:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5a4c:	b102      	cbz	r2, 5a50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5a4e:	2001      	movs	r0, #1
    5a50:	1e40      	subs	r0, r0, #1
    5a52:	4201      	tst	r1, r0
    5a54:	d10a      	bne.n	5a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a56:	480a      	ldr	r0, [pc, #40]	; (5a80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5a58:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5a5c:	5503      	strb	r3, [r0, r4]
    5a5e:	4620      	mov	r0, r4
    5a60:	1c64      	adds	r4, r4, #1
    5a62:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5a66:	b2e4      	uxtb	r4, r4
    5a68:	f005 ff40 	bl	b8ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5a6c:	1c6d      	adds	r5, r5, #1
    5a6e:	b2ed      	uxtb	r5, r5
    5a70:	7830      	ldrb	r0, [r6, #0]
    5a72:	42a8      	cmp	r0, r5
    5a74:	d8d2      	bhi.n	5a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a7a:	0000      	.short	0x0000
    5a7c:	20001200 	.word	0x20001200
    5a80:	20000274 	.word	0x20000274
    5a84:	b570      	push	{r4, r5, r6, lr}
    5a86:	4b0a      	ldr	r3, [pc, #40]	; (5ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5a88:	781b      	ldrb	r3, [r3, #0]
    5a8a:	b173      	cbz	r3, 5aaa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    5a8c:	4b09      	ldr	r3, [pc, #36]	; (5ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5a8e:	789c      	ldrb	r4, [r3, #2]
    5a90:	b15c      	cbz	r4, 5aaa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    5a92:	1845      	adds	r5, r0, r1
    5a94:	4621      	mov	r1, r4
    5a96:	b10a      	cbz	r2, 5a9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5a98:	1cd8      	adds	r0, r3, #3
    5a9a:	e001      	b.n	5aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5a9c:	4805      	ldr	r0, [pc, #20]	; (5ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5a9e:	3083      	adds	r0, #131	; 0x83
    5aa0:	462a      	mov	r2, r5
    5aa2:	f005 f8c5 	bl	ac30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5aa6:	2001      	movs	r0, #1
    5aa8:	bd70      	pop	{r4, r5, r6, pc}
    5aaa:	2000      	movs	r0, #0
    5aac:	bd70      	pop	{r4, r5, r6, pc}
    5aae:	0000      	.short	0x0000
    5ab0:	20000270 	.word	0x20000270
    5ab4:	20001200 	.word	0x20001200
    5ab8:	4908      	ldr	r1, [pc, #32]	; (5adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    5aba:	b510      	push	{r4, lr}
    5abc:	4603      	mov	r3, r0
    5abe:	2000      	movs	r0, #0
    5ac0:	788a      	ldrb	r2, [r1, #2]
    5ac2:	e006      	b.n	5ad2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    5ac4:	180c      	adds	r4, r1, r0
    5ac6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5aca:	429c      	cmp	r4, r3
    5acc:	d004      	beq.n	5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    5ace:	1c40      	adds	r0, r0, #1
    5ad0:	b2c0      	uxtb	r0, r0
    5ad2:	4282      	cmp	r2, r0
    5ad4:	d8f6      	bhi.n	5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    5ad6:	2010      	movs	r0, #16
    5ad8:	bd10      	pop	{r4, pc}
    5ada:	0000      	.short	0x0000
    5adc:	20001200 	.word	0x20001200
    5ae0:	b570      	push	{r4, r5, r6, lr}
    5ae2:	4b0c      	ldr	r3, [pc, #48]	; (5b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    5ae4:	4604      	mov	r4, r0
    5ae6:	7818      	ldrb	r0, [r3, #0]
    5ae8:	1c45      	adds	r5, r0, #1
    5aea:	701d      	strb	r5, [r3, #0]
    5aec:	2810      	cmp	r0, #16
    5aee:	d303      	bcc.n	5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    5af0:	2146      	movs	r1, #70	; 0x46
    5af2:	2028      	movs	r0, #40	; 0x28
    5af4:	f7fe fa78 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5af8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5afc:	680d      	ldr	r5, [r1, #0]
    5afe:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5b02:	8889      	ldrh	r1, [r1, #4]
    5b04:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5b08:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5b0c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5b10:	bd70      	pop	{r4, r5, r6, pc}
    5b12:	0000      	.short	0x0000
    5b14:	20001200 	.word	0x20001200
    5b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b1c:	460f      	mov	r7, r1
    5b1e:	4606      	mov	r6, r0
    5b20:	2400      	movs	r4, #0
    5b22:	4d0d      	ldr	r5, [pc, #52]	; (5b58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    5b24:	e00f      	b.n	5b46 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    5b26:	bf00      	nop
    5b28:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5b2c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5b30:	42b1      	cmp	r1, r6
    5b32:	d106      	bne.n	5b42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5b34:	2206      	movs	r2, #6
    5b36:	4639      	mov	r1, r7
    5b38:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5b3c:	f006 fabf 	bl	c0be <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5b40:	b138      	cbz	r0, 5b52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    5b42:	1c64      	adds	r4, r4, #1
    5b44:	b2e4      	uxtb	r4, r4
    5b46:	7828      	ldrb	r0, [r5, #0]
    5b48:	42a0      	cmp	r0, r4
    5b4a:	d8ed      	bhi.n	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    5b4c:	2010      	movs	r0, #16
    5b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b52:	4620      	mov	r0, r4
    5b54:	e7fb      	b.n	5b4e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5b56:	0000      	.short	0x0000
    5b58:	20001200 	.word	0x20001200
    5b5c:	b570      	push	{r4, r5, r6, lr}
    5b5e:	4605      	mov	r5, r0
    5b60:	f7ff ffaa 	bl	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5b64:	2810      	cmp	r0, #16
    5b66:	d11c      	bne.n	5ba2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5b68:	4c0e      	ldr	r4, [pc, #56]	; (5ba4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    5b6a:	7820      	ldrb	r0, [r4, #0]
    5b6c:	1e40      	subs	r0, r0, #1
    5b6e:	b2c0      	uxtb	r0, r0
    5b70:	7020      	strb	r0, [r4, #0]
    5b72:	42a8      	cmp	r0, r5
    5b74:	d015      	beq.n	5ba2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5b76:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5b7a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5b7e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5b82:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5b86:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5b8a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5b8e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5b92:	7820      	ldrb	r0, [r4, #0]
    5b94:	f7ff ff90 	bl	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5b98:	2810      	cmp	r0, #16
    5b9a:	d002      	beq.n	5ba2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5b9c:	4420      	add	r0, r4
    5b9e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5ba2:	bd70      	pop	{r4, r5, r6, pc}
    5ba4:	20001200 	.word	0x20001200
    5ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bac:	4c21      	ldr	r4, [pc, #132]	; (5c34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    5bae:	4606      	mov	r6, r0
    5bb0:	19a7      	adds	r7, r4, r6
    5bb2:	78a0      	ldrb	r0, [r4, #2]
    5bb4:	1e40      	subs	r0, r0, #1
    5bb6:	b2c5      	uxtb	r5, r0
    5bb8:	70a5      	strb	r5, [r4, #2]
    5bba:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5bbe:	42ae      	cmp	r6, r5
    5bc0:	d02a      	beq.n	5c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    5bc2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5bc6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5bca:	f10a 0103 	add.w	r1, sl, #3
    5bce:	f109 0003 	add.w	r0, r9, #3
    5bd2:	2210      	movs	r2, #16
    5bd4:	f006 fa85 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5bd8:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5bdc:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5be0:	2210      	movs	r2, #16
    5be2:	f006 fa7e 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5be6:	1960      	adds	r0, r4, r5
    5be8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5bec:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5bf0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5bf4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5bf8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5bfc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5c00:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5c04:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5c08:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5c0c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5c10:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c14:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5c18:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5c1c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c20:	07c0      	lsls	r0, r0, #31
    5c22:	d104      	bne.n	5c2e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    5c24:	4640      	mov	r0, r8
    5c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c2a:	f7ff bf97 	b.w	5b5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c32:	0000      	.short	0x0000
    5c34:	20001200 	.word	0x20001200
    5c38:	4905      	ldr	r1, [pc, #20]	; (5c50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5c3a:	784a      	ldrb	r2, [r1, #1]
    5c3c:	1e52      	subs	r2, r2, #1
    5c3e:	704a      	strb	r2, [r1, #1]
    5c40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5c44:	2200      	movs	r2, #0
    5c46:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5c4a:	f7ff bf87 	b.w	5b5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5c4e:	0000      	.short	0x0000
    5c50:	20001200 	.word	0x20001200

00005c54 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    5c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c56:	f06f 021f 	mvn.w	r2, #31
    5c5a:	0c01      	lsrs	r1, r0, #16
    5c5c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5c60:	251f      	movs	r5, #31
    5c62:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5c66:	3854      	subs	r0, #84	; 0x54
    5c68:	d00d      	beq.n	5c86 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5c6a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5c6e:	3855      	subs	r0, #85	; 0x55
    5c70:	d009      	beq.n	5c86 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5c72:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5c76:	38aa      	subs	r0, #170	; 0xaa
    5c78:	d005      	beq.n	5c86 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5c7a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5c7e:	38aa      	subs	r0, #170	; 0xaa
    5c80:	d001      	beq.n	5c86 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5c82:	2001      	movs	r0, #1
    5c84:	e000      	b.n	5c88 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5c86:	2000      	movs	r0, #0
    5c88:	2200      	movs	r2, #0
    5c8a:	4613      	mov	r3, r2
    5c8c:	ea4f 0402 	mov.w	r4, r2
    5c90:	ea82 0701 	eor.w	r7, r2, r1
    5c94:	43ff      	mvns	r7, r7
    5c96:	431f      	orrs	r7, r3
    5c98:	1c7f      	adds	r7, r7, #1
    5c9a:	d00f      	beq.n	5cbc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    5c9c:	f006 0701 	and.w	r7, r6, #1
    5ca0:	0852      	lsrs	r2, r2, #1
    5ca2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5ca6:	f005 0701 	and.w	r7, r5, #1
    5caa:	085b      	lsrs	r3, r3, #1
    5cac:	0876      	lsrs	r6, r6, #1
    5cae:	086d      	lsrs	r5, r5, #1
    5cb0:	1c64      	adds	r4, r4, #1
    5cb2:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5cb6:	2c16      	cmp	r4, #22
    5cb8:	d3ea      	bcc.n	5c90 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    5cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cbc:	2000      	movs	r0, #0
    5cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cc4:	2601      	movs	r6, #1
    5cc6:	4604      	mov	r4, r0
    5cc8:	2500      	movs	r5, #0
    5cca:	f100 0770 	add.w	r7, r0, #112	; 0x70
    5cce:	b159      	cbz	r1, 5ce8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    5cd0:	2901      	cmp	r1, #1
    5cd2:	d054      	beq.n	5d7e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbe>
    5cd4:	2902      	cmp	r1, #2
    5cd6:	d079      	beq.n	5dcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10c>
    5cd8:	2903      	cmp	r1, #3
    5cda:	d14e      	bne.n	5d7a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xba>
    5cdc:	4601      	mov	r1, r0
    5cde:	4638      	mov	r0, r7
    5ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ce4:	f007 bd3b 	b.w	d75e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5ce8:	2280      	movs	r2, #128	; 0x80
    5cea:	2100      	movs	r1, #0
    5cec:	4638      	mov	r0, r7
    5cee:	f006 fa72 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5cf2:	71bd      	strb	r5, [r7, #6]
    5cf4:	71fd      	strb	r5, [r7, #7]
    5cf6:	733d      	strb	r5, [r7, #12]
    5cf8:	737d      	strb	r5, [r7, #13]
    5cfa:	73fd      	strb	r5, [r7, #15]
    5cfc:	743d      	strb	r5, [r7, #16]
    5cfe:	717d      	strb	r5, [r7, #5]
    5d00:	76bd      	strb	r5, [r7, #26]
    5d02:	76fd      	strb	r5, [r7, #27]
    5d04:	f004 ff84 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5d08:	f644 112b 	movw	r1, #18731	; 0x492b
    5d0c:	4008      	ands	r0, r1
    5d0e:	f887 0044 	strb.w	r0, [r7, #68]	; 0x44
    5d12:	0a00      	lsrs	r0, r0, #8
    5d14:	f887 0045 	strb.w	r0, [r7, #69]	; 0x45
    5d18:	20fe      	movs	r0, #254	; 0xfe
    5d1a:	f887 0074 	strb.w	r0, [r7, #116]	; 0x74
    5d1e:	207f      	movs	r0, #127	; 0x7f
    5d20:	7238      	strb	r0, [r7, #8]
    5d22:	8827      	ldrh	r7, [r4, #0]
    5d24:	226c      	movs	r2, #108	; 0x6c
    5d26:	2100      	movs	r1, #0
    5d28:	4620      	mov	r0, r4
    5d2a:	f006 fa54 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d2e:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    5d32:	8027      	strh	r7, [r4, #0]
    5d34:	2201      	movs	r2, #1
    5d36:	7202      	strb	r2, [r0, #8]
    5d38:	7242      	strb	r2, [r0, #9]
    5d3a:	7286      	strb	r6, [r0, #10]
    5d3c:	3836      	subs	r0, #54	; 0x36
    5d3e:	2100      	movs	r1, #0
    5d40:	4607      	mov	r7, r0
    5d42:	f007 ffc8 	bl	dcd6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    5d46:	211b      	movs	r1, #27
    5d48:	84f9      	strh	r1, [r7, #38]	; 0x26
    5d4a:	8539      	strh	r1, [r7, #40]	; 0x28
    5d4c:	7466      	strb	r6, [r4, #17]
    5d4e:	227c      	movs	r2, #124	; 0x7c
    5d50:	2100      	movs	r1, #0
    5d52:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    5d56:	f006 fa3e 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d5a:	4821      	ldr	r0, [pc, #132]	; (5de0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5d5c:	6060      	str	r0, [r4, #4]
    5d5e:	2212      	movs	r2, #18
    5d60:	2100      	movs	r1, #0
    5d62:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
    5d66:	f006 fa36 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d6a:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
    5d6e:	f884 5173 	strb.w	r5, [r4, #371]	; 0x173
    5d72:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    5d76:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    5d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d7e:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
    5d82:	f884 50fb 	strb.w	r5, [r4, #251]	; 0xfb
    5d86:	6861      	ldr	r1, [r4, #4]
    5d88:	4816      	ldr	r0, [pc, #88]	; (5de4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    5d8a:	460a      	mov	r2, r1
    5d8c:	4408      	add	r0, r1
    5d8e:	fbb0 f0f1 	udiv	r0, r0, r1
    5d92:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5d96:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5d9a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5d9e:	8963      	ldrh	r3, [r4, #10]
    5da0:	4638      	mov	r0, r7
    5da2:	f000 f87f 	bl	5ea4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5da6:	4621      	mov	r1, r4
    5da8:	4638      	mov	r0, r7
    5daa:	f007 fcd8 	bl	d75e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5dae:	f006 f962 	bl	c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5db2:	b120      	cbz	r0, 5dbe <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xfe>
    5db4:	f8d4 0012 	ldr.w	r0, [r4, #18]
    5db8:	f7ff ff4c 	bl	5c54 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5dbc:	b118      	cbz	r0, 5dc6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x106>
    5dbe:	f884 516c 	strb.w	r5, [r4, #364]	; 0x16c
    5dc2:	e7da      	b.n	5d7a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xba>
    5dc4:	e002      	b.n	5dcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10c>
    5dc6:	f884 616c 	strb.w	r6, [r4, #364]	; 0x16c
    5dca:	e7d6      	b.n	5d7a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xba>
    5dcc:	6841      	ldr	r1, [r0, #4]
    5dce:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5dd2:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5dd6:	4638      	mov	r0, r7
    5dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ddc:	f000 b862 	b.w	5ea4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5de0:	003d0900 	.word	0x003d0900
    5de4:	01c9c37f 	.word	0x01c9c37f

00005de8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    5de8:	b510      	push	{r4, lr}
    5dea:	2820      	cmp	r0, #32
    5dec:	d304      	bcc.n	5df8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x10>
    5dee:	f44f 71c4 	mov.w	r1, #392	; 0x188
    5df2:	2029      	movs	r0, #41	; 0x29
    5df4:	f7fe f8f8 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5df8:	4901      	ldr	r1, [pc, #4]	; (5e00 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    5dfa:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5dfe:	bd10      	pop	{r4, pc}
    5e00:	200011c0 	.word	0x200011c0

00005e04 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    5e04:	b510      	push	{r4, lr}
    5e06:	2820      	cmp	r0, #32
    5e08:	d304      	bcc.n	5e14 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x10>
    5e0a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
    5e0e:	2029      	movs	r0, #41	; 0x29
    5e10:	f7fe f8ea 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e14:	4a01      	ldr	r2, [pc, #4]	; (5e1c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    5e16:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
    5e1a:	bd10      	pop	{r4, pc}
    5e1c:	200011c0 	.word	0x200011c0
    5e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e22:	7e83      	ldrb	r3, [r0, #26]
    5e24:	f891 4020 	ldrb.w	r4, [r1, #32]
    5e28:	2501      	movs	r5, #1
    5e2a:	fb04 3202 	mla	r2, r4, r2, r3
    5e2e:	2325      	movs	r3, #37	; 0x25
    5e30:	fbb2 f4f3 	udiv	r4, r2, r3
    5e34:	fb03 2214 	mls	r2, r3, r4, r2
    5e38:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    5e3c:	7682      	strb	r2, [r0, #26]
    5e3e:	f002 0307 	and.w	r3, r2, #7
    5e42:	7b24      	ldrb	r4, [r4, #12]
    5e44:	fa05 f303 	lsl.w	r3, r5, r3
    5e48:	421c      	tst	r4, r3
    5e4a:	d001      	beq.n	5e50 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x4c>
    5e4c:	76c2      	strb	r2, [r0, #27]
    5e4e:	e01e      	b.n	5e8e <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8a>
    5e50:	7e43      	ldrb	r3, [r0, #25]
    5e52:	fbb2 f4f3 	udiv	r4, r2, r3
    5e56:	fb03 2214 	mls	r2, r3, r4, r2
    5e5a:	1c52      	adds	r2, r2, #1
    5e5c:	b2d2      	uxtb	r2, r2
    5e5e:	2300      	movs	r3, #0
    5e60:	18c4      	adds	r4, r0, r3
    5e62:	7d24      	ldrb	r4, [r4, #20]
    5e64:	4294      	cmp	r4, r2
    5e66:	d314      	bcc.n	5e92 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8e>
    5e68:	2400      	movs	r4, #0
    5e6a:	18ce      	adds	r6, r1, r3
    5e6c:	f896 600c 	ldrb.w	r6, [r6, #12]
    5e70:	fa05 f704 	lsl.w	r7, r5, r4
    5e74:	423e      	tst	r6, r7
    5e76:	d001      	beq.n	5e7c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x78>
    5e78:	1e52      	subs	r2, r2, #1
    5e7a:	b2d2      	uxtb	r2, r2
    5e7c:	b122      	cbz	r2, 5e88 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x84>
    5e7e:	1c64      	adds	r4, r4, #1
    5e80:	b2e4      	uxtb	r4, r4
    5e82:	2c08      	cmp	r4, #8
    5e84:	d3f4      	bcc.n	5e70 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x6c>
    5e86:	e006      	b.n	5e96 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x92>
    5e88:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    5e8c:	76c1      	strb	r1, [r0, #27]
    5e8e:	2000      	movs	r0, #0
    5e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e92:	1b12      	subs	r2, r2, r4
    5e94:	b2d2      	uxtb	r2, r2
    5e96:	1c5b      	adds	r3, r3, #1
    5e98:	b2db      	uxtb	r3, r3
    5e9a:	2b05      	cmp	r3, #5
    5e9c:	d3e0      	bcc.n	5e60 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x5c>
    5e9e:	201f      	movs	r0, #31
    5ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ea2:	0000      	movs	r0, r0
    5ea4:	b530      	push	{r4, r5, lr}
    5ea6:	2400      	movs	r4, #0
    5ea8:	8584      	strh	r4, [r0, #44]	; 0x2c
    5eaa:	8e04      	ldrh	r4, [r0, #48]	; 0x30
    5eac:	4d13      	ldr	r5, [pc, #76]	; (5efc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xf8>)
    5eae:	434c      	muls	r4, r1
    5eb0:	fbb4 f4f2 	udiv	r4, r4, r2
    5eb4:	8604      	strh	r4, [r0, #48]	; 0x30
    5eb6:	f242 7410 	movw	r4, #10000	; 0x2710
    5eba:	4363      	muls	r3, r4
    5ebc:	fbb3 f3f2 	udiv	r3, r3, r2
    5ec0:	1c5b      	adds	r3, r3, #1
    5ec2:	b29b      	uxth	r3, r3
    5ec4:	fb03 f402 	mul.w	r4, r3, r2
    5ec8:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5eca:	42ac      	cmp	r4, r5
    5ecc:	d901      	bls.n	5ed2 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xce>
    5ece:	1e5b      	subs	r3, r3, #1
    5ed0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5ed2:	4b0b      	ldr	r3, [pc, #44]	; (5f00 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xfc>)
    5ed4:	f240 2471 	movw	r4, #625	; 0x271
    5ed8:	fbb3 f3f2 	udiv	r3, r3, r2
    5edc:	1c5b      	adds	r3, r3, #1
    5ede:	8683      	strh	r3, [r0, #52]	; 0x34
    5ee0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    5ee2:	4363      	muls	r3, r4
    5ee4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5ee8:	1e5b      	subs	r3, r3, #1
    5eea:	fbb3 f3f2 	udiv	r3, r3, r2
    5eee:	6243      	str	r3, [r0, #36]	; 0x24
    5ef0:	6a03      	ldr	r3, [r0, #32]
    5ef2:	434b      	muls	r3, r1
    5ef4:	fbb3 f1f2 	udiv	r1, r3, r2
    5ef8:	6201      	str	r1, [r0, #32]
    5efa:	bd30      	pop	{r4, r5, pc}
    5efc:	01e84800 	.word	0x01e84800
    5f00:	02625a00 	.word	0x02625a00

00005f04 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5f04:	7841      	ldrb	r1, [r0, #1]
    5f06:	b141      	cbz	r1, 5f1a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f08:	78c0      	ldrb	r0, [r0, #3]
    5f0a:	2819      	cmp	r0, #25
    5f0c:	d203      	bcs.n	5f16 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5f0e:	4a04      	ldr	r2, [pc, #16]	; (5f20 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5f10:	5c10      	ldrb	r0, [r2, r0]
    5f12:	4288      	cmp	r0, r1
    5f14:	d101      	bne.n	5f1a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f16:	2001      	movs	r0, #1
    5f18:	4770      	bx	lr
    5f1a:	2000      	movs	r0, #0
    5f1c:	4770      	bx	lr
    5f1e:	0000      	.short	0x0000
    5f20:	0000f168 	.word	0x0000f168

00005f24 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5f24:	b50c      	push	{r2, r3, lr}
    5f26:	a20b      	add	r2, pc, #44	; (adr r2, 5f54 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5f28:	e9d2 1200 	ldrd	r1, r2, [r2]
    5f2c:	e9cd 1200 	strd	r1, r2, [sp]
    5f30:	7901      	ldrb	r1, [r0, #4]
    5f32:	7940      	ldrb	r0, [r0, #5]
    5f34:	f001 0207 	and.w	r2, r1, #7
    5f38:	4669      	mov	r1, sp
    5f3a:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5f3e:	2a01      	cmp	r2, #1
    5f40:	d804      	bhi.n	5f4c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5f42:	f000 0007 	and.w	r0, r0, #7
    5f46:	5c08      	ldrb	r0, [r1, r0]
    5f48:	2801      	cmp	r0, #1
    5f4a:	d901      	bls.n	5f50 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5f4c:	2000      	movs	r0, #0
    5f4e:	bd0c      	pop	{r2, r3, pc}
    5f50:	2001      	movs	r0, #1
    5f52:	bd0c      	pop	{r2, r3, pc}
    5f54:	02010100 	.word	0x02010100
    5f58:	03020201 	.word	0x03020201

00005f5c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5f5c:	b510      	push	{r4, lr}
    5f5e:	2201      	movs	r2, #1
    5f60:	70c1      	strb	r1, [r0, #3]
    5f62:	2919      	cmp	r1, #25
    5f64:	d202      	bcs.n	5f6c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5f66:	4a06      	ldr	r2, [pc, #24]	; (5f80 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5f68:	5c52      	ldrb	r2, [r2, r1]
    5f6a:	e006      	b.n	5f7a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f6c:	29ff      	cmp	r1, #255	; 0xff
    5f6e:	d004      	beq.n	5f7a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f70:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5f74:	202a      	movs	r0, #42	; 0x2a
    5f76:	f7fe f837 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7a:	7042      	strb	r2, [r0, #1]
    5f7c:	bd10      	pop	{r4, pc}
    5f7e:	0000      	.short	0x0000
    5f80:	0000f168 	.word	0x0000f168

00005f84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f88:	ea5f 0900 	movs.w	r9, r0
    5f8c:	d00a      	beq.n	5fa4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x20>
    5f8e:	481d      	ldr	r0, [pc, #116]	; (6004 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x80>)
    5f90:	2102      	movs	r1, #2
    5f92:	4682      	mov	sl, r0
    5f94:	f007 fd7c 	bl	da90 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5f98:	b138      	cbz	r0, 5faa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x26>
    5f9a:	f44f 7164 	mov.w	r1, #912	; 0x390
    5f9e:	202b      	movs	r0, #43	; 0x2b
    5fa0:	f7fe f822 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fa4:	f240 318f 	movw	r1, #911	; 0x38f
    5fa8:	e7f9      	b.n	5f9e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1a>
    5faa:	4d16      	ldr	r5, [pc, #88]	; (6004 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x80>)
    5fac:	2000      	movs	r0, #0
    5fae:	3d10      	subs	r5, #16
    5fb0:	8a2e      	ldrh	r6, [r5, #16]
    5fb2:	f7fe fa01 	bl	43b8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5fb6:	4f14      	ldr	r7, [pc, #80]	; (6008 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>)
    5fb8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 600c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5fbc:	4604      	mov	r4, r0
    5fbe:	6839      	ldr	r1, [r7, #0]
    5fc0:	b129      	cbz	r1, 5fce <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x4a>
    5fc2:	8a28      	ldrh	r0, [r5, #16]
    5fc4:	42a0      	cmp	r0, r4
    5fc6:	d102      	bne.n	5fce <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x4a>
    5fc8:	4648      	mov	r0, r9
    5fca:	4788      	blx	r1
    5fcc:	e005      	b.n	5fda <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x56>
    5fce:	f8d8 2000 	ldr.w	r2, [r8]
    5fd2:	b11a      	cbz	r2, 5fdc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x58>
    5fd4:	8a28      	ldrh	r0, [r5, #16]
    5fd6:	4649      	mov	r1, r9
    5fd8:	4790      	blx	r2
    5fda:	b968      	cbnz	r0, 5ff8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x74>
    5fdc:	2102      	movs	r1, #2
    5fde:	4650      	mov	r0, sl
    5fe0:	f007 fd56 	bl	da90 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fe4:	b910      	cbnz	r0, 5fec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x68>
    5fe6:	8a28      	ldrh	r0, [r5, #16]
    5fe8:	42b0      	cmp	r0, r6
    5fea:	d1e8      	bne.n	5fbe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x3a>
    5fec:	4808      	ldr	r0, [pc, #32]	; (6010 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>)
    5fee:	6801      	ldr	r1, [r0, #0]
    5ff0:	b129      	cbz	r1, 5ffe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5ff2:	4648      	mov	r0, r9
    5ff4:	4788      	blx	r1
    5ff6:	b110      	cbz	r0, 5ffe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5ff8:	2001      	movs	r0, #1
    5ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ffe:	2000      	movs	r0, #0
    6000:	e7fb      	b.n	5ffa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6002:	0000      	.short	0x0000
    6004:	20000e58 	.word	0x20000e58
    6008:	20000220 	.word	0x20000220
    600c:	20000224 	.word	0x20000224
    6010:	2000022c 	.word	0x2000022c

00006014 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6014:	b510      	push	{r4, lr}
    6016:	4604      	mov	r4, r0
    6018:	4816      	ldr	r0, [pc, #88]	; (6074 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x60>)
    601a:	6802      	ldr	r2, [r0, #0]
    601c:	b33a      	cbz	r2, 606e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5a>
    601e:	4621      	mov	r1, r4
    6020:	2000      	movs	r0, #0
    6022:	4790      	blx	r2
    6024:	b318      	cbz	r0, 606e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5a>
    6026:	7820      	ldrb	r0, [r4, #0]
    6028:	2811      	cmp	r0, #17
    602a:	d002      	beq.n	6032 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1e>
    602c:	2814      	cmp	r0, #20
    602e:	d003      	beq.n	6038 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x24>
    6030:	e01b      	b.n	606a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6032:	7920      	ldrb	r0, [r4, #4]
    6034:	b930      	cbnz	r0, 6044 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x30>
    6036:	e018      	b.n	606a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6038:	7920      	ldrb	r0, [r4, #4]
    603a:	b1b0      	cbz	r0, 606a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    603c:	2000      	movs	r0, #0
    603e:	f000 fb5b 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6042:	b990      	cbnz	r0, 606a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6044:	88e4      	ldrh	r4, [r4, #6]
    6046:	2100      	movs	r1, #0
    6048:	4620      	mov	r0, r4
    604a:	f007 f83a 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    604e:	b160      	cbz	r0, 606a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6050:	8800      	ldrh	r0, [r0, #0]
    6052:	f007 f89c 	bl	d18e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6056:	2100      	movs	r1, #0
    6058:	4620      	mov	r0, r4
    605a:	f7fe fa49 	bl	44f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    605e:	b120      	cbz	r0, 606a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6060:	f240 1115 	movw	r1, #277	; 0x115
    6064:	202b      	movs	r0, #43	; 0x2b
    6066:	f7fd ffbf 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    606a:	2001      	movs	r0, #1
    606c:	bd10      	pop	{r4, pc}
    606e:	2000      	movs	r0, #0
    6070:	bd10      	pop	{r4, pc}
    6072:	0000      	.short	0x0000
    6074:	2000021c 	.word	0x2000021c

00006078 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    607c:	b087      	sub	sp, #28
    607e:	460c      	mov	r4, r1
    6080:	4680      	mov	r8, r0
    6082:	a902      	add	r1, sp, #8
    6084:	f007 f956 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6088:	2800      	cmp	r0, #0
    608a:	d17b      	bne.n	6184 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10c>
    608c:	f8df a104 	ldr.w	sl, [pc, #260]	; 6194 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    6090:	f04f 0b01 	mov.w	fp, #1
    6094:	4681      	mov	r9, r0
    6096:	2000      	movs	r0, #0
    6098:	f000 f9f4 	bl	6484 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    609c:	4540      	cmp	r0, r8
    609e:	d077      	beq.n	6190 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x118>
    60a0:	f8da 2000 	ldr.w	r2, [sl]
    60a4:	b162      	cbz	r2, 60c0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    60a6:	4621      	mov	r1, r4
    60a8:	4640      	mov	r0, r8
    60aa:	4790      	blx	r2
    60ac:	b140      	cbz	r0, 60c0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    60ae:	4620      	mov	r0, r4
    60b0:	f000 f90e 	bl	62d0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    60b4:	2800      	cmp	r0, #0
    60b6:	d1ee      	bne.n	6096 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    60b8:	2001      	movs	r0, #1
    60ba:	b007      	add	sp, #28
    60bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60c0:	9d03      	ldr	r5, [sp, #12]
    60c2:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    60c6:	3570      	adds	r5, #112	; 0x70
    60c8:	b918      	cbnz	r0, 60d2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x5a>
    60ca:	7f28      	ldrb	r0, [r5, #28]
    60cc:	b108      	cbz	r0, 60d2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x5a>
    60ce:	2001      	movs	r0, #1
    60d0:	e000      	b.n	60d4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x5c>
    60d2:	2000      	movs	r0, #0
    60d4:	9001      	str	r0, [sp, #4]
    60d6:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
    60da:	b1b8      	cbz	r0, 610c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x94>
    60dc:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
    60e0:	0780      	lsls	r0, r0, #30
    60e2:	d513      	bpl.n	610c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x94>
    60e4:	f884 9001 	strb.w	r9, [r4, #1]
    60e8:	f884 b000 	strb.w	fp, [r4]
    60ec:	f884 9004 	strb.w	r9, [r4, #4]
    60f0:	f8a4 8005 	strh.w	r8, [r4, #5]
    60f4:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
    60f8:	71e1      	strb	r1, [r4, #7]
    60fa:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
    60fe:	8121      	strh	r1, [r4, #8]
    6100:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
    6104:	8161      	strh	r1, [r4, #10]
    6106:	f885 903d 	strb.w	r9, [r5, #61]	; 0x3d
    610a:	e7d0      	b.n	60ae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    610c:	4640      	mov	r0, r8
    610e:	f7fe fb97 	bl	4840 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6112:	0007      	movs	r7, r0
    6114:	d00d      	beq.n	6132 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xba>
    6116:	f006 fdec 	bl	ccf2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    611a:	0006      	movs	r6, r0
    611c:	d015      	beq.n	614a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd2>
    611e:	f884 9001 	strb.w	r9, [r4, #1]
    6122:	200d      	movs	r0, #13
    6124:	7020      	strb	r0, [r4, #0]
    6126:	f8a4 8006 	strh.w	r8, [r4, #6]
    612a:	8126      	strh	r6, [r4, #8]
    612c:	f884 b004 	strb.w	fp, [r4, #4]
    6130:	e007      	b.n	6142 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6132:	f240 2117 	movw	r1, #535	; 0x217
    6136:	e028      	b.n	618a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6138:	2100      	movs	r1, #0
    613a:	4638      	mov	r0, r7
    613c:	460a      	mov	r2, r1
    613e:	f006 fee6 	bl	cf0e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6142:	1e76      	subs	r6, r6, #1
    6144:	b2b6      	uxth	r6, r6
    6146:	d2f7      	bcs.n	6138 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xc0>
    6148:	e7b1      	b.n	60ae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    614a:	4640      	mov	r0, r8
    614c:	f7fe fb62 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6150:	b1c8      	cbz	r0, 6186 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    6152:	9901      	ldr	r1, [sp, #4]
    6154:	b1b1      	cbz	r1, 6184 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10c>
    6156:	f006 fd04 	bl	cb62 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    615a:	b198      	cbz	r0, 6184 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10c>
    615c:	4640      	mov	r0, r8
    615e:	f007 f816 	bl	d18e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6162:	2100      	movs	r1, #0
    6164:	4640      	mov	r0, r8
    6166:	f7fe f9c3 	bl	44f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    616a:	f884 9001 	strb.w	r9, [r4, #1]
    616e:	210a      	movs	r1, #10
    6170:	7021      	strb	r1, [r4, #0]
    6172:	f884 9004 	strb.w	r9, [r4, #4]
    6176:	f8a4 8005 	strh.w	r8, [r4, #5]
    617a:	7f69      	ldrb	r1, [r5, #29]
    617c:	71e1      	strb	r1, [r4, #7]
    617e:	f885 901c 	strb.w	r9, [r5, #28]
    6182:	e794      	b.n	60ae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6184:	e004      	b.n	6190 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x118>
    6186:	f240 2135 	movw	r1, #565	; 0x235
    618a:	202b      	movs	r0, #43	; 0x2b
    618c:	f7fd ff2c 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6190:	2000      	movs	r0, #0
    6192:	e792      	b.n	60ba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6194:	20000228 	.word	0x20000228

00006198 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    619c:	4c13      	ldr	r4, [pc, #76]	; (61ec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>)
    619e:	4607      	mov	r7, r0
    61a0:	460e      	mov	r6, r1
    61a2:	7de0      	ldrb	r0, [r4, #23]
    61a4:	b110      	cbz	r0, 61ac <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    61a6:	8b20      	ldrh	r0, [r4, #24]
    61a8:	2800      	cmp	r0, #0
    61aa:	d013      	beq.n	61d4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    61ac:	480f      	ldr	r0, [pc, #60]	; (61ec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>)
    61ae:	2100      	movs	r1, #0
    61b0:	300e      	adds	r0, #14
    61b2:	4680      	mov	r8, r0
    61b4:	f007 fc6c 	bl	da90 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    61b8:	b9b0      	cbnz	r0, 61e8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>
    61ba:	89e5      	ldrh	r5, [r4, #14]
    61bc:	89e0      	ldrh	r0, [r4, #14]
    61be:	4632      	mov	r2, r6
    61c0:	4639      	mov	r1, r7
    61c2:	f007 fc9c 	bl	dafe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    61c6:	b138      	cbz	r0, 61d8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x40>
    61c8:	7de0      	ldrb	r0, [r4, #23]
    61ca:	b110      	cbz	r0, 61d2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    61cc:	8b20      	ldrh	r0, [r4, #24]
    61ce:	1e40      	subs	r0, r0, #1
    61d0:	8320      	strh	r0, [r4, #24]
    61d2:	2001      	movs	r0, #1
    61d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61d8:	2100      	movs	r1, #0
    61da:	4640      	mov	r0, r8
    61dc:	f007 fc58 	bl	da90 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    61e0:	b910      	cbnz	r0, 61e8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>
    61e2:	89e0      	ldrh	r0, [r4, #14]
    61e4:	42a8      	cmp	r0, r5
    61e6:	d1e9      	bne.n	61bc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x24>
    61e8:	2000      	movs	r0, #0
    61ea:	e7f3      	b.n	61d4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    61ec:	20000e48 	.word	0x20000e48

000061f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    61f0:	b510      	push	{r4, lr}
    61f2:	7901      	ldrb	r1, [r0, #4]
    61f4:	b119      	cbz	r1, 61fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    61f6:	2901      	cmp	r1, #1
    61f8:	d006      	beq.n	6208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    61fa:	2000      	movs	r0, #0
    61fc:	bd10      	pop	{r4, pc}
    61fe:	8842      	ldrh	r2, [r0, #2]
    6200:	6883      	ldr	r3, [r0, #8]
    6202:	8800      	ldrh	r0, [r0, #0]
    6204:	2102      	movs	r1, #2
    6206:	e003      	b.n	6210 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6208:	8842      	ldrh	r2, [r0, #2]
    620a:	6883      	ldr	r3, [r0, #8]
    620c:	8800      	ldrh	r0, [r0, #0]
    620e:	2101      	movs	r1, #1
    6210:	f000 f808 	bl	6224 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6214:	b910      	cbnz	r0, 621c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    6216:	4902      	ldr	r1, [pc, #8]	; (6220 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6218:	2001      	movs	r0, #1
    621a:	7008      	strb	r0, [r1, #0]
    621c:	2001      	movs	r0, #1
    621e:	bd10      	pop	{r4, pc}
    6220:	20000e48 	.word	0x20000e48
    6224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6228:	468a      	mov	sl, r1
    622a:	4699      	mov	r9, r3
    622c:	4615      	mov	r5, r2
    622e:	4604      	mov	r4, r0
    6230:	a901      	add	r1, sp, #4
    6232:	f007 f87f 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6236:	bbe0      	cbnz	r0, 62b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6238:	9f02      	ldr	r7, [sp, #8]
    623a:	f04f 0800 	mov.w	r8, #0
    623e:	3770      	adds	r7, #112	; 0x70
    6240:	b18d      	cbz	r5, 6266 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    6242:	4620      	mov	r0, r4
    6244:	f7fe fafc 	bl	4840 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6248:	0004      	movs	r4, r0
    624a:	d00f      	beq.n	626c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    624c:	4629      	mov	r1, r5
    624e:	f006 fd8f 	bl	cd70 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6252:	0006      	movs	r6, r0
    6254:	d003      	beq.n	625e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    6256:	481d      	ldr	r0, [pc, #116]	; (62cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6258:	8880      	ldrh	r0, [r0, #4]
    625a:	42a8      	cmp	r0, r5
    625c:	d208      	bcs.n	6270 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    625e:	2000      	movs	r0, #0
    6260:	b004      	add	sp, #16
    6262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6266:	2001      	movs	r0, #1
    6268:	74f8      	strb	r0, [r7, #19]
    626a:	e029      	b.n	62c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    626c:	2181      	movs	r1, #129	; 0x81
    626e:	e02a      	b.n	62c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6270:	4620      	mov	r0, r4
    6272:	4631      	mov	r1, r6
    6274:	aa03      	add	r2, sp, #12
    6276:	f006 fd74 	bl	cd62 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    627a:	9803      	ldr	r0, [sp, #12]
    627c:	f8a0 8000 	strh.w	r8, [r0]
    6280:	f880 8002 	strb.w	r8, [r0, #2]
    6284:	7cf9      	ldrb	r1, [r7, #19]
    6286:	b109      	cbz	r1, 628c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6288:	f04f 0a02 	mov.w	sl, #2
    628c:	4651      	mov	r1, sl
    628e:	f007 fb56 	bl	d93e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6292:	4631      	mov	r1, r6
    6294:	2603      	movs	r6, #3
    6296:	4620      	mov	r0, r4
    6298:	464a      	mov	r2, r9
    629a:	462b      	mov	r3, r5
    629c:	9600      	str	r6, [sp, #0]
    629e:	f006 fc49 	bl	cb34 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    62a2:	4620      	mov	r0, r4
    62a4:	4629      	mov	r1, r5
    62a6:	f006 fd00 	bl	ccaa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    62aa:	b158      	cbz	r0, 62c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    62ac:	4644      	mov	r4, r8
    62ae:	a801      	add	r0, sp, #4
    62b0:	e000      	b.n	62b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    62b2:	e005      	b.n	62c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    62b4:	f007 fc17 	bl	dae6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    62b8:	9802      	ldr	r0, [sp, #8]
    62ba:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    62be:	74fc      	strb	r4, [r7, #19]
    62c0:	2001      	movs	r0, #1
    62c2:	e7cd      	b.n	6260 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    62c4:	2197      	movs	r1, #151	; 0x97
    62c6:	202b      	movs	r0, #43	; 0x2b
    62c8:	f7fd fe8e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62cc:	20000e48 	.word	0x20000e48
    62d0:	b510      	push	{r4, lr}
    62d2:	492c      	ldr	r1, [pc, #176]	; (6384 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    62d4:	b086      	sub	sp, #24
    62d6:	7d8a      	ldrb	r2, [r1, #22]
    62d8:	7801      	ldrb	r1, [r0, #0]
    62da:	07d3      	lsls	r3, r2, #31
    62dc:	d101      	bne.n	62e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    62de:	2919      	cmp	r1, #25
    62e0:	d004      	beq.n	62ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    62e2:	2918      	cmp	r1, #24
    62e4:	d01e      	beq.n	6324 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    62e6:	2912      	cmp	r1, #18
    62e8:	d045      	beq.n	6376 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    62ea:	e049      	b.n	6380 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    62ec:	8880      	ldrh	r0, [r0, #4]
    62ee:	f8ad 0000 	strh.w	r0, [sp]
    62f2:	a902      	add	r1, sp, #8
    62f4:	f007 f81e 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    62f8:	b108      	cbz	r0, 62fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    62fa:	2151      	movs	r1, #81	; 0x51
    62fc:	e035      	b.n	636a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    62fe:	9803      	ldr	r0, [sp, #12]
    6300:	f810 1f62 	ldrb.w	r1, [r0, #98]!
    6304:	f88d 1002 	strb.w	r1, [sp, #2]
    6308:	7840      	ldrb	r0, [r0, #1]
    630a:	f88d 0003 	strb.w	r0, [sp, #3]
    630e:	2000      	movs	r0, #0
    6310:	f8ad 0004 	strh.w	r0, [sp, #4]
    6314:	2102      	movs	r1, #2
    6316:	4668      	mov	r0, sp
    6318:	f008 fbac 	bl	ea74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    631c:	b340      	cbz	r0, 6370 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    631e:	f240 112b 	movw	r1, #299	; 0x12b
    6322:	e022      	b.n	636a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6324:	0791      	lsls	r1, r2, #30
    6326:	d42b      	bmi.n	6380 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6328:	8884      	ldrh	r4, [r0, #4]
    632a:	a903      	add	r1, sp, #12
    632c:	4620      	mov	r0, r4
    632e:	f008 fa6e 	bl	e80e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6332:	b110      	cbz	r0, 633a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    6334:	f44f 7199 	mov.w	r1, #306	; 0x132
    6338:	e017      	b.n	636a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    633a:	f8ad 4000 	strh.w	r4, [sp]
    633e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6342:	f8ad 0002 	strh.w	r0, [sp, #2]
    6346:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    634a:	f8ad 0004 	strh.w	r0, [sp, #4]
    634e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6352:	f8ad 0006 	strh.w	r0, [sp, #6]
    6356:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    635a:	f8ad 0008 	strh.w	r0, [sp, #8]
    635e:	4668      	mov	r0, sp
    6360:	f008 fab9 	bl	e8d6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6364:	b120      	cbz	r0, 6370 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6366:	f240 113b 	movw	r1, #315	; 0x13b
    636a:	202b      	movs	r0, #43	; 0x2b
    636c:	f7fd fe3c 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6370:	2001      	movs	r0, #1
    6372:	b006      	add	sp, #24
    6374:	bd10      	pop	{r4, pc}
    6376:	0751      	lsls	r1, r2, #29
    6378:	d402      	bmi.n	6380 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    637a:	7b80      	ldrb	r0, [r0, #14]
    637c:	07c0      	lsls	r0, r0, #31
    637e:	d0f7      	beq.n	6370 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6380:	2000      	movs	r0, #0
    6382:	e7f6      	b.n	6372 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    6384:	20000e48 	.word	0x20000e48

00006388 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    6388:	b510      	push	{r4, lr}
    638a:	4c0d      	ldr	r4, [pc, #52]	; (63c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x38>)
    638c:	7c20      	ldrb	r0, [r4, #16]
    638e:	f007 fd35 	bl	ddfc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6392:	b148      	cbz	r0, 63a8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    6394:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    6398:	f104 0144 	add.w	r1, r4, #68	; 0x44
    639c:	f006 ff87 	bl	d2ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    63a0:	2808      	cmp	r0, #8
    63a2:	d001      	beq.n	63a8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    63a4:	2001      	movs	r0, #1
    63a6:	bd10      	pop	{r4, pc}
    63a8:	7c20      	ldrb	r0, [r4, #16]
    63aa:	b118      	cbz	r0, 63b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    63ac:	2802      	cmp	r0, #2
    63ae:	d001      	beq.n	63b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    63b0:	7de0      	ldrb	r0, [r4, #23]
    63b2:	bd10      	pop	{r4, pc}
    63b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    63b8:	2000      	movs	r0, #0
    63ba:	f7fe bc6d 	b.w	4c98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    63be:	0000      	.short	0x0000
    63c0:	20000e64 	.word	0x20000e64

000063c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    63c4:	b570      	push	{r4, r5, r6, lr}
    63c6:	4c2e      	ldr	r4, [pc, #184]	; (6480 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>)
    63c8:	7c20      	ldrb	r0, [r4, #16]
    63ca:	b1f8      	cbz	r0, 640c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x48>
    63cc:	2802      	cmp	r0, #2
    63ce:	d01d      	beq.n	640c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x48>
    63d0:	f05f 0001 	movs.w	r0, #1
    63d4:	4d2a      	ldr	r5, [pc, #168]	; (6480 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>)
    63d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    63da:	353d      	adds	r5, #61	; 0x3d
    63dc:	b1c0      	cbz	r0, 6410 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4c>
    63de:	7de0      	ldrb	r0, [r4, #23]
    63e0:	b1f8      	cbz	r0, 6422 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    63e2:	f8d4 0011 	ldr.w	r0, [r4, #17]
    63e6:	f8c4 003d 	str.w	r0, [r4, #61]	; 0x3d
    63ea:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    63ee:	f8a4 0041 	strh.w	r0, [r4, #65]	; 0x41
    63f2:	7c20      	ldrb	r0, [r4, #16]
    63f4:	f007 fd02 	bl	ddfc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    63f8:	7620      	strb	r0, [r4, #24]
    63fa:	2008      	movs	r0, #8
    63fc:	7660      	strb	r0, [r4, #25]
    63fe:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    6402:	4629      	mov	r1, r5
    6404:	f007 fce6 	bl	ddd4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6408:	b9b0      	cbnz	r0, 6438 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    640a:	e00f      	b.n	642c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    640c:	2000      	movs	r0, #0
    640e:	e7e1      	b.n	63d4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6410:	4629      	mov	r1, r5
    6412:	2000      	movs	r0, #0
    6414:	f7fe fc14 	bl	4c40 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6418:	2800      	cmp	r0, #0
    641a:	d1ea      	bne.n	63f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2e>
    641c:	f240 413d 	movw	r1, #1085	; 0x43d
    6420:	e001      	b.n	6426 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6422:	f240 4141 	movw	r1, #1089	; 0x441
    6426:	202d      	movs	r0, #45	; 0x2d
    6428:	f7fd fdde 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    642c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    6430:	4629      	mov	r1, r5
    6432:	f007 fcd8 	bl	dde6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6436:	b100      	cbz	r0, 643a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6438:	2001      	movs	r0, #1
    643a:	76a0      	strb	r0, [r4, #26]
    643c:	7e20      	ldrb	r0, [r4, #24]
    643e:	b910      	cbnz	r0, 6446 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6440:	78a0      	ldrb	r0, [r4, #2]
    6442:	0740      	lsls	r0, r0, #29
    6444:	d506      	bpl.n	6454 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6446:	490e      	ldr	r1, [pc, #56]	; (6480 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>)
    6448:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    644c:	3144      	adds	r1, #68	; 0x44
    644e:	f006 ff2e 	bl	d2ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6452:	7660      	strb	r0, [r4, #25]
    6454:	2500      	movs	r5, #0
    6456:	6365      	str	r5, [r4, #52]	; 0x34
    6458:	f005 fcce 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    645c:	63a0      	str	r0, [r4, #56]	; 0x38
    645e:	2000      	movs	r0, #0
    6460:	f000 feea 	bl	7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    6464:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    6468:	78a0      	ldrb	r0, [r4, #2]
    646a:	0740      	lsls	r0, r0, #29
    646c:	d507      	bpl.n	647e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xba>
    646e:	7e20      	ldrb	r0, [r4, #24]
    6470:	2800      	cmp	r0, #0
    6472:	d004      	beq.n	647e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xba>
    6474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6478:	2000      	movs	r0, #0
    647a:	f000 beb5 	b.w	71e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>
    647e:	bd70      	pop	{r4, r5, r6, pc}
    6480:	20000e64 	.word	0x20000e64

00006484 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    6484:	4804      	ldr	r0, [pc, #16]	; (6498 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    6486:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    648a:	b111      	cbz	r1, 6492 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0xe>
    648c:	f8b0 006c 	ldrh.w	r0, [r0, #108]	; 0x6c
    6490:	4770      	bx	lr
    6492:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6496:	4770      	bx	lr
    6498:	20000e64 	.word	0x20000e64

0000649c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    649c:	4608      	mov	r0, r1
    649e:	491d      	ldr	r1, [pc, #116]	; (6514 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>)
    64a0:	b510      	push	{r4, lr}
    64a2:	f891 4098 	ldrb.w	r4, [r1, #152]	; 0x98
    64a6:	2200      	movs	r2, #0
    64a8:	f101 0380 	add.w	r3, r1, #128	; 0x80
    64ac:	b164      	cbz	r4, 64c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x2c>
    64ae:	7042      	strb	r2, [r0, #1]
    64b0:	2417      	movs	r4, #23
    64b2:	7004      	strb	r4, [r0, #0]
    64b4:	f853 4f19 	ldr.w	r4, [r3, #25]!
    64b8:	6044      	str	r4, [r0, #4]
    64ba:	685c      	ldr	r4, [r3, #4]
    64bc:	6084      	str	r4, [r0, #8]
    64be:	7a1b      	ldrb	r3, [r3, #8]
    64c0:	7303      	strb	r3, [r0, #12]
    64c2:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    64c6:	e020      	b.n	650a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    64c8:	f891 4092 	ldrb.w	r4, [r1, #146]	; 0x92
    64cc:	b13c      	cbz	r4, 64de <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x42>
    64ce:	7042      	strb	r2, [r0, #1]
    64d0:	2405      	movs	r4, #5
    64d2:	7004      	strb	r4, [r0, #0]
    64d4:	695b      	ldr	r3, [r3, #20]
    64d6:	6043      	str	r3, [r0, #4]
    64d8:	f881 2092 	strb.w	r2, [r1, #146]	; 0x92
    64dc:	e015      	b.n	650a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    64de:	f891 4068 	ldrb.w	r4, [r1, #104]	; 0x68
    64e2:	b114      	cbz	r4, 64ea <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x4e>
    64e4:	f000 fd40 	bl	6f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    64e8:	e00f      	b.n	650a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    64ea:	f891 408a 	ldrb.w	r4, [r1, #138]	; 0x8a
    64ee:	b174      	cbz	r4, 650e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x72>
    64f0:	f891 4068 	ldrb.w	r4, [r1, #104]	; 0x68
    64f4:	2c00      	cmp	r4, #0
    64f6:	d1f5      	bne.n	64e4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    64f8:	7042      	strb	r2, [r0, #1]
    64fa:	2414      	movs	r4, #20
    64fc:	7004      	strb	r4, [r0, #0]
    64fe:	68dc      	ldr	r4, [r3, #12]
    6500:	6044      	str	r4, [r0, #4]
    6502:	8a1b      	ldrh	r3, [r3, #16]
    6504:	8103      	strh	r3, [r0, #8]
    6506:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
    650a:	2001      	movs	r0, #1
    650c:	bd10      	pop	{r4, pc}
    650e:	2000      	movs	r0, #0
    6510:	bd10      	pop	{r4, pc}
    6512:	0000      	.short	0x0000
    6514:	20000e64 	.word	0x20000e64

00006518 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    6518:	4801      	ldr	r0, [pc, #4]	; (6520 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    651a:	6880      	ldr	r0, [r0, #8]
    651c:	4770      	bx	lr
    651e:	0000      	.short	0x0000
    6520:	20000e64 	.word	0x20000e64

00006524 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    6524:	b510      	push	{r4, lr}
    6526:	4805      	ldr	r0, [pc, #20]	; (653c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x18>)
    6528:	f007 fcc6 	bl	deb8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    652c:	4903      	ldr	r1, [pc, #12]	; (653c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x18>)
    652e:	391c      	subs	r1, #28
    6530:	2228      	movs	r2, #40	; 0x28
    6532:	8849      	ldrh	r1, [r1, #2]
    6534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6538:	f000 bf56 	b.w	73e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    653c:	20000e80 	.word	0x20000e80

00006540 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    6540:	4804      	ldr	r0, [pc, #16]	; (6554 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    6542:	2200      	movs	r2, #0
    6544:	6242      	str	r2, [r0, #36]	; 0x24
    6546:	8843      	ldrh	r3, [r0, #2]
    6548:	2b1d      	cmp	r3, #29
    654a:	d001      	beq.n	6550 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x10>
    654c:	7341      	strb	r1, [r0, #13]
    654e:	4770      	bx	lr
    6550:	7342      	strb	r2, [r0, #13]
    6552:	4770      	bx	lr
    6554:	20000e64 	.word	0x20000e64

00006558 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6558:	b530      	push	{r4, r5, lr}
    655a:	b08b      	sub	sp, #44	; 0x2c
    655c:	460c      	mov	r4, r1
    655e:	221c      	movs	r2, #28
    6560:	494f      	ldr	r1, [pc, #316]	; (66a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>)
    6562:	a803      	add	r0, sp, #12
    6564:	f005 fdbd 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6568:	a801      	add	r0, sp, #4
    656a:	f007 fce5 	bl	df38 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    656e:	7aa0      	ldrb	r0, [r4, #10]
    6570:	f88d 001c 	strb.w	r0, [sp, #28]
    6574:	7820      	ldrb	r0, [r4, #0]
    6576:	f88d 000c 	strb.w	r0, [sp, #12]
    657a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    657e:	f8ad 0000 	strh.w	r0, [sp]
    6582:	f89d 0000 	ldrb.w	r0, [sp]
    6586:	f000 0101 	and.w	r1, r0, #1
    658a:	f3c0 0240 	ubfx	r2, r0, #1, #1
    658e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6592:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6596:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    659a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    659e:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    65a2:	f3c0 1200 	ubfx	r2, r0, #4, #1
    65a6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    65aa:	f3c0 1240 	ubfx	r2, r0, #5, #1
    65ae:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    65b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    65b6:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    65ba:	f8ad 000e 	strh.w	r0, [sp, #14]
    65be:	7d20      	ldrb	r0, [r4, #20]
    65c0:	2801      	cmp	r0, #1
    65c2:	d006      	beq.n	65d2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7a>
    65c4:	2802      	cmp	r0, #2
    65c6:	d004      	beq.n	65d2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7a>
    65c8:	f240 21a1 	movw	r1, #673	; 0x2a1
    65cc:	2006      	movs	r0, #6
    65ce:	f7fd fd0b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65d2:	f88d 0010 	strb.w	r0, [sp, #16]
    65d6:	7a61      	ldrb	r1, [r4, #9]
    65d8:	a801      	add	r0, sp, #4
    65da:	f007 fc94 	bl	df06 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    65de:	7d20      	ldrb	r0, [r4, #20]
    65e0:	2101      	movs	r1, #1
    65e2:	2802      	cmp	r0, #2
    65e4:	d102      	bne.n	65ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
    65e6:	7d60      	ldrb	r0, [r4, #21]
    65e8:	1c40      	adds	r0, r0, #1
    65ea:	b2c1      	uxtb	r1, r0
    65ec:	7ea0      	ldrb	r0, [r4, #26]
    65ee:	1c40      	adds	r0, r0, #1
    65f0:	b2c2      	uxtb	r2, r0
    65f2:	a801      	add	r0, sp, #4
    65f4:	f007 fc4e 	bl	de94 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    65f8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    65fc:	0700      	lsls	r0, r0, #28
    65fe:	d501      	bpl.n	6604 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xac>
    6600:	2000      	movs	r0, #0
    6602:	e020      	b.n	6646 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xee>
    6604:	a801      	add	r0, sp, #4
    6606:	f007 fc57 	bl	deb8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    660a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    660e:	2228      	movs	r2, #40	; 0x28
    6610:	f000 feea 	bl	73e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6614:	f240 2171 	movw	r1, #625	; 0x271
    6618:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    661c:	fbb0 f0f1 	udiv	r0, r0, r1
    6620:	4348      	muls	r0, r1
    6622:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6626:	f240 2371 	movw	r3, #625	; 0x271
    662a:	0a0a      	lsrs	r2, r1, #8
    662c:	f240 2171 	movw	r1, #625	; 0x271
    6630:	434a      	muls	r2, r1
    6632:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6636:	0a09      	lsrs	r1, r1, #8
    6638:	4359      	muls	r1, r3
    663a:	4290      	cmp	r0, r2
    663c:	d801      	bhi.n	6642 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xea>
    663e:	9205      	str	r2, [sp, #20]
    6640:	e004      	b.n	664c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6642:	4288      	cmp	r0, r1
    6644:	d801      	bhi.n	664a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf2>
    6646:	9005      	str	r0, [sp, #20]
    6648:	e000      	b.n	664c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    664a:	9105      	str	r1, [sp, #20]
    664c:	7ca0      	ldrb	r0, [r4, #18]
    664e:	f88d 001b 	strb.w	r0, [sp, #27]
    6652:	7e20      	ldrb	r0, [r4, #24]
    6654:	2801      	cmp	r0, #1
    6656:	d000      	beq.n	665a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x102>
    6658:	2000      	movs	r0, #0
    665a:	4d11      	ldr	r5, [pc, #68]	; (66a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>)
    665c:	f88d 0018 	strb.w	r0, [sp, #24]
    6660:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
    6664:	f895 0061 	ldrb.w	r0, [r5, #97]	; 0x61
    6668:	221c      	movs	r2, #28
    666a:	a903      	add	r1, sp, #12
    666c:	4628      	mov	r0, r5
    666e:	f005 fd38 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6672:	9801      	ldr	r0, [sp, #4]
    6674:	61e8      	str	r0, [r5, #28]
    6676:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    667a:	8428      	strh	r0, [r5, #32]
    667c:	7ae0      	ldrb	r0, [r4, #11]
    667e:	b168      	cbz	r0, 669c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6680:	2802      	cmp	r0, #2
    6682:	d00b      	beq.n	669c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6684:	f05f 0001 	movs.w	r0, #1
    6688:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
    668c:	68e0      	ldr	r0, [r4, #12]
    668e:	6468      	str	r0, [r5, #68]	; 0x44
    6690:	8a20      	ldrh	r0, [r4, #16]
    6692:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
    6696:	b00b      	add	sp, #44	; 0x2c
    6698:	2000      	movs	r0, #0
    669a:	bd30      	pop	{r4, r5, pc}
    669c:	2000      	movs	r0, #0
    669e:	e7f3      	b.n	6688 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>
    66a0:	20000e64 	.word	0x20000e64

000066a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    66a4:	4a0a      	ldr	r2, [pc, #40]	; (66d0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    66a6:	b510      	push	{r4, lr}
    66a8:	2100      	movs	r1, #0
    66aa:	7011      	strb	r1, [r2, #0]
    66ac:	4c09      	ldr	r4, [pc, #36]	; (66d4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    66ae:	6020      	str	r0, [r4, #0]
    66b0:	f000 f85c 	bl	676c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    66b4:	b110      	cbz	r0, 66bc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    66b6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
    66ba:	e004      	b.n	66c6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    66bc:	68a0      	ldr	r0, [r4, #8]
    66be:	2800      	cmp	r0, #0
    66c0:	d104      	bne.n	66cc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    66c2:	f240 21e3 	movw	r1, #739	; 0x2e3
    66c6:	202d      	movs	r0, #45	; 0x2d
    66c8:	f7fd fc8e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66cc:	bd10      	pop	{r4, pc}
    66ce:	0000      	.short	0x0000
    66d0:	20000f08 	.word	0x20000f08
    66d4:	200000e8 	.word	0x200000e8

000066d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    66d8:	4802      	ldr	r0, [pc, #8]	; (66e4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    66da:	7880      	ldrb	r0, [r0, #2]
    66dc:	f000 0001 	and.w	r0, r0, #1
    66e0:	4770      	bx	lr
    66e2:	0000      	.short	0x0000
    66e4:	20000e64 	.word	0x20000e64

000066e8 <sym_7M3JUUGD5O2FPMBCNLYSNKUZ5ZOQOWLN7Y6RMLQ>:
    66e8:	4802      	ldr	r0, [pc, #8]	; (66f4 <sym_7M3JUUGD5O2FPMBCNLYSNKUZ5ZOQOWLN7Y6RMLQ+0xc>)
    66ea:	7880      	ldrb	r0, [r0, #2]
    66ec:	f3c0 0080 	ubfx	r0, r0, #2, #1
    66f0:	4770      	bx	lr
    66f2:	0000      	.short	0x0000
    66f4:	20000e64 	.word	0x20000e64

000066f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    66f8:	4802      	ldr	r0, [pc, #8]	; (6704 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    66fa:	7880      	ldrb	r0, [r0, #2]
    66fc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6700:	4770      	bx	lr
    6702:	0000      	.short	0x0000
    6704:	20000e64 	.word	0x20000e64

00006708 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    6708:	4802      	ldr	r0, [pc, #8]	; (6714 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    670a:	7880      	ldrb	r0, [r0, #2]
    670c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6710:	4770      	bx	lr
    6712:	0000      	.short	0x0000
    6714:	20000e64 	.word	0x20000e64

00006718 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6718:	4902      	ldr	r1, [pc, #8]	; (6724 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    671a:	4801      	ldr	r0, [pc, #4]	; (6720 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    671c:	6088      	str	r0, [r1, #8]
    671e:	4770      	bx	lr
    6720:	000073d0 	.word	0x000073d0
    6724:	200000e8 	.word	0x200000e8

00006728 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    6728:	4801      	ldr	r0, [pc, #4]	; (6730 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    672a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    672e:	4770      	bx	lr
    6730:	20000e64 	.word	0x20000e64

00006734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    6734:	4903      	ldr	r1, [pc, #12]	; (6744 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    6736:	7809      	ldrb	r1, [r1, #0]
    6738:	4281      	cmp	r1, r0
    673a:	d101      	bne.n	6740 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xc>
    673c:	2001      	movs	r0, #1
    673e:	4770      	bx	lr
    6740:	2000      	movs	r0, #0
    6742:	4770      	bx	lr
    6744:	20000e64 	.word	0x20000e64

00006748 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6748:	4801      	ldr	r0, [pc, #4]	; (6750 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    674a:	6880      	ldr	r0, [r0, #8]
    674c:	6800      	ldr	r0, [r0, #0]
    674e:	4700      	bx	r0
    6750:	200000e8 	.word	0x200000e8

00006754 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    6754:	4804      	ldr	r0, [pc, #16]	; (6768 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ+0x14>)
    6756:	680a      	ldr	r2, [r1, #0]
    6758:	f840 2f11 	str.w	r2, [r0, #17]!
    675c:	8889      	ldrh	r1, [r1, #4]
    675e:	8081      	strh	r1, [r0, #4]
    6760:	2101      	movs	r1, #1
    6762:	7181      	strb	r1, [r0, #6]
    6764:	4770      	bx	lr
    6766:	0000      	.short	0x0000
    6768:	20000e64 	.word	0x20000e64

0000676c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    676c:	4814      	ldr	r0, [pc, #80]	; (67c0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x54>)
    676e:	b510      	push	{r4, lr}
    6770:	7800      	ldrb	r0, [r0, #0]
    6772:	b110      	cbz	r0, 677a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6774:	240c      	movs	r4, #12
    6776:	4620      	mov	r0, r4
    6778:	bd10      	pop	{r4, pc}
    677a:	4811      	ldr	r0, [pc, #68]	; (67c0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x54>)
    677c:	2400      	movs	r4, #0
    677e:	22a4      	movs	r2, #164	; 0xa4
    6780:	4621      	mov	r1, r4
    6782:	38a4      	subs	r0, #164	; 0xa4
    6784:	f005 fd27 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6788:	490d      	ldr	r1, [pc, #52]	; (67c0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x54>)
    678a:	3924      	subs	r1, #36	; 0x24
    678c:	2000      	movs	r0, #0
    678e:	6248      	str	r0, [r1, #36]	; 0x24
    6790:	6288      	str	r0, [r1, #40]	; 0x28
    6792:	62c8      	str	r0, [r1, #44]	; 0x2c
    6794:	6308      	str	r0, [r1, #48]	; 0x30
    6796:	3980      	subs	r1, #128	; 0x80
    6798:	22ff      	movs	r2, #255	; 0xff
    679a:	700a      	strb	r2, [r1, #0]
    679c:	227f      	movs	r2, #127	; 0x7f
    679e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
    67a2:	2213      	movs	r2, #19
    67a4:	804a      	strh	r2, [r1, #2]
    67a6:	2201      	movs	r2, #1
    67a8:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    67ac:	7388      	strb	r0, [r1, #14]
    67ae:	f101 001c 	add.w	r0, r1, #28
    67b2:	f007 fbc1 	bl	df38 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    67b6:	f004 fc0f 	bl	afd8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67ba:	f004 fa51 	bl	ac60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67be:	e7da      	b.n	6776 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    67c0:	20000f08 	.word	0x20000f08

000067c4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    67c4:	4801      	ldr	r0, [pc, #4]	; (67cc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    67c6:	7b00      	ldrb	r0, [r0, #12]
    67c8:	4770      	bx	lr
    67ca:	0000      	.short	0x0000
    67cc:	20000e64 	.word	0x20000e64

000067d0 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    67d0:	4801      	ldr	r0, [pc, #4]	; (67d8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    67d2:	6041      	str	r1, [r0, #4]
    67d4:	4770      	bx	lr
    67d6:	0000      	.short	0x0000
    67d8:	200000e8 	.word	0x200000e8

000067dc <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    67dc:	4805      	ldr	r0, [pc, #20]	; (67f4 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    67de:	2300      	movs	r3, #0
    67e0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    67e4:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
    67e8:	f840 2f58 	str.w	r2, [r0, #88]!
    67ec:	2101      	movs	r1, #1
    67ee:	7201      	strb	r1, [r0, #8]
    67f0:	4770      	bx	lr
    67f2:	0000      	.short	0x0000
    67f4:	20000e64 	.word	0x20000e64

000067f8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    67f8:	4804      	ldr	r0, [pc, #16]	; (680c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x14>)
    67fa:	2300      	movs	r3, #0
    67fc:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    6800:	f840 2f5c 	str.w	r2, [r0, #92]!
    6804:	8101      	strh	r1, [r0, #8]
    6806:	2101      	movs	r1, #1
    6808:	7141      	strb	r1, [r0, #5]
    680a:	4770      	bx	lr
    680c:	20000e64 	.word	0x20000e64

00006810 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6810:	4804      	ldr	r0, [pc, #16]	; (6824 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6812:	b510      	push	{r4, lr}
    6814:	7800      	ldrb	r0, [r0, #0]
    6816:	2801      	cmp	r0, #1
    6818:	d101      	bne.n	681e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    681a:	f000 fbd1 	bl	6fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    681e:	2000      	movs	r0, #0
    6820:	bd10      	pop	{r4, pc}
    6822:	0000      	.short	0x0000
    6824:	20000f08 	.word	0x20000f08

00006828 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    6828:	4801      	ldr	r0, [pc, #4]	; (6830 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    682a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
    682e:	4770      	bx	lr
    6830:	20000e64 	.word	0x20000e64

00006834 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6834:	4902      	ldr	r1, [pc, #8]	; (6840 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6836:	4801      	ldr	r0, [pc, #4]	; (683c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6838:	6008      	str	r0, [r1, #0]
    683a:	4770      	bx	lr
    683c:	00007119 	.word	0x00007119
    6840:	200000f4 	.word	0x200000f4

00006844 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    6844:	b570      	push	{r4, r5, r6, lr}
    6846:	2000      	movs	r0, #0
    6848:	f7ff ff56 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    684c:	4d0e      	ldr	r5, [pc, #56]	; (6888 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    684e:	4c0f      	ldr	r4, [pc, #60]	; (688c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    6850:	2601      	movs	r6, #1
    6852:	b130      	cbz	r0, 6862 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    6854:	223c      	movs	r2, #60	; 0x3c
    6856:	21ff      	movs	r1, #255	; 0xff
    6858:	6868      	ldr	r0, [r5, #4]
    685a:	f000 fbeb 	bl	7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    685e:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    6862:	78a0      	ldrb	r0, [r4, #2]
    6864:	f010 0f01 	tst.w	r0, #1
    6868:	d004      	beq.n	6874 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    686a:	6868      	ldr	r0, [r5, #4]
    686c:	223c      	movs	r2, #60	; 0x3c
    686e:	8801      	ldrh	r1, [r0, #0]
    6870:	2001      	movs	r0, #1
    6872:	e003      	b.n	687c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x38>
    6874:	223c      	movs	r2, #60	; 0x3c
    6876:	f64f 71ff 	movw	r1, #65535	; 0xffff
    687a:	2000      	movs	r0, #0
    687c:	f000 fa96 	bl	6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    6880:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
    6884:	bd70      	pop	{r4, r5, r6, pc}
    6886:	0000      	.short	0x0000
    6888:	200000e8 	.word	0x200000e8
    688c:	20000e64 	.word	0x20000e64

00006890 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    6890:	4802      	ldr	r0, [pc, #8]	; (689c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    6892:	7bc0      	ldrb	r0, [r0, #15]
    6894:	2800      	cmp	r0, #0
    6896:	d000      	beq.n	689a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6898:	2001      	movs	r0, #1
    689a:	4770      	bx	lr
    689c:	20000e64 	.word	0x20000e64
    68a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68a4:	0007      	movs	r7, r0
    68a6:	d021      	beq.n	68ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5c>
    68a8:	483d      	ldr	r0, [pc, #244]	; (69a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x110>)
    68aa:	4604      	mov	r4, r0
    68ac:	f007 fb2d 	bl	df0a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    68b0:	b9b8      	cbnz	r0, 68e2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x52>
    68b2:	2000      	movs	r0, #0
    68b4:	f7ff ff20 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    68b8:	b358      	cbz	r0, 6912 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x82>
    68ba:	4620      	mov	r0, r4
    68bc:	f007 fafc 	bl	deb8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    68c0:	4605      	mov	r5, r0
    68c2:	4620      	mov	r0, r4
    68c4:	f007 fb21 	bl	df0a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    68c8:	1a28      	subs	r0, r5, r0
    68ca:	b2c0      	uxtb	r0, r0
    68cc:	f007 fb72 	bl	dfb4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    68d0:	4601      	mov	r1, r0
    68d2:	4833      	ldr	r0, [pc, #204]	; (69a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x110>)
    68d4:	3088      	adds	r0, #136	; 0x88
    68d6:	6842      	ldr	r2, [r0, #4]
    68d8:	4411      	add	r1, r2
    68da:	6041      	str	r1, [r0, #4]
    68dc:	4620      	mov	r0, r4
    68de:	f007 fb32 	bl	df46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    68e2:	4620      	mov	r0, r4
    68e4:	f007 faf4 	bl	ded0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    68e8:	f000 fce4 	bl	72b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    68ec:	4c2d      	ldr	r4, [pc, #180]	; (69a4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>)
    68ee:	4d2c      	ldr	r5, [pc, #176]	; (69a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x110>)
    68f0:	2100      	movs	r1, #0
    68f2:	3d1c      	subs	r5, #28
    68f4:	6820      	ldr	r0, [r4, #0]
    68f6:	f895 604a 	ldrb.w	r6, [r5, #74]	; 0x4a
    68fa:	8001      	strh	r1, [r0, #0]
    68fc:	f007 fac1 	bl	de82 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x4e>
    6900:	8868      	ldrh	r0, [r5, #2]
    6902:	2813      	cmp	r0, #19
    6904:	d012      	beq.n	692c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    6906:	dc08      	bgt.n	691a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    6908:	2810      	cmp	r0, #16
    690a:	d034      	beq.n	6976 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe6>
    690c:	2812      	cmp	r0, #18
    690e:	d108      	bne.n	6922 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x92>
    6910:	e02f      	b.n	6972 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe2>
    6912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6916:	f000 bb53 	b.w	6fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    691a:	2815      	cmp	r0, #21
    691c:	d00f      	beq.n	693e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    691e:	281d      	cmp	r0, #29
    6920:	d00d      	beq.n	693e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    6922:	f240 6151 	movw	r1, #1617	; 0x651
    6926:	202d      	movs	r0, #45	; 0x2d
    6928:	f7fd fb5e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    692c:	2100      	movs	r1, #0
    692e:	6820      	ldr	r0, [r4, #0]
    6930:	f007 f867 	bl	da02 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6934:	2101      	movs	r1, #1
    6936:	6820      	ldr	r0, [r4, #0]
    6938:	f007 faa3 	bl	de82 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x4e>
    693c:	e01f      	b.n	697e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xee>
    693e:	2101      	movs	r1, #1
    6940:	6820      	ldr	r0, [r4, #0]
    6942:	f007 f85e 	bl	da02 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6946:	2101      	movs	r1, #1
    6948:	6820      	ldr	r0, [r4, #0]
    694a:	f007 fa9a 	bl	de82 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x4e>
    694e:	4914      	ldr	r1, [pc, #80]	; (69a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x110>)
    6950:	6820      	ldr	r0, [r4, #0]
    6952:	391c      	subs	r1, #28
    6954:	b126      	cbz	r6, 6960 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xd0>
    6956:	314b      	adds	r1, #75	; 0x4b
    6958:	f007 f86e 	bl	da38 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    695c:	2101      	movs	r1, #1
    695e:	e004      	b.n	696a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    6960:	3144      	adds	r1, #68	; 0x44
    6962:	f007 f869 	bl	da38 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6966:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    696a:	6820      	ldr	r0, [r4, #0]
    696c:	f007 f86a 	bl	da44 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6970:	e005      	b.n	697e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xee>
    6972:	2106      	movs	r1, #6
    6974:	e000      	b.n	6978 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    6976:	2102      	movs	r1, #2
    6978:	6820      	ldr	r0, [r4, #0]
    697a:	f007 f842 	bl	da02 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    697e:	f000 fcfd 	bl	737c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    6982:	8868      	ldrh	r0, [r5, #2]
    6984:	281d      	cmp	r0, #29
    6986:	d006      	beq.n	6996 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6988:	2815      	cmp	r0, #21
    698a:	d004      	beq.n	6996 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    698c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
    698e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    6990:	6820      	ldr	r0, [r4, #0]
    6992:	f007 f826 	bl	d9e2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    6996:	4638      	mov	r0, r7
    6998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    699c:	f000 b9be 	b.w	6d1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>
    69a0:	20000e80 	.word	0x20000e80
    69a4:	200000e8 	.word	0x200000e8
    69a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69ac:	4c24      	ldr	r4, [pc, #144]	; (6a40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b0>)
    69ae:	4680      	mov	r8, r0
    69b0:	7820      	ldrb	r0, [r4, #0]
    69b2:	2802      	cmp	r0, #2
    69b4:	d005      	beq.n	69c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    69b6:	7820      	ldrb	r0, [r4, #0]
    69b8:	2803      	cmp	r0, #3
    69ba:	d002      	beq.n	69c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    69bc:	f640 4164 	movw	r1, #3172	; 0xc64
    69c0:	e01f      	b.n	6a02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x172>
    69c2:	481f      	ldr	r0, [pc, #124]	; (6a40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b0>)
    69c4:	38a4      	subs	r0, #164	; 0xa4
    69c6:	7b00      	ldrb	r0, [r0, #12]
    69c8:	b108      	cbz	r0, 69ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    69ca:	f000 fc7f 	bl	72cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2cc>
    69ce:	4e1d      	ldr	r6, [pc, #116]	; (6a44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b4>)
    69d0:	2700      	movs	r7, #0
    69d2:	f1b8 0f00 	cmp.w	r8, #0
    69d6:	6830      	ldr	r0, [r6, #0]
    69d8:	7800      	ldrb	r0, [r0, #0]
    69da:	f000 050f 	and.w	r5, r0, #15
    69de:	d01e      	beq.n	6a1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x18e>
    69e0:	f004 fcb4 	bl	b34c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    69e4:	b1d8      	cbz	r0, 6a1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x18e>
    69e6:	4639      	mov	r1, r7
    69e8:	6830      	ldr	r0, [r6, #0]
    69ea:	f006 ffc0 	bl	d96e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    69ee:	b1b0      	cbz	r0, 6a1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x18e>
    69f0:	7821      	ldrb	r1, [r4, #0]
    69f2:	4628      	mov	r0, r5
    69f4:	2902      	cmp	r1, #2
    69f6:	d007      	beq.n	6a08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x178>
    69f8:	7821      	ldrb	r1, [r4, #0]
    69fa:	2903      	cmp	r1, #3
    69fc:	d004      	beq.n	6a08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x178>
    69fe:	f640 413d 	movw	r1, #3133	; 0xc3d
    6a02:	202d      	movs	r0, #45	; 0x2d
    6a04:	f7fd faf0 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a08:	68b1      	ldr	r1, [r6, #8]
    6a0a:	7822      	ldrb	r2, [r4, #0]
    6a0c:	6949      	ldr	r1, [r1, #20]
    6a0e:	f06f 0307 	mvn.w	r3, #7
    6a12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6a16:	5889      	ldr	r1, [r1, r2]
    6a18:	4788      	blx	r1
    6a1a:	4605      	mov	r5, r0
    6a1c:	e000      	b.n	6a20 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    6a1e:	2501      	movs	r5, #1
    6a20:	7ba0      	ldrb	r0, [r4, #14]
    6a22:	b118      	cbz	r0, 6a2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19c>
    6a24:	f004 fad8 	bl	afd8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a28:	f004 f91a 	bl	ac60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a2c:	2d00      	cmp	r5, #0
    6a2e:	d004      	beq.n	6a3a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1aa>
    6a30:	68b0      	ldr	r0, [r6, #8]
    6a32:	6880      	ldr	r0, [r0, #8]
    6a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a38:	4700      	bx	r0
    6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a3e:	0000      	.short	0x0000
    6a40:	20000f08 	.word	0x20000f08
    6a44:	200000e8 	.word	0x200000e8
    6a48:	b510      	push	{r4, lr}
    6a4a:	2803      	cmp	r0, #3
    6a4c:	d002      	beq.n	6a54 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c4>
    6a4e:	2805      	cmp	r0, #5
    6a50:	d10a      	bne.n	6a68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1d8>
    6a52:	e002      	b.n	6a5a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1ca>
    6a54:	f000 fb96 	bl	7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>
    6a58:	e003      	b.n	6a62 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1d2>
    6a5a:	4804      	ldr	r0, [pc, #16]	; (6a6c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1dc>)
    6a5c:	6800      	ldr	r0, [r0, #0]
    6a5e:	b108      	cbz	r0, 6a64 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1d4>
    6a60:	4780      	blx	r0
    6a62:	b108      	cbz	r0, 6a68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1d8>
    6a64:	2000      	movs	r0, #0
    6a66:	bd10      	pop	{r4, pc}
    6a68:	2001      	movs	r0, #1
    6a6a:	bd10      	pop	{r4, pc}
    6a6c:	200000f4 	.word	0x200000f4
    6a70:	b510      	push	{r4, lr}
    6a72:	b990      	cbnz	r0, 6a9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x20a>
    6a74:	2900      	cmp	r1, #0
    6a76:	d014      	beq.n	6aa2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x212>
    6a78:	2000      	movs	r0, #0
    6a7a:	f000 fd01 	bl	7480 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6a7e:	b160      	cbz	r0, 6a9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x20a>
    6a80:	4808      	ldr	r0, [pc, #32]	; (6aa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x214>)
    6a82:	4909      	ldr	r1, [pc, #36]	; (6aa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x218>)
    6a84:	6880      	ldr	r0, [r0, #8]
    6a86:	7809      	ldrb	r1, [r1, #0]
    6a88:	6900      	ldr	r0, [r0, #16]
    6a8a:	f06f 020f 	mvn.w	r2, #15
    6a8e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    6a92:	5840      	ldr	r0, [r0, r1]
    6a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a98:	4700      	bx	r0
    6a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a9e:	f000 ba8f 	b.w	6fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    6aa2:	bd10      	pop	{r4, pc}
    6aa4:	200000e8 	.word	0x200000e8
    6aa8:	20000f08 	.word	0x20000f08
    6aac:	b570      	push	{r4, r5, r6, lr}
    6aae:	4c19      	ldr	r4, [pc, #100]	; (6b14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x284>)
    6ab0:	2500      	movs	r5, #0
    6ab2:	8860      	ldrh	r0, [r4, #2]
    6ab4:	2810      	cmp	r0, #16
    6ab6:	d015      	beq.n	6ae4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x254>
    6ab8:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
    6abc:	7bb0      	ldrb	r0, [r6, #14]
    6abe:	b120      	cbz	r0, 6aca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x23a>
    6ac0:	f004 f8ee 	bl	aca0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6ac4:	2040      	movs	r0, #64	; 0x40
    6ac6:	f004 fa97 	bl	aff8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6aca:	4813      	ldr	r0, [pc, #76]	; (6b18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x288>)
    6acc:	6800      	ldr	r0, [r0, #0]
    6ace:	f004 fcf5 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ad2:	78a0      	ldrb	r0, [r4, #2]
    6ad4:	0740      	lsls	r0, r0, #29
    6ad6:	d412      	bmi.n	6afe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x26e>
    6ad8:	7be0      	ldrb	r0, [r4, #15]
    6ada:	2801      	cmp	r0, #1
    6adc:	d007      	beq.n	6aee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    6ade:	2803      	cmp	r0, #3
    6ae0:	d005      	beq.n	6aee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    6ae2:	e005      	b.n	6af0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x260>
    6ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ae8:	2001      	movs	r0, #1
    6aea:	f7ff bed9 	b.w	68a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    6aee:	2510      	movs	r5, #16
    6af0:	2100      	movs	r1, #0
    6af2:	f045 020e 	orr.w	r2, r5, #14
    6af6:	7923      	ldrb	r3, [r4, #4]
    6af8:	4608      	mov	r0, r1
    6afa:	f004 fd6b 	bl	b5d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6afe:	7b20      	ldrb	r0, [r4, #12]
    6b00:	b108      	cbz	r0, 6b06 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x276>
    6b02:	f004 fd9b 	bl	b63c <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    6b06:	2000      	movs	r0, #0
    6b08:	f004 fb7e 	bl	b208 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6b0c:	2002      	movs	r0, #2
    6b0e:	7030      	strb	r0, [r6, #0]
    6b10:	bd70      	pop	{r4, r5, r6, pc}
    6b12:	0000      	.short	0x0000
    6b14:	20000e64 	.word	0x20000e64
    6b18:	200000e8 	.word	0x200000e8
    6b1c:	b510      	push	{r4, lr}
    6b1e:	f000 f825 	bl	6b6c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2dc>
    6b22:	2000      	movs	r0, #0
    6b24:	f000 fcac 	bl	7480 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6b28:	b158      	cbz	r0, 6b42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2b2>
    6b2a:	480e      	ldr	r0, [pc, #56]	; (6b64 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>)
    6b2c:	7801      	ldrb	r1, [r0, #0]
    6b2e:	2902      	cmp	r1, #2
    6b30:	d00b      	beq.n	6b4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2ba>
    6b32:	7801      	ldrb	r1, [r0, #0]
    6b34:	2903      	cmp	r1, #3
    6b36:	d008      	beq.n	6b4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2ba>
    6b38:	f640 3179 	movw	r1, #2937	; 0xb79
    6b3c:	202d      	movs	r0, #45	; 0x2d
    6b3e:	f7fd fa53 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b46:	f000 ba3b 	b.w	6fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    6b4a:	4907      	ldr	r1, [pc, #28]	; (6b68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d8>)
    6b4c:	7800      	ldrb	r0, [r0, #0]
    6b4e:	6889      	ldr	r1, [r1, #8]
    6b50:	68c9      	ldr	r1, [r1, #12]
    6b52:	f06f 0207 	mvn.w	r2, #7
    6b56:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    6b5a:	5808      	ldr	r0, [r1, r0]
    6b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b60:	4700      	bx	r0
    6b62:	0000      	.short	0x0000
    6b64:	20000f08 	.word	0x20000f08
    6b68:	200000e8 	.word	0x200000e8
    6b6c:	4808      	ldr	r0, [pc, #32]	; (6b90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x300>)
    6b6e:	b510      	push	{r4, lr}
    6b70:	7b00      	ldrb	r0, [r0, #12]
    6b72:	b108      	cbz	r0, 6b78 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2e8>
    6b74:	f000 fbaa 	bl	72cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2cc>
    6b78:	4805      	ldr	r0, [pc, #20]	; (6b90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x300>)
    6b7a:	30a4      	adds	r0, #164	; 0xa4
    6b7c:	7b80      	ldrb	r0, [r0, #14]
    6b7e:	2800      	cmp	r0, #0
    6b80:	d005      	beq.n	6b8e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2fe>
    6b82:	f004 fa29 	bl	afd8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b8a:	f004 b869 	b.w	ac60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6b8e:	bd10      	pop	{r4, pc}
    6b90:	20000e64 	.word	0x20000e64

00006b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b98:	4e52      	ldr	r6, [pc, #328]	; (6ce4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x150>)
    6b9a:	b086      	sub	sp, #24
    6b9c:	7830      	ldrb	r0, [r6, #0]
    6b9e:	bbe8      	cbnz	r0, 6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    6ba0:	f1a6 04a4 	sub.w	r4, r6, #164	; 0xa4
    6ba4:	7820      	ldrb	r0, [r4, #0]
    6ba6:	28ff      	cmp	r0, #255	; 0xff
    6ba8:	d042      	beq.n	6c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    6baa:	2500      	movs	r5, #0
    6bac:	81b5      	strh	r5, [r6, #12]
    6bae:	6075      	str	r5, [r6, #4]
    6bb0:	7075      	strb	r5, [r6, #1]
    6bb2:	70b5      	strb	r5, [r6, #2]
    6bb4:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    6bb8:	4628      	mov	r0, r5
    6bba:	f004 fb8d 	bl	b2d8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    6bbe:	2214      	movs	r2, #20
    6bc0:	4949      	ldr	r1, [pc, #292]	; (6ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x154>)
    6bc2:	4668      	mov	r0, sp
    6bc4:	f005 fa8d 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6bc8:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6bcc:	f8d9 0008 	ldr.w	r0, [r9, #8]
    6bd0:	6840      	ldr	r0, [r0, #4]
    6bd2:	9003      	str	r0, [sp, #12]
    6bd4:	4668      	mov	r0, sp
    6bd6:	f004 faeb 	bl	b1b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6bda:	f004 fbed 	bl	b3b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6bde:	f004 f9fb 	bl	afd8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6be2:	f004 f83d 	bl	ac60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6be6:	4840      	ldr	r0, [pc, #256]	; (6ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x154>)
    6be8:	1f40      	subs	r0, r0, #5
    6bea:	f004 fd5d 	bl	b6a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6bee:	483e      	ldr	r0, [pc, #248]	; (6ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x154>)
    6bf0:	3808      	subs	r0, #8
    6bf2:	f004 fd65 	bl	b6c0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6bf6:	f104 001c 	add.w	r0, r4, #28
    6bfa:	4607      	mov	r7, r0
    6bfc:	f007 f9a3 	bl	df46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6c00:	4638      	mov	r0, r7
    6c02:	f007 f965 	bl	ded0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6c06:	f000 fb55 	bl	72b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    6c0a:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6c0e:	f004 fc4f 	bl	b4b0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6c12:	7921      	ldrb	r1, [r4, #4]
    6c14:	2000      	movs	r0, #0
    6c16:	f004 fa51 	bl	b0bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6c1a:	e000      	b.n	6c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    6c1c:	e008      	b.n	6c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    6c1e:	60b0      	str	r0, [r6, #8]
    6c20:	b150      	cbz	r0, 6c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa4>
    6c22:	210f      	movs	r1, #15
    6c24:	2005      	movs	r0, #5
    6c26:	f004 f9fb 	bl	b020 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6c2a:	7ea0      	ldrb	r0, [r4, #26]
    6c2c:	b960      	cbnz	r0, 6c48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    6c2e:	e006      	b.n	6c3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    6c30:	200c      	movs	r0, #12
    6c32:	b006      	add	sp, #24
    6c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c38:	2001      	movs	r0, #1
    6c3a:	7030      	strb	r0, [r6, #0]
    6c3c:	e050      	b.n	6ce0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14c>
    6c3e:	7e20      	ldrb	r0, [r4, #24]
    6c40:	b910      	cbnz	r0, 6c48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    6c42:	78a0      	ldrb	r0, [r4, #2]
    6c44:	0740      	lsls	r0, r0, #29
    6c46:	d529      	bpl.n	6c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x108>
    6c48:	f005 f8d6 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6c4c:	4682      	mov	sl, r0
    6c4e:	4651      	mov	r1, sl
    6c50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6c52:	f7fa fe71 	bl	1938 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6c56:	f8df 8098 	ldr.w	r8, [pc, #152]	; 6cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    6c5a:	4607      	mov	r7, r0
    6c5c:	fb90 f1f8 	sdiv	r1, r0, r8
    6c60:	fb08 7011 	mls	r0, r8, r1, r7
    6c64:	4241      	negs	r1, r0
    6c66:	4650      	mov	r0, sl
    6c68:	f7fa fe30 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6c6c:	63a0      	str	r0, [r4, #56]	; 0x38
    6c6e:	fb97 f0f8 	sdiv	r0, r7, r8
    6c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c74:	4408      	add	r0, r1
    6c76:	6360      	str	r0, [r4, #52]	; 0x34
    6c78:	f7fe fe64 	bl	5944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c7e:	4288      	cmp	r0, r1
    6c80:	d80c      	bhi.n	6c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x108>
    6c82:	e9c4 5a0d 	strd	r5, sl, [r4, #52]	; 0x34
    6c86:	2001      	movs	r0, #1
    6c88:	f000 fad6 	bl	7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    6c8c:	78a0      	ldrb	r0, [r4, #2]
    6c8e:	0740      	lsls	r0, r0, #29
    6c90:	d504      	bpl.n	6c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x108>
    6c92:	7e20      	ldrb	r0, [r4, #24]
    6c94:	b110      	cbz	r0, 6c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x108>
    6c96:	2001      	movs	r0, #1
    6c98:	f000 faa6 	bl	71e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>
    6c9c:	4811      	ldr	r0, [pc, #68]	; (6ce4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x150>)
    6c9e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    6ca2:	3867      	subs	r0, #103	; 0x67
    6ca4:	f004 fcf4 	bl	b690 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6ca8:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6cac:	b130      	cbz	r0, 6cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x128>
    6cae:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    6cb2:	8620      	strh	r0, [r4, #48]	; 0x30
    6cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cb6:	62a0      	str	r0, [r4, #40]	; 0x28
    6cb8:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    6cbc:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6cc0:	b130      	cbz	r0, 6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    6cc2:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    6cc6:	8660      	strh	r0, [r4, #50]	; 0x32
    6cc8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6cca:	62e0      	str	r0, [r4, #44]	; 0x2c
    6ccc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    6cd0:	f7fe fe9e 	bl	5a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6cd4:	2103      	movs	r1, #3
    6cd6:	f8d9 0000 	ldr.w	r0, [r9]
    6cda:	f006 fadb 	bl	d294 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6cde:	73b0      	strb	r0, [r6, #14]
    6ce0:	2000      	movs	r0, #0
    6ce2:	e7a6      	b.n	6c32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    6ce4:	20000f08 	.word	0x20000f08
    6ce8:	000073ac 	.word	0x000073ac
    6cec:	200000e8 	.word	0x200000e8
    6cf0:	000f4240 	.word	0x000f4240
    6cf4:	4808      	ldr	r0, [pc, #32]	; (6d18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    6cf6:	b510      	push	{r4, lr}
    6cf8:	7801      	ldrb	r1, [r0, #0]
    6cfa:	2900      	cmp	r1, #0
    6cfc:	d00b      	beq.n	6d16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x182>
    6cfe:	7801      	ldrb	r1, [r0, #0]
    6d00:	2902      	cmp	r1, #2
    6d02:	d002      	beq.n	6d0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x176>
    6d04:	7800      	ldrb	r0, [r0, #0]
    6d06:	2803      	cmp	r0, #3
    6d08:	d101      	bne.n	6d0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    6d0a:	f7ff ff2f 	bl	6b6c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2dc>
    6d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d12:	f000 b955 	b.w	6fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    6d16:	bd10      	pop	{r4, pc}
    6d18:	20000f08 	.word	0x20000f08
    6d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d20:	4d20      	ldr	r5, [pc, #128]	; (6da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x210>)
    6d22:	f1a5 04a4 	sub.w	r4, r5, #164	; 0xa4
    6d26:	b1d8      	cbz	r0, 6d60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>
    6d28:	f104 001c 	add.w	r0, r4, #28
    6d2c:	4680      	mov	r8, r0
    6d2e:	68ae      	ldr	r6, [r5, #8]
    6d30:	f007 f8c2 	bl	deb8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6d34:	4607      	mov	r7, r0
    6d36:	4640      	mov	r0, r8
    6d38:	f007 f8e7 	bl	df0a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6d3c:	1a38      	subs	r0, r7, r0
    6d3e:	1e40      	subs	r0, r0, #1
    6d40:	b2c0      	uxtb	r0, r0
    6d42:	8861      	ldrh	r1, [r4, #2]
    6d44:	2228      	movs	r2, #40	; 0x28
    6d46:	f000 fb6f 	bl	7428 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6d4a:	1981      	adds	r1, r0, r6
    6d4c:	2000      	movs	r0, #0
    6d4e:	f7ff fcd3 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6d52:	b108      	cbz	r0, 6d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    6d54:	6868      	ldr	r0, [r5, #4]
    6d56:	4401      	add	r1, r0
    6d58:	7922      	ldrb	r2, [r4, #4]
    6d5a:	2000      	movs	r0, #0
    6d5c:	f004 fbbc 	bl	b4d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6d60:	4811      	ldr	r0, [pc, #68]	; (6da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x214>)
    6d62:	6800      	ldr	r0, [r0, #0]
    6d64:	f004 fbaa 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d68:	2004      	movs	r0, #4
    6d6a:	7028      	strb	r0, [r5, #0]
    6d6c:	8860      	ldrh	r0, [r4, #2]
    6d6e:	2813      	cmp	r0, #19
    6d70:	d00e      	beq.n	6d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1fc>
    6d72:	dc04      	bgt.n	6d7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ea>
    6d74:	2810      	cmp	r0, #16
    6d76:	d013      	beq.n	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x20c>
    6d78:	2812      	cmp	r0, #18
    6d7a:	d104      	bne.n	6d86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f2>
    6d7c:	e008      	b.n	6d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1fc>
    6d7e:	2815      	cmp	r0, #21
    6d80:	d006      	beq.n	6d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1fc>
    6d82:	281d      	cmp	r0, #29
    6d84:	d004      	beq.n	6d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1fc>
    6d86:	f640 41dd 	movw	r1, #3293	; 0xcdd
    6d8a:	202d      	movs	r0, #45	; 0x2d
    6d8c:	f7fd f92c 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d90:	7923      	ldrb	r3, [r4, #4]
    6d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d96:	2201      	movs	r2, #1
    6d98:	4611      	mov	r1, r2
    6d9a:	2000      	movs	r0, #0
    6d9c:	f004 bc1a 	b.w	b5d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6da4:	20000f08 	.word	0x20000f08
    6da8:	200000e8 	.word	0x200000e8
    6dac:	b510      	push	{r4, lr}
    6dae:	460b      	mov	r3, r1
    6db0:	4611      	mov	r1, r2
    6db2:	b158      	cbz	r0, 6dcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x238>
    6db4:	4618      	mov	r0, r3
    6db6:	f000 f811 	bl	6ddc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    6dba:	4807      	ldr	r0, [pc, #28]	; (6dd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>)
    6dbc:	6840      	ldr	r0, [r0, #4]
    6dbe:	8800      	ldrh	r0, [r0, #0]
    6dc0:	f7fd fd28 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dc8:	f006 b85b 	b.w	ce82 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6dd4:	f000 b802 	b.w	6ddc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    6dd8:	200000e8 	.word	0x200000e8
    6ddc:	4a08      	ldr	r2, [pc, #32]	; (6e00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26c>)
    6dde:	7813      	ldrb	r3, [r2, #0]
    6de0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    6de4:	f8a2 008e 	strh.w	r0, [r2, #142]	; 0x8e
    6de8:	f882 108c 	strb.w	r1, [r2, #140]	; 0x8c
    6dec:	2001      	movs	r0, #1
    6dee:	f882 008a 	strb.w	r0, [r2, #138]	; 0x8a
    6df2:	7b50      	ldrb	r0, [r2, #13]
    6df4:	b108      	cbz	r0, 6dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x266>
    6df6:	f892 0024 	ldrb.w	r0, [r2, #36]	; 0x24
    6dfa:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
    6dfe:	4770      	bx	lr
    6e00:	20000e64 	.word	0x20000e64
    6e04:	b510      	push	{r4, lr}
    6e06:	4c1c      	ldr	r4, [pc, #112]	; (6e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e4>)
    6e08:	2101      	movs	r1, #1
    6e0a:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    6e0e:	7821      	ldrb	r1, [r4, #0]
    6e10:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    6e14:	28ff      	cmp	r0, #255	; 0xff
    6e16:	d00f      	beq.n	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>
    6e18:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    6e1c:	1e51      	subs	r1, r2, #1
    6e1e:	f7fe fd0f 	bl	5840 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6e22:	b130      	cbz	r0, 6e32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29e>
    6e24:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    6e28:	f040 0002 	orr.w	r0, r0, #2
    6e2c:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    6e30:	e012      	b.n	6e58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    6e32:	f640 61ed 	movw	r1, #3821	; 0xeed
    6e36:	e01c      	b.n	6e72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2de>
    6e38:	4810      	ldr	r0, [pc, #64]	; (6e7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>)
    6e3a:	6800      	ldr	r0, [r0, #0]
    6e3c:	7801      	ldrb	r1, [r0, #0]
    6e3e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6e42:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    6e46:	490c      	ldr	r1, [pc, #48]	; (6e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e4>)
    6e48:	f8d0 2003 	ldr.w	r2, [r0, #3]
    6e4c:	3180      	adds	r1, #128	; 0x80
    6e4e:	f841 2f1b 	str.w	r2, [r1, #27]!
    6e52:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6e56:	8088      	strh	r0, [r1, #4]
    6e58:	4807      	ldr	r0, [pc, #28]	; (6e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e4>)
    6e5a:	f994 1022 	ldrsb.w	r1, [r4, #34]	; 0x22
    6e5e:	30a1      	adds	r0, #161	; 0xa1
    6e60:	297f      	cmp	r1, #127	; 0x7f
    6e62:	d004      	beq.n	6e6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2da>
    6e64:	7001      	strb	r1, [r0, #0]
    6e66:	207f      	movs	r0, #127	; 0x7f
    6e68:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6e6c:	bd10      	pop	{r4, pc}
    6e6e:	f640 518f 	movw	r1, #3471	; 0xd8f
    6e72:	202d      	movs	r0, #45	; 0x2d
    6e74:	f7fd f8b8 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e78:	20000e64 	.word	0x20000e64
    6e7c:	200000e8 	.word	0x200000e8
    6e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e84:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 6f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6e88:	460e      	mov	r6, r1
    6e8a:	4607      	mov	r7, r0
    6e8c:	2803      	cmp	r0, #3
    6e8e:	d008      	beq.n	6ea2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    6e90:	f89a 1002 	ldrb.w	r1, [sl, #2]
    6e94:	f89a 0054 	ldrb.w	r0, [sl, #84]	; 0x54
    6e98:	f001 0401 	and.w	r4, r1, #1
    6e9c:	b128      	cbz	r0, 6eaa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x316>
    6e9e:	2001      	movs	r0, #1
    6ea0:	e004      	b.n	6eac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6ea2:	2000      	movs	r0, #0
    6ea4:	f7ff fc30 	bl	6708 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    6ea8:	4604      	mov	r4, r0
    6eaa:	2000      	movs	r0, #0
    6eac:	4680      	mov	r8, r0
    6eae:	f004 f8b1 	bl	b014 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6eb2:	4605      	mov	r5, r0
    6eb4:	2f03      	cmp	r7, #3
    6eb6:	d027      	beq.n	6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>
    6eb8:	2001      	movs	r0, #1
    6eba:	4681      	mov	r9, r0
    6ebc:	ea34 0408 	bics.w	r4, r4, r8
    6ec0:	d048      	beq.n	6f54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c0>
    6ec2:	4827      	ldr	r0, [pc, #156]	; (6f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>)
    6ec4:	30a4      	adds	r0, #164	; 0xa4
    6ec6:	7b80      	ldrb	r0, [r0, #14]
    6ec8:	b138      	cbz	r0, 6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    6eca:	f006 f9e6 	bl	d29a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6ece:	7030      	strb	r0, [r6, #0]
    6ed0:	28ff      	cmp	r0, #255	; 0xff
    6ed2:	d002      	beq.n	6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    6ed4:	f7fe fcce 	bl	5874 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6ed8:	4305      	orrs	r5, r0
    6eda:	4f22      	ldr	r7, [pc, #136]	; (6f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    6edc:	f89a 2043 	ldrb.w	r2, [sl, #67]	; 0x43
    6ee0:	4654      	mov	r4, sl
    6ee2:	6838      	ldr	r0, [r7, #0]
    6ee4:	7801      	ldrb	r1, [r0, #0]
    6ee6:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6eea:	4291      	cmp	r1, r2
    6eec:	d106      	bne.n	6efc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    6eee:	491c      	ldr	r1, [pc, #112]	; (6f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>)
    6ef0:	2206      	movs	r2, #6
    6ef2:	3144      	adds	r1, #68	; 0x44
    6ef4:	1cc0      	adds	r0, r0, #3
    6ef6:	f005 f8e2 	bl	c0be <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6efa:	b138      	cbz	r0, 6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    6efc:	2000      	movs	r0, #0
    6efe:	7831      	ldrb	r1, [r6, #0]
    6f00:	29ff      	cmp	r1, #255	; 0xff
    6f02:	d009      	beq.n	6f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6f04:	b9b8      	cbnz	r0, 6f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6f06:	e003      	b.n	6f10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37c>
    6f08:	2002      	movs	r0, #2
    6f0a:	e7d6      	b.n	6eba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    6f0c:	2001      	movs	r0, #1
    6f0e:	e7f6      	b.n	6efe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36a>
    6f10:	7e60      	ldrb	r0, [r4, #25]
    6f12:	4288      	cmp	r0, r1
    6f14:	d00f      	beq.n	6f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6f16:	e008      	b.n	6f2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x396>
    6f18:	b138      	cbz	r0, 6f2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x396>
    6f1a:	6839      	ldr	r1, [r7, #0]
    6f1c:	f811 0b03 	ldrb.w	r0, [r1], #3
    6f20:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6f24:	f006 ff88 	bl	de38 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x4>
    6f28:	b128      	cbz	r0, 6f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6f2a:	2000      	movs	r0, #0
    6f2c:	78a1      	ldrb	r1, [r4, #2]
    6f2e:	0749      	lsls	r1, r1, #29
    6f30:	d503      	bpl.n	6f3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a6>
    6f32:	b990      	cbnz	r0, 6f5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6f34:	e00e      	b.n	6f54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c0>
    6f36:	2001      	movs	r0, #1
    6f38:	e7f8      	b.n	6f2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    6f3a:	b975      	cbnz	r5, 6f5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6f3c:	7be0      	ldrb	r0, [r4, #15]
    6f3e:	b108      	cbz	r0, 6f44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>
    6f40:	4548      	cmp	r0, r9
    6f42:	d107      	bne.n	6f54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c0>
    6f44:	6839      	ldr	r1, [r7, #0]
    6f46:	f811 0b03 	ldrb.w	r0, [r1], #3
    6f4a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6f4e:	f006 ff73 	bl	de38 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x4>
    6f52:	b110      	cbz	r0, 6f5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6f54:	2000      	movs	r0, #0
    6f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f5a:	2001      	movs	r0, #1
    6f5c:	e7fb      	b.n	6f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    6f5e:	0000      	.short	0x0000
    6f60:	20000e64 	.word	0x20000e64
    6f64:	200000e8 	.word	0x200000e8
    6f68:	b570      	push	{r4, r5, r6, lr}
    6f6a:	2500      	movs	r5, #0
    6f6c:	4604      	mov	r4, r0
    6f6e:	7045      	strb	r5, [r0, #1]
    6f70:	2011      	movs	r0, #17
    6f72:	7020      	strb	r0, [r4, #0]
    6f74:	2220      	movs	r2, #32
    6f76:	4910      	ldr	r1, [pc, #64]	; (6fb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>)
    6f78:	1d20      	adds	r0, r4, #4
    6f7a:	f005 f8b2 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6f7e:	480e      	ldr	r0, [pc, #56]	; (6fb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>)
    6f80:	2101      	movs	r1, #1
    6f82:	386a      	subs	r0, #106	; 0x6a
    6f84:	7221      	strb	r1, [r4, #8]
    6f86:	f880 5068 	strb.w	r5, [r0, #104]	; 0x68
    6f8a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    6f8e:	2a00      	cmp	r2, #0
    6f90:	d111      	bne.n	6fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    6f92:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    6f96:	f8a0 2094 	strh.w	r2, [r0, #148]	; 0x94
    6f9a:	4a08      	ldr	r2, [pc, #32]	; (6fbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>)
    6f9c:	6852      	ldr	r2, [r2, #4]
    6f9e:	7c53      	ldrb	r3, [r2, #17]
    6fa0:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
    6fa4:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
    6fa8:	8810      	ldrh	r0, [r2, #0]
    6faa:	f7fd fc33 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6fb2:	f005 bf60 	b.w	ce76 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6fb6:	bd70      	pop	{r4, r5, r6, pc}
    6fb8:	20000ece 	.word	0x20000ece
    6fbc:	200000e8 	.word	0x200000e8
    6fc0:	b570      	push	{r4, r5, r6, lr}
    6fc2:	4c1a      	ldr	r4, [pc, #104]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    6fc4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
    6fc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6fca:	1c40      	adds	r0, r0, #1
    6fcc:	6260      	str	r0, [r4, #36]	; 0x24
    6fce:	7ba8      	ldrb	r0, [r5, #14]
    6fd0:	2600      	movs	r6, #0
    6fd2:	b120      	cbz	r0, 6fde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44a>
    6fd4:	f004 f800 	bl	afd8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6fd8:	f003 fe42 	bl	ac60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6fdc:	73ae      	strb	r6, [r5, #14]
    6fde:	702e      	strb	r6, [r5, #0]
    6fe0:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    6fe4:	b108      	cbz	r0, 6fea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    6fe6:	2101      	movs	r1, #1
    6fe8:	e01b      	b.n	7022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    6fea:	7b60      	ldrb	r0, [r4, #13]
    6fec:	b1c0      	cbz	r0, 7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    6fee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6ff0:	4288      	cmp	r0, r1
    6ff2:	d815      	bhi.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    6ff4:	2101      	movs	r1, #1
    6ff6:	2000      	movs	r0, #0
    6ff8:	f000 fa74 	bl	74e4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6ffc:	78a0      	ldrb	r0, [r4, #2]
    6ffe:	f010 0f01 	tst.w	r0, #1
    7002:	d005      	beq.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    7004:	480a      	ldr	r0, [pc, #40]	; (7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7006:	2243      	movs	r2, #67	; 0x43
    7008:	6840      	ldr	r0, [r0, #4]
    700a:	8801      	ldrh	r1, [r0, #0]
    700c:	2001      	movs	r0, #1
    700e:	e003      	b.n	7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7010:	2243      	movs	r2, #67	; 0x43
    7012:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7016:	2000      	movs	r0, #0
    7018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    701c:	f7ff bec6 	b.w	6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    7020:	2100      	movs	r1, #0
    7022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7026:	2000      	movs	r0, #0
    7028:	f000 ba5c 	b.w	74e4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    702c:	20000e64 	.word	0x20000e64
    7030:	200000e8 	.word	0x200000e8
    7034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7038:	4c35      	ldr	r4, [pc, #212]	; (7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    703a:	4605      	mov	r5, r0
    703c:	460e      	mov	r6, r1
    703e:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    7042:	b110      	cbz	r0, 704a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    7044:	f640 31ad 	movw	r1, #2989	; 0xbad
    7048:	e055      	b.n	70f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf6>
    704a:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    704e:	8828      	ldrh	r0, [r5, #0]
    7050:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    7054:	2a00      	cmp	r2, #0
    7056:	d14a      	bne.n	70ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee>
    7058:	6868      	ldr	r0, [r5, #4]
    705a:	f006 f97c 	bl	d356 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    705e:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    7062:	8928      	ldrh	r0, [r5, #8]
    7064:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    7068:	8968      	ldrh	r0, [r5, #10]
    706a:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    706e:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    7072:	4f27      	ldr	r7, [pc, #156]	; (7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    7074:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    7078:	7e20      	ldrb	r0, [r4, #24]
    707a:	373d      	adds	r7, #61	; 0x3d
    707c:	2500      	movs	r5, #0
    707e:	b128      	cbz	r0, 708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    7080:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7084:	4639      	mov	r1, r7
    7086:	f006 feae 	bl	dde6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    708a:	b940      	cbnz	r0, 709e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
    708c:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    7090:	b170      	cbz	r0, 70b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    7092:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7096:	4639      	mov	r1, r7
    7098:	f006 fe9c 	bl	ddd4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    709c:	b140      	cbz	r0, 70b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    709e:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    70a2:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    70a6:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    70aa:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    70ae:	e003      	b.n	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    70b0:	f8c4 5076 	str.w	r5, [r4, #118]	; 0x76
    70b4:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
    70b8:	4816      	ldr	r0, [pc, #88]	; (7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    70ba:	2eff      	cmp	r6, #255	; 0xff
    70bc:	6800      	ldr	r0, [r0, #0]
    70be:	7801      	ldrb	r1, [r0, #0]
    70c0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    70c4:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    70c8:	f850 1f03 	ldr.w	r1, [r0, #3]!
    70cc:	d016      	beq.n	70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>
    70ce:	67e1      	str	r1, [r4, #124]	; 0x7c
    70d0:	4a0f      	ldr	r2, [pc, #60]	; (7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    70d2:	8880      	ldrh	r0, [r0, #4]
    70d4:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    70d8:	3270      	adds	r2, #112	; 0x70
    70da:	1e51      	subs	r1, r2, #1
    70dc:	4630      	mov	r0, r6
    70de:	f7fe fbaf 	bl	5840 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    70e2:	b130      	cbz	r0, 70f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    70e4:	f814 0f6f 	ldrb.w	r0, [r4, #111]!
    70e8:	f040 0002 	orr.w	r0, r0, #2
    70ec:	7020      	strb	r0, [r4, #0]
    70ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70f2:	f640 31ce 	movw	r1, #3022	; 0xbce
    70f6:	202d      	movs	r0, #45	; 0x2d
    70f8:	f7fc ff76 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70fc:	6721      	str	r1, [r4, #112]	; 0x70
    70fe:	8880      	ldrh	r0, [r0, #4]
    7100:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    7104:	4802      	ldr	r0, [pc, #8]	; (7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    7106:	67c5      	str	r5, [r0, #124]	; 0x7c
    7108:	f8a0 5080 	strh.w	r5, [r0, #128]	; 0x80
    710c:	e7ef      	b.n	70ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee>
    710e:	0000      	.short	0x0000
    7110:	20000e64 	.word	0x20000e64
    7114:	200000e8 	.word	0x200000e8
    7118:	b538      	push	{r3, r4, r5, lr}
    711a:	20ff      	movs	r0, #255	; 0xff
    711c:	f88d 0000 	strb.w	r0, [sp]
    7120:	2501      	movs	r5, #1
    7122:	4669      	mov	r1, sp
    7124:	2005      	movs	r0, #5
    7126:	f7ff feab 	bl	6e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ec>
    712a:	b318      	cbz	r0, 7174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    712c:	4c13      	ldr	r4, [pc, #76]	; (717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    712e:	6822      	ldr	r2, [r4, #0]
    7130:	6860      	ldr	r0, [r4, #4]
    7132:	7812      	ldrb	r2, [r2, #0]
    7134:	7c41      	ldrb	r1, [r0, #17]
    7136:	f3c2 1240 	ubfx	r2, r2, #5, #1
    713a:	4011      	ands	r1, r2
    713c:	7441      	strb	r1, [r0, #17]
    713e:	2101      	movs	r1, #1
    7140:	f000 f8d4 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    7144:	2200      	movs	r2, #0
    7146:	f89d 1000 	ldrb.w	r1, [sp]
    714a:	6860      	ldr	r0, [r4, #4]
    714c:	f7ff ff72 	bl	7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    7150:	480b      	ldr	r0, [pc, #44]	; (7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
    7152:	2101      	movs	r1, #1
    7154:	f800 1f68 	strb.w	r1, [r0, #104]!
    7158:	7882      	ldrb	r2, [r0, #2]
    715a:	8881      	ldrh	r1, [r0, #4]
    715c:	2001      	movs	r0, #1
    715e:	f7ff fe25 	bl	6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x218>
    7162:	4907      	ldr	r1, [pc, #28]	; (7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
    7164:	2000      	movs	r0, #0
    7166:	31a4      	adds	r1, #164	; 0xa4
    7168:	7008      	strb	r0, [r1, #0]
    716a:	2105      	movs	r1, #5
    716c:	6860      	ldr	r0, [r4, #4]
    716e:	f000 faed 	bl	774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7172:	e000      	b.n	7176 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x176>
    7174:	2500      	movs	r5, #0
    7176:	4628      	mov	r0, r5
    7178:	bd38      	pop	{r3, r4, r5, pc}
    717a:	0000      	.short	0x0000
    717c:	200000e8 	.word	0x200000e8
    7180:	20000e64 	.word	0x20000e64
    7184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7186:	20ff      	movs	r0, #255	; 0xff
    7188:	f88d 0000 	strb.w	r0, [sp]
    718c:	2601      	movs	r6, #1
    718e:	4669      	mov	r1, sp
    7190:	2003      	movs	r0, #3
    7192:	f7ff fe75 	bl	6e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ec>
    7196:	b1f8      	cbz	r0, 71d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    7198:	4c11      	ldr	r4, [pc, #68]	; (71e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    719a:	7b20      	ldrb	r0, [r4, #12]
    719c:	b130      	cbz	r0, 71ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac>
    719e:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    71a2:	b918      	cbnz	r0, 71ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac>
    71a4:	f89d 0000 	ldrb.w	r0, [sp]
    71a8:	f7ff fe2c 	bl	6e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x270>
    71ac:	4d0d      	ldr	r5, [pc, #52]	; (71e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>)
    71ae:	2100      	movs	r1, #0
    71b0:	6828      	ldr	r0, [r5, #0]
    71b2:	8001      	strh	r1, [r0, #0]
    71b4:	2104      	movs	r1, #4
    71b6:	f006 fc24 	bl	da02 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    71ba:	f000 f8df 	bl	737c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    71be:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    71c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    71c2:	6828      	ldr	r0, [r5, #0]
    71c4:	f006 fc54 	bl	da70 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    71c8:	4905      	ldr	r1, [pc, #20]	; (71e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    71ca:	2005      	movs	r0, #5
    71cc:	31a4      	adds	r1, #164	; 0xa4
    71ce:	7008      	strb	r0, [r1, #0]
    71d0:	6828      	ldr	r0, [r5, #0]
    71d2:	f004 f973 	bl	b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    71d6:	e000      	b.n	71da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    71d8:	2600      	movs	r6, #0
    71da:	4630      	mov	r0, r6
    71dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71de:	0000      	.short	0x0000
    71e0:	20000e64 	.word	0x20000e64
    71e4:	200000e8 	.word	0x200000e8
    71e8:	b570      	push	{r4, r5, r6, lr}
    71ea:	4d11      	ldr	r5, [pc, #68]	; (7230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>)
    71ec:	4606      	mov	r6, r0
    71ee:	7e68      	ldrb	r0, [r5, #25]
    71f0:	f7fe faf4 	bl	57dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    71f4:	0004      	movs	r4, r0
    71f6:	d019      	beq.n	722c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    71f8:	2110      	movs	r1, #16
    71fa:	f006 fa4a 	bl	d692 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    71fe:	2800      	cmp	r0, #0
    7200:	d114      	bne.n	722c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    7202:	2001      	movs	r0, #1
    7204:	f885 004a 	strb.w	r0, [r5, #74]	; 0x4a
    7208:	f105 014b 	add.w	r1, r5, #75	; 0x4b
    720c:	4632      	mov	r2, r6
    720e:	460d      	mov	r5, r1
    7210:	4620      	mov	r0, r4
    7212:	f005 ffd1 	bl	d1b8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7216:	4c07      	ldr	r4, [pc, #28]	; (7234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>)
    7218:	4629      	mov	r1, r5
    721a:	6820      	ldr	r0, [r4, #0]
    721c:	f006 fc0c 	bl	da38 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7220:	6820      	ldr	r0, [r4, #0]
    7222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7226:	2101      	movs	r1, #1
    7228:	f006 bc0c 	b.w	da44 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    722c:	bd70      	pop	{r4, r5, r6, pc}
    722e:	0000      	.short	0x0000
    7230:	20000e64 	.word	0x20000e64
    7234:	200000e8 	.word	0x200000e8
    7238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    723c:	4c1c      	ldr	r4, [pc, #112]	; (72b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>)
    723e:	4607      	mov	r7, r0
    7240:	7e60      	ldrb	r0, [r4, #25]
    7242:	f7fe fa8b 	bl	575c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7246:	4606      	mov	r6, r0
    7248:	7e20      	ldrb	r0, [r4, #24]
    724a:	f104 053d 	add.w	r5, r4, #61	; 0x3d
    724e:	b120      	cbz	r0, 725a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    7250:	b11e      	cbz	r6, 725a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    7252:	7e60      	ldrb	r0, [r4, #25]
    7254:	f7fe fa76 	bl	5744 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7258:	b1a0      	cbz	r0, 7284 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x284>
    725a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    725e:	2800      	cmp	r0, #0
    7260:	d024      	beq.n	72ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ac>
    7262:	7ea0      	ldrb	r0, [r4, #26]
    7264:	2800      	cmp	r0, #0
    7266:	d021      	beq.n	72ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ac>
    7268:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    726c:	4629      	mov	r1, r5
    726e:	f006 fdba 	bl	dde6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7272:	b1a8      	cbz	r0, 72a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    7274:	f7fe fa62 	bl	573c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7278:	463a      	mov	r2, r7
    727a:	4629      	mov	r1, r5
    727c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7280:	f005 bf9a 	b.w	d1b8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7284:	2001      	movs	r0, #1
    7286:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    728a:	463a      	mov	r2, r7
    728c:	4629      	mov	r1, r5
    728e:	4630      	mov	r0, r6
    7290:	f005 ff92 	bl	d1b8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7294:	7e61      	ldrb	r1, [r4, #25]
    7296:	4628      	mov	r0, r5
    7298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    729c:	f7fe ba6a 	b.w	5774 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    72a0:	4639      	mov	r1, r7
    72a2:	4628      	mov	r0, r5
    72a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72a8:	f005 bf75 	b.w	d196 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    72ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72b0:	20000e64 	.word	0x20000e64
    72b4:	b510      	push	{r4, lr}
    72b6:	f004 fa1d 	bl	b6f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    72ba:	4803      	ldr	r0, [pc, #12]	; (72c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c8>)
    72bc:	7901      	ldrb	r1, [r0, #4]
    72be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72c2:	2025      	movs	r0, #37	; 0x25
    72c4:	f007 bec0 	b.w	f048 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    72c8:	20000e64 	.word	0x20000e64
    72cc:	b510      	push	{r4, lr}
    72ce:	4806      	ldr	r0, [pc, #24]	; (72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    72d0:	f004 f9c2 	bl	b658 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    72d4:	b920      	cbnz	r0, 72e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    72d6:	4904      	ldr	r1, [pc, #16]	; (72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    72d8:	207f      	movs	r0, #127	; 0x7f
    72da:	3922      	subs	r1, #34	; 0x22
    72dc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    72e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72e4:	f004 b99e 	b.w	b624 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    72e8:	20000e86 	.word	0x20000e86
    72ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72f0:	4e20      	ldr	r6, [pc, #128]	; (7374 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x374>)
    72f2:	4604      	mov	r4, r0
    72f4:	460d      	mov	r5, r1
    72f6:	6830      	ldr	r0, [r6, #0]
    72f8:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    72fc:	f8c4 1012 	str.w	r1, [r4, #18]
    7300:	8881      	ldrh	r1, [r0, #4]
    7302:	82e1      	strh	r1, [r4, #22]
    7304:	7981      	ldrb	r1, [r0, #6]
    7306:	7621      	strb	r1, [r4, #24]
    7308:	8940      	ldrh	r0, [r0, #10]
    730a:	f006 f820 	bl	d34e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    730e:	4607      	mov	r7, r0
    7310:	6060      	str	r0, [r4, #4]
    7312:	6830      	ldr	r0, [r6, #0]
    7314:	4639      	mov	r1, r7
    7316:	7d80      	ldrb	r0, [r0, #22]
    7318:	f006 f9b6 	bl	d688 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    731c:	8360      	strh	r0, [r4, #26]
    731e:	6830      	ldr	r0, [r6, #0]
    7320:	4639      	mov	r1, r7
    7322:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7326:	f006 f9ab 	bl	d680 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    732a:	61e0      	str	r0, [r4, #28]
    732c:	6830      	ldr	r0, [r6, #0]
    732e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7332:	8121      	strh	r1, [r4, #8]
    7334:	8841      	ldrh	r1, [r0, #2]
    7336:	8161      	strh	r1, [r4, #10]
    7338:	6841      	ldr	r1, [r0, #4]
    733a:	60e1      	str	r1, [r4, #12]
    733c:	7a01      	ldrb	r1, [r0, #8]
    733e:	7421      	strb	r1, [r4, #16]
    7340:	7a41      	ldrb	r1, [r0, #9]
    7342:	f001 011f 	and.w	r1, r1, #31
    7346:	f884 1020 	strb.w	r1, [r4, #32]
    734a:	7a40      	ldrb	r0, [r0, #9]
    734c:	0940      	lsrs	r0, r0, #5
    734e:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    7352:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    7356:	2101      	movs	r1, #1
    7358:	7205      	strb	r5, [r0, #8]
    735a:	7245      	strb	r5, [r0, #9]
    735c:	7281      	strb	r1, [r0, #10]
    735e:	2100      	movs	r1, #0
    7360:	3836      	subs	r0, #54	; 0x36
    7362:	f006 fcb8 	bl	dcd6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7366:	4804      	ldr	r0, [pc, #16]	; (7378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>)
    7368:	7b80      	ldrb	r0, [r0, #14]
    736a:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    736e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7372:	0000      	.short	0x0000
    7374:	200000e8 	.word	0x200000e8
    7378:	20000e64 	.word	0x20000e64
    737c:	b510      	push	{r4, lr}
    737e:	4c08      	ldr	r4, [pc, #32]	; (73a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>)
    7380:	4906      	ldr	r1, [pc, #24]	; (739c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>)
    7382:	6820      	ldr	r0, [r4, #0]
    7384:	f006 fb65 	bl	da52 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7388:	4804      	ldr	r0, [pc, #16]	; (739c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>)
    738a:	383d      	subs	r0, #61	; 0x3d
    738c:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
    7390:	6820      	ldr	r0, [r4, #0]
    7392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7396:	f006 bb62 	b.w	da5e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    739a:	0000      	.short	0x0000
    739c:	20000ea1 	.word	0x20000ea1
    73a0:	200000e8 	.word	0x200000e8
    73a4:	d6555555 	.word	0xd6555555
    73a8:	008e89be 	.word	0x008e89be
    73ac:	00006b1d 	.word	0x00006b1d
    73b0:	000069a9 	.word	0x000069a9
    73b4:	00006a71 	.word	0x00006a71
    73b8:	00000000 	.word	0x00000000
    73bc:	000076b5 	.word	0x000076b5
    73c0:	00006a49 	.word	0x00006a49
    73c4:	00006aad 	.word	0x00006aad
    73c8:	0000de5f 	.word	0x0000de5f
    73cc:	0000de65 	.word	0x0000de65
    73d0:	0000de6b 	.word	0x0000de6b
    73d4:	00006cf5 	.word	0x00006cf5
    73d8:	0000de7d 	.word	0x0000de7d
    73dc:	000073cc 	.word	0x000073cc
    73e0:	000073c4 	.word	0x000073c4
    73e4:	000073c0 	.word	0x000073c0

000073e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    73e8:	b510      	push	{r4, lr}
    73ea:	1e42      	subs	r2, r0, #1
    73ec:	2a02      	cmp	r2, #2
    73ee:	d901      	bls.n	73f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    73f0:	21ca      	movs	r1, #202	; 0xca
    73f2:	e009      	b.n	7408 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    73f4:	1e40      	subs	r0, r0, #1
    73f6:	2910      	cmp	r1, #16
    73f8:	d009      	beq.n	740e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    73fa:	2912      	cmp	r1, #18
    73fc:	d00c      	beq.n	7418 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    73fe:	2913      	cmp	r1, #19
    7400:	d00a      	beq.n	7418 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7402:	2915      	cmp	r1, #21
    7404:	d005      	beq.n	7412 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7406:	21d8      	movs	r1, #216	; 0xd8
    7408:	202f      	movs	r0, #47	; 0x2f
    740a:	f7fc fded 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    740e:	4905      	ldr	r1, [pc, #20]	; (7424 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7410:	e004      	b.n	741c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7412:	4904      	ldr	r1, [pc, #16]	; (7424 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7414:	1d89      	adds	r1, r1, #6
    7416:	e001      	b.n	741c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7418:	4902      	ldr	r1, [pc, #8]	; (7424 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    741a:	1f89      	subs	r1, r1, #6
    741c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7420:	bd10      	pop	{r4, pc}
    7422:	0000      	.short	0x0000
    7424:	0000dfd4 	.word	0x0000dfd4

00007428 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7428:	1e42      	subs	r2, r0, #1
    742a:	b510      	push	{r4, lr}
    742c:	b2d2      	uxtb	r2, r2
    742e:	2a01      	cmp	r2, #1
    7430:	d903      	bls.n	743a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7432:	291d      	cmp	r1, #29
    7434:	d001      	beq.n	743a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7436:	21ee      	movs	r1, #238	; 0xee
    7438:	e00d      	b.n	7456 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    743a:	2913      	cmp	r1, #19
    743c:	d013      	beq.n	7466 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    743e:	dc04      	bgt.n	744a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7440:	2910      	cmp	r1, #16
    7442:	d00b      	beq.n	745c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7444:	2912      	cmp	r1, #18
    7446:	d104      	bne.n	7452 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7448:	e00d      	b.n	7466 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    744a:	2915      	cmp	r1, #21
    744c:	d008      	beq.n	7460 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    744e:	291d      	cmp	r1, #29
    7450:	d00e      	beq.n	7470 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7452:	f44f 7181 	mov.w	r1, #258	; 0x102
    7456:	202f      	movs	r0, #47	; 0x2f
    7458:	f7fc fdc6 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    745c:	4807      	ldr	r0, [pc, #28]	; (747c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    745e:	e004      	b.n	746a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7460:	4806      	ldr	r0, [pc, #24]	; (747c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7462:	3008      	adds	r0, #8
    7464:	e001      	b.n	746a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7466:	4805      	ldr	r0, [pc, #20]	; (747c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7468:	1d00      	adds	r0, r0, #4
    746a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    746e:	bd10      	pop	{r4, pc}
    7470:	f240 315a 	movw	r1, #858	; 0x35a
    7474:	fb10 f001 	smulbb	r0, r0, r1
    7478:	bd10      	pop	{r4, pc}
    747a:	0000      	.short	0x0000
    747c:	0000dfc2 	.word	0x0000dfc2

00007480 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    7480:	b570      	push	{r4, r5, r6, lr}
    7482:	4c17      	ldr	r4, [pc, #92]	; (74e0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x60>)
    7484:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    7488:	b108      	cbz	r0, 748e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xe>
    748a:	2000      	movs	r0, #0
    748c:	bd70      	pop	{r4, r5, r6, pc}
    748e:	7a20      	ldrb	r0, [r4, #8]
    7490:	b138      	cbz	r0, 74a2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x22>
    7492:	68e1      	ldr	r1, [r4, #12]
    7494:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7496:	4288      	cmp	r0, r1
    7498:	d903      	bls.n	74a2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x22>
    749a:	2000      	movs	r0, #0
    749c:	f7ff f9d2 	bl	6844 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    74a0:	e7f3      	b.n	748a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xa>
    74a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    74a4:	b1d0      	cbz	r0, 74dc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x5c>
    74a6:	2000      	movs	r0, #0
    74a8:	f7ff f836 	bl	6518 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    74ac:	4605      	mov	r5, r0
    74ae:	f006 fe32 	bl	e116 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    74b2:	4428      	add	r0, r5
    74b4:	f242 7110 	movw	r1, #10000	; 0x2710
    74b8:	1846      	adds	r6, r0, r1
    74ba:	f004 fc9d 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    74be:	4605      	mov	r5, r0
    74c0:	4629      	mov	r1, r5
    74c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    74c4:	f7fa fa38 	bl	1938 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    74c8:	6325      	str	r5, [r4, #48]	; 0x30
    74ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    74cc:	1982      	adds	r2, r0, r6
    74ce:	4291      	cmp	r1, r2
    74d0:	d202      	bcs.n	74d8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x58>
    74d2:	2001      	movs	r0, #1
    74d4:	62e0      	str	r0, [r4, #44]	; 0x2c
    74d6:	e7e0      	b.n	749a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x1a>
    74d8:	1a08      	subs	r0, r1, r0
    74da:	62e0      	str	r0, [r4, #44]	; 0x2c
    74dc:	2001      	movs	r0, #1
    74de:	bd70      	pop	{r4, r5, r6, pc}
    74e0:	20000f18 	.word	0x20000f18

000074e4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    74e4:	b510      	push	{r4, lr}
    74e6:	b131      	cbz	r1, 74f6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    74e8:	2901      	cmp	r1, #1
    74ea:	d008      	beq.n	74fe <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    74ec:	f240 7166 	movw	r1, #1894	; 0x766
    74f0:	2030      	movs	r0, #48	; 0x30
    74f2:	f7fc fd79 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74fa:	f000 bad5 	b.w	7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35c>
    74fe:	4905      	ldr	r1, [pc, #20]	; (7514 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>)
    7500:	2000      	movs	r0, #0
    7502:	7208      	strb	r0, [r1, #8]
    7504:	f006 fe0e 	bl	e124 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xc8>
    7508:	4803      	ldr	r0, [pc, #12]	; (7518 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x34>)
    750a:	7940      	ldrb	r0, [r0, #5]
    750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7510:	f7fc bbd2 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7514:	20000f18 	.word	0x20000f18
    7518:	200000f8 	.word	0x200000f8

0000751c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7520:	4c37      	ldr	r4, [pc, #220]	; (7600 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xe4>)
    7522:	4616      	mov	r6, r2
    7524:	460f      	mov	r7, r1
    7526:	7c20      	ldrb	r0, [r4, #16]
    7528:	bbe8      	cbnz	r0, 75a6 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x8a>
    752a:	4836      	ldr	r0, [pc, #216]	; (7604 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xe8>)
    752c:	f7fb f964 	bl	27f8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7530:	4605      	mov	r5, r0
    7532:	2820      	cmp	r0, #32
    7534:	d03d      	beq.n	75b2 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x96>
    7536:	2238      	movs	r2, #56	; 0x38
    7538:	2100      	movs	r1, #0
    753a:	4620      	mov	r0, r4
    753c:	f004 fe4b 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7540:	7025      	strb	r5, [r4, #0]
    7542:	2503      	movs	r5, #3
    7544:	6067      	str	r7, [r4, #4]
    7546:	7425      	strb	r5, [r4, #16]
    7548:	b15f      	cbz	r7, 7562 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x46>
    754a:	2101      	movs	r1, #1
    754c:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    7550:	f7fc fdf6 	bl	4140 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7554:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    7558:	f000 0007 	and.w	r0, r0, #7
    755c:	1c40      	adds	r0, r0, #1
    755e:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    7562:	2064      	movs	r0, #100	; 0x64
    7564:	83a0      	strh	r0, [r4, #28]
    7566:	77a5      	strb	r5, [r4, #30]
    7568:	2701      	movs	r7, #1
    756a:	77e7      	strb	r7, [r4, #31]
    756c:	2500      	movs	r5, #0
    756e:	7525      	strb	r5, [r4, #20]
    7570:	f7fa faee 	bl	1b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7574:	8ba1      	ldrh	r1, [r4, #28]
    7576:	4288      	cmp	r0, r1
    7578:	d800      	bhi.n	757c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    757a:	4608      	mov	r0, r1
    757c:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    7580:	fa1f f880 	uxth.w	r8, r0
    7584:	2000      	movs	r0, #0
    7586:	f7ff f8b7 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    758a:	b1a8      	cbz	r0, 75b8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x9c>
    758c:	61a6      	str	r6, [r4, #24]
    758e:	f004 fc33 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7592:	4641      	mov	r1, r8
    7594:	f7fa f99a 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7598:	6220      	str	r0, [r4, #32]
    759a:	7065      	strb	r5, [r4, #1]
    759c:	7227      	strb	r7, [r4, #8]
    759e:	f006 fd0d 	bl	dfbc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    75a2:	1a30      	subs	r0, r6, r0
    75a4:	e000      	b.n	75a8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x8c>
    75a6:	e004      	b.n	75b2 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x96>
    75a8:	f2a0 100d 	subw	r0, r0, #269	; 0x10d
    75ac:	62e5      	str	r5, [r4, #44]	; 0x2c
    75ae:	60e0      	str	r0, [r4, #12]
    75b0:	e014      	b.n	75dc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc0>
    75b2:	200c      	movs	r0, #12
    75b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75b8:	f006 fdad 	bl	e116 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    75bc:	61a0      	str	r0, [r4, #24]
    75be:	7067      	strb	r7, [r4, #1]
    75c0:	f004 fc1a 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    75c4:	4607      	mov	r7, r0
    75c6:	2000      	movs	r0, #0
    75c8:	f006 fdda 	bl	e180 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x124>
    75cc:	eb00 0108 	add.w	r1, r0, r8
    75d0:	4638      	mov	r0, r7
    75d2:	f7fa f97b 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    75d6:	6220      	str	r0, [r4, #32]
    75d8:	e9c4 670b 	strd	r6, r7, [r4, #44]	; 0x2c
    75dc:	4908      	ldr	r1, [pc, #32]	; (7600 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xe4>)
    75de:	7820      	ldrb	r0, [r4, #0]
    75e0:	3114      	adds	r1, #20
    75e2:	f006 fdb8 	bl	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfa>
    75e6:	b130      	cbz	r0, 75f6 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xda>
    75e8:	2100      	movs	r1, #0
    75ea:	84a5      	strh	r5, [r4, #36]	; 0x24
    75ec:	4608      	mov	r0, r1
    75ee:	f7ff f91b 	bl	6828 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    75f2:	2000      	movs	r0, #0
    75f4:	e7de      	b.n	75b4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x98>
    75f6:	f240 11d9 	movw	r1, #473	; 0x1d9
    75fa:	2030      	movs	r0, #48	; 0x30
    75fc:	f7fc fcf4 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7600:	20000f18 	.word	0x20000f18
    7604:	0000807d 	.word	0x0000807d

00007608 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    7608:	b510      	push	{r4, lr}
    760a:	4c12      	ldr	r4, [pc, #72]	; (7654 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x4c>)
    760c:	7c20      	ldrb	r0, [r4, #16]
    760e:	b160      	cbz	r0, 762a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x22>
    7610:	2001      	movs	r0, #1
    7612:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    7616:	4601      	mov	r1, r0
    7618:	2000      	movs	r0, #0
    761a:	f7ff f905 	bl	6828 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    761e:	7c20      	ldrb	r0, [r4, #16]
    7620:	2803      	cmp	r0, #3
    7622:	d004      	beq.n	762e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x26>
    7624:	7c60      	ldrb	r0, [r4, #17]
    7626:	2800      	cmp	r0, #0
    7628:	d000      	beq.n	762c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    762a:	200c      	movs	r0, #12
    762c:	bd10      	pop	{r4, pc}
    762e:	7820      	ldrb	r0, [r4, #0]
    7630:	f7fa feac 	bl	238c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7634:	7820      	ldrb	r0, [r4, #0]
    7636:	f7fa ffd7 	bl	25e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    763a:	7820      	ldrb	r0, [r4, #0]
    763c:	f7fa ffb2 	bl	25a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    7640:	b110      	cbz	r0, 7648 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    7642:	2000      	movs	r0, #0
    7644:	7420      	strb	r0, [r4, #16]
    7646:	bd10      	pop	{r4, pc}
    7648:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    764c:	2030      	movs	r0, #48	; 0x30
    764e:	f7fc fccb 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7652:	0000      	.short	0x0000
    7654:	20000f18 	.word	0x20000f18

00007658 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    7658:	4801      	ldr	r0, [pc, #4]	; (7660 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    765a:	6840      	ldr	r0, [r0, #4]
    765c:	4770      	bx	lr
    765e:	0000      	.short	0x0000
    7660:	20000f18 	.word	0x20000f18

00007664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    7664:	4802      	ldr	r0, [pc, #8]	; (7670 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    7666:	7c00      	ldrb	r0, [r0, #16]
    7668:	2800      	cmp	r0, #0
    766a:	d000      	beq.n	766e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xa>
    766c:	2001      	movs	r0, #1
    766e:	4770      	bx	lr
    7670:	20000f18 	.word	0x20000f18

00007674 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7674:	4906      	ldr	r1, [pc, #24]	; (7690 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    7676:	7148      	strb	r0, [r1, #5]
    7678:	2000      	movs	r0, #0
    767a:	7088      	strb	r0, [r1, #2]
    767c:	2201      	movs	r2, #1
    767e:	700a      	strb	r2, [r1, #0]
    7680:	7048      	strb	r0, [r1, #1]
    7682:	710a      	strb	r2, [r1, #4]
    7684:	70c8      	strb	r0, [r1, #3]
    7686:	4903      	ldr	r1, [pc, #12]	; (7694 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    7688:	7408      	strb	r0, [r1, #16]
    768a:	f006 bca9 	b.w	dfe0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    768e:	0000      	.short	0x0000
    7690:	200000f8 	.word	0x200000f8
    7694:	20000f18 	.word	0x20000f18

00007698 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    7698:	4805      	ldr	r0, [pc, #20]	; (76b0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x18>)
    769a:	b510      	push	{r4, lr}
    769c:	7c00      	ldrb	r0, [r0, #16]
    769e:	2800      	cmp	r0, #0
    76a0:	f04f 0000 	mov.w	r0, #0
    76a4:	d103      	bne.n	76ae <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    76a6:	f005 fcfa 	bl	d09e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    76aa:	f080 0001 	eor.w	r0, r0, #1
    76ae:	bd10      	pop	{r4, pc}
    76b0:	20000f18 	.word	0x20000f18

000076b4 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    76b4:	4905      	ldr	r1, [pc, #20]	; (76cc <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    76b6:	788a      	ldrb	r2, [r1, #2]
    76b8:	2a02      	cmp	r2, #2
    76ba:	d002      	beq.n	76c2 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0xe>
    76bc:	4904      	ldr	r1, [pc, #16]	; (76d0 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x1c>)
    76be:	6288      	str	r0, [r1, #40]	; 0x28
    76c0:	4770      	bx	lr
    76c2:	6949      	ldr	r1, [r1, #20]
    76c4:	f8c1 0164 	str.w	r0, [r1, #356]	; 0x164
    76c8:	4770      	bx	lr
    76ca:	0000      	.short	0x0000
    76cc:	200000f8 	.word	0x200000f8
    76d0:	20000f18 	.word	0x20000f18

000076d4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    76d4:	4901      	ldr	r1, [pc, #4]	; (76dc <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    76d6:	7008      	strb	r0, [r1, #0]
    76d8:	4770      	bx	lr
    76da:	0000      	.short	0x0000
    76dc:	200000f8 	.word	0x200000f8

000076e0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    76e0:	4901      	ldr	r1, [pc, #4]	; (76e8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    76e2:	7048      	strb	r0, [r1, #1]
    76e4:	4770      	bx	lr
    76e6:	0000      	.short	0x0000
    76e8:	200000f8 	.word	0x200000f8

000076ec <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    76ec:	4905      	ldr	r1, [pc, #20]	; (7704 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    76ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    76f2:	fbb1 f1f2 	udiv	r1, r1, r2
    76f6:	b510      	push	{r4, lr}
    76f8:	f201 2193 	addw	r1, r1, #659	; 0x293
    76fc:	f006 fb04 	bl	dd08 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7700:	b280      	uxth	r0, r0
    7702:	bd10      	pop	{r4, pc}
    7704:	0001527d 	.word	0x0001527d

00007708 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7708:	b570      	push	{r4, r5, r6, lr}
    770a:	4c0f      	ldr	r4, [pc, #60]	; (7748 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x40>)
    770c:	f8d0 6164 	ldr.w	r6, [r0, #356]	; 0x164
    7710:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    7714:	7860      	ldrb	r0, [r4, #1]
    7716:	b120      	cbz	r0, 7722 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1a>
    7718:	4632      	mov	r2, r6
    771a:	4628      	mov	r0, r5
    771c:	f005 fe21 	bl	d362 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7720:	4605      	mov	r5, r0
    7722:	68a0      	ldr	r0, [r4, #8]
    7724:	4285      	cmp	r5, r0
    7726:	d005      	beq.n	7734 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2c>
    7728:	6921      	ldr	r1, [r4, #16]
    772a:	1a28      	subs	r0, r5, r0
    772c:	4408      	add	r0, r1
    772e:	6120      	str	r0, [r4, #16]
    7730:	f7fb f928 	bl	2984 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7734:	60a5      	str	r5, [r4, #8]
    7736:	42ae      	cmp	r6, r5
    7738:	d801      	bhi.n	773e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x36>
    773a:	78e0      	ldrb	r0, [r4, #3]
    773c:	b108      	cbz	r0, 7742 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    773e:	2000      	movs	r0, #0
    7740:	bd70      	pop	{r4, r5, r6, pc}
    7742:	2001      	movs	r0, #1
    7744:	bd70      	pop	{r4, r5, r6, pc}
    7746:	0000      	.short	0x0000
    7748:	200000f8 	.word	0x200000f8

0000774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    774c:	b570      	push	{r4, r5, r6, lr}
    774e:	2906      	cmp	r1, #6
    7750:	d22d      	bcs.n	77ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62>
    7752:	e8df f001 	tbb	[pc, r1]
    7756:	0a05      	.short	0x0a05
    7758:	250e0d03 	.word	0x250e0d03
    775c:	2100      	movs	r1, #0
    775e:	e000      	b.n	7762 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x16>
    7760:	2101      	movs	r1, #1
    7762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7766:	f000 ba03 	b.w	7b70 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x424>
    776a:	2103      	movs	r1, #3
    776c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    7770:	bd70      	pop	{r4, r5, r6, pc}
    7772:	f003 fde5 	bl	b340 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7776:	4c10      	ldr	r4, [pc, #64]	; (77b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c>)
    7778:	6965      	ldr	r5, [r4, #20]
    777a:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    777e:	f895 0067 	ldrb.w	r0, [r5, #103]	; 0x67
    7782:	35ec      	adds	r5, #236	; 0xec
    7784:	f007 fc42 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7788:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    778a:	1a08      	subs	r0, r1, r0
    778c:	68a1      	ldr	r1, [r4, #8]
    778e:	4401      	add	r1, r0
    7790:	60a1      	str	r1, [r4, #8]
    7792:	68e1      	ldr	r1, [r4, #12]
    7794:	4408      	add	r0, r1
    7796:	60e0      	str	r0, [r4, #12]
    7798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    779c:	f000 b924 	b.w	79e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x29c>
    77a0:	4806      	ldr	r0, [pc, #24]	; (77bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    77a2:	2100      	movs	r1, #0
    77a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    77a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77aa:	f000 b9b1 	b.w	7b10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3c4>
    77ae:	f240 7152 	movw	r1, #1874	; 0x752
    77b2:	2030      	movs	r0, #48	; 0x30
    77b4:	f7fc fc18 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77b8:	200000f8 	.word	0x200000f8
    77bc:	20000f18 	.word	0x20000f18
    77c0:	b510      	push	{r4, lr}
    77c2:	280c      	cmp	r0, #12
    77c4:	d304      	bcc.n	77d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    77c6:	f44f 7147 	mov.w	r1, #796	; 0x31c
    77ca:	2006      	movs	r0, #6
    77cc:	f7fc fc0c 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77d0:	4901      	ldr	r1, [pc, #4]	; (77d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    77d2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    77d6:	bd10      	pop	{r4, pc}
    77d8:	0000e1c4 	.word	0x0000e1c4
    77dc:	b570      	push	{r4, r5, r6, lr}
    77de:	4c28      	ldr	r4, [pc, #160]	; (7880 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x134>)
    77e0:	2064      	movs	r0, #100	; 0x64
    77e2:	2501      	movs	r5, #1
    77e4:	83a0      	strh	r0, [r4, #28]
    77e6:	2000      	movs	r0, #0
    77e8:	7520      	strb	r0, [r4, #20]
    77ea:	77e5      	strb	r5, [r4, #31]
    77ec:	7a20      	ldrb	r0, [r4, #8]
    77ee:	f104 0614 	add.w	r6, r4, #20
    77f2:	b150      	cbz	r0, 780a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    77f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    77f8:	6a20      	ldr	r0, [r4, #32]
    77fa:	f7fa f867 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    77fe:	6220      	str	r0, [r4, #32]
    7800:	2100      	movs	r1, #0
    7802:	4630      	mov	r0, r6
    7804:	f005 fe8c 	bl	d520 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7808:	e011      	b.n	782e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe2>
    780a:	2000      	movs	r0, #0
    780c:	f006 fcb8 	bl	e180 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x124>
    7810:	4605      	mov	r5, r0
    7812:	2000      	movs	r0, #0
    7814:	f7fe fe80 	bl	6518 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7818:	4405      	add	r5, r0
    781a:	4629      	mov	r1, r5
    781c:	6a20      	ldr	r0, [r4, #32]
    781e:	f7fa f855 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7822:	6220      	str	r0, [r4, #32]
    7824:	4629      	mov	r1, r5
    7826:	4630      	mov	r0, r6
    7828:	f005 fe7a 	bl	d520 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    782c:	1c45      	adds	r5, r0, #1
    782e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    7830:	1c41      	adds	r1, r0, #1
    7832:	290a      	cmp	r1, #10
    7834:	d201      	bcs.n	783a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xee>
    7836:	4428      	add	r0, r5
    7838:	84a0      	strh	r0, [r4, #36]	; 0x24
    783a:	6860      	ldr	r0, [r4, #4]
    783c:	b128      	cbz	r0, 784a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xfe>
    783e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    7840:	1c40      	adds	r0, r0, #1
    7842:	280a      	cmp	r0, #10
    7844:	d301      	bcc.n	784a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xfe>
    7846:	2002      	movs	r0, #2
    7848:	e000      	b.n	784c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x100>
    784a:	2003      	movs	r0, #3
    784c:	77a0      	strb	r0, [r4, #30]
    784e:	2000      	movs	r0, #0
    7850:	f7ff fe16 	bl	7480 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7854:	b150      	cbz	r0, 786c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x120>
    7856:	7820      	ldrb	r0, [r4, #0]
    7858:	4631      	mov	r1, r6
    785a:	f006 fc7c 	bl	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfa>
    785e:	2800      	cmp	r0, #0
    7860:	d10c      	bne.n	787c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x130>
    7862:	f240 6187 	movw	r1, #1671	; 0x687
    7866:	2030      	movs	r0, #48	; 0x30
    7868:	f7fc fbbe 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    786c:	f000 f80c 	bl	7888 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x13c>
    7870:	4804      	ldr	r0, [pc, #16]	; (7884 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x138>)
    7872:	7940      	ldrb	r0, [r0, #5]
    7874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7878:	f7fc ba1e 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    787c:	bd70      	pop	{r4, r5, r6, pc}
    787e:	0000      	.short	0x0000
    7880:	20000f18 	.word	0x20000f18
    7884:	200000f8 	.word	0x200000f8
    7888:	b510      	push	{r4, lr}
    788a:	4c03      	ldr	r4, [pc, #12]	; (7898 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x14c>)
    788c:	7820      	ldrb	r0, [r4, #0]
    788e:	f7fa fe89 	bl	25a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    7892:	2000      	movs	r0, #0
    7894:	7420      	strb	r0, [r4, #16]
    7896:	bd10      	pop	{r4, pc}
    7898:	20000f18 	.word	0x20000f18
    789c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    789e:	4c18      	ldr	r4, [pc, #96]	; (7900 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b4>)
    78a0:	2001      	movs	r0, #1
    78a2:	70e0      	strb	r0, [r4, #3]
    78a4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    78a8:	e00b      	b.n	78c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x176>
    78aa:	2100      	movs	r1, #0
    78ac:	f005 fc09 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    78b0:	0006      	movs	r6, r0
    78b2:	d010      	beq.n	78d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18a>
    78b4:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    78b8:	f7fa fe96 	bl	25e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    78bc:	4630      	mov	r0, r6
    78be:	f006 fc4c 	bl	e15a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfe>
    78c2:	4669      	mov	r1, sp
    78c4:	2000      	movs	r0, #0
    78c6:	f005 fc06 	bl	d0d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    78ca:	b180      	cbz	r0, 78ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a2>
    78cc:	f240 1123 	movw	r1, #291	; 0x123
    78d0:	2030      	movs	r0, #48	; 0x30
    78d2:	f7fc fb89 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78d6:	f240 1143 	movw	r1, #323	; 0x143
    78da:	e7f9      	b.n	78d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x184>
    78dc:	9802      	ldr	r0, [sp, #8]
    78de:	b130      	cbz	r0, 78ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a2>
    78e0:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    78e4:	b119      	cbz	r1, 78ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a2>
    78e6:	8800      	ldrh	r0, [r0, #0]
    78e8:	42a8      	cmp	r0, r5
    78ea:	d1de      	bne.n	78aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x15e>
    78ec:	e004      	b.n	78f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1ac>
    78ee:	4668      	mov	r0, sp
    78f0:	f7fc fdae 	bl	4450 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    78f4:	2800      	cmp	r0, #0
    78f6:	d0f1      	beq.n	78dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x190>
    78f8:	2000      	movs	r0, #0
    78fa:	70e0      	strb	r0, [r4, #3]
    78fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    78fe:	0000      	.short	0x0000
    7900:	200000f8 	.word	0x200000f8
    7904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7908:	4604      	mov	r4, r0
    790a:	4836      	ldr	r0, [pc, #216]	; (79e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x298>)
    790c:	461e      	mov	r6, r3
    790e:	4690      	mov	r8, r2
    7910:	7900      	ldrb	r0, [r0, #4]
    7912:	4689      	mov	r9, r1
    7914:	2500      	movs	r5, #0
    7916:	b368      	cbz	r0, 7974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x228>
    7918:	f7fc f83e 	bl	3998 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    791c:	b350      	cbz	r0, 7974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x228>
    791e:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    7922:	2802      	cmp	r0, #2
    7924:	d326      	bcc.n	7974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x228>
    7926:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    792a:	2802      	cmp	r0, #2
    792c:	d022      	beq.n	7974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x228>
    792e:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    7932:	b9f8      	cbnz	r0, 7974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x228>
    7934:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7938:	f7ff ff42 	bl	77c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>
    793c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7940:	b281      	uxth	r1, r0
    7942:	8031      	strh	r1, [r6, #0]
    7944:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7948:	2700      	movs	r7, #0
    794a:	2801      	cmp	r0, #1
    794c:	d015      	beq.n	797a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22e>
    794e:	6860      	ldr	r0, [r4, #4]
    7950:	f004 fa86 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7954:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7958:	b280      	uxth	r0, r0
    795a:	4442      	add	r2, r8
    795c:	eba2 0109 	sub.w	r1, r2, r9
    7960:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7964:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7968:	1a82      	subs	r2, r0, r2
    796a:	fb01 7502 	mla	r5, r1, r2, r7
    796e:	2001      	movs	r0, #1
    7970:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7974:	4628      	mov	r0, r5
    7976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    797a:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    797e:	2803      	cmp	r0, #3
    7980:	d02c      	beq.n	79dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x290>
    7982:	2101      	movs	r1, #1
    7984:	2000      	movs	r0, #0
    7986:	f005 fdb9 	bl	d4fc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    798a:	69e1      	ldr	r1, [r4, #28]
    798c:	1847      	adds	r7, r0, r1
    798e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7992:	8831      	ldrh	r1, [r6, #0]
    7994:	34c8      	adds	r4, #200	; 0xc8
    7996:	f004 fa63 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    799a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    799c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    799e:	1a82      	subs	r2, r0, r2
    79a0:	fb01 5502 	mla	r5, r1, r2, r5
    79a4:	65a0      	str	r0, [r4, #88]	; 0x58
    79a6:	8831      	ldrh	r1, [r6, #0]
    79a8:	4638      	mov	r0, r7
    79aa:	f004 fa59 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    79ae:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    79b0:	66a0      	str	r0, [r4, #104]	; 0x68
    79b2:	1a41      	subs	r1, r0, r1
    79b4:	440d      	add	r5, r1
    79b6:	8831      	ldrh	r1, [r6, #0]
    79b8:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    79bc:	f004 fa50 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    79c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    79c2:	4442      	add	r2, r8
    79c4:	eba2 0109 	sub.w	r1, r2, r9
    79c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    79ca:	1a89      	subs	r1, r1, r2
    79cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    79ce:	1e49      	subs	r1, r1, #1
    79d0:	1a82      	subs	r2, r0, r2
    79d2:	fb01 5502 	mla	r5, r1, r2, r5
    79d6:	66e0      	str	r0, [r4, #108]	; 0x6c
    79d8:	3cc8      	subs	r4, #200	; 0xc8
    79da:	e7c8      	b.n	796e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x222>
    79dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    79e0:	e7d3      	b.n	798a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x23e>
    79e2:	0000      	.short	0x0000
    79e4:	200000f8 	.word	0x200000f8
    79e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79ec:	482d      	ldr	r0, [pc, #180]	; (7aa4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x358>)
    79ee:	6944      	ldr	r4, [r0, #20]
    79f0:	f894 1142 	ldrb.w	r1, [r4, #322]	; 0x142
    79f4:	2900      	cmp	r1, #0
    79f6:	d052      	beq.n	7a9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x352>
    79f8:	f894 112c 	ldrb.w	r1, [r4, #300]	; 0x12c
    79fc:	2903      	cmp	r1, #3
    79fe:	d14e      	bne.n	7a9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x352>
    7a00:	f894 9067 	ldrb.w	r9, [r4, #103]	; 0x67
    7a04:	7800      	ldrb	r0, [r0, #0]
    7a06:	f7ff fedb 	bl	77c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>
    7a0a:	4605      	mov	r5, r0
    7a0c:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7a10:	f7ff fed6 	bl	77c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>
    7a14:	4428      	add	r0, r5
    7a16:	b286      	uxth	r6, r0
    7a18:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7a1c:	f7ff fed0 	bl	77c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>
    7a20:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7a24:	fa1f f880 	uxth.w	r8, r0
    7a28:	4648      	mov	r0, r9
    7a2a:	f007 faef 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7a2e:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7a32:	1a0d      	subs	r5, r1, r0
    7a34:	4648      	mov	r0, r9
    7a36:	f007 faf7 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7a3a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    7a3e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    7a42:	fbb0 f0fa 	udiv	r0, r0, sl
    7a46:	1a2d      	subs	r5, r5, r0
    7a48:	4648      	mov	r0, r9
    7a4a:	f007 fadf 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7a4e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    7a52:	1a0f      	subs	r7, r1, r0
    7a54:	4648      	mov	r0, r9
    7a56:	f007 fae7 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7a5a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7a5e:	4401      	add	r1, r0
    7a60:	fbb1 f0fa 	udiv	r0, r1, sl
    7a64:	1a39      	subs	r1, r7, r0
    7a66:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    7a6a:	4370      	muls	r0, r6
    7a6c:	fbb0 f2f8 	udiv	r2, r0, r8
    7a70:	2029      	movs	r0, #41	; 0x29
    7a72:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    7a76:	3260      	adds	r2, #96	; 0x60
    7a78:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    7a7c:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    7a80:	42a9      	cmp	r1, r5
    7a82:	d801      	bhi.n	7a88 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x33c>
    7a84:	4285      	cmp	r5, r0
    7a86:	d901      	bls.n	7a8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x340>
    7a88:	f7fb ff68 	bl	395c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    7a8c:	4631      	mov	r1, r6
    7a8e:	6860      	ldr	r0, [r4, #4]
    7a90:	f004 f9e6 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7a94:	2100      	movs	r1, #0
    7a96:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7a9a:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    7a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7aa2:	0000      	.short	0x0000
    7aa4:	200000f8 	.word	0x200000f8
    7aa8:	b570      	push	{r4, r5, r6, lr}
    7aaa:	4c17      	ldr	r4, [pc, #92]	; (7b08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3bc>)
    7aac:	2500      	movs	r5, #0
    7aae:	7860      	ldrb	r0, [r4, #1]
    7ab0:	b118      	cbz	r0, 7aba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36e>
    7ab2:	2001      	movs	r0, #1
    7ab4:	f006 fb64 	bl	e180 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x124>
    7ab8:	4605      	mov	r5, r0
    7aba:	2000      	movs	r0, #0
    7abc:	f7fe fd2c 	bl	6518 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7ac0:	1941      	adds	r1, r0, r5
    7ac2:	6a20      	ldr	r0, [r4, #32]
    7ac4:	f7f9 ff02 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ac8:	6220      	str	r0, [r4, #32]
    7aca:	2500      	movs	r5, #0
    7acc:	7525      	strb	r5, [r4, #20]
    7ace:	2001      	movs	r0, #1
    7ad0:	77e0      	strb	r0, [r4, #31]
    7ad2:	2003      	movs	r0, #3
    7ad4:	77a0      	strb	r0, [r4, #30]
    7ad6:	2064      	movs	r0, #100	; 0x64
    7ad8:	83a0      	strh	r0, [r4, #28]
    7ada:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    7ade:	b928      	cbnz	r0, 7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3a0>
    7ae0:	4909      	ldr	r1, [pc, #36]	; (7b08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3bc>)
    7ae2:	7820      	ldrb	r0, [r4, #0]
    7ae4:	3114      	adds	r1, #20
    7ae6:	f006 fb36 	bl	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfa>
    7aea:	b140      	cbz	r0, 7afe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b2>
    7aec:	84a5      	strh	r5, [r4, #36]	; 0x24
    7aee:	f006 fb19 	bl	e124 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xc8>
    7af2:	4806      	ldr	r0, [pc, #24]	; (7b0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3c0>)
    7af4:	7940      	ldrb	r0, [r0, #5]
    7af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7afa:	f7fc b8dd 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7afe:	f240 61d3 	movw	r1, #1747	; 0x6d3
    7b02:	2030      	movs	r0, #48	; 0x30
    7b04:	f7fc fa70 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b08:	20000f18 	.word	0x20000f18
    7b0c:	200000f8 	.word	0x200000f8
    7b10:	b570      	push	{r4, r5, r6, lr}
    7b12:	4c15      	ldr	r4, [pc, #84]	; (7b68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x41c>)
    7b14:	4606      	mov	r6, r0
    7b16:	2000      	movs	r0, #0
    7b18:	7220      	strb	r0, [r4, #8]
    7b1a:	6a25      	ldr	r5, [r4, #32]
    7b1c:	7420      	strb	r0, [r4, #16]
    7b1e:	2001      	movs	r0, #1
    7b20:	7460      	strb	r0, [r4, #17]
    7b22:	2101      	movs	r1, #1
    7b24:	6860      	ldr	r0, [r4, #4]
    7b26:	f7fe f8cb 	bl	5cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7b2a:	6861      	ldr	r1, [r4, #4]
    7b2c:	f8c1 5154 	str.w	r5, [r1, #340]	; 0x154
    7b30:	7820      	ldrb	r0, [r4, #0]
    7b32:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    7b36:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
    7b3a:	f8c1 5158 	str.w	r5, [r1, #344]	; 0x158
    7b3e:	8809      	ldrh	r1, [r1, #0]
    7b40:	f7fe f960 	bl	5e04 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    7b44:	6860      	ldr	r0, [r4, #4]
    7b46:	f006 fa53 	bl	dff0 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>
    7b4a:	b120      	cbz	r0, 7b56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x40a>
    7b4c:	f240 61fc 	movw	r1, #1788	; 0x6fc
    7b50:	2030      	movs	r0, #48	; 0x30
    7b52:	f7fc fa49 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b56:	f006 fae5 	bl	e124 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xc8>
    7b5a:	4804      	ldr	r0, [pc, #16]	; (7b6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x420>)
    7b5c:	7940      	ldrb	r0, [r0, #5]
    7b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b62:	f7fc b8a9 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7b66:	0000      	.short	0x0000
    7b68:	20000f18 	.word	0x20000f18
    7b6c:	200000f8 	.word	0x200000f8
    7b70:	b538      	push	{r3, r4, r5, lr}
    7b72:	2500      	movs	r5, #0
    7b74:	4604      	mov	r4, r0
    7b76:	2901      	cmp	r1, #1
    7b78:	d102      	bne.n	7b80 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x434>
    7b7a:	4810      	ldr	r0, [pc, #64]	; (7bbc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x470>)
    7b7c:	78c0      	ldrb	r0, [r0, #3]
    7b7e:	b170      	cbz	r0, 7b9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x452>
    7b80:	2004      	movs	r0, #4
    7b82:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7b86:	bf00      	nop
    7b88:	f006 facc 	bl	e124 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xc8>
    7b8c:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    7b90:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    7b94:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7b98:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    7b9c:	bd38      	pop	{r3, r4, r5, pc}
    7b9e:	9500      	str	r5, [sp, #0]
    7ba0:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7ba4:	2301      	movs	r3, #1
    7ba6:	2200      	movs	r2, #0
    7ba8:	4620      	mov	r0, r4
    7baa:	f000 f809 	bl	7bc0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x474>
    7bae:	2800      	cmp	r0, #0
    7bb0:	d0ea      	beq.n	7b88 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x43c>
    7bb2:	f240 61b1 	movw	r1, #1713	; 0x6b1
    7bb6:	2030      	movs	r0, #48	; 0x30
    7bb8:	f7fc fa16 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bbc:	200000f8 	.word	0x200000f8
    7bc0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bc4:	4604      	mov	r4, r0
    7bc6:	b085      	sub	sp, #20
    7bc8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7bcc:	f8df b424 	ldr.w	fp, [pc, #1060]	; 7ff4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a8>
    7bd0:	e9cd 3000 	strd	r3, r0, [sp]
    7bd4:	4699      	mov	r9, r3
    7bd6:	460f      	mov	r7, r1
    7bd8:	f89b 0000 	ldrb.w	r0, [fp]
    7bdc:	f7ff fdf0 	bl	77c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>
    7be0:	4605      	mov	r5, r0
    7be2:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7be6:	f7ff fdeb 	bl	77c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>
    7bea:	4428      	add	r0, r5
    7bec:	f8ad 0008 	strh.w	r0, [sp, #8]
    7bf0:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    7bf4:	280d      	cmp	r0, #13
    7bf6:	d004      	beq.n	7c02 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4b6>
    7bf8:	2000      	movs	r0, #0
    7bfa:	9003      	str	r0, [sp, #12]
    7bfc:	9807      	ldr	r0, [sp, #28]
    7bfe:	b110      	cbz	r0, 7c06 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ba>
    7c00:	e02e      	b.n	7c60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x514>
    7c02:	2001      	movs	r0, #1
    7c04:	e7f9      	b.n	7bfa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ae>
    7c06:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7c0a:	2803      	cmp	r0, #3
    7c0c:	d128      	bne.n	7c60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x514>
    7c0e:	9803      	ldr	r0, [sp, #12]
    7c10:	b330      	cbz	r0, 7c60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x514>
    7c12:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7c16:	42b8      	cmp	r0, r7
    7c18:	d122      	bne.n	7c60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x514>
    7c1a:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    7c1e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    7c22:	6860      	ldr	r0, [r4, #4]
    7c24:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    7c28:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7c2c:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    7c30:	4408      	add	r0, r1
    7c32:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    7c36:	4620      	mov	r0, r4
    7c38:	f000 fb7e 	bl	8338 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7c3c:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    7c40:	61e0      	str	r0, [r4, #28]
    7c42:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7c46:	8360      	strh	r0, [r4, #26]
    7c48:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    7c4c:	6060      	str	r0, [r4, #4]
    7c4e:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7c52:	8120      	strh	r0, [r4, #8]
    7c54:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7c58:	8160      	strh	r0, [r4, #10]
    7c5a:	2002      	movs	r0, #2
    7c5c:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7c60:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    7c64:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7c68:	1a38      	subs	r0, r7, r0
    7c6a:	fa0f fa80 	sxth.w	sl, r0
    7c6e:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    7c72:	1a38      	subs	r0, r7, r0
    7c74:	fa0f f880 	sxth.w	r8, r0
    7c78:	f1b8 0f00 	cmp.w	r8, #0
    7c7c:	da06      	bge.n	7c8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x540>
    7c7e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7c82:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7c86:	2001      	movs	r0, #1
    7c88:	46d0      	mov	r8, sl
    7c8a:	9000      	str	r0, [sp, #0]
    7c8c:	ab02      	add	r3, sp, #8
    7c8e:	4652      	mov	r2, sl
    7c90:	4641      	mov	r1, r8
    7c92:	4620      	mov	r0, r4
    7c94:	f7ff fe36 	bl	7904 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b8>
    7c98:	9004      	str	r0, [sp, #16]
    7c9a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7c9e:	b140      	cbz	r0, 7cb2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x566>
    7ca0:	2801      	cmp	r0, #1
    7ca2:	d07c      	beq.n	7d9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x652>
    7ca4:	2802      	cmp	r0, #2
    7ca6:	d05a      	beq.n	7d5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    7ca8:	2803      	cmp	r0, #3
    7caa:	d079      	beq.n	7da0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x654>
    7cac:	f240 5137 	movw	r1, #1335	; 0x537
    7cb0:	e19c      	b.n	7fec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7cb2:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7cb6:	b3e8      	cbz	r0, 7d34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e8>
    7cb8:	2101      	movs	r1, #1
    7cba:	2000      	movs	r0, #0
    7cbc:	f005 fc1e 	bl	d4fc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7cc0:	4606      	mov	r6, r0
    7cc2:	69e0      	ldr	r0, [r4, #28]
    7cc4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7cc8:	4430      	add	r0, r6
    7cca:	f004 f8c9 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cce:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7cd2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7cd6:	6860      	ldr	r0, [r4, #4]
    7cd8:	f004 f8c2 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cdc:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7ce0:	a901      	add	r1, sp, #4
    7ce2:	4668      	mov	r0, sp
    7ce4:	f003 fa5c 	bl	b1a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7ce8:	e9dd 1200 	ldrd	r1, r2, [sp]
    7cec:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7cf0:	f7fa fefc 	bl	2aec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7cf4:	4682      	mov	sl, r0
    7cf6:	4620      	mov	r0, r4
    7cf8:	f006 f9a2 	bl	e040 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    7cfc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7d00:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    7d04:	f007 f990 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7d08:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7d0c:	4401      	add	r1, r0
    7d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7d12:	fbb1 f0f0 	udiv	r0, r1, r0
    7d16:	69e1      	ldr	r1, [r4, #28]
    7d18:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7d1c:	4431      	add	r1, r6
    7d1e:	1a08      	subs	r0, r1, r0
    7d20:	1a81      	subs	r1, r0, r2
    7d22:	4441      	add	r1, r8
    7d24:	3920      	subs	r1, #32
    7d26:	eba1 060a 	sub.w	r6, r1, sl
    7d2a:	0050      	lsls	r0, r2, #1
    7d2c:	8b61      	ldrh	r1, [r4, #26]
    7d2e:	3060      	adds	r0, #96	; 0x60
    7d30:	4401      	add	r1, r0
    7d32:	e000      	b.n	7d36 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ea>
    7d34:	e010      	b.n	7d58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60c>
    7d36:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7d3a:	f006 f9fa 	bl	e132 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd6>
    7d3e:	3024      	adds	r0, #36	; 0x24
    7d40:	f8cb 0018 	str.w	r0, [fp, #24]
    7d44:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7d48:	4659      	mov	r1, fp
    7d4a:	1a30      	subs	r0, r6, r0
    7d4c:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
    7d50:	d85c      	bhi.n	7e0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c0>
    7d52:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
    7d56:	e149      	b.n	7fec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7d58:	f240 41ae 	movw	r1, #1198	; 0x4ae
    7d5c:	e146      	b.n	7fec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7d5e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7d62:	69e0      	ldr	r0, [r4, #28]
    7d64:	4408      	add	r0, r1
    7d66:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7d6a:	f004 f879 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7d6e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7d72:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7d76:	6860      	ldr	r0, [r4, #4]
    7d78:	f004 f872 	bl	be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7d7c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7d80:	4620      	mov	r0, r4
    7d82:	f006 f95d 	bl	e040 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    7d86:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7d8a:	bb10      	cbnz	r0, 7dd2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    7d8c:	f1b9 0f00 	cmp.w	r9, #0
    7d90:	d01f      	beq.n	7dd2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    7d92:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    7d96:	4640      	mov	r0, r8
    7d98:	f007 f946 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7d9c:	e001      	b.n	7da2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x656>
    7d9e:	e036      	b.n	7e0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c2>
    7da0:	e052      	b.n	7e48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6fc>
    7da2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7da6:	4401      	add	r1, r0
    7da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7dac:	fbb1 f0f0 	udiv	r0, r1, r0
    7db0:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7db4:	69e2      	ldr	r2, [r4, #28]
    7db6:	4408      	add	r0, r1
    7db8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7dbc:	4411      	add	r1, r2
    7dbe:	1a0e      	subs	r6, r1, r0
    7dc0:	4640      	mov	r0, r8
    7dc2:	f007 f923 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7dc6:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7dca:	1a08      	subs	r0, r1, r0
    7dcc:	4406      	add	r6, r0
    7dce:	3e20      	subs	r6, #32
    7dd0:	e006      	b.n	7de0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x694>
    7dd2:	69e1      	ldr	r1, [r4, #28]
    7dd4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7dd8:	4408      	add	r0, r1
    7dda:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7dde:	1a46      	subs	r6, r0, r1
    7de0:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    7de4:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    7de8:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    7dec:	fb01 0002 	mla	r0, r1, r2, r0
    7df0:	0040      	lsls	r0, r0, #1
    7df2:	8b61      	ldrh	r1, [r4, #26]
    7df4:	3060      	adds	r0, #96	; 0x60
    7df6:	4401      	add	r1, r0
    7df8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7dfc:	f006 f999 	bl	e132 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd6>
    7e00:	f8cb 0018 	str.w	r0, [fp, #24]
    7e04:	2001      	movs	r0, #1
    7e06:	4659      	mov	r1, fp
    7e08:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7e0c:	e066      	b.n	7edc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x790>
    7e0e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7e12:	6860      	ldr	r0, [r4, #4]
    7e14:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7e18:	1a46      	subs	r6, r0, r1
    7e1a:	eb02 000a 	add.w	r0, r2, sl
    7e1e:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    7e22:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    7e26:	1a80      	subs	r0, r0, r2
    7e28:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7e2c:	1e40      	subs	r0, r0, #1
    7e2e:	fb0c 3202 	mla	r2, ip, r2, r3
    7e32:	fb00 2001 	mla	r0, r0, r1, r2
    7e36:	0040      	lsls	r0, r0, #1
    7e38:	8b61      	ldrh	r1, [r4, #26]
    7e3a:	3060      	adds	r0, #96	; 0x60
    7e3c:	4401      	add	r1, r0
    7e3e:	fb06 f608 	mul.w	r6, r6, r8
    7e42:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7e46:	e044      	b.n	7ed2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x786>
    7e48:	6860      	ldr	r0, [r4, #4]
    7e4a:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7e4e:	fb00 f008 	mul.w	r0, r0, r8
    7e52:	fb08 0611 	mls	r6, r8, r1, r0
    7e56:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
    7e5a:	2824      	cmp	r0, #36	; 0x24
    7e5c:	d003      	beq.n	7e66 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x71a>
    7e5e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    7e62:	2824      	cmp	r0, #36	; 0x24
    7e64:	d109      	bne.n	7e7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72e>
    7e66:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7e6a:	1a38      	subs	r0, r7, r0
    7e6c:	b200      	sxth	r0, r0
    7e6e:	2800      	cmp	r0, #0
    7e70:	db03      	blt.n	7e7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72e>
    7e72:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    7e76:	b100      	cbz	r0, 7e7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72e>
    7e78:	9001      	str	r0, [sp, #4]
    7e7a:	9800      	ldr	r0, [sp, #0]
    7e7c:	b1f8      	cbz	r0, 7ebe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x772>
    7e7e:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7e82:	b9e0      	cbnz	r0, 7ebe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x772>
    7e84:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7e88:	2800      	cmp	r0, #0
    7e8a:	d07d      	beq.n	7f88 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x83c>
    7e8c:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7e90:	2800      	cmp	r0, #0
    7e92:	d079      	beq.n	7f88 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x83c>
    7e94:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7e98:	f007 f8c6 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7e9c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7ea0:	4401      	add	r1, r0
    7ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7ea6:	fbb1 f0f0 	udiv	r0, r1, r0
    7eaa:	1a36      	subs	r6, r6, r0
    7eac:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7eb0:	f007 f8ac 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7eb4:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7eb8:	1a08      	subs	r0, r1, r0
    7eba:	4406      	add	r6, r0
    7ebc:	3e20      	subs	r6, #32
    7ebe:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    7ec2:	eb01 000a 	add.w	r0, r1, sl
    7ec6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7eca:	4348      	muls	r0, r1
    7ecc:	0041      	lsls	r1, r0, #1
    7ece:	3160      	adds	r1, #96	; 0x60
    7ed0:	9801      	ldr	r0, [sp, #4]
    7ed2:	f006 f92e 	bl	e132 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd6>
    7ed6:	4659      	mov	r1, fp
    7ed8:	f8cb 0018 	str.w	r0, [fp, #24]
    7edc:	9804      	ldr	r0, [sp, #16]
    7ede:	6989      	ldr	r1, [r1, #24]
    7ee0:	1a33      	subs	r3, r6, r0
    7ee2:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    7ee6:	6860      	ldr	r0, [r4, #4]
    7ee8:	1b80      	subs	r0, r0, r6
    7eea:	f2a0 2045 	subw	r0, r0, #581	; 0x245
    7eee:	f8cb 001c 	str.w	r0, [fp, #28]
    7ef2:	4281      	cmp	r1, r0
    7ef4:	d800      	bhi.n	7ef8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ac>
    7ef6:	4608      	mov	r0, r1
    7ef8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7efc:	2000      	movs	r0, #0
    7efe:	7028      	strb	r0, [r5, #0]
    7f00:	2064      	movs	r0, #100	; 0x64
    7f02:	8128      	strh	r0, [r5, #8]
    7f04:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7f08:	4619      	mov	r1, r3
    7f0a:	34dc      	adds	r4, #220	; 0xdc
    7f0c:	f7f9 fcde 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7f10:	60e8      	str	r0, [r5, #12]
    7f12:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    7f16:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7f18:	4408      	add	r0, r1
    7f1a:	6068      	str	r0, [r5, #4]
    7f1c:	68e8      	ldr	r0, [r5, #12]
    7f1e:	67e0      	str	r0, [r4, #124]	; 0x7c
    7f20:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    7f24:	2001      	movs	r0, #1
    7f26:	72a8      	strb	r0, [r5, #10]
    7f28:	8aa1      	ldrh	r1, [r4, #20]
    7f2a:	3cdc      	subs	r4, #220	; 0xdc
    7f2c:	1bc9      	subs	r1, r1, r7
    7f2e:	b209      	sxth	r1, r1
    7f30:	2900      	cmp	r1, #0
    7f32:	dd01      	ble.n	7f38 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ec>
    7f34:	2103      	movs	r1, #3
    7f36:	72a9      	strb	r1, [r5, #10]
    7f38:	9903      	ldr	r1, [sp, #12]
    7f3a:	b331      	cbz	r1, 7f8a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x83e>
    7f3c:	f1b9 0f00 	cmp.w	r9, #0
    7f40:	d027      	beq.n	7f92 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    7f42:	bf00      	nop
    7f44:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    7f48:	b392      	cbz	r2, 7fb0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x864>
    7f4a:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    7f4e:	bf00      	nop
    7f50:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    7f54:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    7f58:	1c49      	adds	r1, r1, #1
    7f5a:	434b      	muls	r3, r1
    7f5c:	4293      	cmp	r3, r2
    7f5e:	d218      	bcs.n	7f92 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    7f60:	7aa9      	ldrb	r1, [r5, #10]
    7f62:	1e49      	subs	r1, r1, #1
    7f64:	2900      	cmp	r1, #0
    7f66:	dd14      	ble.n	7f92 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    7f68:	72a8      	strb	r0, [r5, #10]
    7f6a:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    7f6e:	2101      	movs	r1, #1
    7f70:	1c40      	adds	r0, r0, #1
    7f72:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    7f76:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    7f7a:	f7fc f8c5 	bl	4108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    7f7e:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7f82:	f000 0007 	and.w	r0, r0, #7
    7f86:	e001      	b.n	7f8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x840>
    7f88:	e013      	b.n	7fb2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x866>
    7f8a:	e015      	b.n	7fb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x86c>
    7f8c:	1c40      	adds	r0, r0, #1
    7f8e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    7f92:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7f96:	4629      	mov	r1, r5
    7f98:	f006 f8dd 	bl	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfa>
    7f9c:	b320      	cbz	r0, 7fe8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x89c>
    7f9e:	9807      	ldr	r0, [sp, #28]
    7fa0:	f080 0001 	eor.w	r0, r0, #1
    7fa4:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    7fa8:	2000      	movs	r0, #0
    7faa:	b009      	add	sp, #36	; 0x24
    7fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fb0:	e018      	b.n	7fe4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x898>
    7fb2:	f240 5122 	movw	r1, #1314	; 0x522
    7fb6:	e019      	b.n	7fec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7fb8:	f1b9 0f00 	cmp.w	r9, #0
    7fbc:	d1c2      	bne.n	7f44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f8>
    7fbe:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7fc2:	2800      	cmp	r0, #0
    7fc4:	d0e5      	beq.n	7f92 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    7fc6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7fca:	6860      	ldr	r0, [r4, #4]
    7fcc:	1a41      	subs	r1, r0, r1
    7fce:	4628      	mov	r0, r5
    7fd0:	f005 faa6 	bl	d520 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7fd4:	0400      	lsls	r0, r0, #16
    7fd6:	0c00      	lsrs	r0, r0, #16
    7fd8:	d0db      	beq.n	7f92 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    7fda:	9912      	ldr	r1, [sp, #72]	; 0x48
    7fdc:	b101      	cbz	r1, 7fe0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x894>
    7fde:	8008      	strh	r0, [r1, #0]
    7fe0:	2001      	movs	r0, #1
    7fe2:	e7e2      	b.n	7faa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85e>
    7fe4:	2100      	movs	r1, #0
    7fe6:	e7b3      	b.n	7f50 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x804>
    7fe8:	f240 5182 	movw	r1, #1410	; 0x582
    7fec:	2030      	movs	r0, #48	; 0x30
    7fee:	f7fb fffb 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ff2:	0000      	.short	0x0000
    7ff4:	200000f8 	.word	0x200000f8
    7ff8:	b570      	push	{r4, r5, r6, lr}
    7ffa:	4c1e      	ldr	r4, [pc, #120]	; (8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>)
    7ffc:	4d1e      	ldr	r5, [pc, #120]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    7ffe:	6860      	ldr	r0, [r4, #4]
    8000:	6168      	str	r0, [r5, #20]
    8002:	7c20      	ldrb	r0, [r4, #16]
    8004:	2803      	cmp	r0, #3
    8006:	d001      	beq.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    8008:	21d7      	movs	r1, #215	; 0xd7
    800a:	e02f      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    800c:	2909      	cmp	r1, #9
    800e:	d22c      	bcs.n	806a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a>
    8010:	e8df f001 	tbb	[pc, r1]
    8014:	1c1c1405 	.word	0x1c1c1405
    8018:	25202b18 	.word	0x25202b18
    801c:	0029      	.short	0x0029
    801e:	2000      	movs	r0, #0
    8020:	62a0      	str	r0, [r4, #40]	; 0x28
    8022:	f7fe fb91 	bl	6748 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    8026:	b110      	cbz	r0, 802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
    8028:	f44f 711c 	mov.w	r1, #624	; 0x270
    802c:	e01e      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    802e:	69a0      	ldr	r0, [r4, #24]
    8030:	38fa      	subs	r0, #250	; 0xfa
    8032:	f7fa fca7 	bl	2984 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8036:	2003      	movs	r0, #3
    8038:	70a8      	strb	r0, [r5, #2]
    803a:	bd70      	pop	{r4, r5, r6, pc}
    803c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8040:	f000 b954 	b.w	82ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ec>
    8044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8048:	f003 bb5a 	b.w	b700 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    804c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8050:	f7ff bbc4 	b.w	77dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>
    8054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8058:	2000      	movs	r0, #0
    805a:	f005 bee1 	b.w	de20 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    805e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8062:	f7ff bc11 	b.w	7888 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x13c>
    8066:	21f7      	movs	r1, #247	; 0xf7
    8068:	e000      	b.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    806a:	21fb      	movs	r1, #251	; 0xfb
    806c:	2030      	movs	r0, #48	; 0x30
    806e:	f7fb ffbb 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8072:	0000      	.short	0x0000
    8074:	20000f18 	.word	0x20000f18
    8078:	200000f8 	.word	0x200000f8
    807c:	4a05      	ldr	r2, [pc, #20]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    807e:	7c13      	ldrb	r3, [r2, #16]
    8080:	2b03      	cmp	r3, #3
    8082:	d104      	bne.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
    8084:	7812      	ldrb	r2, [r2, #0]
    8086:	4282      	cmp	r2, r0
    8088:	d101      	bne.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
    808a:	f7ff bfb5 	b.w	7ff8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>
    808e:	f000 b803 	b.w	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
    8092:	0000      	.short	0x0000
    8094:	20000f18 	.word	0x20000f18
    8098:	b570      	push	{r4, r5, r6, lr}
    809a:	460e      	mov	r6, r1
    809c:	4605      	mov	r5, r0
    809e:	f7fd fea3 	bl	5de8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    80a2:	2100      	movs	r1, #0
    80a4:	f005 f80d 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    80a8:	0004      	movs	r4, r0
    80aa:	d007      	beq.n	80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>
    80ac:	4628      	mov	r0, r5
    80ae:	f7fd fe9b 	bl	5de8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    80b2:	8821      	ldrh	r1, [r4, #0]
    80b4:	4288      	cmp	r0, r1
    80b6:	d003      	beq.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    80b8:	219b      	movs	r1, #155	; 0x9b
    80ba:	e061      	b.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    80bc:	219a      	movs	r1, #154	; 0x9a
    80be:	e05f      	b.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    80c0:	4d32      	ldr	r5, [pc, #200]	; (818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>)
    80c2:	2e09      	cmp	r6, #9
    80c4:	616c      	str	r4, [r5, #20]
    80c6:	d25e      	bcs.n	8186 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x186>
    80c8:	e8df f006 	tbb	[pc, r6]
    80cc:	3f3f3705 	.word	0x3f3f3705
    80d0:	4b445d3b 	.word	0x4b445d3b
    80d4:	0059      	.short	0x0059
    80d6:	2100      	movs	r1, #0
    80d8:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    80dc:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    80e0:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    80e4:	4620      	mov	r0, r4
    80e6:	b189      	cbz	r1, 810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>
    80e8:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    80ec:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
    80f0:	428a      	cmp	r2, r1
    80f2:	d106      	bne.n	8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
    80f4:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    80f8:	1a51      	subs	r1, r2, r1
    80fa:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    80fe:	4611      	mov	r1, r2
    8100:	e00d      	b.n	811e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11e>
    8102:	1a51      	subs	r1, r2, r1
    8104:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    8108:	b291      	uxth	r1, r2
    810a:	e008      	b.n	811e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11e>
    810c:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    8110:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
    8114:	1a89      	subs	r1, r1, r2
    8116:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    811a:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    811e:	f8a0 1070 	strh.w	r1, [r0, #112]	; 0x70
    8122:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    8126:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    812a:	f000 fac5 	bl	86b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    812e:	4620      	mov	r0, r4
    8130:	f000 f82e 	bl	8190 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x190>
    8134:	2002      	movs	r0, #2
    8136:	70a8      	strb	r0, [r5, #2]
    8138:	bd70      	pop	{r4, r5, r6, pc}
    813a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    813e:	f006 b866 	b.w	e20e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    8142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8146:	f003 badb 	b.w	b700 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    814a:	4620      	mov	r0, r4
    814c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8150:	f000 b852 	b.w	81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
    8154:	2001      	movs	r0, #1
    8156:	f7f9 fab7 	bl	16c8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    815a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    815e:	f005 b860 	b.w	d222 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    8162:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    8166:	2804      	cmp	r0, #4
    8168:	d001      	beq.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
    816a:	21bf      	movs	r1, #191	; 0xbf
    816c:	e008      	b.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    816e:	4620      	mov	r0, r4
    8170:	f005 fff3 	bl	e15a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfe>
    8174:	7968      	ldrb	r0, [r5, #5]
    8176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    817a:	f7fb bd9d 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    817e:	21c8      	movs	r1, #200	; 0xc8
    8180:	2030      	movs	r0, #48	; 0x30
    8182:	f7fb ff31 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8186:	21cc      	movs	r1, #204	; 0xcc
    8188:	e7fa      	b.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    818a:	0000      	.short	0x0000
    818c:	200000f8 	.word	0x200000f8
    8190:	b570      	push	{r4, r5, r6, lr}
    8192:	4604      	mov	r4, r0
    8194:	f7f9 fcdc 	bl	1b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8198:	2864      	cmp	r0, #100	; 0x64
    819a:	d901      	bls.n	81a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0>
    819c:	4605      	mov	r5, r0
    819e:	e000      	b.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    81a0:	2564      	movs	r5, #100	; 0x64
    81a2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    81a6:	2128      	movs	r1, #40	; 0x28
    81a8:	f005 ffb3 	bl	e112 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    81ac:	1946      	adds	r6, r0, r5
    81ae:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    81b2:	2128      	movs	r1, #40	; 0x28
    81b4:	f206 263f 	addw	r6, r6, #575	; 0x23f
    81b8:	f005 ffab 	bl	e112 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    81bc:	f200 22a3 	addw	r2, r0, #675	; 0x2a3
    81c0:	4620      	mov	r0, r4
    81c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    81c4:	f005 fd14 	bl	dbf0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    81c8:	4605      	mov	r5, r0
    81ca:	4632      	mov	r2, r6
    81cc:	4620      	mov	r0, r4
    81ce:	6861      	ldr	r1, [r4, #4]
    81d0:	f005 fd0e 	bl	dbf0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    81d4:	4907      	ldr	r1, [pc, #28]	; (81f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f4>)
    81d6:	4285      	cmp	r5, r0
    81d8:	60c8      	str	r0, [r1, #12]
    81da:	d200      	bcs.n	81de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1de>
    81dc:	4628      	mov	r0, r5
    81de:	6088      	str	r0, [r1, #8]
    81e0:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    81e4:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
    81e8:	6108      	str	r0, [r1, #16]
    81ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81ee:	f7fa bbc9 	b.w	2984 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    81f2:	0000      	.short	0x0000
    81f4:	200000f8 	.word	0x200000f8
    81f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    81fa:	4604      	mov	r4, r0
    81fc:	f003 fdfc 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8200:	4601      	mov	r1, r0
    8202:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    8206:	f7f9 fb97 	bl	1938 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    820a:	6861      	ldr	r1, [r4, #4]
    820c:	b111      	cbz	r1, 8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    820e:	fbb0 f0f1 	udiv	r0, r0, r1
    8212:	e000      	b.n	8216 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x216>
    8214:	2000      	movs	r0, #0
    8216:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
    821a:	290d      	cmp	r1, #13
    821c:	d00c      	beq.n	8238 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x238>
    821e:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
    8222:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    8226:	1813      	adds	r3, r2, r0
    8228:	1acb      	subs	r3, r1, r3
    822a:	b21b      	sxth	r3, r3
    822c:	2b00      	cmp	r3, #0
    822e:	db06      	blt.n	823e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23e>
    8230:	1c49      	adds	r1, r1, #1
    8232:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    8236:	e006      	b.n	8246 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x246>
    8238:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    823c:	e00c      	b.n	8258 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x258>
    823e:	1c40      	adds	r0, r0, #1
    8240:	4410      	add	r0, r2
    8242:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    8246:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    824a:	b940      	cbnz	r0, 825e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25e>
    824c:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    8250:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    8254:	4288      	cmp	r0, r1
    8256:	d102      	bne.n	825e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25e>
    8258:	1c40      	adds	r0, r0, #1
    825a:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    825e:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    8262:	ae01      	add	r6, sp, #4
    8264:	1c40      	adds	r0, r0, #1
    8266:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    826a:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    826e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    8272:	1a40      	subs	r0, r0, r1
    8274:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    8278:	1e40      	subs	r0, r0, #1
    827a:	4408      	add	r0, r1
    827c:	b285      	uxth	r5, r0
    827e:	e015      	b.n	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
    8280:	2300      	movs	r3, #0
    8282:	461a      	mov	r2, r3
    8284:	4620      	mov	r0, r4
    8286:	9600      	str	r6, [sp, #0]
    8288:	f7ff fc9a 	bl	7bc0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x474>
    828c:	2800      	cmp	r0, #0
    828e:	d02a      	beq.n	82e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e6>
    8290:	2801      	cmp	r0, #1
    8292:	d004      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    8294:	f240 6131 	movw	r1, #1585	; 0x631
    8298:	2030      	movs	r0, #48	; 0x30
    829a:	f7fb fea5 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    829e:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    82a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    82a6:	4408      	add	r0, r1
    82a8:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    82ac:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    82b0:	1a68      	subs	r0, r5, r1
    82b2:	b200      	sxth	r0, r0
    82b4:	2800      	cmp	r0, #0
    82b6:	dae3      	bge.n	8280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x280>
    82b8:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    82bc:	b188      	cbz	r0, 82e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e2>
    82be:	2008      	movs	r0, #8
    82c0:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    82c4:	2001      	movs	r0, #1
    82c6:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    82ca:	4620      	mov	r0, r4
    82cc:	f005 ffa1 	bl	e212 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    82d0:	4620      	mov	r0, r4
    82d2:	f005 ff42 	bl	e15a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xfe>
    82d6:	4804      	ldr	r0, [pc, #16]	; (82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>)
    82d8:	7940      	ldrb	r0, [r0, #5]
    82da:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    82de:	f7fb bceb 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    82e2:	203e      	movs	r0, #62	; 0x3e
    82e4:	e7ec      	b.n	82c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c0>
    82e6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    82e8:	200000f8 	.word	0x200000f8
    82ec:	b570      	push	{r4, r5, r6, lr}
    82ee:	2000      	movs	r0, #0
    82f0:	f7fe fa02 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    82f4:	b998      	cbnz	r0, 831e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31e>
    82f6:	f005 ff0e 	bl	e116 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    82fa:	4d0e      	ldr	r5, [pc, #56]	; (8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>)
    82fc:	4604      	mov	r4, r0
    82fe:	69a8      	ldr	r0, [r5, #24]
    8300:	42a0      	cmp	r0, r4
    8302:	d20b      	bcs.n	831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
    8304:	1a20      	subs	r0, r4, r0
    8306:	2104      	movs	r1, #4
    8308:	f7f9 f9ee 	bl	16e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    830c:	b130      	cbz	r0, 831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
    830e:	61ac      	str	r4, [r5, #24]
    8310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8314:	2100      	movs	r1, #0
    8316:	4608      	mov	r0, r1
    8318:	f7ff b8e4 	b.w	74e4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    831c:	61ac      	str	r4, [r5, #24]
    831e:	2000      	movs	r0, #0
    8320:	f7fe fa76 	bl	6810 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    8324:	2800      	cmp	r0, #0
    8326:	d004      	beq.n	8332 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x332>
    8328:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    832c:	2030      	movs	r0, #48	; 0x30
    832e:	f7fb fe5b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8332:	bd70      	pop	{r4, r5, r6, pc}
    8334:	20000f18 	.word	0x20000f18

00008338 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    8338:	b510      	push	{r4, lr}
    833a:	4604      	mov	r4, r0
    833c:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    8340:	6861      	ldr	r1, [r4, #4]
    8342:	4288      	cmp	r0, r1
    8344:	d109      	bne.n	835a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    8346:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    834a:	8922      	ldrh	r2, [r4, #8]
    834c:	4291      	cmp	r1, r2
    834e:	d104      	bne.n	835a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    8350:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    8354:	8962      	ldrh	r2, [r4, #10]
    8356:	4291      	cmp	r1, r2
    8358:	d015      	beq.n	8386 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    835a:	8821      	ldrh	r1, [r4, #0]
    835c:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    8360:	f004 fff9 	bl	d356 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8364:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    8368:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    836c:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    8370:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    8374:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    8378:	2001      	movs	r0, #1
    837a:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    837e:	4807      	ldr	r0, [pc, #28]	; (839c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    8380:	78c0      	ldrb	r0, [r0, #3]
    8382:	f7fb fc99 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8386:	2102      	movs	r1, #2
    8388:	4620      	mov	r0, r4
    838a:	f7fd fc99 	bl	5cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    838e:	2000      	movs	r0, #0
    8390:	f804 0f7d 	strb.w	r0, [r4, #125]!
    8394:	2003      	movs	r0, #3
    8396:	70e0      	strb	r0, [r4, #3]
    8398:	bd10      	pop	{r4, pc}
    839a:	0000      	.short	0x0000
    839c:	20000118 	.word	0x20000118

000083a0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    83a0:	4806      	ldr	r0, [pc, #24]	; (83bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    83a2:	4905      	ldr	r1, [pc, #20]	; (83b8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    83a4:	6501      	str	r1, [r0, #80]	; 0x50
    83a6:	4906      	ldr	r1, [pc, #24]	; (83c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    83a8:	6541      	str	r1, [r0, #84]	; 0x54
    83aa:	4807      	ldr	r0, [pc, #28]	; (83c8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    83ac:	4905      	ldr	r1, [pc, #20]	; (83c4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    83ae:	6501      	str	r1, [r0, #80]	; 0x50
    83b0:	4906      	ldr	r1, [pc, #24]	; (83cc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    83b2:	6541      	str	r1, [r0, #84]	; 0x54
    83b4:	4770      	bx	lr
    83b6:	0000      	.short	0x0000
    83b8:	00009789 	.word	0x00009789
    83bc:	2000012c 	.word	0x2000012c
    83c0:	0000984d 	.word	0x0000984d
    83c4:	00009e9d 	.word	0x00009e9d
    83c8:	20000190 	.word	0x20000190
    83cc:	00009ecd 	.word	0x00009ecd

000083d0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    83d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83d4:	460d      	mov	r5, r1
    83d6:	4607      	mov	r7, r0
    83d8:	2100      	movs	r1, #0
    83da:	f004 fe72 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    83de:	1e04      	subs	r4, r0, #0
    83e0:	d03f      	beq.n	8462 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x92>
    83e2:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    83e6:	2600      	movs	r6, #0
    83e8:	b1a8      	cbz	r0, 8416 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x46>
    83ea:	706e      	strb	r6, [r5, #1]
    83ec:	2007      	movs	r0, #7
    83ee:	7028      	strb	r0, [r5, #0]
    83f0:	e00b      	b.n	840a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x3a>
    83f2:	8466      	strh	r6, [r4, #34]	; 0x22
    83f4:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    83f8:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    83fc:	6068      	str	r0, [r5, #4]
    83fe:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    8402:	60a8      	str	r0, [r5, #8]
    8404:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    8408:	81a8      	strh	r0, [r5, #12]
    840a:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    840e:	2800      	cmp	r0, #0
    8410:	d1ef      	bne.n	83f2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x22>
    8412:	712e      	strb	r6, [r5, #4]
    8414:	e0c6      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    8416:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    841a:	b3a8      	cbz	r0, 8488 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb8>
    841c:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    8420:	280b      	cmp	r0, #11
    8422:	d016      	beq.n	8452 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x82>
    8424:	280c      	cmp	r0, #12
    8426:	d004      	beq.n	8432 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x62>
    8428:	f640 21ce 	movw	r1, #2766	; 0xace
    842c:	2031      	movs	r0, #49	; 0x31
    842e:	f7fb fddb 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8432:	8820      	ldrh	r0, [r4, #0]
    8434:	f7fc f9ee 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8438:	4607      	mov	r7, r0
    843a:	f004 fd07 	bl	ce4c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    843e:	b978      	cbnz	r0, 8460 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x90>
    8440:	706e      	strb	r6, [r5, #1]
    8442:	200c      	movs	r0, #12
    8444:	7028      	strb	r0, [r5, #0]
    8446:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    844a:	7128      	strb	r0, [r5, #4]
    844c:	8820      	ldrh	r0, [r4, #0]
    844e:	80e8      	strh	r0, [r5, #6]
    8450:	e014      	b.n	847c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xac>
    8452:	8820      	ldrh	r0, [r4, #0]
    8454:	f7fc f9de 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8458:	4607      	mov	r7, r0
    845a:	f004 fcf7 	bl	ce4c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    845e:	b110      	cbz	r0, 8466 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
    8460:	2000      	movs	r0, #0
    8462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8466:	706e      	strb	r6, [r5, #1]
    8468:	200b      	movs	r0, #11
    846a:	7028      	strb	r0, [r5, #0]
    846c:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    8470:	7128      	strb	r0, [r5, #4]
    8472:	8820      	ldrh	r0, [r4, #0]
    8474:	80e8      	strh	r0, [r5, #6]
    8476:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    847a:	7228      	strb	r0, [r5, #8]
    847c:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    8480:	4638      	mov	r0, r7
    8482:	f004 fcf8 	bl	ce76 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8486:	e08d      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    8488:	e7ff      	b.n	848a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xba>
    848a:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    848e:	b130      	cbz	r0, 849e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xce>
    8490:	706e      	strb	r6, [r5, #1]
    8492:	200e      	movs	r0, #14
    8494:	7028      	strb	r0, [r5, #0]
    8496:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    849a:	80af      	strh	r7, [r5, #4]
    849c:	e082      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    849e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    84a2:	b190      	cbz	r0, 84ca <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xfa>
    84a4:	706e      	strb	r6, [r5, #1]
    84a6:	2008      	movs	r0, #8
    84a8:	7028      	strb	r0, [r5, #0]
    84aa:	8820      	ldrh	r0, [r4, #0]
    84ac:	80a8      	strh	r0, [r5, #4]
    84ae:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    84b2:	f8c5 1006 	str.w	r1, [r5, #6]
    84b6:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    84ba:	f8c5 100a 	str.w	r1, [r5, #10]
    84be:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    84c2:	81e8      	strh	r0, [r5, #14]
    84c4:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    84c8:	e06c      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    84ca:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    84ce:	b168      	cbz	r0, 84ec <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x11c>
    84d0:	706e      	strb	r6, [r5, #1]
    84d2:	2016      	movs	r0, #22
    84d4:	7028      	strb	r0, [r5, #0]
    84d6:	e004      	b.n	84e2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x112>
    84d8:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    84dc:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    84e0:	6068      	str	r0, [r5, #4]
    84e2:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    84e6:	2800      	cmp	r0, #0
    84e8:	d1f6      	bne.n	84d8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x108>
    84ea:	e05b      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    84ec:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    84f0:	b170      	cbz	r0, 8510 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x140>
    84f2:	706e      	strb	r6, [r5, #1]
    84f4:	2006      	movs	r0, #6
    84f6:	7028      	strb	r0, [r5, #0]
    84f8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    84fc:	6068      	str	r0, [r5, #4]
    84fe:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    8502:	60a8      	str	r0, [r5, #8]
    8504:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8508:	60e8      	str	r0, [r5, #12]
    850a:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    850e:	e049      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    8510:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8514:	b1a0      	cbz	r0, 8540 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x170>
    8516:	706e      	strb	r6, [r5, #1]
    8518:	2012      	movs	r0, #18
    851a:	7028      	strb	r0, [r5, #0]
    851c:	e00b      	b.n	8536 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x166>
    851e:	bf00      	nop
    8520:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8524:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8528:	6068      	str	r0, [r5, #4]
    852a:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    852e:	60a8      	str	r0, [r5, #8]
    8530:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8534:	60e8      	str	r0, [r5, #12]
    8536:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    853a:	2800      	cmp	r0, #0
    853c:	d1f0      	bne.n	8520 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x150>
    853e:	e031      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    8540:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    8544:	b170      	cbz	r0, 8564 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x194>
    8546:	706e      	strb	r6, [r5, #1]
    8548:	2018      	movs	r0, #24
    854a:	7028      	strb	r0, [r5, #0]
    854c:	f884 61e0 	strb.w	r6, [r4, #480]	; 0x1e0
    8550:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    8554:	6068      	str	r0, [r5, #4]
    8556:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    855a:	60a8      	str	r0, [r5, #8]
    855c:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    8560:	81a8      	strh	r0, [r5, #12]
    8562:	e01f      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    8564:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8568:	b138      	cbz	r0, 857a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1aa>
    856a:	2019      	movs	r0, #25
    856c:	7028      	strb	r0, [r5, #0]
    856e:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8572:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    8576:	6068      	str	r0, [r5, #4]
    8578:	e014      	b.n	85a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1d4>
    857a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    857e:	2800      	cmp	r0, #0
    8580:	f43f af6f 	beq.w	8462 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x92>
    8584:	706e      	strb	r6, [r5, #1]
    8586:	2013      	movs	r0, #19
    8588:	7028      	strb	r0, [r5, #0]
    858a:	e007      	b.n	859c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1cc>
    858c:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8590:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8594:	6068      	str	r0, [r5, #4]
    8596:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    859a:	8128      	strh	r0, [r5, #8]
    859c:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    85a0:	2800      	cmp	r0, #0
    85a2:	d1f3      	bne.n	858c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1bc>
    85a4:	2001      	movs	r0, #1
    85a6:	e75c      	b.n	8462 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x92>

000085a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    85a8:	491b      	ldr	r1, [pc, #108]	; (8618 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    85aa:	70c8      	strb	r0, [r1, #3]
    85ac:	481c      	ldr	r0, [pc, #112]	; (8620 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    85ae:	491b      	ldr	r1, [pc, #108]	; (861c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    85b0:	6081      	str	r1, [r0, #8]
    85b2:	491c      	ldr	r1, [pc, #112]	; (8624 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    85b4:	6041      	str	r1, [r0, #4]
    85b6:	491c      	ldr	r1, [pc, #112]	; (8628 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    85b8:	6001      	str	r1, [r0, #0]
    85ba:	491c      	ldr	r1, [pc, #112]	; (862c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    85bc:	6281      	str	r1, [r0, #40]	; 0x28
    85be:	491c      	ldr	r1, [pc, #112]	; (8630 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    85c0:	62c1      	str	r1, [r0, #44]	; 0x2c
    85c2:	491c      	ldr	r1, [pc, #112]	; (8634 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    85c4:	60c1      	str	r1, [r0, #12]
    85c6:	491c      	ldr	r1, [pc, #112]	; (8638 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    85c8:	6181      	str	r1, [r0, #24]
    85ca:	491c      	ldr	r1, [pc, #112]	; (863c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    85cc:	6301      	str	r1, [r0, #48]	; 0x30
    85ce:	491c      	ldr	r1, [pc, #112]	; (8640 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    85d0:	6201      	str	r1, [r0, #32]
    85d2:	491c      	ldr	r1, [pc, #112]	; (8644 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    85d4:	64c1      	str	r1, [r0, #76]	; 0x4c
    85d6:	491c      	ldr	r1, [pc, #112]	; (8648 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    85d8:	6481      	str	r1, [r0, #72]	; 0x48
    85da:	491c      	ldr	r1, [pc, #112]	; (864c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    85dc:	6441      	str	r1, [r0, #68]	; 0x44
    85de:	491c      	ldr	r1, [pc, #112]	; (8650 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    85e0:	6341      	str	r1, [r0, #52]	; 0x34
    85e2:	491c      	ldr	r1, [pc, #112]	; (8654 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    85e4:	61c1      	str	r1, [r0, #28]
    85e6:	481d      	ldr	r0, [pc, #116]	; (865c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    85e8:	491b      	ldr	r1, [pc, #108]	; (8658 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    85ea:	6081      	str	r1, [r0, #8]
    85ec:	491c      	ldr	r1, [pc, #112]	; (8660 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    85ee:	61c1      	str	r1, [r0, #28]
    85f0:	491c      	ldr	r1, [pc, #112]	; (8664 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    85f2:	6241      	str	r1, [r0, #36]	; 0x24
    85f4:	491c      	ldr	r1, [pc, #112]	; (8668 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    85f6:	62c1      	str	r1, [r0, #44]	; 0x2c
    85f8:	491c      	ldr	r1, [pc, #112]	; (866c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    85fa:	6101      	str	r1, [r0, #16]
    85fc:	491c      	ldr	r1, [pc, #112]	; (8670 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    85fe:	6141      	str	r1, [r0, #20]
    8600:	491c      	ldr	r1, [pc, #112]	; (8674 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8602:	6441      	str	r1, [r0, #68]	; 0x44
    8604:	6341      	str	r1, [r0, #52]	; 0x34
    8606:	491c      	ldr	r1, [pc, #112]	; (8678 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8608:	6181      	str	r1, [r0, #24]
    860a:	491c      	ldr	r1, [pc, #112]	; (867c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    860c:	6301      	str	r1, [r0, #48]	; 0x30
    860e:	491c      	ldr	r1, [pc, #112]	; (8680 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    8610:	6481      	str	r1, [r0, #72]	; 0x48
    8612:	491c      	ldr	r1, [pc, #112]	; (8684 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    8614:	64c1      	str	r1, [r0, #76]	; 0x4c
    8616:	4770      	bx	lr
    8618:	20000118 	.word	0x20000118
    861c:	00009bed 	.word	0x00009bed
    8620:	2000012c 	.word	0x2000012c
    8624:	0000955d 	.word	0x0000955d
    8628:	000095b9 	.word	0x000095b9
    862c:	00009915 	.word	0x00009915
    8630:	00009959 	.word	0x00009959
    8634:	00009665 	.word	0x00009665
    8638:	00009bc5 	.word	0x00009bc5
    863c:	00009d09 	.word	0x00009d09
    8640:	00009705 	.word	0x00009705
    8644:	000098e9 	.word	0x000098e9
    8648:	000098bd 	.word	0x000098bd
    864c:	00009b85 	.word	0x00009b85
    8650:	00009bb5 	.word	0x00009bb5
    8654:	00009c21 	.word	0x00009c21
    8658:	0000a085 	.word	0x0000a085
    865c:	20000190 	.word	0x20000190
    8660:	0000a0ad 	.word	0x0000a0ad
    8664:	00009e6d 	.word	0x00009e6d
    8668:	00009f45 	.word	0x00009f45
    866c:	00009e41 	.word	0x00009e41
    8670:	00009fed 	.word	0x00009fed
    8674:	00009fc9 	.word	0x00009fc9
    8678:	0000a011 	.word	0x0000a011
    867c:	0000a105 	.word	0x0000a105
    8680:	00009efd 	.word	0x00009efd
    8684:	00009f2d 	.word	0x00009f2d

00008688 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8688:	4806      	ldr	r0, [pc, #24]	; (86a4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    868a:	4905      	ldr	r1, [pc, #20]	; (86a0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    868c:	6581      	str	r1, [r0, #88]	; 0x58
    868e:	4906      	ldr	r1, [pc, #24]	; (86a8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8690:	6601      	str	r1, [r0, #96]	; 0x60
    8692:	4807      	ldr	r0, [pc, #28]	; (86b0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8694:	4905      	ldr	r1, [pc, #20]	; (86ac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8696:	6581      	str	r1, [r0, #88]	; 0x58
    8698:	4906      	ldr	r1, [pc, #24]	; (86b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    869a:	65c1      	str	r1, [r0, #92]	; 0x5c
    869c:	4770      	bx	lr
    869e:	0000      	.short	0x0000
    86a0:	00009979 	.word	0x00009979
    86a4:	2000012c 	.word	0x2000012c
    86a8:	00009a41 	.word	0x00009a41
    86ac:	00009f71 	.word	0x00009f71
    86b0:	20000190 	.word	0x20000190
    86b4:	00009fa1 	.word	0x00009fa1

000086b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    86b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86bc:	2701      	movs	r7, #1
    86be:	4c6f      	ldr	r4, [pc, #444]	; (887c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c4>)
    86c0:	2500      	movs	r5, #0
    86c2:	f367 0107 	bfi	r1, r7, #0, #8
    86c6:	80a5      	strh	r5, [r4, #4]
    86c8:	7065      	strb	r5, [r4, #1]
    86ca:	70a5      	strb	r5, [r4, #2]
    86cc:	7025      	strb	r5, [r4, #0]
    86ce:	60a0      	str	r0, [r4, #8]
    86d0:	4689      	mov	r9, r1
    86d2:	4680      	mov	r8, r0
    86d4:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    86d8:	8800      	ldrh	r0, [r0, #0]
    86da:	f7fc f8b1 	bl	4840 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    86de:	b180      	cbz	r0, 8702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    86e0:	68a0      	ldr	r0, [r4, #8]
    86e2:	8800      	ldrh	r0, [r0, #0]
    86e4:	f7fc fa88 	bl	4bf8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    86e8:	68a0      	ldr	r0, [r4, #8]
    86ea:	8800      	ldrh	r0, [r0, #0]
    86ec:	f7fc fa2c 	bl	4b48 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    86f0:	68a0      	ldr	r0, [r4, #8]
    86f2:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    86f6:	b1a9      	cbz	r1, 8724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    86f8:	3070      	adds	r0, #112	; 0x70
    86fa:	f005 fd99 	bl	e230 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    86fe:	b128      	cbz	r0, 870c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x54>
    8700:	e010      	b.n	8724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    8702:	f640 31a3 	movw	r1, #2979	; 0xba3
    8706:	2031      	movs	r0, #49	; 0x31
    8708:	f7fb fc6e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    870c:	68a0      	ldr	r0, [r4, #8]
    870e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8712:	b139      	cbz	r1, 8724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    8714:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    8718:	2301      	movs	r3, #1
    871a:	4619      	mov	r1, r3
    871c:	3070      	adds	r0, #112	; 0x70
    871e:	f004 fe33 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8722:	b178      	cbz	r0, 8744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    8724:	68a0      	ldr	r0, [r4, #8]
    8726:	3070      	adds	r0, #112	; 0x70
    8728:	f005 fd82 	bl	e230 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    872c:	b120      	cbz	r0, 8738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    872e:	68a0      	ldr	r0, [r4, #8]
    8730:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    8734:	f000 fb82 	bl	8e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    8738:	68a0      	ldr	r0, [r4, #8]
    873a:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    873e:	b189      	cbz	r1, 8764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    8740:	80e5      	strh	r5, [r4, #6]
    8742:	e018      	b.n	8776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe>
    8744:	68a0      	ldr	r0, [r4, #8]
    8746:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    874a:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    874e:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8752:	2100      	movs	r1, #0
    8754:	2002      	movs	r0, #2
    8756:	f000 fdfb 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    875a:	68a0      	ldr	r0, [r4, #8]
    875c:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8760:	2002      	movs	r0, #2
    8762:	e7e7      	b.n	8734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    8764:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8768:	b919      	cbnz	r1, 8772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba>
    876a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    876c:	8902      	ldrh	r2, [r0, #8]
    876e:	4291      	cmp	r1, r2
    8770:	d800      	bhi.n	8774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc>
    8772:	8901      	ldrh	r1, [r0, #8]
    8774:	80e1      	strh	r1, [r4, #6]
    8776:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    877a:	1e49      	subs	r1, r1, #1
    877c:	b28e      	uxth	r6, r1
    877e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8782:	4431      	add	r1, r6
    8784:	f820 195c 	strh.w	r1, [r0], #-92
    8788:	8801      	ldrh	r1, [r0, #0]
    878a:	4431      	add	r1, r6
    878c:	8001      	strh	r1, [r0, #0]
    878e:	f001 fce7 	bl	a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa8>
    8792:	b120      	cbz	r0, 879e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6>
    8794:	68a0      	ldr	r0, [r4, #8]
    8796:	f850 1f90 	ldr.w	r1, [r0, #144]!
    879a:	4431      	add	r1, r6
    879c:	6001      	str	r1, [r0, #0]
    879e:	68a0      	ldr	r0, [r4, #8]
    87a0:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    87a4:	2901      	cmp	r1, #1
    87a6:	d802      	bhi.n	87ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    87a8:	1c49      	adds	r1, r1, #1
    87aa:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    87ae:	b10e      	cbz	r6, 87b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc>
    87b0:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    87b4:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    87b8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    87bc:	290b      	cmp	r1, #11
    87be:	d001      	beq.n	87c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c>
    87c0:	290c      	cmp	r1, #12
    87c2:	d116      	bne.n	87f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    87c4:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
    87c8:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    87cc:	1ad2      	subs	r2, r2, r3
    87ce:	b212      	sxth	r2, r2
    87d0:	2a00      	cmp	r2, #0
    87d2:	db0e      	blt.n	87f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    87d4:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    87d8:	60c1      	str	r1, [r0, #12]
    87da:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    87de:	7401      	strb	r1, [r0, #16]
    87e0:	2103      	movs	r1, #3
    87e2:	f7fd fa6d 	bl	5cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    87e6:	68a0      	ldr	r0, [r4, #8]
    87e8:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    87ec:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    87f0:	e024      	b.n	883c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184>
    87f2:	2924      	cmp	r1, #36	; 0x24
    87f4:	d10f      	bne.n	8816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e>
    87f6:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
    87fa:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    87fe:	1a89      	subs	r1, r1, r2
    8800:	b209      	sxth	r1, r1
    8802:	2900      	cmp	r1, #0
    8804:	db07      	blt.n	8816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e>
    8806:	f000 fe4f 	bl	94a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    880a:	68a0      	ldr	r0, [r4, #8]
    880c:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8810:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8814:	e012      	b.n	883c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184>
    8816:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    881a:	2924      	cmp	r1, #36	; 0x24
    881c:	d001      	beq.n	8822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    881e:	2925      	cmp	r1, #37	; 0x25
    8820:	d10c      	bne.n	883c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184>
    8822:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
    8826:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    882a:	1a08      	subs	r0, r1, r0
    882c:	b200      	sxth	r0, r0
    882e:	2800      	cmp	r0, #0
    8830:	db04      	blt.n	883c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184>
    8832:	f000 fe39 	bl	94a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    8836:	68a0      	ldr	r0, [r4, #8]
    8838:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    883c:	68a0      	ldr	r0, [r4, #8]
    883e:	4601      	mov	r1, r0
    8840:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8844:	3070      	adds	r0, #112	; 0x70
    8846:	f004 fe38 	bl	d4ba <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    884a:	480d      	ldr	r0, [pc, #52]	; (8880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8>)
    884c:	9000      	str	r0, [sp, #0]
    884e:	4b0d      	ldr	r3, [pc, #52]	; (8884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc>)
    8850:	4a0d      	ldr	r2, [pc, #52]	; (8888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0>)
    8852:	4641      	mov	r1, r8
    8854:	4648      	mov	r0, r9
    8856:	f7fc fa79 	bl	4d4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    885a:	68a0      	ldr	r0, [r4, #8]
    885c:	2301      	movs	r3, #1
    885e:	2105      	movs	r1, #5
    8860:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8864:	3070      	adds	r0, #112	; 0x70
    8866:	f004 fd8f 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    886a:	2800      	cmp	r0, #0
    886c:	d003      	beq.n	8876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    886e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8872:	f7fc ba65 	b.w	4d40 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    887a:	0000      	.short	0x0000
    887c:	20000118 	.word	0x20000118
    8880:	00008fed 	.word	0x00008fed
    8884:	00008b01 	.word	0x00008b01
    8888:	000093f5 	.word	0x000093f5
    888c:	b570      	push	{r4, r5, r6, lr}
    888e:	4c0f      	ldr	r4, [pc, #60]	; (88cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x214>)
    8890:	68a5      	ldr	r5, [r4, #8]
    8892:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
    8896:	2920      	cmp	r1, #32
    8898:	d002      	beq.n	88a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e8>
    889a:	2926      	cmp	r1, #38	; 0x26
    889c:	d003      	beq.n	88a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee>
    889e:	e011      	b.n	88c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    88a0:	f000 fe38 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    88a4:	e008      	b.n	88b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>
    88a6:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
    88aa:	2301      	movs	r3, #1
    88ac:	210b      	movs	r1, #11
    88ae:	f105 0070 	add.w	r0, r5, #112	; 0x70
    88b2:	f004 fd69 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88b6:	b138      	cbz	r0, 88c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x210>
    88b8:	68a1      	ldr	r1, [r4, #8]
    88ba:	2000      	movs	r0, #0
    88bc:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    88c0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    88c4:	2000      	movs	r0, #0
    88c6:	bd70      	pop	{r4, r5, r6, pc}
    88c8:	202a      	movs	r0, #42	; 0x2a
    88ca:	e7e9      	b.n	88a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e8>
    88cc:	20000118 	.word	0x20000118
    88d0:	4804      	ldr	r0, [pc, #16]	; (88e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x22c>)
    88d2:	2100      	movs	r1, #0
    88d4:	6880      	ldr	r0, [r0, #8]
    88d6:	f820 1fa8 	strh.w	r1, [r0, #168]!
    88da:	7881      	ldrb	r1, [r0, #2]
    88dc:	1c49      	adds	r1, r1, #1
    88de:	7081      	strb	r1, [r0, #2]
    88e0:	4770      	bx	lr
    88e2:	0000      	.short	0x0000
    88e4:	20000118 	.word	0x20000118
    88e8:	4807      	ldr	r0, [pc, #28]	; (8908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>)
    88ea:	b510      	push	{r4, lr}
    88ec:	6881      	ldr	r1, [r0, #8]
    88ee:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    88f2:	1e40      	subs	r0, r0, #1
    88f4:	b240      	sxtb	r0, r0
    88f6:	7008      	strb	r0, [r1, #0]
    88f8:	2800      	cmp	r0, #0
    88fa:	da04      	bge.n	8906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24e>
    88fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
    8900:	2031      	movs	r0, #49	; 0x31
    8902:	f7fb fb71 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8906:	bd10      	pop	{r4, pc}
    8908:	20000118 	.word	0x20000118
    890c:	4917      	ldr	r1, [pc, #92]	; (896c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b4>)
    890e:	b510      	push	{r4, lr}
    8910:	6889      	ldr	r1, [r1, #8]
    8912:	f891 207d 	ldrb.w	r2, [r1, #125]	; 0x7d
    8916:	b1b8      	cbz	r0, 8948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x290>
    8918:	2a10      	cmp	r2, #16
    891a:	d006      	beq.n	892a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    891c:	2a14      	cmp	r2, #20
    891e:	d007      	beq.n	8930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8920:	2a15      	cmp	r2, #21
    8922:	d008      	beq.n	8936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    8924:	2a1b      	cmp	r2, #27
    8926:	d11c      	bne.n	8962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    8928:	e008      	b.n	893c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>
    892a:	2101      	movs	r1, #1
    892c:	200b      	movs	r0, #11
    892e:	e007      	b.n	8940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    8930:	f001 fa48 	bl	9dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170c>
    8934:	e006      	b.n	8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    8936:	f000 fd29 	bl	938c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    893a:	e003      	b.n	8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    893c:	2101      	movs	r1, #1
    893e:	2006      	movs	r0, #6
    8940:	f000 fd06 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8944:	2001      	movs	r0, #1
    8946:	bd10      	pop	{r4, pc}
    8948:	2a21      	cmp	r2, #33	; 0x21
    894a:	d10a      	bne.n	8962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    894c:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8950:	2802      	cmp	r0, #2
    8952:	d008      	beq.n	8966 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8954:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8958:	2801      	cmp	r0, #1
    895a:	d102      	bne.n	8962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    895c:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8960:	b108      	cbz	r0, 8966 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8962:	2000      	movs	r0, #0
    8964:	bd10      	pop	{r4, pc}
    8966:	2101      	movs	r1, #1
    8968:	2017      	movs	r0, #23
    896a:	e7e9      	b.n	8940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    896c:	20000118 	.word	0x20000118
    8970:	b510      	push	{r4, lr}
    8972:	bbe8      	cbnz	r0, 89f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    8974:	4c31      	ldr	r4, [pc, #196]	; (8a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>)
    8976:	68a0      	ldr	r0, [r4, #8]
    8978:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    897c:	07ca      	lsls	r2, r1, #31
    897e:	d002      	beq.n	8986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    8980:	2101      	movs	r1, #1
    8982:	2009      	movs	r0, #9
    8984:	e052      	b.n	8a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>
    8986:	078a      	lsls	r2, r1, #30
    8988:	d50a      	bpl.n	89a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e8>
    898a:	2101      	movs	r1, #1
    898c:	200c      	movs	r0, #12
    898e:	f000 fcdf 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8992:	68a0      	ldr	r0, [r4, #8]
    8994:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8998:	f041 0101 	orr.w	r1, r1, #1
    899c:	7001      	strb	r1, [r0, #0]
    899e:	e047      	b.n	8a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    89a0:	074a      	lsls	r2, r1, #29
    89a2:	d502      	bpl.n	89aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    89a4:	2101      	movs	r1, #1
    89a6:	2013      	movs	r0, #19
    89a8:	e040      	b.n	8a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>
    89aa:	070a      	lsls	r2, r1, #28
    89ac:	d505      	bpl.n	89ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x302>
    89ae:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    89b2:	7141      	strb	r1, [r0, #5]
    89b4:	2101      	movs	r1, #1
    89b6:	2007      	movs	r0, #7
    89b8:	e038      	b.n	8a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>
    89ba:	f011 0f30 	tst.w	r1, #48	; 0x30
    89be:	d03b      	beq.n	8a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    89c0:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    89c4:	b9a1      	cbnz	r1, 89f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    89c6:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    89ca:	b1e1      	cbz	r1, 8a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34e>
    89cc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    89d0:	2924      	cmp	r1, #36	; 0x24
    89d2:	d02f      	beq.n	8a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x37c>
    89d4:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    89d8:	2924      	cmp	r1, #36	; 0x24
    89da:	d02b      	beq.n	8a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x37c>
    89dc:	f05f 0300 	movs.w	r3, #0
    89e0:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    89e4:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    89e8:	f005 f8f4 	bl	dbd4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    89ec:	68a1      	ldr	r1, [r4, #8]
    89ee:	e000      	b.n	89f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x33a>
    89f0:	e022      	b.n	8a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    89f2:	f811 0f7e 	ldrb.w	r0, [r1, #126]!
    89f6:	f020 0020 	bic.w	r0, r0, #32
    89fa:	f040 0010 	orr.w	r0, r0, #16
    89fe:	7008      	strb	r0, [r1, #0]
    8a00:	2000      	movs	r0, #0
    8a02:	f881 011e 	strb.w	r0, [r1, #286]	; 0x11e
    8a06:	68a0      	ldr	r0, [r4, #8]
    8a08:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8a0c:	06c9      	lsls	r1, r1, #27
    8a0e:	d513      	bpl.n	8a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8a10:	f005 f8fb 	bl	dc0a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8a14:	f000 f908 	bl	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    8a18:	68a1      	ldr	r1, [r4, #8]
    8a1a:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8a1e:	8bc2      	ldrh	r2, [r0, #30]
    8a20:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8a24:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8a26:	8048      	strh	r0, [r1, #2]
    8a28:	2101      	movs	r1, #1
    8a2a:	2015      	movs	r0, #21
    8a2c:	f000 fc90 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8a30:	2001      	movs	r0, #1
    8a32:	bd10      	pop	{r4, pc}
    8a34:	2301      	movs	r3, #1
    8a36:	e7d3      	b.n	89e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x328>
    8a38:	2000      	movs	r0, #0
    8a3a:	bd10      	pop	{r4, pc}
    8a3c:	20000118 	.word	0x20000118
    8a40:	b570      	push	{r4, r5, r6, lr}
    8a42:	460d      	mov	r5, r1
    8a44:	4606      	mov	r6, r0
    8a46:	f004 ff1a 	bl	d87e <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8a4a:	4604      	mov	r4, r0
    8a4c:	4630      	mov	r0, r6
    8a4e:	f004 ff22 	bl	d896 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8a52:	4629      	mov	r1, r5
    8a54:	f000 f81e 	bl	8a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>
    8a58:	b1b8      	cbz	r0, 8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    8a5a:	4620      	mov	r0, r4
    8a5c:	f004 fd40 	bl	d4e0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8a60:	0001      	movs	r1, r0
    8a62:	d00d      	beq.n	8a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8a64:	480a      	ldr	r0, [pc, #40]	; (8a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>)
    8a66:	6880      	ldr	r0, [r0, #8]
    8a68:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    8a6c:	428a      	cmp	r2, r1
    8a6e:	d007      	beq.n	8a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8a70:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8a74:	2901      	cmp	r1, #1
    8a76:	d005      	beq.n	8a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    8a78:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8a7c:	4220      	tst	r0, r4
    8a7e:	d004      	beq.n	8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    8a80:	2001      	movs	r0, #1
    8a82:	bd70      	pop	{r4, r5, r6, pc}
    8a84:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8a88:	e7f8      	b.n	8a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c4>
    8a8a:	2000      	movs	r0, #0
    8a8c:	bd70      	pop	{r4, r5, r6, pc}
    8a8e:	0000      	.short	0x0000
    8a90:	20000118 	.word	0x20000118
    8a94:	b570      	push	{r4, r5, r6, lr}
    8a96:	460d      	mov	r5, r1
    8a98:	4604      	mov	r4, r0
    8a9a:	f004 fd21 	bl	d4e0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8a9e:	b350      	cbz	r0, 8af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    8aa0:	4916      	ldr	r1, [pc, #88]	; (8afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x444>)
    8aa2:	6889      	ldr	r1, [r1, #8]
    8aa4:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    8aa8:	4282      	cmp	r2, r0
    8aaa:	d024      	beq.n	8af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    8aac:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8ab0:	2b01      	cmp	r3, #1
    8ab2:	d005      	beq.n	8ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x408>
    8ab4:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    8ab8:	4223      	tst	r3, r4
    8aba:	d013      	beq.n	8ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42c>
    8abc:	b11d      	cbz	r5, 8ac6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40e>
    8abe:	e01a      	b.n	8af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    8ac0:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8ac4:	e7f8      	b.n	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x400>
    8ac6:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    8aca:	4221      	tst	r1, r4
    8acc:	d113      	bne.n	8af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    8ace:	b15a      	cbz	r2, 8ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    8ad0:	2a04      	cmp	r2, #4
    8ad2:	d00e      	beq.n	8af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43a>
    8ad4:	2804      	cmp	r0, #4
    8ad6:	d00c      	beq.n	8af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43a>
    8ad8:	2a08      	cmp	r2, #8
    8ada:	d00a      	beq.n	8af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43a>
    8adc:	2808      	cmp	r0, #8
    8ade:	d008      	beq.n	8af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43a>
    8ae0:	4282      	cmp	r2, r0
    8ae2:	d908      	bls.n	8af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    8ae4:	2000      	movs	r0, #0
    8ae6:	bd70      	pop	{r4, r5, r6, pc}
    8ae8:	f240 1181 	movw	r1, #385	; 0x181
    8aec:	2006      	movs	r0, #6
    8aee:	f7fb fa7b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8af2:	4282      	cmp	r2, r0
    8af4:	d3f6      	bcc.n	8ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42c>
    8af6:	2001      	movs	r0, #1
    8af8:	bd70      	pop	{r4, r5, r6, pc}
    8afa:	0000      	.short	0x0000
    8afc:	20000118 	.word	0x20000118
    8b00:	490d      	ldr	r1, [pc, #52]	; (8b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x480>)
    8b02:	4602      	mov	r2, r0
    8b04:	7848      	ldrb	r0, [r1, #1]
    8b06:	788b      	ldrb	r3, [r1, #2]
    8b08:	4318      	orrs	r0, r3
    8b0a:	d113      	bne.n	8b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>
    8b0c:	4608      	mov	r0, r1
    8b0e:	6880      	ldr	r0, [r0, #8]
    8b10:	b142      	cbz	r2, 8b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46c>
    8b12:	7909      	ldrb	r1, [r1, #4]
    8b14:	0709      	lsls	r1, r1, #28
    8b16:	d503      	bpl.n	8b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    8b18:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    8b1c:	2808      	cmp	r0, #8
    8b1e:	d009      	beq.n	8b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>
    8b20:	2001      	movs	r0, #1
    8b22:	4770      	bx	lr
    8b24:	f100 0128 	add.w	r1, r0, #40	; 0x28
    8b28:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8b2a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    8b2c:	428a      	cmp	r2, r1
    8b2e:	d801      	bhi.n	8b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>
    8b30:	f7fe bdea 	b.w	7708 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8b34:	2000      	movs	r0, #0
    8b36:	4770      	bx	lr
    8b38:	20000118 	.word	0x20000118
    8b3c:	b570      	push	{r4, r5, r6, lr}
    8b3e:	4c39      	ldr	r4, [pc, #228]	; (8c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56c>)
    8b40:	68a0      	ldr	r0, [r4, #8]
    8b42:	3070      	adds	r0, #112	; 0x70
    8b44:	f005 fb74 	bl	e230 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b48:	2800      	cmp	r0, #0
    8b4a:	d16a      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8b4c:	7860      	ldrb	r0, [r4, #1]
    8b4e:	2800      	cmp	r0, #0
    8b50:	d167      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8b52:	68a0      	ldr	r0, [r4, #8]
    8b54:	2301      	movs	r3, #1
    8b56:	4619      	mov	r1, r3
    8b58:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    8b5c:	3070      	adds	r0, #112	; 0x70
    8b5e:	f004 fc13 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b62:	2800      	cmp	r0, #0
    8b64:	d15d      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8b66:	68a0      	ldr	r0, [r4, #8]
    8b68:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8b6c:	b149      	cbz	r1, 8b82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ca>
    8b6e:	2100      	movs	r1, #0
    8b70:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8b74:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8b78:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8b7c:	2100      	movs	r1, #0
    8b7e:	2002      	movs	r0, #2
    8b80:	e045      	b.n	8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x556>
    8b82:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8b86:	2301      	movs	r3, #1
    8b88:	2104      	movs	r1, #4
    8b8a:	3070      	adds	r0, #112	; 0x70
    8b8c:	f004 fbfc 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b90:	4605      	mov	r5, r0
    8b92:	f7ff feed 	bl	8970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
    8b96:	2800      	cmp	r0, #0
    8b98:	d143      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8b9a:	4628      	mov	r0, r5
    8b9c:	f7ff feb6 	bl	890c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x254>
    8ba0:	2800      	cmp	r0, #0
    8ba2:	d13e      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8ba4:	68a0      	ldr	r0, [r4, #8]
    8ba6:	2301      	movs	r3, #1
    8ba8:	2100      	movs	r1, #0
    8baa:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    8bae:	3070      	adds	r0, #112	; 0x70
    8bb0:	f004 fbea 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bb4:	b178      	cbz	r0, 8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x51e>
    8bb6:	68a0      	ldr	r0, [r4, #8]
    8bb8:	2301      	movs	r3, #1
    8bba:	2104      	movs	r1, #4
    8bbc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8bc0:	3070      	adds	r0, #112	; 0x70
    8bc2:	f004 fbe1 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bc6:	b930      	cbnz	r0, 8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x51e>
    8bc8:	68a0      	ldr	r0, [r4, #8]
    8bca:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    8bce:	b110      	cbz	r0, 8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x51e>
    8bd0:	2100      	movs	r1, #0
    8bd2:	2012      	movs	r0, #18
    8bd4:	e01b      	b.n	8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x556>
    8bd6:	68a0      	ldr	r0, [r4, #8]
    8bd8:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    8bdc:	290a      	cmp	r1, #10
    8bde:	d01a      	beq.n	8c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8be0:	2d00      	cmp	r5, #0
    8be2:	d11e      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8be4:	f000 fb14 	bl	9210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb58>
    8be8:	2800      	cmp	r0, #0
    8bea:	d11a      	bne.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8bec:	68a0      	ldr	r0, [r4, #8]
    8bee:	2301      	movs	r3, #1
    8bf0:	2100      	movs	r1, #0
    8bf2:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    8bf6:	3070      	adds	r0, #112	; 0x70
    8bf8:	f004 fbc6 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bfc:	2800      	cmp	r0, #0
    8bfe:	d010      	beq.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8c00:	68a0      	ldr	r0, [r4, #8]
    8c02:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    8c06:	2800      	cmp	r0, #0
    8c08:	d00b      	beq.n	8c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56a>
    8c0a:	2100      	movs	r1, #0
    8c0c:	20ff      	movs	r0, #255	; 0xff
    8c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c12:	f000 bb9d 	b.w	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8c16:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    8c1a:	7101      	strb	r1, [r0, #4]
    8c1c:	2100      	movs	r1, #0
    8c1e:	2007      	movs	r0, #7
    8c20:	e7f5      	b.n	8c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x556>
    8c22:	bd70      	pop	{r4, r5, r6, pc}
    8c24:	20000118 	.word	0x20000118
    8c28:	b510      	push	{r4, lr}
    8c2a:	4c0a      	ldr	r4, [pc, #40]	; (8c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59c>)
    8c2c:	68a1      	ldr	r1, [r4, #8]
    8c2e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    8c32:	2801      	cmp	r0, #1
    8c34:	d00a      	beq.n	8c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x594>
    8c36:	8808      	ldrh	r0, [r1, #0]
    8c38:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8c3c:	3128      	adds	r1, #40	; 0x28
    8c3e:	f004 ffa5 	bl	db8c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8c42:	78e0      	ldrb	r0, [r4, #3]
    8c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c48:	f7fb b836 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8c4c:	2002      	movs	r0, #2
    8c4e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8c52:	bd10      	pop	{r4, pc}
    8c54:	20000118 	.word	0x20000118
    8c58:	b510      	push	{r4, lr}
    8c5a:	4c25      	ldr	r4, [pc, #148]	; (8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>)
    8c5c:	7860      	ldrb	r0, [r4, #1]
    8c5e:	bb78      	cbnz	r0, 8cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>
    8c60:	f000 f8a4 	bl	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f4>
    8c64:	f000 f848 	bl	8cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>
    8c68:	7060      	strb	r0, [r4, #1]
    8c6a:	bb48      	cbnz	r0, 8cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>
    8c6c:	88a0      	ldrh	r0, [r4, #4]
    8c6e:	0741      	lsls	r1, r0, #29
    8c70:	d506      	bpl.n	8c80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>
    8c72:	68a1      	ldr	r1, [r4, #8]
    8c74:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
    8c78:	2907      	cmp	r1, #7
    8c7a:	d101      	bne.n	8c80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>
    8c7c:	2101      	movs	r1, #1
    8c7e:	7021      	strb	r1, [r4, #0]
    8c80:	0780      	lsls	r0, r0, #30
    8c82:	d512      	bpl.n	8caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f2>
    8c84:	68e0      	ldr	r0, [r4, #12]
    8c86:	78c0      	ldrb	r0, [r0, #3]
    8c88:	2819      	cmp	r0, #25
    8c8a:	d205      	bcs.n	8c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e0>
    8c8c:	4919      	ldr	r1, [pc, #100]	; (8cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    8c8e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8c92:	b109      	cbz	r1, 8c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e0>
    8c94:	4788      	blx	r1
    8c96:	e008      	b.n	8caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f2>
    8c98:	28ff      	cmp	r0, #255	; 0xff
    8c9a:	d004      	beq.n	8ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ee>
    8c9c:	f240 713a 	movw	r1, #1850	; 0x73a
    8ca0:	2031      	movs	r0, #49	; 0x31
    8ca2:	f7fb f9a1 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ca6:	f001 f8bf 	bl	9e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    8caa:	7920      	ldrb	r0, [r4, #4]
    8cac:	06c0      	lsls	r0, r0, #27
    8cae:	d507      	bpl.n	8cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>
    8cb0:	68a0      	ldr	r0, [r4, #8]
    8cb2:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8cb6:	290b      	cmp	r1, #11
    8cb8:	d102      	bne.n	8cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>
    8cba:	210c      	movs	r1, #12
    8cbc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    8cc0:	78a0      	ldrb	r0, [r4, #2]
    8cc2:	0700      	lsls	r0, r0, #28
    8cc4:	d50e      	bpl.n	8ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    8cc6:	68a0      	ldr	r0, [r4, #8]
    8cc8:	2301      	movs	r3, #1
    8cca:	2105      	movs	r1, #5
    8ccc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8cd0:	3070      	adds	r0, #112	; 0x70
    8cd2:	f004 fb59 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cd6:	b130      	cbz	r0, 8ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62e>
    8cd8:	2008      	movs	r0, #8
    8cda:	7060      	strb	r0, [r4, #1]
    8cdc:	68a1      	ldr	r1, [r4, #8]
    8cde:	2000      	movs	r0, #0
    8ce0:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    8ce4:	bd10      	pop	{r4, pc}
    8ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cea:	2000      	movs	r0, #0
    8cec:	f7fc b8d2 	b.w	4e94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8cf0:	20000118 	.word	0x20000118
    8cf4:	20000190 	.word	0x20000190
    8cf8:	b570      	push	{r4, r5, r6, lr}
    8cfa:	4c2a      	ldr	r4, [pc, #168]	; (8da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    8cfc:	2000      	movs	r0, #0
    8cfe:	7921      	ldrb	r1, [r4, #4]
    8d00:	07c9      	lsls	r1, r1, #31
    8d02:	d015      	beq.n	8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x678>
    8d04:	6920      	ldr	r0, [r4, #16]
    8d06:	2301      	movs	r3, #1
    8d08:	2105      	movs	r1, #5
    8d0a:	78c5      	ldrb	r5, [r0, #3]
    8d0c:	68a0      	ldr	r0, [r4, #8]
    8d0e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8d12:	3070      	adds	r0, #112	; 0x70
    8d14:	f004 fb38 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d18:	b158      	cbz	r0, 8d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67a>
    8d1a:	1ead      	subs	r5, r5, #2
    8d1c:	2d0a      	cmp	r5, #10
    8d1e:	d206      	bcs.n	8d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x676>
    8d20:	e8df f005 	tbb	[pc, r5]
    8d24:	05050707 	.word	0x05050707
    8d28:	05050707 	.word	0x05050707
    8d2c:	0707      	.short	0x0707
    8d2e:	2008      	movs	r0, #8
    8d30:	bd70      	pop	{r4, r5, r6, pc}
    8d32:	6920      	ldr	r0, [r4, #16]
    8d34:	f7fd f8e6 	bl	5f04 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8d38:	b138      	cbz	r0, 8d4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x692>
    8d3a:	6920      	ldr	r0, [r4, #16]
    8d3c:	78c5      	ldrb	r5, [r0, #3]
    8d3e:	b145      	cbz	r5, 8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    8d40:	2d01      	cmp	r5, #1
    8d42:	d006      	beq.n	8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    8d44:	2d16      	cmp	r5, #22
    8d46:	d118      	bne.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c2>
    8d48:	e003      	b.n	8d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    8d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d4e:	f000 bd03 	b.w	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a0>
    8d52:	68a0      	ldr	r0, [r4, #8]
    8d54:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    8d58:	f004 fb64 	bl	d424 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8d5c:	b168      	cbz	r0, 8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c2>
    8d5e:	68a1      	ldr	r1, [r4, #8]
    8d60:	f891 007c 	ldrb.w	r0, [r1, #124]	; 0x7c
    8d64:	281f      	cmp	r0, #31
    8d66:	d008      	beq.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c2>
    8d68:	2820      	cmp	r0, #32
    8d6a:	d003      	beq.n	8d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6bc>
    8d6c:	2d16      	cmp	r5, #22
    8d6e:	d00c      	beq.n	8d8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d2>
    8d70:	2002      	movs	r0, #2
    8d72:	bd70      	pop	{r4, r5, r6, pc}
    8d74:	2026      	movs	r0, #38	; 0x26
    8d76:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    8d7a:	2d19      	cmp	r5, #25
    8d7c:	d207      	bcs.n	8d8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    8d7e:	480a      	ldr	r0, [pc, #40]	; (8da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>)
    8d80:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8d84:	b118      	cbz	r0, 8d8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    8d86:	4780      	blx	r0
    8d88:	e003      	b.n	8d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    8d8a:	2020      	movs	r0, #32
    8d8c:	bd70      	pop	{r4, r5, r6, pc}
    8d8e:	f000 fce3 	bl	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a0>
    8d92:	68a2      	ldr	r2, [r4, #8]
    8d94:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    8d98:	1c49      	adds	r1, r1, #1
    8d9a:	f143 0300 	adc.w	r3, r3, #0
    8d9e:	e9c2 1300 	strd	r1, r3, [r2]
    8da2:	bd70      	pop	{r4, r5, r6, pc}
    8da4:	20000118 	.word	0x20000118
    8da8:	2000012c 	.word	0x2000012c
    8dac:	b570      	push	{r4, r5, r6, lr}
    8dae:	4c22      	ldr	r4, [pc, #136]	; (8e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>)
    8db0:	7920      	ldrb	r0, [r4, #4]
    8db2:	0700      	lsls	r0, r0, #28
    8db4:	d53e      	bpl.n	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x77c>
    8db6:	68a0      	ldr	r0, [r4, #8]
    8db8:	3070      	adds	r0, #112	; 0x70
    8dba:	f005 fa39 	bl	e230 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8dbe:	b148      	cbz	r0, 8dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    8dc0:	68a0      	ldr	r0, [r4, #8]
    8dc2:	21fe      	movs	r1, #254	; 0xfe
    8dc4:	2500      	movs	r5, #0
    8dc6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8dca:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8dce:	2919      	cmp	r1, #25
    8dd0:	d10c      	bne.n	8dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x734>
    8dd2:	e004      	b.n	8dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    8dd4:	f240 7144 	movw	r1, #1860	; 0x744
    8dd8:	2031      	movs	r0, #49	; 0x31
    8dda:	f7fb f905 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dde:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    8de2:	f7ff fd81 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    8de6:	68a0      	ldr	r0, [r4, #8]
    8de8:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8dec:	68a0      	ldr	r0, [r4, #8]
    8dee:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    8df2:	291f      	cmp	r1, #31
    8df4:	d002      	beq.n	8dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x744>
    8df6:	2927      	cmp	r1, #39	; 0x27
    8df8:	d113      	bne.n	8e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76a>
    8dfa:	e00b      	b.n	8e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    8dfc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    8e00:	f004 fb10 	bl	d424 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8e04:	b108      	cbz	r0, 8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x752>
    8e06:	2026      	movs	r0, #38	; 0x26
    8e08:	e000      	b.n	8e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    8e0a:	2020      	movs	r0, #32
    8e0c:	68a1      	ldr	r1, [r4, #8]
    8e0e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    8e12:	e006      	b.n	8e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76a>
    8e14:	2101      	movs	r1, #1
    8e16:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    8e1a:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    8e1e:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    8e22:	68a0      	ldr	r0, [r4, #8]
    8e24:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8e28:	2908      	cmp	r1, #8
    8e2a:	d103      	bne.n	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x77c>
    8e2c:	2102      	movs	r1, #2
    8e2e:	7021      	strb	r1, [r4, #0]
    8e30:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8e34:	bd70      	pop	{r4, r5, r6, pc}
    8e36:	0000      	.short	0x0000
    8e38:	20000118 	.word	0x20000118
    8e3c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8e3e:	4605      	mov	r5, r0
    8e40:	4668      	mov	r0, sp
    8e42:	f7fb fec3 	bl	4bcc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8e46:	b318      	cbz	r0, 8e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d8>
    8e48:	2222      	movs	r2, #34	; 0x22
    8e4a:	2100      	movs	r1, #0
    8e4c:	9800      	ldr	r0, [sp, #0]
    8e4e:	f003 f9c2 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8e52:	2103      	movs	r1, #3
    8e54:	9800      	ldr	r0, [sp, #0]
    8e56:	f004 fd72 	bl	d93e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    8e5a:	9800      	ldr	r0, [sp, #0]
    8e5c:	7801      	ldrb	r1, [r0, #0]
    8e5e:	f021 0110 	bic.w	r1, r1, #16
    8e62:	7001      	strb	r1, [r0, #0]
    8e64:	4629      	mov	r1, r5
    8e66:	f7fd f879 	bl	5f5c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8e6a:	2100      	movs	r1, #0
    8e6c:	4c5e      	ldr	r4, [pc, #376]	; (8fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>)
    8e6e:	f644 162f 	movw	r6, #18735	; 0x492f
    8e72:	2d0e      	cmp	r5, #14
    8e74:	d07e      	beq.n	8f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8bc>
    8e76:	dc0e      	bgt.n	8e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7de>
    8e78:	f1a5 0502 	sub.w	r5, r5, #2
    8e7c:	2d0c      	cmp	r5, #12
    8e7e:	d21c      	bcs.n	8eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x802>
    8e80:	e8df f005 	tbb	[pc, r5]
    8e84:	a7451b1e 	.word	0xa7451b1e
    8e88:	511b1ea7 	.word	0x511b1ea7
    8e8c:	3723a71b 	.word	0x3723a71b
    8e90:	f640 1169 	movw	r1, #2409	; 0x969
    8e94:	e0a3      	b.n	8fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    8e96:	2d15      	cmp	r5, #21
    8e98:	d058      	beq.n	8f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    8e9a:	dc08      	bgt.n	8eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f6>
    8e9c:	2d11      	cmp	r5, #17
    8e9e:	d01f      	beq.n	8ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x828>
    8ea0:	2d12      	cmp	r5, #18
    8ea2:	d01c      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    8ea4:	2d13      	cmp	r5, #19
    8ea6:	d01a      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    8ea8:	2d14      	cmp	r5, #20
    8eaa:	d106      	bne.n	8eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x802>
    8eac:	e04e      	b.n	8f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    8eae:	2d16      	cmp	r5, #22
    8eb0:	d023      	beq.n	8efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    8eb2:	2d17      	cmp	r5, #23
    8eb4:	d065      	beq.n	8f82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ca>
    8eb6:	2dff      	cmp	r5, #255	; 0xff
    8eb8:	d07e      	beq.n	8fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    8eba:	f640 11db 	movw	r1, #2523	; 0x9db
    8ebe:	e08e      	b.n	8fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    8ec0:	68a1      	ldr	r1, [r4, #8]
    8ec2:	9800      	ldr	r0, [sp, #0]
    8ec4:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    8ec8:	e015      	b.n	8ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83e>
    8eca:	9800      	ldr	r0, [sp, #0]
    8ecc:	220b      	movs	r2, #11
    8ece:	7102      	strb	r2, [r0, #4]
    8ed0:	2259      	movs	r2, #89	; 0x59
    8ed2:	7142      	strb	r2, [r0, #5]
    8ed4:	7181      	strb	r1, [r0, #6]
    8ed6:	21c0      	movs	r1, #192	; 0xc0
    8ed8:	71c1      	strb	r1, [r0, #7]
    8eda:	2111      	movs	r1, #17
    8edc:	7201      	strb	r1, [r0, #8]
    8ede:	e078      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8ee0:	2103      	movs	r1, #3
    8ee2:	9800      	ldr	r0, [sp, #0]
    8ee4:	f004 fd07 	bl	d8f6 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8ee8:	2106      	movs	r1, #6
    8eea:	9800      	ldr	r0, [sp, #0]
    8eec:	f004 fd05 	bl	d8fa <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    8ef0:	e06f      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8ef2:	9800      	ldr	r0, [sp, #0]
    8ef4:	2106      	movs	r1, #6
    8ef6:	7101      	strb	r1, [r0, #4]
    8ef8:	e06b      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8efa:	9800      	ldr	r0, [sp, #0]
    8efc:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8f00:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    8f04:	7102      	strb	r2, [r0, #4]
    8f06:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    8f0a:	7141      	strb	r1, [r0, #5]
    8f0c:	e061      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8f0e:	68a1      	ldr	r1, [r4, #8]
    8f10:	9800      	ldr	r0, [sp, #0]
    8f12:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8f16:	f004 fd03 	bl	d920 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8f1a:	68a1      	ldr	r1, [r4, #8]
    8f1c:	9800      	ldr	r0, [sp, #0]
    8f1e:	31dc      	adds	r1, #220	; 0xdc
    8f20:	f004 fcfb 	bl	d91a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8f24:	e055      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8f26:	9101      	str	r1, [sp, #4]
    8f28:	9102      	str	r1, [sp, #8]
    8f2a:	f001 fe71 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8f2e:	68a1      	ldr	r1, [r4, #8]
    8f30:	4030      	ands	r0, r6
    8f32:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8f36:	4001      	ands	r1, r0
    8f38:	f88d 1004 	strb.w	r1, [sp, #4]
    8f3c:	0a00      	lsrs	r0, r0, #8
    8f3e:	f88d 0005 	strb.w	r0, [sp, #5]
    8f42:	a901      	add	r1, sp, #4
    8f44:	9800      	ldr	r0, [sp, #0]
    8f46:	f004 fcf5 	bl	d934 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8f4a:	e042      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8f4c:	68a0      	ldr	r0, [r4, #8]
    8f4e:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8f52:	9800      	ldr	r0, [sp, #0]
    8f54:	f004 fcfb 	bl	d94e <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8f58:	68a0      	ldr	r0, [r4, #8]
    8f5a:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    8f5e:	9800      	ldr	r0, [sp, #0]
    8f60:	f004 fcf9 	bl	d956 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8f64:	68a0      	ldr	r0, [r4, #8]
    8f66:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    8f6a:	9800      	ldr	r0, [sp, #0]
    8f6c:	f004 fcf7 	bl	d95e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    8f70:	68a0      	ldr	r0, [r4, #8]
    8f72:	e000      	b.n	8f76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    8f74:	e010      	b.n	8f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8e0>
    8f76:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    8f7a:	9800      	ldr	r0, [sp, #0]
    8f7c:	f004 fcf3 	bl	d966 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8f80:	e027      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8f82:	68a1      	ldr	r1, [r4, #8]
    8f84:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8f88:	2801      	cmp	r0, #1
    8f8a:	9800      	ldr	r0, [sp, #0]
    8f8c:	d0b8      	beq.n	8f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    8f8e:	f811 2f62 	ldrb.w	r2, [r1, #98]!
    8f92:	7102      	strb	r2, [r0, #4]
    8f94:	7849      	ldrb	r1, [r1, #1]
    8f96:	e7b8      	b.n	8f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x852>
    8f98:	9101      	str	r1, [sp, #4]
    8f9a:	9102      	str	r1, [sp, #8]
    8f9c:	f001 fe38 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8fa0:	68a1      	ldr	r1, [r4, #8]
    8fa2:	4030      	ands	r0, r6
    8fa4:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8fa8:	4001      	ands	r1, r0
    8faa:	f88d 1004 	strb.w	r1, [sp, #4]
    8fae:	0a00      	lsrs	r0, r0, #8
    8fb0:	f88d 0005 	strb.w	r0, [sp, #5]
    8fb4:	a901      	add	r1, sp, #4
    8fb6:	e000      	b.n	8fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x902>
    8fb8:	e003      	b.n	8fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90a>
    8fba:	9800      	ldr	r0, [sp, #0]
    8fbc:	f004 fcb5 	bl	d92a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    8fc0:	e007      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x91a>
    8fc2:	68a0      	ldr	r0, [r4, #8]
    8fc4:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    8fc8:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    8fcc:	9800      	ldr	r0, [sp, #0]
    8fce:	f004 fc96 	bl	d8fe <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8fd2:	f7fb fdd5 	bl	4b80 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d104      	bne.n	8fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>
    8fda:	f640 11df 	movw	r1, #2527	; 0x9df
    8fde:	2031      	movs	r0, #49	; 0x31
    8fe0:	f7fb f802 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8fe6:	0000      	.short	0x0000
    8fe8:	20000118 	.word	0x20000118
    8fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ff0:	4c86      	ldr	r4, [pc, #536]	; (920c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb54>)
    8ff2:	4681      	mov	r9, r0
    8ff4:	460d      	mov	r5, r1
    8ff6:	68a0      	ldr	r0, [r4, #8]
    8ff8:	8800      	ldrh	r0, [r0, #0]
    8ffa:	f7fb fc21 	bl	4840 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8ffe:	0006      	movs	r6, r0
    9000:	d00d      	beq.n	901e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x966>
    9002:	7860      	ldrb	r0, [r4, #1]
    9004:	4328      	orrs	r0, r5
    9006:	7060      	strb	r0, [r4, #1]
    9008:	88a0      	ldrh	r0, [r4, #4]
    900a:	f04f 0500 	mov.w	r5, #0
    900e:	05c0      	lsls	r0, r0, #23
    9010:	d50a      	bpl.n	9028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x970>
    9012:	68a0      	ldr	r0, [r4, #8]
    9014:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    9018:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    901c:	e009      	b.n	9032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    901e:	f640 5156 	movw	r1, #3414	; 0xd56
    9022:	2031      	movs	r0, #49	; 0x31
    9024:	f7fa ffe0 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9028:	68a1      	ldr	r1, [r4, #8]
    902a:	f831 0f9c 	ldrh.w	r0, [r1, #156]!
    902e:	1c40      	adds	r0, r0, #1
    9030:	8008      	strh	r0, [r1, #0]
    9032:	f001 f895 	bl	a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa8>
    9036:	2701      	movs	r7, #1
    9038:	b338      	cbz	r0, 908a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    903a:	88a0      	ldrh	r0, [r4, #4]
    903c:	0500      	lsls	r0, r0, #20
    903e:	d506      	bpl.n	904e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9040:	68a0      	ldr	r0, [r4, #8]
    9042:	f890 1082 	ldrb.w	r1, [r0, #130]	; 0x82
    9046:	b111      	cbz	r1, 904e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9048:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    904c:	e01d      	b.n	908a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    904e:	68a0      	ldr	r0, [r4, #8]
    9050:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    9054:	1c49      	adds	r1, r1, #1
    9056:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    905a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    905e:	428b      	cmp	r3, r1
    9060:	d301      	bcc.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ae>
    9062:	1a5a      	subs	r2, r3, r1
    9064:	e000      	b.n	9068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b0>
    9066:	2200      	movs	r2, #0
    9068:	f8b4 c006 	ldrh.w	ip, [r4, #6]
    906c:	f10c 0c05 	add.w	ip, ip, #5
    9070:	4562      	cmp	r2, ip
    9072:	d801      	bhi.n	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c0>
    9074:	f880 709a 	strb.w	r7, [r0, #154]	; 0x9a
    9078:	4299      	cmp	r1, r3
    907a:	d306      	bcc.n	908a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    907c:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    9080:	f880 71f2 	strb.w	r7, [r0, #498]	; 0x1f2
    9084:	78e0      	ldrb	r0, [r4, #3]
    9086:	f7fa fe17 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    908a:	88a0      	ldrh	r0, [r4, #4]
    908c:	f04f 0802 	mov.w	r8, #2
    9090:	f410 7f40 	tst.w	r0, #768	; 0x300
    9094:	d00e      	beq.n	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    9096:	68a0      	ldr	r0, [r4, #8]
    9098:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    909c:	b111      	cbz	r1, 90a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ec>
    909e:	2903      	cmp	r1, #3
    90a0:	d108      	bne.n	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    90a2:	e002      	b.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    90a4:	f880 7080 	strb.w	r7, [r0, #128]	; 0x80
    90a8:	e001      	b.n	90ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f6>
    90aa:	f880 8080 	strb.w	r8, [r0, #128]	; 0x80
    90ae:	2101      	movs	r1, #1
    90b0:	f7fe fb4c 	bl	774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    90b4:	68a0      	ldr	r0, [r4, #8]
    90b6:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    90ba:	2901      	cmp	r1, #1
    90bc:	d104      	bne.n	90c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    90be:	88a1      	ldrh	r1, [r4, #4]
    90c0:	0549      	lsls	r1, r1, #21
    90c2:	d501      	bpl.n	90c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    90c4:	f880 8080 	strb.w	r8, [r0, #128]	; 0x80
    90c8:	f1b9 0f00 	cmp.w	r9, #0
    90cc:	d16f      	bne.n	91ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf6>
    90ce:	7921      	ldrb	r1, [r4, #4]
    90d0:	0649      	lsls	r1, r1, #25
    90d2:	d502      	bpl.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    90d4:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    90d8:	e004      	b.n	90e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2c>
    90da:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    90de:	1c49      	adds	r1, r1, #1
    90e0:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    90e4:	f7ff fdb8 	bl	8c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a0>
    90e8:	f7ff fd28 	bl	8b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    90ec:	f7fb fdf0 	bl	4cd0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    90f0:	2800      	cmp	r0, #0
    90f2:	68a0      	ldr	r0, [r4, #8]
    90f4:	d002      	beq.n	90fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    90f6:	f8a0 50f8 	strh.w	r5, [r0, #248]	; 0xf8
    90fa:	e003      	b.n	9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    90fc:	f830 1ff8 	ldrh.w	r1, [r0, #248]!
    9100:	1c49      	adds	r1, r1, #1
    9102:	8001      	strh	r1, [r0, #0]
    9104:	f7fb fdde 	bl	4cc4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9108:	b138      	cbz	r0, 911a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    910a:	68a1      	ldr	r1, [r4, #8]
    910c:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
    9110:	2802      	cmp	r0, #2
    9112:	d807      	bhi.n	9124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    9114:	1c40      	adds	r0, r0, #1
    9116:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
    911a:	68a0      	ldr	r0, [r4, #8]
    911c:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    9120:	2802      	cmp	r0, #2
    9122:	d903      	bls.n	912c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa74>
    9124:	68a0      	ldr	r0, [r4, #8]
    9126:	f820 5ff8 	strh.w	r5, [r0, #248]!
    912a:	7305      	strb	r5, [r0, #12]
    912c:	68a0      	ldr	r0, [r4, #8]
    912e:	2301      	movs	r3, #1
    9130:	2100      	movs	r1, #0
    9132:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9136:	3070      	adds	r0, #112	; 0x70
    9138:	f004 f926 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    913c:	b920      	cbnz	r0, 9148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa90>
    913e:	68a0      	ldr	r0, [r4, #8]
    9140:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9144:	280c      	cmp	r0, #12
    9146:	d15e      	bne.n	9206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4e>
    9148:	68a0      	ldr	r0, [r4, #8]
    914a:	2301      	movs	r3, #1
    914c:	2100      	movs	r1, #0
    914e:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    9152:	3070      	adds	r0, #112	; 0x70
    9154:	f004 f918 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9158:	b350      	cbz	r0, 91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    915a:	68a0      	ldr	r0, [r4, #8]
    915c:	2301      	movs	r3, #1
    915e:	2100      	movs	r1, #0
    9160:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9164:	3070      	adds	r0, #112	; 0x70
    9166:	f004 f90f 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    916a:	b308      	cbz	r0, 91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    916c:	68a0      	ldr	r0, [r4, #8]
    916e:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9172:	2902      	cmp	r1, #2
    9174:	d147      	bne.n	9206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4e>
    9176:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    917a:	b9c8      	cbnz	r0, 91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    917c:	4630      	mov	r0, r6
    917e:	f003 fcf0 	bl	cb62 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9182:	b1a8      	cbz	r0, 91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9184:	68a0      	ldr	r0, [r4, #8]
    9186:	3070      	adds	r0, #112	; 0x70
    9188:	f005 f852 	bl	e230 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    918c:	b980      	cbnz	r0, 91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    918e:	68a1      	ldr	r1, [r4, #8]
    9190:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    9194:	2801      	cmp	r0, #1
    9196:	d936      	bls.n	9206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4e>
    9198:	f881 70fa 	strb.w	r7, [r1, #250]	; 0xfa
    919c:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    91a0:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    91a4:	1e93      	subs	r3, r2, #2
    91a6:	4298      	cmp	r0, r3
    91a8:	db03      	blt.n	91b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
    91aa:	2001      	movs	r0, #1
    91ac:	e004      	b.n	91b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb00>
    91ae:	e01d      	b.n	91ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    91b0:	e029      	b.n	9206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4e>
    91b2:	1a10      	subs	r0, r2, r0
    91b4:	1e40      	subs	r0, r0, #1
    91b6:	b280      	uxth	r0, r0
    91b8:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    91bc:	88e3      	ldrh	r3, [r4, #6]
    91be:	429a      	cmp	r2, r3
    91c0:	d301      	bcc.n	91c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0e>
    91c2:	2201      	movs	r2, #1
    91c4:	e002      	b.n	91cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb14>
    91c6:	1a9a      	subs	r2, r3, r2
    91c8:	1c52      	adds	r2, r2, #1
    91ca:	b292      	uxth	r2, r2
    91cc:	4290      	cmp	r0, r2
    91ce:	d900      	bls.n	91d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1a>
    91d0:	4610      	mov	r0, r2
    91d2:	2801      	cmp	r0, #1
    91d4:	d102      	bne.n	91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb24>
    91d6:	bf00      	nop
    91d8:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    91dc:	68a1      	ldr	r1, [r4, #8]
    91de:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
    91e2:	4410      	add	r0, r2
    91e4:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    91e8:	f001 f872 	bl	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>
    91ec:	7920      	ldrb	r0, [r4, #4]
    91ee:	f3c0 1180 	ubfx	r1, r0, #6, #1
    91f2:	4648      	mov	r0, r9
    91f4:	f000 ffc8 	bl	a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ad0>
    91f8:	68a0      	ldr	r0, [r4, #8]
    91fa:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    91fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9202:	f7fb bca7 	b.w	4b54 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9206:	2001      	movs	r0, #1
    9208:	68a1      	ldr	r1, [r4, #8]
    920a:	e7e5      	b.n	91d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    920c:	20000118 	.word	0x20000118
    9210:	b570      	push	{r4, r5, r6, lr}
    9212:	4c4e      	ldr	r4, [pc, #312]	; (934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>)
    9214:	2301      	movs	r3, #1
    9216:	2100      	movs	r1, #0
    9218:	68a0      	ldr	r0, [r4, #8]
    921a:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    921e:	3070      	adds	r0, #112	; 0x70
    9220:	f004 f8b2 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9224:	2800      	cmp	r0, #0
    9226:	d076      	beq.n	9316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc5e>
    9228:	68a0      	ldr	r0, [r4, #8]
    922a:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    922e:	2500      	movs	r5, #0
    9230:	b139      	cbz	r1, 9242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8a>
    9232:	2100      	movs	r1, #0
    9234:	200e      	movs	r0, #14
    9236:	f000 f88b 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    923a:	68a0      	ldr	r0, [r4, #8]
    923c:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    9240:	e082      	b.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9242:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    9246:	b119      	cbz	r1, 9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    9248:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    924c:	0789      	lsls	r1, r1, #30
    924e:	d00a      	beq.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbae>
    9250:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    9254:	b111      	cbz	r1, 925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba4>
    9256:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    925a:	b189      	cbz	r1, 9280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc8>
    925c:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9260:	2901      	cmp	r1, #1
    9262:	d02f      	beq.n	92c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    9264:	e06a      	b.n	933c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc84>
    9266:	2100      	movs	r1, #0
    9268:	200c      	movs	r0, #12
    926a:	f000 f871 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    926e:	68a0      	ldr	r0, [r4, #8]
    9270:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    9274:	f041 0101 	orr.w	r1, r1, #1
    9278:	7001      	strb	r1, [r0, #0]
    927a:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    927e:	e063      	b.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9280:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9284:	2924      	cmp	r1, #36	; 0x24
    9286:	d01b      	beq.n	92c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc08>
    9288:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    928c:	2924      	cmp	r1, #36	; 0x24
    928e:	d017      	beq.n	92c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc08>
    9290:	f05f 0300 	movs.w	r3, #0
    9294:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    9298:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    929c:	f004 fc9a 	bl	dbd4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    92a0:	68a0      	ldr	r0, [r4, #8]
    92a2:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    92a6:	2100      	movs	r1, #0
    92a8:	2014      	movs	r0, #20
    92aa:	f000 f851 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    92ae:	68a1      	ldr	r1, [r4, #8]
    92b0:	f101 0028 	add.w	r0, r1, #40	; 0x28
    92b4:	8bc2      	ldrh	r2, [r0, #30]
    92b6:	f821 2fe6 	strh.w	r2, [r1, #230]!
    92ba:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    92bc:	8048      	strh	r0, [r1, #2]
    92be:	e043      	b.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    92c0:	2301      	movs	r3, #1
    92c2:	e7e7      	b.n	9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbdc>
    92c4:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    92c8:	bb21      	cbnz	r1, 9314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc5c>
    92ca:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    92ce:	2301      	movs	r3, #1
    92d0:	210b      	movs	r1, #11
    92d2:	3070      	adds	r0, #112	; 0x70
    92d4:	f004 f858 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92d8:	b9e0      	cbnz	r0, 9314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc5c>
    92da:	68a0      	ldr	r0, [r4, #8]
    92dc:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    92e0:	f004 ffae 	bl	e240 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    92e4:	4605      	mov	r5, r0
    92e6:	68a0      	ldr	r0, [r4, #8]
    92e8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    92ec:	f004 ffa8 	bl	e240 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    92f0:	4606      	mov	r6, r0
    92f2:	68a0      	ldr	r0, [r4, #8]
    92f4:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    92f8:	4628      	mov	r0, r5
    92fa:	f004 ffac 	bl	e256 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    92fe:	b158      	cbz	r0, 9318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    9300:	68a0      	ldr	r0, [r4, #8]
    9302:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    9306:	4630      	mov	r0, r6
    9308:	f004 ffa5 	bl	e256 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    930c:	b120      	cbz	r0, 9318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    930e:	2000      	movs	r0, #0
    9310:	f000 f900 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9314:	e012      	b.n	933c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc84>
    9316:	e012      	b.n	933e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc86>
    9318:	68a0      	ldr	r0, [r4, #8]
    931a:	2301      	movs	r3, #1
    931c:	2103      	movs	r1, #3
    931e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9322:	3070      	adds	r0, #112	; 0x70
    9324:	f004 f830 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9328:	b940      	cbnz	r0, 933c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc84>
    932a:	68a0      	ldr	r0, [r4, #8]
    932c:	2301      	movs	r3, #1
    932e:	2102      	movs	r1, #2
    9330:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9334:	3070      	adds	r0, #112	; 0x70
    9336:	f004 f827 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    933a:	b108      	cbz	r0, 9340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc88>
    933c:	2000      	movs	r0, #0
    933e:	bd70      	pop	{r4, r5, r6, pc}
    9340:	2100      	movs	r1, #0
    9342:	2016      	movs	r0, #22
    9344:	f000 f804 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    9348:	2001      	movs	r0, #1
    934a:	bd70      	pop	{r4, r5, r6, pc}
    934c:	20000118 	.word	0x20000118
    9350:	b570      	push	{r4, r5, r6, lr}
    9352:	4c0d      	ldr	r4, [pc, #52]	; (9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd0>)
    9354:	4606      	mov	r6, r0
    9356:	460d      	mov	r5, r1
    9358:	68a0      	ldr	r0, [r4, #8]
    935a:	3070      	adds	r0, #112	; 0x70
    935c:	f004 ff68 	bl	e230 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9360:	b120      	cbz	r0, 936c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    9362:	f640 11f2 	movw	r1, #2546	; 0x9f2
    9366:	2031      	movs	r0, #49	; 0x31
    9368:	f7fa fe3e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    936c:	68a2      	ldr	r2, [r4, #8]
    936e:	2000      	movs	r0, #0
    9370:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    9374:	b115      	cbz	r5, 937c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    9376:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    937a:	bd70      	pop	{r4, r5, r6, pc}
    937c:	f822 0fa2 	strh.w	r0, [r2, #162]!
    9380:	2001      	movs	r0, #1
    9382:	7110      	strb	r0, [r2, #4]
    9384:	bd70      	pop	{r4, r5, r6, pc}
    9386:	0000      	.short	0x0000
    9388:	20000118 	.word	0x20000118
    938c:	b570      	push	{r4, r5, r6, lr}
    938e:	4c18      	ldr	r4, [pc, #96]	; (93f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>)
    9390:	2500      	movs	r5, #0
    9392:	68a0      	ldr	r0, [r4, #8]
    9394:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    9398:	2901      	cmp	r1, #1
    939a:	d00a      	beq.n	93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcfa>
    939c:	2902      	cmp	r1, #2
    939e:	d125      	bne.n	93ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    93a0:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    93a4:	b1a9      	cbz	r1, 93d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    93a6:	2106      	movs	r1, #6
    93a8:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    93ac:	2101      	movs	r1, #1
    93ae:	2002      	movs	r0, #2
    93b0:	e017      	b.n	93e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    93b2:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    93b6:	2900      	cmp	r1, #0
    93b8:	d118      	bne.n	93ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    93ba:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    93be:	f500 7184 	add.w	r1, r0, #264	; 0x108
    93c2:	2200      	movs	r2, #0
    93c4:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    93c8:	f003 ff96 	bl	d2f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    93cc:	2101      	movs	r1, #1
    93ce:	2005      	movs	r0, #5
    93d0:	e007      	b.n	93e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    93d2:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    93d6:	0740      	lsls	r0, r0, #29
    93d8:	d501      	bpl.n	93de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    93da:	2011      	movs	r0, #17
    93dc:	e000      	b.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>
    93de:	200d      	movs	r0, #13
    93e0:	2101      	movs	r1, #1
    93e2:	f7ff ffb5 	bl	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    93e6:	68a0      	ldr	r0, [r4, #8]
    93e8:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    93ec:	bd70      	pop	{r4, r5, r6, pc}
    93ee:	0000      	.short	0x0000
    93f0:	20000118 	.word	0x20000118
    93f4:	b570      	push	{r4, r5, r6, lr}
    93f6:	4a2b      	ldr	r2, [pc, #172]	; (94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdec>)
    93f8:	4603      	mov	r3, r0
    93fa:	8890      	ldrh	r0, [r2, #4]
    93fc:	4318      	orrs	r0, r3
    93fe:	8090      	strh	r0, [r2, #4]
    9400:	4610      	mov	r0, r2
    9402:	2b40      	cmp	r3, #64	; 0x40
    9404:	6880      	ldr	r0, [r0, #8]
    9406:	d00d      	beq.n	9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    9408:	079e      	lsls	r6, r3, #30
    940a:	f04f 0500 	mov.w	r5, #0
    940e:	f04f 0401 	mov.w	r4, #1
    9412:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9416:	d50c      	bpl.n	9432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    9418:	b14e      	cbz	r6, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd76>
    941a:	f640 41e8 	movw	r1, #3304	; 0xce8
    941e:	2031      	movs	r0, #49	; 0x31
    9420:	f7fa fde2 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9428:	2104      	movs	r1, #4
    942a:	f7fe b98f 	b.w	774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    942e:	60d1      	str	r1, [r2, #12]
    9430:	e01c      	b.n	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb4>
    9432:	b1c6      	cbz	r6, 9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9434:	6111      	str	r1, [r2, #16]
    9436:	78c9      	ldrb	r1, [r1, #3]
    9438:	2906      	cmp	r1, #6
    943a:	d002      	beq.n	9442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    943c:	290b      	cmp	r1, #11
    943e:	d112      	bne.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9440:	e009      	b.n	9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9e>
    9442:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9446:	2917      	cmp	r1, #23
    9448:	d10d      	bne.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    944a:	2100      	movs	r1, #0
    944c:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    9450:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    9454:	e007      	b.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9456:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    945a:	2911      	cmp	r1, #17
    945c:	d103      	bne.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    945e:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
    9462:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9466:	0799      	lsls	r1, r3, #30
    9468:	d516      	bpl.n	9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde0>
    946a:	68d1      	ldr	r1, [r2, #12]
    946c:	78c9      	ldrb	r1, [r1, #3]
    946e:	2905      	cmp	r1, #5
    9470:	d002      	beq.n	9478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc0>
    9472:	290b      	cmp	r1, #11
    9474:	d110      	bne.n	9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde0>
    9476:	e009      	b.n	948c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>
    9478:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    947c:	2915      	cmp	r1, #21
    947e:	d10b      	bne.n	9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde0>
    9480:	2100      	movs	r1, #0
    9482:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    9486:	f800 4c3e 	strb.w	r4, [r0, #-62]
    948a:	e005      	b.n	9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde0>
    948c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9490:	2910      	cmp	r1, #16
    9492:	d101      	bne.n	9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde0>
    9494:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    9498:	0698      	lsls	r0, r3, #26
    949a:	d501      	bpl.n	94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde8>
    949c:	2008      	movs	r0, #8
    949e:	7090      	strb	r0, [r2, #2]
    94a0:	bd70      	pop	{r4, r5, r6, pc}
    94a2:	0000      	.short	0x0000
    94a4:	20000118 	.word	0x20000118
    94a8:	b570      	push	{r4, r5, r6, lr}
    94aa:	4c19      	ldr	r4, [pc, #100]	; (9510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe58>)
    94ac:	68a0      	ldr	r0, [r4, #8]
    94ae:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    94b2:	b109      	cbz	r1, 94b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    94b4:	2601      	movs	r6, #1
    94b6:	e000      	b.n	94ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe02>
    94b8:	2600      	movs	r6, #0
    94ba:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    94be:	b10a      	cbz	r2, 94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0c>
    94c0:	2501      	movs	r5, #1
    94c2:	e000      	b.n	94c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0e>
    94c4:	2500      	movs	r5, #0
    94c6:	b90e      	cbnz	r6, 94cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    94c8:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    94cc:	b90d      	cbnz	r5, 94d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    94ce:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    94d2:	f100 035e 	add.w	r3, r0, #94	; 0x5e
    94d6:	7219      	strb	r1, [r3, #8]
    94d8:	725a      	strb	r2, [r3, #9]
    94da:	2101      	movs	r1, #1
    94dc:	7299      	strb	r1, [r3, #10]
    94de:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    94e2:	2801      	cmp	r0, #1
    94e4:	d001      	beq.n	94ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe32>
    94e6:	b906      	cbnz	r6, 94ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe32>
    94e8:	b115      	cbz	r5, 94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe38>
    94ea:	2000      	movs	r0, #0
    94ec:	f000 f812 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    94f0:	68a0      	ldr	r0, [r4, #8]
    94f2:	f004 fb8a 	bl	dc0a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    94f6:	2800      	cmp	r0, #0
    94f8:	d008      	beq.n	950c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe54>
    94fa:	68a1      	ldr	r1, [r4, #8]
    94fc:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    9500:	8808      	ldrh	r0, [r1, #0]
    9502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9506:	3128      	adds	r1, #40	; 0x28
    9508:	f004 bb40 	b.w	db8c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    950c:	bd70      	pop	{r4, r5, r6, pc}
    950e:	0000      	.short	0x0000
    9510:	20000118 	.word	0x20000118
    9514:	b510      	push	{r4, lr}
    9516:	4c10      	ldr	r4, [pc, #64]	; (9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>)
    9518:	68a1      	ldr	r1, [r4, #8]
    951a:	880a      	ldrh	r2, [r1, #0]
    951c:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    9520:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    9524:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    9528:	f004 fe8a 	bl	e240 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    952c:	68a1      	ldr	r1, [r4, #8]
    952e:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    9532:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    9536:	f004 fe83 	bl	e240 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    953a:	68a1      	ldr	r1, [r4, #8]
    953c:	f881 0201 	strb.w	r0, [r1, #513]	; 0x201
    9540:	2001      	movs	r0, #1
    9542:	f881 01fa 	strb.w	r0, [r1, #506]	; 0x1fa
    9546:	2000      	movs	r0, #0
    9548:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    954c:	78e0      	ldrb	r0, [r4, #3]
    954e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9552:	f7fa bbb1 	b.w	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9556:	0000      	.short	0x0000
    9558:	20000118 	.word	0x20000118
    955c:	b510      	push	{r4, lr}
    955e:	4c15      	ldr	r4, [pc, #84]	; (95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xefc>)
    9560:	2301      	movs	r3, #1
    9562:	2100      	movs	r1, #0
    9564:	68a0      	ldr	r0, [r4, #8]
    9566:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    956a:	3070      	adds	r0, #112	; 0x70
    956c:	f003 ff0c 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9570:	b190      	cbz	r0, 9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    9572:	6920      	ldr	r0, [r4, #16]
    9574:	f004 f95c 	bl	d830 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9578:	68a1      	ldr	r1, [r4, #8]
    957a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    957e:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
    9582:	f004 fe76 	bl	e272 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9586:	b148      	cbz	r0, 959c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    9588:	68a0      	ldr	r0, [r4, #8]
    958a:	2128      	movs	r1, #40	; 0x28
    958c:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9590:	2101      	movs	r1, #1
    9592:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    9596:	e00b      	b.n	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef8>
    9598:	2001      	movs	r0, #1
    959a:	bd10      	pop	{r4, pc}
    959c:	68a1      	ldr	r1, [r4, #8]
    959e:	6920      	ldr	r0, [r4, #16]
    95a0:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    95a4:	f004 f93f 	bl	d826 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    95a8:	68a1      	ldr	r1, [r4, #8]
    95aa:	200b      	movs	r0, #11
    95ac:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    95b0:	2000      	movs	r0, #0
    95b2:	bd10      	pop	{r4, pc}
    95b4:	20000118 	.word	0x20000118
    95b8:	b570      	push	{r4, r5, r6, lr}
    95ba:	4c29      	ldr	r4, [pc, #164]	; (9660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa8>)
    95bc:	2301      	movs	r3, #1
    95be:	2100      	movs	r1, #0
    95c0:	68a0      	ldr	r0, [r4, #8]
    95c2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    95c6:	3070      	adds	r0, #112	; 0x70
    95c8:	f003 fede 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95cc:	b1b8      	cbz	r0, 95fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf46>
    95ce:	2100      	movs	r1, #0
    95d0:	6920      	ldr	r0, [r4, #16]
    95d2:	f004 f900 	bl	d7d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    95d6:	b1a0      	cbz	r0, 9602 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4a>
    95d8:	6920      	ldr	r0, [r4, #16]
    95da:	68a1      	ldr	r1, [r4, #8]
    95dc:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    95e0:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    95e4:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
    95e8:	f004 fe43 	bl	e272 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    95ec:	b168      	cbz	r0, 960a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf52>
    95ee:	68a0      	ldr	r0, [r4, #8]
    95f0:	2128      	movs	r1, #40	; 0x28
    95f2:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    95f6:	2101      	movs	r1, #1
    95f8:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    95fc:	e02e      	b.n	965c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa4>
    95fe:	2001      	movs	r0, #1
    9600:	bd70      	pop	{r4, r5, r6, pc}
    9602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9606:	f000 b8a7 	b.w	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a0>
    960a:	6920      	ldr	r0, [r4, #16]
    960c:	f004 f913 	bl	d836 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9610:	f003 fe9d 	bl	d34e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9614:	4605      	mov	r5, r0
    9616:	68a0      	ldr	r0, [r4, #8]
    9618:	4629      	mov	r1, r5
    961a:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    961e:	6920      	ldr	r0, [r4, #16]
    9620:	7900      	ldrb	r0, [r0, #4]
    9622:	f004 f831 	bl	d688 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9626:	68a1      	ldr	r1, [r4, #8]
    9628:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    962c:	6920      	ldr	r0, [r4, #16]
    962e:	4629      	mov	r1, r5
    9630:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9634:	f004 f824 	bl	d680 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9638:	68a1      	ldr	r1, [r4, #8]
    963a:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    963e:	6920      	ldr	r0, [r4, #16]
    9640:	f004 f8fc 	bl	d83c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9644:	68a1      	ldr	r1, [r4, #8]
    9646:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    964a:	6920      	ldr	r0, [r4, #16]
    964c:	f004 f8f9 	bl	d842 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9650:	68a1      	ldr	r1, [r4, #8]
    9652:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    9656:	200d      	movs	r0, #13
    9658:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    965c:	2000      	movs	r0, #0
    965e:	bd70      	pop	{r4, r5, r6, pc}
    9660:	20000118 	.word	0x20000118
    9664:	b510      	push	{r4, lr}
    9666:	4c26      	ldr	r4, [pc, #152]	; (9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1048>)
    9668:	2301      	movs	r3, #1
    966a:	2100      	movs	r1, #0
    966c:	68a0      	ldr	r0, [r4, #8]
    966e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9672:	3070      	adds	r0, #112	; 0x70
    9674:	f003 fe88 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9678:	b970      	cbnz	r0, 9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe0>
    967a:	68a0      	ldr	r0, [r4, #8]
    967c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9680:	2a12      	cmp	r2, #18
    9682:	d009      	beq.n	9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe0>
    9684:	2301      	movs	r3, #1
    9686:	2105      	movs	r1, #5
    9688:	3070      	adds	r0, #112	; 0x70
    968a:	f003 fe7d 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    968e:	b108      	cbz	r0, 9694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9690:	2008      	movs	r0, #8
    9692:	bd10      	pop	{r4, pc}
    9694:	2001      	movs	r0, #1
    9696:	bd10      	pop	{r4, pc}
    9698:	68a0      	ldr	r0, [r4, #8]
    969a:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    969e:	b908      	cbnz	r0, 96a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    96a0:	f7ff f916 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    96a4:	68a1      	ldr	r1, [r4, #8]
    96a6:	6920      	ldr	r0, [r4, #16]
    96a8:	f501 7184 	add.w	r1, r1, #264	; 0x108
    96ac:	f004 f8d8 	bl	d860 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    96b0:	68a1      	ldr	r1, [r4, #8]
    96b2:	6920      	ldr	r0, [r4, #16]
    96b4:	31d8      	adds	r1, #216	; 0xd8
    96b6:	f004 f8ca 	bl	d84e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    96ba:	68a1      	ldr	r1, [r4, #8]
    96bc:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    96c0:	b120      	cbz	r0, 96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    96c2:	f44f 7127 	mov.w	r1, #668	; 0x29c
    96c6:	2031      	movs	r0, #49	; 0x31
    96c8:	f7fa fc8e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96cc:	8808      	ldrh	r0, [r1, #0]
    96ce:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    96d2:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    96d6:	6920      	ldr	r0, [r4, #16]
    96d8:	f004 f8bd 	bl	d856 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    96dc:	68a1      	ldr	r1, [r4, #8]
    96de:	6920      	ldr	r0, [r4, #16]
    96e0:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    96e4:	f004 f8b0 	bl	d848 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    96e8:	68a0      	ldr	r0, [r4, #8]
    96ea:	2101      	movs	r1, #1
    96ec:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    96f0:	2114      	movs	r1, #20
    96f2:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    96f6:	78e0      	ldrb	r0, [r4, #3]
    96f8:	f7fa fade 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    96fc:	2000      	movs	r0, #0
    96fe:	bd10      	pop	{r4, pc}
    9700:	20000118 	.word	0x20000118
    9704:	b51c      	push	{r2, r3, r4, lr}
    9706:	4c13      	ldr	r4, [pc, #76]	; (9754 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x109c>)
    9708:	68a0      	ldr	r0, [r4, #8]
    970a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    970e:	07c0      	lsls	r0, r0, #31
    9710:	d001      	beq.n	9716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105e>
    9712:	2001      	movs	r0, #1
    9714:	bd1c      	pop	{r2, r3, r4, pc}
    9716:	4669      	mov	r1, sp
    9718:	6920      	ldr	r0, [r4, #16]
    971a:	f004 f8a7 	bl	d86c <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    971e:	f001 fa77 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9722:	f644 112f 	movw	r1, #18735	; 0x492f
    9726:	4008      	ands	r0, r1
    9728:	f89d 2000 	ldrb.w	r2, [sp]
    972c:	68a1      	ldr	r1, [r4, #8]
    972e:	4002      	ands	r2, r0
    9730:	f801 2fb4 	strb.w	r2, [r1, #180]!
    9734:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9738:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    973c:	7048      	strb	r0, [r1, #1]
    973e:	f7ff f8c7 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    9742:	68a0      	ldr	r0, [r4, #8]
    9744:	f810 1f7e 	ldrb.w	r1, [r0, #126]!
    9748:	f041 0101 	orr.w	r1, r1, #1
    974c:	7001      	strb	r1, [r0, #0]
    974e:	2000      	movs	r0, #0
    9750:	bd1c      	pop	{r2, r3, r4, pc}
    9752:	0000      	.short	0x0000
    9754:	20000118 	.word	0x20000118
    9758:	4a0a      	ldr	r2, [pc, #40]	; (9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10cc>)
    975a:	b510      	push	{r4, lr}
    975c:	6890      	ldr	r0, [r2, #8]
    975e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9762:	070b      	lsls	r3, r1, #28
    9764:	d501      	bpl.n	976a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    9766:	2001      	movs	r0, #1
    9768:	bd10      	pop	{r4, pc}
    976a:	f041 0108 	orr.w	r1, r1, #8
    976e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9772:	6911      	ldr	r1, [r2, #16]
    9774:	78c9      	ldrb	r1, [r1, #3]
    9776:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    977a:	f7ff f8a9 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    977e:	2000      	movs	r0, #0
    9780:	bd10      	pop	{r4, pc}
    9782:	0000      	.short	0x0000
    9784:	20000118 	.word	0x20000118
    9788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    978a:	4c2f      	ldr	r4, [pc, #188]	; (9848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1190>)
    978c:	68a0      	ldr	r0, [r4, #8]
    978e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9792:	f010 0f30 	tst.w	r0, #48	; 0x30
    9796:	d001      	beq.n	979c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e4>
    9798:	2001      	movs	r0, #1
    979a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    979c:	6920      	ldr	r0, [r4, #16]
    979e:	f004 f880 	bl	d8a2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    97a2:	b350      	cbz	r0, 97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1142>
    97a4:	6920      	ldr	r0, [r4, #16]
    97a6:	f004 f86e 	bl	d886 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    97aa:	4607      	mov	r7, r0
    97ac:	6920      	ldr	r0, [r4, #16]
    97ae:	f004 f86e 	bl	d88e <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    97b2:	4606      	mov	r6, r0
    97b4:	6920      	ldr	r0, [r4, #16]
    97b6:	f004 f864 	bl	d882 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    97ba:	4605      	mov	r5, r0
    97bc:	6920      	ldr	r0, [r4, #16]
    97be:	f004 f864 	bl	d88a <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    97c2:	4601      	mov	r1, r0
    97c4:	9700      	str	r7, [sp, #0]
    97c6:	68a0      	ldr	r0, [r4, #8]
    97c8:	4633      	mov	r3, r6
    97ca:	462a      	mov	r2, r5
    97cc:	3028      	adds	r0, #40	; 0x28
    97ce:	f004 faa6 	bl	dd1e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    97d2:	7920      	ldrb	r0, [r4, #4]
    97d4:	0780      	lsls	r0, r0, #30
    97d6:	d503      	bpl.n	97e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1128>
    97d8:	68e0      	ldr	r0, [r4, #12]
    97da:	78c0      	ldrb	r0, [r0, #3]
    97dc:	2814      	cmp	r0, #20
    97de:	d010      	beq.n	9802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114a>
    97e0:	68a1      	ldr	r1, [r4, #8]
    97e2:	f891 007c 	ldrb.w	r0, [r1, #124]	; 0x7c
    97e6:	281c      	cmp	r0, #28
    97e8:	d00b      	beq.n	9802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114a>
    97ea:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    97ee:	2801      	cmp	r0, #1
    97f0:	d00f      	beq.n	9812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x115a>
    97f2:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    97f6:	b960      	cbnz	r0, 9812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x115a>
    97f8:	e008      	b.n	980c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>
    97fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    97fe:	f7ff bfab 	b.w	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a0>
    9802:	68a1      	ldr	r1, [r4, #8]
    9804:	2001      	movs	r0, #1
    9806:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    980a:	e002      	b.n	9812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x115a>
    980c:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    9810:	b130      	cbz	r0, 9820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1168>
    9812:	68a0      	ldr	r0, [r4, #8]
    9814:	f810 1f7e 	ldrb.w	r1, [r0, #126]!
    9818:	f041 0110 	orr.w	r1, r1, #16
    981c:	7001      	strb	r1, [r0, #0]
    981e:	e00e      	b.n	983e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    9820:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    9824:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9828:	f040 0020 	orr.w	r0, r0, #32
    982c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9830:	f831 0b28 	ldrh.w	r0, [r1], #40
    9834:	f004 fa7a 	bl	dd2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9838:	78e0      	ldrb	r0, [r4, #3]
    983a:	f7fa fa3d 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    983e:	f7ff f847 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    9842:	2000      	movs	r0, #0
    9844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9846:	0000      	.short	0x0000
    9848:	20000118 	.word	0x20000118
    984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    984e:	4c1a      	ldr	r4, [pc, #104]	; (98b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>)
    9850:	2301      	movs	r3, #1
    9852:	210a      	movs	r1, #10
    9854:	68a0      	ldr	r0, [r4, #8]
    9856:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    985a:	3070      	adds	r0, #112	; 0x70
    985c:	f003 fd94 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9860:	b338      	cbz	r0, 98b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fa>
    9862:	6920      	ldr	r0, [r4, #16]
    9864:	f004 f81d 	bl	d8a2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9868:	b1c8      	cbz	r0, 989e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e6>
    986a:	6920      	ldr	r0, [r4, #16]
    986c:	f004 f80b 	bl	d886 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9870:	4607      	mov	r7, r0
    9872:	6920      	ldr	r0, [r4, #16]
    9874:	f004 f80b 	bl	d88e <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9878:	4606      	mov	r6, r0
    987a:	6920      	ldr	r0, [r4, #16]
    987c:	f004 f801 	bl	d882 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9880:	4605      	mov	r5, r0
    9882:	6920      	ldr	r0, [r4, #16]
    9884:	f004 f801 	bl	d88a <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9888:	4601      	mov	r1, r0
    988a:	9700      	str	r7, [sp, #0]
    988c:	68a0      	ldr	r0, [r4, #8]
    988e:	4633      	mov	r3, r6
    9890:	462a      	mov	r2, r5
    9892:	3028      	adds	r0, #40	; 0x28
    9894:	f004 fa43 	bl	dd1e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9898:	68a0      	ldr	r0, [r4, #8]
    989a:	f004 f9b6 	bl	dc0a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    989e:	68a1      	ldr	r1, [r4, #8]
    98a0:	2000      	movs	r0, #0
    98a2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    98a6:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    98aa:	f7ff f9bd 	bl	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    98ae:	2000      	movs	r0, #0
    98b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98b2:	2001      	movs	r0, #1
    98b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98b6:	0000      	.short	0x0000
    98b8:	20000118 	.word	0x20000118
    98bc:	b510      	push	{r4, lr}
    98be:	4c09      	ldr	r4, [pc, #36]	; (98e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122c>)
    98c0:	68a0      	ldr	r0, [r4, #8]
    98c2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    98c6:	0740      	lsls	r0, r0, #29
    98c8:	d501      	bpl.n	98ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1216>
    98ca:	2001      	movs	r0, #1
    98cc:	bd10      	pop	{r4, pc}
    98ce:	f7fe ffff 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    98d2:	68a0      	ldr	r0, [r4, #8]
    98d4:	f810 1f7e 	ldrb.w	r1, [r0, #126]!
    98d8:	f041 0104 	orr.w	r1, r1, #4
    98dc:	7001      	strb	r1, [r0, #0]
    98de:	2000      	movs	r0, #0
    98e0:	bd10      	pop	{r4, pc}
    98e2:	0000      	.short	0x0000
    98e4:	20000118 	.word	0x20000118
    98e8:	b510      	push	{r4, lr}
    98ea:	4c09      	ldr	r4, [pc, #36]	; (9910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1258>)
    98ec:	2301      	movs	r3, #1
    98ee:	2109      	movs	r1, #9
    98f0:	68a0      	ldr	r0, [r4, #8]
    98f2:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    98f6:	3070      	adds	r0, #112	; 0x70
    98f8:	f003 fd46 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98fc:	2800      	cmp	r0, #0
    98fe:	d006      	beq.n	990e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    9900:	68a1      	ldr	r1, [r4, #8]
    9902:	2000      	movs	r0, #0
    9904:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9908:	7308      	strb	r0, [r1, #12]
    990a:	f801 0c1e 	strb.w	r0, [r1, #-30]
    990e:	bd10      	pop	{r4, pc}
    9910:	20000118 	.word	0x20000118
    9914:	b510      	push	{r4, lr}
    9916:	4c0f      	ldr	r4, [pc, #60]	; (9954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>)
    9918:	2301      	movs	r3, #1
    991a:	2100      	movs	r1, #0
    991c:	68a0      	ldr	r0, [r4, #8]
    991e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9922:	3070      	adds	r0, #112	; 0x70
    9924:	f003 fd30 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9928:	b138      	cbz	r0, 993a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1282>
    992a:	f7fe ffd1 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    992e:	68a1      	ldr	r1, [r4, #8]
    9930:	2010      	movs	r0, #16
    9932:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9936:	2000      	movs	r0, #0
    9938:	bd10      	pop	{r4, pc}
    993a:	68a0      	ldr	r0, [r4, #8]
    993c:	2301      	movs	r3, #1
    993e:	2105      	movs	r1, #5
    9940:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9944:	3070      	adds	r0, #112	; 0x70
    9946:	f003 fd1f 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    994a:	b108      	cbz	r0, 9950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>
    994c:	2008      	movs	r0, #8
    994e:	bd10      	pop	{r4, pc}
    9950:	2001      	movs	r0, #1
    9952:	bd10      	pop	{r4, pc}
    9954:	20000118 	.word	0x20000118
    9958:	4806      	ldr	r0, [pc, #24]	; (9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12bc>)
    995a:	6880      	ldr	r0, [r0, #8]
    995c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9960:	2911      	cmp	r1, #17
    9962:	d001      	beq.n	9968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    9964:	2002      	movs	r0, #2
    9966:	4770      	bx	lr
    9968:	2112      	movs	r1, #18
    996a:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    996e:	2000      	movs	r0, #0
    9970:	4770      	bx	lr
    9972:	0000      	.short	0x0000
    9974:	20000118 	.word	0x20000118
    9978:	b570      	push	{r4, r5, r6, lr}
    997a:	4c30      	ldr	r4, [pc, #192]	; (9a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1384>)
    997c:	2301      	movs	r3, #1
    997e:	210b      	movs	r1, #11
    9980:	68a0      	ldr	r0, [r4, #8]
    9982:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9986:	3070      	adds	r0, #112	; 0x70
    9988:	f003 fcfe 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    998c:	bb48      	cbnz	r0, 99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x132a>
    998e:	68a0      	ldr	r0, [r4, #8]
    9990:	2301      	movs	r3, #1
    9992:	2100      	movs	r1, #0
    9994:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9998:	3070      	adds	r0, #112	; 0x70
    999a:	f003 fcf5 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    999e:	b1f0      	cbz	r0, 99de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1326>
    99a0:	68a0      	ldr	r0, [r4, #8]
    99a2:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    99a6:	2824      	cmp	r0, #36	; 0x24
    99a8:	d01b      	beq.n	99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x132a>
    99aa:	6920      	ldr	r0, [r4, #16]
    99ac:	f003 ff95 	bl	d8da <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    99b0:	b1c8      	cbz	r0, 99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x132e>
    99b2:	68a0      	ldr	r0, [r4, #8]
    99b4:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    99b8:	f041 0104 	orr.w	r1, r1, #4
    99bc:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    99c0:	6921      	ldr	r1, [r4, #16]
    99c2:	794a      	ldrb	r2, [r1, #5]
    99c4:	f002 0207 	and.w	r2, r2, #7
    99c8:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    99cc:	7909      	ldrb	r1, [r1, #4]
    99ce:	f001 0107 	and.w	r1, r1, #7
    99d2:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    99d6:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    99da:	bb3b      	cbnz	r3, 9a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1374>
    99dc:	e007      	b.n	99ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1336>
    99de:	2001      	movs	r0, #1
    99e0:	bd70      	pop	{r4, r5, r6, pc}
    99e2:	2020      	movs	r0, #32
    99e4:	bd70      	pop	{r4, r5, r6, pc}
    99e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99ea:	f7ff beb5 	b.w	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a0>
    99ee:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    99f2:	2b01      	cmp	r3, #1
    99f4:	d01a      	beq.n	9a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1374>
    99f6:	f100 0366 	add.w	r3, r0, #102	; 0x66
    99fa:	2501      	movs	r5, #1
    99fc:	785e      	ldrb	r6, [r3, #1]
    99fe:	428e      	cmp	r6, r1
    9a00:	d106      	bne.n	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    9a02:	7819      	ldrb	r1, [r3, #0]
    9a04:	4291      	cmp	r1, r2
    9a06:	d103      	bne.n	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    9a08:	2102      	movs	r1, #2
    9a0a:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9a0e:	e00d      	b.n	9a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1374>
    9a10:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
    9a14:	700d      	strb	r5, [r1, #0]
    9a16:	8802      	ldrh	r2, [r0, #0]
    9a18:	804a      	strh	r2, [r1, #2]
    9a1a:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    9a1e:	710a      	strb	r2, [r1, #4]
    9a20:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    9a24:	7148      	strb	r0, [r1, #5]
    9a26:	78e0      	ldrb	r0, [r4, #3]
    9a28:	f7fa f946 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a2c:	68a1      	ldr	r1, [r4, #8]
    9a2e:	2021      	movs	r0, #33	; 0x21
    9a30:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9a34:	f7fe ff4c 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    9a38:	2000      	movs	r0, #0
    9a3a:	bd70      	pop	{r4, r5, r6, pc}
    9a3c:	20000118 	.word	0x20000118
    9a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a44:	4c4e      	ldr	r4, [pc, #312]	; (9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    9a46:	68a0      	ldr	r0, [r4, #8]
    9a48:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    9a4c:	2920      	cmp	r1, #32
    9a4e:	d009      	beq.n	9a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>
    9a50:	f05f 0700 	movs.w	r7, #0
    9a54:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9a58:	2922      	cmp	r1, #34	; 0x22
    9a5a:	d005      	beq.n	9a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>
    9a5c:	b37f      	cbz	r7, 9abe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1406>
    9a5e:	f100 057c 	add.w	r5, r0, #124	; 0x7c
    9a62:	e003      	b.n	9a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    9a64:	2701      	movs	r7, #1
    9a66:	e7f5      	b.n	9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>
    9a68:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    9a6c:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9a70:	f041 0104 	orr.w	r1, r1, #4
    9a74:	7001      	strb	r1, [r0, #0]
    9a76:	6920      	ldr	r0, [r4, #16]
    9a78:	f7fc fa54 	bl	5f24 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9a7c:	f04f 0801 	mov.w	r8, #1
    9a80:	2600      	movs	r6, #0
    9a82:	b300      	cbz	r0, 9ac6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    9a84:	4639      	mov	r1, r7
    9a86:	6920      	ldr	r0, [r4, #16]
    9a88:	f7fe ffda 	bl	8a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    9a8c:	b1d8      	cbz	r0, 9ac6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    9a8e:	466a      	mov	r2, sp
    9a90:	6921      	ldr	r1, [r4, #16]
    9a92:	68a0      	ldr	r0, [r4, #8]
    9a94:	f003 fdae 	bl	d5f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9a98:	b380      	cbz	r0, 9afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1444>
    9a9a:	6920      	ldr	r0, [r4, #16]
    9a9c:	f003 fef9 	bl	d892 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9aa0:	68a1      	ldr	r1, [r4, #8]
    9aa2:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9aa6:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
    9aaa:	f004 fbe2 	bl	e272 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9aae:	b3d0      	cbz	r0, 9b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146e>
    9ab0:	68a0      	ldr	r0, [r4, #8]
    9ab2:	2128      	movs	r1, #40	; 0x28
    9ab4:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9ab8:	f880 808c 	strb.w	r8, [r0, #140]	; 0x8c
    9abc:	e053      	b.n	9b66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    9abe:	e7ff      	b.n	9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1408>
    9ac0:	2002      	movs	r0, #2
    9ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ac6:	68a0      	ldr	r0, [r4, #8]
    9ac8:	f04f 0900 	mov.w	r9, #0
    9acc:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9ad0:	2901      	cmp	r1, #1
    9ad2:	d014      	beq.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    9ad4:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9ad8:	b1ef      	cbz	r7, 9b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    9ada:	6920      	ldr	r0, [r4, #16]
    9adc:	68a1      	ldr	r1, [r4, #8]
    9ade:	78c0      	ldrb	r0, [r0, #3]
    9ae0:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    9ae4:	fa08 f200 	lsl.w	r2, r8, r0
    9ae8:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9aec:	b158      	cbz	r0, 9b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144e>
    9aee:	200a      	movs	r0, #10
    9af0:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    9af4:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9af8:	b998      	cbnz	r0, 9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    9afa:	e007      	b.n	9b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>
    9afc:	e014      	b.n	9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>
    9afe:	201e      	movs	r0, #30
    9b00:	f7ff fd08 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9b04:	e7e8      	b.n	9ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    9b06:	f240 31c7 	movw	r1, #967	; 0x3c7
    9b0a:	e001      	b.n	9b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    9b0c:	f240 31cf 	movw	r1, #975	; 0x3cf
    9b10:	2031      	movs	r0, #49	; 0x31
    9b12:	f7fa fa69 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b16:	702e      	strb	r6, [r5, #0]
    9b18:	f7fe fee6 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9b1c:	f7ff fe1c 	bl	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a0>
    9b20:	4681      	mov	r9, r0
    9b22:	4648      	mov	r0, r9
    9b24:	e7cd      	b.n	9ac2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140a>
    9b26:	e013      	b.n	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    9b28:	68a0      	ldr	r0, [r4, #8]
    9b2a:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9b2e:	2901      	cmp	r1, #1
    9b30:	d009      	beq.n	9b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148e>
    9b32:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9b36:	68a0      	ldr	r0, [r4, #8]
    9b38:	f100 017d 	add.w	r1, r0, #125	; 0x7d
    9b3c:	428d      	cmp	r5, r1
    9b3e:	d112      	bne.n	9b66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    9b40:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    9b44:	e00f      	b.n	9b66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    9b46:	2000      	movs	r0, #0
    9b48:	f7ff fce4 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9b4c:	702e      	strb	r6, [r5, #0]
    9b4e:	e7f2      	b.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147e>
    9b50:	68a0      	ldr	r0, [r4, #8]
    9b52:	f89d 1000 	ldrb.w	r1, [sp]
    9b56:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9b5a:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9b5e:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    9b62:	2024      	movs	r0, #36	; 0x24
    9b64:	7028      	strb	r0, [r5, #0]
    9b66:	68a0      	ldr	r0, [r4, #8]
    9b68:	f100 017d 	add.w	r1, r0, #125	; 0x7d
    9b6c:	428d      	cmp	r5, r1
    9b6e:	d102      	bne.n	9b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14be>
    9b70:	f7fe feba 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9b74:	e001      	b.n	9b7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c2>
    9b76:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9b7a:	2000      	movs	r0, #0
    9b7c:	e7a1      	b.n	9ac2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140a>
    9b7e:	0000      	.short	0x0000
    9b80:	20000118 	.word	0x20000118
    9b84:	b510      	push	{r4, lr}
    9b86:	4c0a      	ldr	r4, [pc, #40]	; (9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14f8>)
    9b88:	68a0      	ldr	r0, [r4, #8]
    9b8a:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9b8e:	f041 0104 	orr.w	r1, r1, #4
    9b92:	7001      	strb	r1, [r0, #0]
    9b94:	6920      	ldr	r0, [r4, #16]
    9b96:	f003 feaa 	bl	d8ee <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9b9a:	2816      	cmp	r0, #22
    9b9c:	d001      	beq.n	9ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ea>
    9b9e:	2000      	movs	r0, #0
    9ba0:	bd10      	pop	{r4, pc}
    9ba2:	6920      	ldr	r0, [r4, #16]
    9ba4:	f003 fea5 	bl	d8f2 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9bac:	f7fe be6e 	b.w	888c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>
    9bb0:	20000118 	.word	0x20000118
    9bb4:	4802      	ldr	r0, [pc, #8]	; (9bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>)
    9bb6:	6900      	ldr	r0, [r0, #16]
    9bb8:	7900      	ldrb	r0, [r0, #4]
    9bba:	f7fe be67 	b.w	888c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>
    9bbe:	0000      	.short	0x0000
    9bc0:	20000118 	.word	0x20000118
    9bc4:	b510      	push	{r4, lr}
    9bc6:	4c08      	ldr	r4, [pc, #32]	; (9be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1530>)
    9bc8:	68a0      	ldr	r0, [r4, #8]
    9bca:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9bce:	2817      	cmp	r0, #23
    9bd0:	d001      	beq.n	9bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    9bd2:	2002      	movs	r0, #2
    9bd4:	bd10      	pop	{r4, pc}
    9bd6:	f7fe fe87 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9bda:	68a1      	ldr	r1, [r4, #8]
    9bdc:	201b      	movs	r0, #27
    9bde:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9be2:	2000      	movs	r0, #0
    9be4:	bd10      	pop	{r4, pc}
    9be6:	0000      	.short	0x0000
    9be8:	20000118 	.word	0x20000118
    9bec:	b510      	push	{r4, lr}
    9bee:	4c0b      	ldr	r4, [pc, #44]	; (9c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>)
    9bf0:	2301      	movs	r3, #1
    9bf2:	4619      	mov	r1, r3
    9bf4:	68a0      	ldr	r0, [r4, #8]
    9bf6:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9bfa:	3070      	adds	r0, #112	; 0x70
    9bfc:	f003 fbc4 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c00:	b108      	cbz	r0, 9c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154e>
    9c02:	2000      	movs	r0, #0
    9c04:	bd10      	pop	{r4, pc}
    9c06:	6920      	ldr	r0, [r4, #16]
    9c08:	f003 fe47 	bl	d89a <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9c0c:	68a1      	ldr	r1, [r4, #8]
    9c0e:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    9c12:	2007      	movs	r0, #7
    9c14:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    9c18:	e7f3      	b.n	9c02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    9c1a:	0000      	.short	0x0000
    9c1c:	20000118 	.word	0x20000118
    9c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c24:	4c37      	ldr	r4, [pc, #220]	; (9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>)
    9c26:	2600      	movs	r6, #0
    9c28:	4620      	mov	r0, r4
    9c2a:	68a1      	ldr	r1, [r4, #8]
    9c2c:	6900      	ldr	r0, [r0, #16]
    9c2e:	2701      	movs	r7, #1
    9c30:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
    9c34:	7900      	ldrb	r0, [r0, #4]
    9c36:	2b0e      	cmp	r3, #14
    9c38:	d101      	bne.n	9c3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1586>
    9c3a:	2812      	cmp	r0, #18
    9c3c:	d006      	beq.n	9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1594>
    9c3e:	4a31      	ldr	r2, [pc, #196]	; (9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>)
    9c40:	2500      	movs	r5, #0
    9c42:	6892      	ldr	r2, [r2, #8]
    9c44:	32b4      	adds	r2, #180	; 0xb4
    9c46:	2b1c      	cmp	r3, #28
    9c48:	d004      	beq.n	9c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159c>
    9c4a:	e005      	b.n	9c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15a0>
    9c4c:	f7ff fe4c 	bl	98e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1230>
    9c50:	4606      	mov	r6, r0
    9c52:	e054      	b.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9c54:	2814      	cmp	r0, #20
    9c56:	d002      	beq.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15a6>
    9c58:	2b04      	cmp	r3, #4
    9c5a:	d00b      	beq.n	9c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    9c5c:	e00c      	b.n	9c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9c5e:	f881 507c 	strb.w	r5, [r1, #124]	; 0x7c
    9c62:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    9c66:	2105      	movs	r1, #5
    9c68:	4610      	mov	r0, r2
    9c6a:	f004 fab7 	bl	e1dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x180>
    9c6e:	f7fe ffdb 	bl	8c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    9c72:	e044      	b.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9c74:	280e      	cmp	r0, #14
    9c76:	d002      	beq.n	9c7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c6>
    9c78:	2b20      	cmp	r3, #32
    9c7a:	d010      	beq.n	9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e6>
    9c7c:	e011      	b.n	9ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    9c7e:	f881 507c 	strb.w	r5, [r1, #124]	; 0x7c
    9c82:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    9c86:	8808      	ldrh	r0, [r1, #0]
    9c88:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    9c8c:	201a      	movs	r0, #26
    9c8e:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    9c92:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    9c96:	78e0      	ldrb	r0, [r4, #3]
    9c98:	f7fa f80e 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9c9c:	e02f      	b.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9c9e:	2816      	cmp	r0, #22
    9ca0:	d006      	beq.n	9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    9ca2:	2b26      	cmp	r3, #38	; 0x26
    9ca4:	d101      	bne.n	9caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f2>
    9ca6:	2816      	cmp	r0, #22
    9ca8:	d002      	beq.n	9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    9caa:	2817      	cmp	r0, #23
    9cac:	d014      	beq.n	9cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    9cae:	e026      	b.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9cb0:	f801 5f7c 	strb.w	r5, [r1, #124]!
    9cb4:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
    9cb8:	7848      	ldrb	r0, [r1, #1]
    9cba:	2821      	cmp	r0, #33	; 0x21
    9cbc:	d01f      	beq.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9cbe:	2108      	movs	r1, #8
    9cc0:	4610      	mov	r0, r2
    9cc2:	f004 fa8b 	bl	e1dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x180>
    9cc6:	68a0      	ldr	r0, [r4, #8]
    9cc8:	210b      	movs	r1, #11
    9cca:	30b4      	adds	r0, #180	; 0xb4
    9ccc:	f004 fa86 	bl	e1dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x180>
    9cd0:	201a      	movs	r0, #26
    9cd2:	f7ff fc1f 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9cd6:	e012      	b.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9cd8:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    9cdc:	2822      	cmp	r0, #34	; 0x22
    9cde:	d10e      	bne.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9ce0:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    9ce4:	f7fe fe00 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9ce8:	68a0      	ldr	r0, [r4, #8]
    9cea:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    9cee:	2801      	cmp	r0, #1
    9cf0:	d102      	bne.n	9cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1640>
    9cf2:	2000      	movs	r0, #0
    9cf4:	f7ff fc0e 	bl	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9cf8:	68a0      	ldr	r0, [r4, #8]
    9cfa:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    9cfe:	4630      	mov	r0, r6
    9d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d04:	20000118 	.word	0x20000118
    9d08:	b570      	push	{r4, r5, r6, lr}
    9d0a:	4c2d      	ldr	r4, [pc, #180]	; (9dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1708>)
    9d0c:	68a0      	ldr	r0, [r4, #8]
    9d0e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9d12:	0789      	lsls	r1, r1, #30
    9d14:	d507      	bpl.n	9d26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166e>
    9d16:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    9d1a:	2301      	movs	r3, #1
    9d1c:	2108      	movs	r1, #8
    9d1e:	3070      	adds	r0, #112	; 0x70
    9d20:	f003 fb32 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d24:	b1e8      	cbz	r0, 9d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16aa>
    9d26:	68a0      	ldr	r0, [r4, #8]
    9d28:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    9d2c:	0780      	lsls	r0, r0, #30
    9d2e:	d412      	bmi.n	9d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169e>
    9d30:	6920      	ldr	r0, [r4, #16]
    9d32:	f003 fdb4 	bl	d89e <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9d36:	68a1      	ldr	r1, [r4, #8]
    9d38:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    9d3c:	6920      	ldr	r0, [r4, #16]
    9d3e:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9d42:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    9d46:	8840      	ldrh	r0, [r0, #2]
    9d48:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9d4c:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    9d50:	f040 0002 	orr.w	r0, r0, #2
    9d54:	7008      	strb	r0, [r1, #0]
    9d56:	68a0      	ldr	r0, [r4, #8]
    9d58:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9d5c:	07c9      	lsls	r1, r1, #31
    9d5e:	d002      	beq.n	9d66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ae>
    9d60:	e010      	b.n	9d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16cc>
    9d62:	2001      	movs	r0, #1
    9d64:	bd70      	pop	{r4, r5, r6, pc}
    9d66:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9d6a:	078a      	lsls	r2, r1, #30
    9d6c:	d504      	bpl.n	9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
    9d6e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    9d72:	2031      	movs	r0, #49	; 0x31
    9d74:	f7fa f938 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d78:	f041 0102 	orr.w	r1, r1, #2
    9d7c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9d80:	f7fe fda6 	bl	88d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    9d84:	68a0      	ldr	r0, [r4, #8]
    9d86:	2500      	movs	r5, #0
    9d88:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    9d8c:	2906      	cmp	r1, #6
    9d8e:	d106      	bne.n	9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e6>
    9d90:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    9d94:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9d98:	78e0      	ldrb	r0, [r4, #3]
    9d9a:	f7f9 ff8d 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9d9e:	68a0      	ldr	r0, [r4, #8]
    9da0:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    9da4:	b151      	cbz	r1, 9dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1704>
    9da6:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    9daa:	78e0      	ldrb	r0, [r4, #3]
    9dac:	f7f9 ff84 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9db0:	68a0      	ldr	r0, [r4, #8]
    9db2:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
    9db6:	b909      	cbnz	r1, 9dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1704>
    9db8:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9dbc:	2000      	movs	r0, #0
    9dbe:	bd70      	pop	{r4, r5, r6, pc}
    9dc0:	20000118 	.word	0x20000118
    9dc4:	b510      	push	{r4, lr}
    9dc6:	4c17      	ldr	r4, [pc, #92]	; (9e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>)
    9dc8:	68a3      	ldr	r3, [r4, #8]
    9dca:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    9dce:	2808      	cmp	r0, #8
    9dd0:	d20e      	bcs.n	9df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1738>
    9dd2:	f100 0208 	add.w	r2, r0, #8
    9dd6:	f1c0 0008 	rsb	r0, r0, #8
    9dda:	b2c1      	uxtb	r1, r0
    9ddc:	1898      	adds	r0, r3, r2
    9dde:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9de2:	f7fa f991 	bl	4108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9de6:	68a1      	ldr	r1, [r4, #8]
    9de8:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    9dec:	4410      	add	r0, r2
    9dee:	7008      	strb	r0, [r1, #0]
    9df0:	68a3      	ldr	r3, [r4, #8]
    9df2:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    9df6:	3808      	subs	r0, #8
    9df8:	2804      	cmp	r0, #4
    9dfa:	d211      	bcs.n	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    9dfc:	1d02      	adds	r2, r0, #4
    9dfe:	f1c0 0004 	rsb	r0, r0, #4
    9e02:	b2c1      	uxtb	r1, r0
    9e04:	1898      	adds	r0, r3, r2
    9e06:	30d8      	adds	r0, #216	; 0xd8
    9e08:	f7fa f97e 	bl	4108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9e0c:	68a0      	ldr	r0, [r4, #8]
    9e0e:	2100      	movs	r1, #0
    9e10:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    9e14:	2101      	movs	r1, #1
    9e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e1a:	2004      	movs	r0, #4
    9e1c:	f7ff ba98 	b.w	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    9e20:	bd10      	pop	{r4, pc}
    9e22:	0000      	.short	0x0000
    9e24:	20000118 	.word	0x20000118
    9e28:	4804      	ldr	r0, [pc, #16]	; (9e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1784>)
    9e2a:	2127      	movs	r1, #39	; 0x27
    9e2c:	6880      	ldr	r0, [r0, #8]
    9e2e:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    9e32:	2100      	movs	r1, #0
    9e34:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    9e38:	4770      	bx	lr
    9e3a:	0000      	.short	0x0000
    9e3c:	20000118 	.word	0x20000118
    9e40:	4809      	ldr	r0, [pc, #36]	; (9e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b0>)
    9e42:	b510      	push	{r4, lr}
    9e44:	6880      	ldr	r0, [r0, #8]
    9e46:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9e4a:	2914      	cmp	r1, #20
    9e4c:	d004      	beq.n	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a0>
    9e4e:	f240 6187 	movw	r1, #1671	; 0x687
    9e52:	2031      	movs	r0, #49	; 0x31
    9e54:	f7fa f8c8 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e58:	2101      	movs	r1, #1
    9e5a:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9e5e:	2115      	movs	r1, #21
    9e60:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9e64:	bd10      	pop	{r4, pc}
    9e66:	0000      	.short	0x0000
    9e68:	20000118 	.word	0x20000118
    9e6c:	b510      	push	{r4, lr}
    9e6e:	4c0a      	ldr	r4, [pc, #40]	; (9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e0>)
    9e70:	68a0      	ldr	r0, [r4, #8]
    9e72:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9e76:	07c0      	lsls	r0, r0, #31
    9e78:	d008      	beq.n	9e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>
    9e7a:	f7fe fd35 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9e7e:	68a0      	ldr	r0, [r4, #8]
    9e80:	f810 1f7e 	ldrb.w	r1, [r0, #126]!
    9e84:	f021 0101 	bic.w	r1, r1, #1
    9e88:	7001      	strb	r1, [r0, #0]
    9e8a:	bd10      	pop	{r4, pc}
    9e8c:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    9e90:	2031      	movs	r0, #49	; 0x31
    9e92:	f7fa f8a9 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e96:	0000      	.short	0x0000
    9e98:	20000118 	.word	0x20000118
    9e9c:	b510      	push	{r4, lr}
    9e9e:	4c0a      	ldr	r4, [pc, #40]	; (9ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>)
    9ea0:	2301      	movs	r3, #1
    9ea2:	2100      	movs	r1, #0
    9ea4:	68a0      	ldr	r0, [r4, #8]
    9ea6:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    9eaa:	3070      	adds	r0, #112	; 0x70
    9eac:	f003 fa6c 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9eb0:	b120      	cbz	r0, 9ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>
    9eb2:	68a1      	ldr	r1, [r4, #8]
    9eb4:	201c      	movs	r0, #28
    9eb6:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    9eba:	bd10      	pop	{r4, pc}
    9ebc:	f240 61f5 	movw	r1, #1781	; 0x6f5
    9ec0:	2031      	movs	r0, #49	; 0x31
    9ec2:	f7fa f891 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ec6:	0000      	.short	0x0000
    9ec8:	20000118 	.word	0x20000118
    9ecc:	480a      	ldr	r0, [pc, #40]	; (9ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>)
    9ece:	b510      	push	{r4, lr}
    9ed0:	6880      	ldr	r0, [r0, #8]
    9ed2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9ed6:	f3c1 1201 	ubfx	r2, r1, #4, #2
    9eda:	2a01      	cmp	r2, #1
    9edc:	d004      	beq.n	9ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1830>
    9ede:	f240 61fc 	movw	r1, #1788	; 0x6fc
    9ee2:	2031      	movs	r0, #49	; 0x31
    9ee4:	f7fa f880 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ee8:	f021 0110 	bic.w	r1, r1, #16
    9eec:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ef4:	f7fe bcf8 	b.w	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9ef8:	20000118 	.word	0x20000118
    9efc:	b510      	push	{r4, lr}
    9efe:	4c0a      	ldr	r4, [pc, #40]	; (9f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>)
    9f00:	2301      	movs	r3, #1
    9f02:	2100      	movs	r1, #0
    9f04:	68a0      	ldr	r0, [r4, #8]
    9f06:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    9f0a:	3070      	adds	r0, #112	; 0x70
    9f0c:	f003 fa3c 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f10:	b120      	cbz	r0, 9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1864>
    9f12:	68a1      	ldr	r1, [r4, #8]
    9f14:	200e      	movs	r0, #14
    9f16:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    9f1a:	bd10      	pop	{r4, pc}
    9f1c:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    9f20:	2031      	movs	r0, #49	; 0x31
    9f22:	f7fa f861 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f26:	0000      	.short	0x0000
    9f28:	20000118 	.word	0x20000118
    9f2c:	4804      	ldr	r0, [pc, #16]	; (9f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
    9f2e:	6880      	ldr	r0, [r0, #8]
    9f30:	f810 1f7e 	ldrb.w	r1, [r0, #126]!
    9f34:	f021 0104 	bic.w	r1, r1, #4
    9f38:	7001      	strb	r1, [r0, #0]
    9f3a:	f7fe bcd5 	b.w	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    9f3e:	0000      	.short	0x0000
    9f40:	20000118 	.word	0x20000118
    9f44:	4809      	ldr	r0, [pc, #36]	; (9f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18b4>)
    9f46:	b510      	push	{r4, lr}
    9f48:	6880      	ldr	r0, [r0, #8]
    9f4a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9f4e:	2910      	cmp	r1, #16
    9f50:	d004      	beq.n	9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a4>
    9f52:	f240 617f 	movw	r1, #1663	; 0x67f
    9f56:	2031      	movs	r0, #49	; 0x31
    9f58:	f7fa f846 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f5c:	2101      	movs	r1, #1
    9f5e:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9f62:	2111      	movs	r1, #17
    9f64:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9f68:	bd10      	pop	{r4, pc}
    9f6a:	0000      	.short	0x0000
    9f6c:	20000118 	.word	0x20000118
    9f70:	b510      	push	{r4, lr}
    9f72:	4c0a      	ldr	r4, [pc, #40]	; (9f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e4>)
    9f74:	2301      	movs	r3, #1
    9f76:	2100      	movs	r1, #0
    9f78:	68a0      	ldr	r0, [r4, #8]
    9f7a:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    9f7e:	3070      	adds	r0, #112	; 0x70
    9f80:	f003 fa02 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f84:	b120      	cbz	r0, 9f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d8>
    9f86:	68a1      	ldr	r1, [r4, #8]
    9f88:	201f      	movs	r0, #31
    9f8a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    9f8e:	bd10      	pop	{r4, pc}
    9f90:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    9f94:	2031      	movs	r0, #49	; 0x31
    9f96:	f7fa f827 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f9a:	0000      	.short	0x0000
    9f9c:	20000118 	.word	0x20000118
    9fa0:	4808      	ldr	r0, [pc, #32]	; (9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190c>)
    9fa2:	b510      	push	{r4, lr}
    9fa4:	6880      	ldr	r0, [r0, #8]
    9fa6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9faa:	2921      	cmp	r1, #33	; 0x21
    9fac:	d005      	beq.n	9fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1902>
    9fae:	b121      	cbz	r1, 9fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1902>
    9fb0:	f240 710f 	movw	r1, #1807	; 0x70f
    9fb4:	2031      	movs	r0, #49	; 0x31
    9fb6:	f7fa f817 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fba:	2122      	movs	r1, #34	; 0x22
    9fbc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9fc0:	bd10      	pop	{r4, pc}
    9fc2:	0000      	.short	0x0000
    9fc4:	20000118 	.word	0x20000118
    9fc8:	4807      	ldr	r0, [pc, #28]	; (9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1930>)
    9fca:	b510      	push	{r4, lr}
    9fcc:	6880      	ldr	r0, [r0, #8]
    9fce:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9fd2:	2915      	cmp	r1, #21
    9fd4:	d004      	beq.n	9fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    9fd6:	f240 6194 	movw	r1, #1684	; 0x694
    9fda:	2031      	movs	r0, #49	; 0x31
    9fdc:	f7fa f804 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fe0:	2119      	movs	r1, #25
    9fe2:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9fe6:	bd10      	pop	{r4, pc}
    9fe8:	20000118 	.word	0x20000118
    9fec:	4807      	ldr	r0, [pc, #28]	; (a00c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1954>)
    9fee:	b510      	push	{r4, lr}
    9ff0:	6880      	ldr	r0, [r0, #8]
    9ff2:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9ff6:	2915      	cmp	r1, #21
    9ff8:	d004      	beq.n	a004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    9ffa:	f240 618e 	movw	r1, #1678	; 0x68e
    9ffe:	2031      	movs	r0, #49	; 0x31
    a000:	f7f9 fff2 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a004:	2117      	movs	r1, #23
    a006:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a00a:	bd10      	pop	{r4, pc}
    a00c:	20000118 	.word	0x20000118
    a010:	b570      	push	{r4, r5, r6, lr}
    a012:	4d1b      	ldr	r5, [pc, #108]	; (a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c8>)
    a014:	68a8      	ldr	r0, [r5, #8]
    a016:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a01a:	291b      	cmp	r1, #27
    a01c:	d002      	beq.n	a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196c>
    a01e:	f240 61ae 	movw	r1, #1710	; 0x6ae
    a022:	e007      	b.n	a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x197c>
    a024:	2400      	movs	r4, #0
    a026:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    a02a:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    a02e:	b121      	cbz	r1, a03a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1982>
    a030:	f240 61b2 	movw	r1, #1714	; 0x6b2
    a034:	2031      	movs	r0, #49	; 0x31
    a036:	f7f9 ffd7 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a03a:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    a03e:	b141      	cbz	r1, a052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199a>
    a040:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    a044:	8801      	ldrh	r1, [r0, #0]
    a046:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a04a:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a04e:	210c      	movs	r1, #12
    a050:	e008      	b.n	a064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ac>
    a052:	8801      	ldrh	r1, [r0, #0]
    a054:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    a058:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a05c:	2101      	movs	r1, #1
    a05e:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    a062:	210b      	movs	r1, #11
    a064:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    a068:	8800      	ldrh	r0, [r0, #0]
    a06a:	f7fa fbd3 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a06e:	f002 ff08 	bl	ce82 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a072:	78e8      	ldrb	r0, [r5, #3]
    a074:	f7f9 fe20 	bl	3cb8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a078:	68a8      	ldr	r0, [r5, #8]
    a07a:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    a07e:	bd70      	pop	{r4, r5, r6, pc}
    a080:	20000118 	.word	0x20000118
    a084:	b510      	push	{r4, lr}
    a086:	4c08      	ldr	r4, [pc, #32]	; (a0a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f0>)
    a088:	2301      	movs	r3, #1
    a08a:	4619      	mov	r1, r3
    a08c:	68a0      	ldr	r0, [r4, #8]
    a08e:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a092:	3070      	adds	r0, #112	; 0x70
    a094:	f003 f978 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a098:	2800      	cmp	r0, #0
    a09a:	d103      	bne.n	a0a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>
    a09c:	68a1      	ldr	r1, [r4, #8]
    a09e:	2008      	movs	r0, #8
    a0a0:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    a0a4:	bd10      	pop	{r4, pc}
    a0a6:	0000      	.short	0x0000
    a0a8:	20000118 	.word	0x20000118
    a0ac:	4814      	ldr	r0, [pc, #80]	; (a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a48>)
    a0ae:	b510      	push	{r4, lr}
    a0b0:	68c1      	ldr	r1, [r0, #12]
    a0b2:	6880      	ldr	r0, [r0, #8]
    a0b4:	7909      	ldrb	r1, [r1, #4]
    a0b6:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    a0ba:	2a0a      	cmp	r2, #10
    a0bc:	d109      	bne.n	a0d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1a>
    a0be:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    a0c2:	428a      	cmp	r2, r1
    a0c4:	d105      	bne.n	a0d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1a>
    a0c6:	2100      	movs	r1, #0
    a0c8:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    a0cc:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a0d0:	bd10      	pop	{r4, pc}
    a0d2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a0d6:	0713      	lsls	r3, r2, #28
    a0d8:	d507      	bpl.n	a0ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a32>
    a0da:	f022 0108 	bic.w	r1, r2, #8
    a0de:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0e6:	f7fe bbff 	b.w	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    a0ea:	29ff      	cmp	r1, #255	; 0xff
    a0ec:	d004      	beq.n	a0f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a40>
    a0ee:	f240 616a 	movw	r1, #1642	; 0x66a
    a0f2:	2031      	movs	r0, #49	; 0x31
    a0f4:	f7f9 ff78 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0fc:	f7ff be94 	b.w	9e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    a100:	20000118 	.word	0x20000118
    a104:	b510      	push	{r4, lr}
    a106:	4c15      	ldr	r4, [pc, #84]	; (a15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa4>)
    a108:	68a0      	ldr	r0, [r4, #8]
    a10a:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    a10e:	0789      	lsls	r1, r1, #30
    a110:	d411      	bmi.n	a136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a7e>
    a112:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    a116:	2301      	movs	r3, #1
    a118:	2100      	movs	r1, #0
    a11a:	3070      	adds	r0, #112	; 0x70
    a11c:	f003 f934 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a120:	b120      	cbz	r0, a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a74>
    a122:	68a1      	ldr	r1, [r4, #8]
    a124:	2006      	movs	r0, #6
    a126:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    a12a:	e009      	b.n	a140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    a12c:	f240 61d4 	movw	r1, #1748	; 0x6d4
    a130:	2031      	movs	r0, #49	; 0x31
    a132:	f7f9 ff59 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a136:	2100      	movs	r1, #0
    a138:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    a13c:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    a140:	68a0      	ldr	r0, [r4, #8]
    a142:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    a146:	0780      	lsls	r0, r0, #30
    a148:	d507      	bpl.n	a15a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa2>
    a14a:	f7fe fbcd 	bl	88e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    a14e:	68a0      	ldr	r0, [r4, #8]
    a150:	f810 1f7e 	ldrb.w	r1, [r0, #126]!
    a154:	f021 0102 	bic.w	r1, r1, #2
    a158:	7001      	strb	r1, [r0, #0]
    a15a:	bd10      	pop	{r4, pc}
    a15c:	20000118 	.word	0x20000118
    a160:	4808      	ldr	r0, [pc, #32]	; (a184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    a162:	b510      	push	{r4, lr}
    a164:	6880      	ldr	r0, [r0, #8]
    a166:	f890 1082 	ldrb.w	r1, [r0, #130]	; 0x82
    a16a:	b941      	cbnz	r1, a17e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac6>
    a16c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a170:	2301      	movs	r3, #1
    a172:	2106      	movs	r1, #6
    a174:	3070      	adds	r0, #112	; 0x70
    a176:	f003 f907 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a17a:	2800      	cmp	r0, #0
    a17c:	d000      	beq.n	a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
    a17e:	2001      	movs	r0, #1
    a180:	bd10      	pop	{r4, pc}
    a182:	0000      	.short	0x0000
    a184:	20000118 	.word	0x20000118
    a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a18c:	4c4f      	ldr	r4, [pc, #316]	; (a2cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c14>)
    a18e:	4605      	mov	r5, r0
    a190:	68a0      	ldr	r0, [r4, #8]
    a192:	b109      	cbz	r1, a198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae0>
    a194:	2100      	movs	r1, #0
    a196:	e004      	b.n	a1a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    a198:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    a19c:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    a1a0:	4411      	add	r1, r2
    a1a2:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    a1a6:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    a1aa:	b939      	cbnz	r1, a1bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    a1ac:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a1b0:	2301      	movs	r3, #1
    a1b2:	4619      	mov	r1, r3
    a1b4:	3070      	adds	r0, #112	; 0x70
    a1b6:	f003 f8e7 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1ba:	b130      	cbz	r0, a1ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b12>
    a1bc:	68a0      	ldr	r0, [r4, #8]
    a1be:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    a1c2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    a1c6:	4411      	add	r1, r2
    a1c8:	8001      	strh	r1, [r0, #0]
    a1ca:	68a0      	ldr	r0, [r4, #8]
    a1cc:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
    a1d0:	b133      	cbz	r3, a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b28>
    a1d2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    a1d6:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    a1da:	4411      	add	r1, r2
    a1dc:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    a1e0:	f990 60aa 	ldrsb.w	r6, [r0, #170]	; 0xaa
    a1e4:	2e00      	cmp	r6, #0
    a1e6:	dd06      	ble.n	a1f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3e>
    a1e8:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    a1ec:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    a1f0:	4411      	add	r1, r2
    a1f2:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    a1f6:	2101      	movs	r1, #1
    a1f8:	273d      	movs	r7, #61	; 0x3d
    a1fa:	b115      	cbz	r5, a202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4a>
    a1fc:	f880 708d 	strb.w	r7, [r0, #141]	; 0x8d
    a200:	e013      	b.n	a22a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b72>
    a202:	7822      	ldrb	r2, [r4, #0]
    a204:	2a02      	cmp	r2, #2
    a206:	d00a      	beq.n	a21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b66>
    a208:	2a01      	cmp	r2, #1
    a20a:	d011      	beq.n	a230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b78>
    a20c:	7862      	ldrb	r2, [r4, #1]
    a20e:	b332      	cbz	r2, a25e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba6>
    a210:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    a214:	f012 0f14 	tst.w	r2, #20
    a218:	d00d      	beq.n	a236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b7e>
    a21a:	211e      	movs	r1, #30
    a21c:	e013      	b.n	a246 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a21e:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    a222:	2a06      	cmp	r2, #6
    a224:	d03d      	beq.n	a2a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    a226:	2216      	movs	r2, #22
    a228:	e03b      	b.n	a2a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    a22a:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    a22e:	e044      	b.n	a2ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c02>
    a230:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    a234:	e035      	b.n	a2a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    a236:	0711      	lsls	r1, r2, #28
    a238:	d502      	bpl.n	a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b88>
    a23a:	f880 708d 	strb.w	r7, [r0, #141]	; 0x8d
    a23e:	e03c      	b.n	a2ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c02>
    a240:	0691      	lsls	r1, r2, #26
    a242:	d503      	bpl.n	a24c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b94>
    a244:	2123      	movs	r1, #35	; 0x23
    a246:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a24a:	e036      	b.n	a2ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c02>
    a24c:	0791      	lsls	r1, r2, #30
    a24e:	d001      	beq.n	a254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9c>
    a250:	212a      	movs	r1, #42	; 0x2a
    a252:	e7f8      	b.n	a246 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a254:	f640 4195 	movw	r1, #3221	; 0xc95
    a258:	2031      	movs	r0, #49	; 0x31
    a25a:	f7f9 fec5 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a25e:	b12b      	cbz	r3, a26c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb4>
    a260:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    a264:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a268:	429a      	cmp	r2, r3
    a26a:	d210      	bcs.n	a28e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd6>
    a26c:	2e00      	cmp	r6, #0
    a26e:	dd05      	ble.n	a27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    a270:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    a274:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a278:	429a      	cmp	r2, r3
    a27a:	d208      	bcs.n	a28e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd6>
    a27c:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    a280:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a284:	4293      	cmp	r3, r2
    a286:	d304      	bcc.n	a292 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    a288:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    a28c:	b10b      	cbz	r3, a292 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    a28e:	2222      	movs	r2, #34	; 0x22
    a290:	e007      	b.n	a2a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    a292:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    a296:	b13b      	cbz	r3, a2a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf0>
    a298:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    a29c:	4293      	cmp	r3, r2
    a29e:	d309      	bcc.n	a2b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    a2a0:	2208      	movs	r2, #8
    a2a2:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    a2a6:	e7c0      	b.n	a22a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b72>
    a2a8:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    a2ac:	2a06      	cmp	r2, #6
    a2ae:	d301      	bcc.n	a2b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    a2b0:	223e      	movs	r2, #62	; 0x3e
    a2b2:	e7f6      	b.n	a2a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    a2b4:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a2b8:	b119      	cbz	r1, a2c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0a>
    a2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a2be:	f003 bfa8 	b.w	e212 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a2c6:	2100      	movs	r1, #0
    a2c8:	f7fd ba40 	b.w	774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a2cc:	20000118 	.word	0x20000118
    a2d0:	b570      	push	{r4, r5, r6, lr}
    a2d2:	4d2d      	ldr	r5, [pc, #180]	; (a388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd0>)
    a2d4:	68a8      	ldr	r0, [r5, #8]
    a2d6:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    a2da:	b151      	cbz	r1, a2f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    a2dc:	2901      	cmp	r1, #1
    a2de:	d008      	beq.n	a2f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    a2e0:	2902      	cmp	r1, #2
    a2e2:	d009      	beq.n	a2f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c40>
    a2e4:	2903      	cmp	r1, #3
    a2e6:	d007      	beq.n	a2f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c40>
    a2e8:	f640 215d 	movw	r1, #2653	; 0xa5d
    a2ec:	2031      	movs	r0, #49	; 0x31
    a2ee:	f7f9 fe7b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f2:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a2f6:	e035      	b.n	a364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cac>
    a2f8:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a2fc:	2908      	cmp	r1, #8
    a2fe:	d034      	beq.n	a36a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb2>
    a300:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a304:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    a308:	2400      	movs	r4, #0
    a30a:	1c8b      	adds	r3, r1, #2
    a30c:	429a      	cmp	r2, r3
    a30e:	d306      	bcc.n	a31e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
    a310:	1a51      	subs	r1, r2, r1
    a312:	1e89      	subs	r1, r1, #2
    a314:	040c      	lsls	r4, r1, #16
    a316:	0c24      	lsrs	r4, r4, #16
    a318:	d001      	beq.n	a31e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
    a31a:	1e64      	subs	r4, r4, #1
    a31c:	b2a4      	uxth	r4, r4
    a31e:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    a322:	b139      	cbz	r1, a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c7c>
    a324:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    a328:	2301      	movs	r3, #1
    a32a:	2109      	movs	r1, #9
    a32c:	3070      	adds	r0, #112	; 0x70
    a32e:	f003 f82b 	bl	d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a332:	b330      	cbz	r0, a382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cca>
    a334:	f7ff ff14 	bl	a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa8>
    a338:	b168      	cbz	r0, a356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9e>
    a33a:	68a9      	ldr	r1, [r5, #8]
    a33c:	2000      	movs	r0, #0
    a33e:	3190      	adds	r1, #144	; 0x90
    a340:	c906      	ldmia	r1, {r1, r2}
    a342:	1c8b      	adds	r3, r1, #2
    a344:	429a      	cmp	r2, r3
    a346:	d303      	bcc.n	a350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a348:	1a50      	subs	r0, r2, r1
    a34a:	1e80      	subs	r0, r0, #2
    a34c:	d000      	beq.n	a350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a34e:	1e40      	subs	r0, r0, #1
    a350:	42a0      	cmp	r0, r4
    a352:	d200      	bcs.n	a356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9e>
    a354:	b284      	uxth	r4, r0
    a356:	b10c      	cbz	r4, a35c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca4>
    a358:	1e64      	subs	r4, r4, #1
    a35a:	b2a4      	uxth	r4, r4
    a35c:	68a8      	ldr	r0, [r5, #8]
    a35e:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    a362:	4421      	add	r1, r4
    a364:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    a368:	bd70      	pop	{r4, r5, r6, pc}
    a36a:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    a36e:	2903      	cmp	r1, #3
    a370:	d3bf      	bcc.n	a2f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    a372:	f830 1f70 	ldrh.w	r1, [r0, #112]!
    a376:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    a378:	4411      	add	r1, r2
    a37a:	1c49      	adds	r1, r1, #1
    a37c:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
    a380:	bd70      	pop	{r4, r5, r6, pc}
    a382:	2400      	movs	r4, #0
    a384:	e7ea      	b.n	a35c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca4>
    a386:	0000      	.short	0x0000
    a388:	20000118 	.word	0x20000118

0000a38c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a38c:	4903      	ldr	r1, [pc, #12]	; (a39c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a38e:	888a      	ldrh	r2, [r1, #4]
    a390:	8002      	strh	r2, [r0, #0]
    a392:	7889      	ldrb	r1, [r1, #2]
    a394:	7081      	strb	r1, [r0, #2]
    a396:	2000      	movs	r0, #0
    a398:	4770      	bx	lr
    a39a:	0000      	.short	0x0000
    a39c:	20000e48 	.word	0x20000e48

0000a3a0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    a3a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a3a4:	460d      	mov	r5, r1
    a3a6:	4606      	mov	r6, r0
    a3a8:	f000 fc32 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a3ac:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a3b0:	b1e0      	cbz	r0, a3ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    a3b2:	8830      	ldrh	r0, [r6, #0]
    a3b4:	4669      	mov	r1, sp
    a3b6:	f002 ffbd 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a3ba:	2800      	cmp	r0, #0
    a3bc:	d114      	bne.n	a3e8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    a3be:	f8dd 4004 	ldr.w	r4, [sp, #4]
    a3c2:	2700      	movs	r7, #0
    a3c4:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    a3c8:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    a3cc:	f004 fbc9 	bl	eb62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a3d0:	70a8      	strb	r0, [r5, #2]
    a3d2:	7860      	ldrb	r0, [r4, #1]
    a3d4:	f004 fbc5 	bl	eb62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    a3d8:	70e8      	strb	r0, [r5, #3]
    a3da:	78a0      	ldrb	r0, [r4, #2]
    a3dc:	3c66      	subs	r4, #102	; 0x66
    a3de:	2800      	cmp	r0, #0
    a3e0:	d1f0      	bne.n	a3c4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    a3e2:	8830      	ldrh	r0, [r6, #0]
    a3e4:	8028      	strh	r0, [r5, #0]
    a3e6:	2000      	movs	r0, #0
    a3e8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a3ec:	2001      	movs	r0, #1
    a3ee:	e7fb      	b.n	a3e8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000a3f0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a3f0:	b51c      	push	{r2, r3, r4, lr}
    a3f2:	8800      	ldrh	r0, [r0, #0]
    a3f4:	4669      	mov	r1, sp
    a3f6:	f002 ff9d 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d10b      	bne.n	a416 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    a3fe:	480b      	ldr	r0, [pc, #44]	; (a42c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    a400:	7800      	ldrb	r0, [r0, #0]
    a402:	b188      	cbz	r0, a428 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    a404:	9801      	ldr	r0, [sp, #4]
    a406:	f004 fcf4 	bl	edf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    a40a:	b128      	cbz	r0, a418 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    a40c:	9801      	ldr	r0, [sp, #4]
    a40e:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    a412:	b118      	cbz	r0, a41c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    a414:	203a      	movs	r0, #58	; 0x3a
    a416:	bd1c      	pop	{r2, r3, r4, pc}
    a418:	2002      	movs	r0, #2
    a41a:	bd1c      	pop	{r2, r3, r4, pc}
    a41c:	9901      	ldr	r1, [sp, #4]
    a41e:	2001      	movs	r0, #1
    a420:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    a424:	2000      	movs	r0, #0
    a426:	bd1c      	pop	{r2, r3, r4, pc}
    a428:	2011      	movs	r0, #17
    a42a:	bd1c      	pop	{r2, r3, r4, pc}
    a42c:	200001f4 	.word	0x200001f4

0000a430 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a430:	b510      	push	{r4, lr}
    a432:	4604      	mov	r4, r0
    a434:	f004 fcd4 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    a438:	b130      	cbz	r0, a448 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a43a:	4804      	ldr	r0, [pc, #16]	; (a44c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a43c:	8941      	ldrh	r1, [r0, #10]
    a43e:	8021      	strh	r1, [r4, #0]
    a440:	8980      	ldrh	r0, [r0, #12]
    a442:	8060      	strh	r0, [r4, #2]
    a444:	2000      	movs	r0, #0
    a446:	bd10      	pop	{r4, pc}
    a448:	2001      	movs	r0, #1
    a44a:	bd10      	pop	{r4, pc}
    a44c:	20000f50 	.word	0x20000f50

0000a450 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    a450:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a452:	4605      	mov	r5, r0
    a454:	4812      	ldr	r0, [pc, #72]	; (a4a0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x50>)
    a456:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    a45a:	6020      	str	r0, [r4, #0]
    a45c:	301f      	adds	r0, #31
    a45e:	60a0      	str	r0, [r4, #8]
    a460:	f000 faf0 	bl	aa44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>
    a464:	f894 0020 	ldrb.w	r0, [r4, #32]
    a468:	7829      	ldrb	r1, [r5, #0]
    a46a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    a46e:	221f      	movs	r2, #31
    a470:	1c68      	adds	r0, r5, #1
    a472:	f004 fb92 	bl	eb9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    a476:	b120      	cbz	r0, a482 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x32>
    a478:	f241 410b 	movw	r1, #5131	; 0x140b
    a47c:	2039      	movs	r0, #57	; 0x39
    a47e:	f7f9 fdb3 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a482:	f894 0020 	ldrb.w	r0, [r4, #32]
    a486:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    a48a:	9001      	str	r0, [sp, #4]
    a48c:	7828      	ldrb	r0, [r5, #0]
    a48e:	f8ad 0002 	strh.w	r0, [sp, #2]
    a492:	2000      	movs	r0, #0
    a494:	f88d 0000 	strb.w	r0, [sp]
    a498:	4668      	mov	r0, sp
    a49a:	f004 fa28 	bl	e8ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    a49e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a4a0:	20000f82 	.word	0x20000f82

0000a4a4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a4a4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a4a6:	4604      	mov	r4, r0
    a4a8:	f000 fbb2 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a4ac:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a4b0:	b308      	cbz	r0, a4f6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a4b2:	2000      	movs	r0, #0
    a4b4:	f88d 0004 	strb.w	r0, [sp, #4]
    a4b8:	f88d 0008 	strb.w	r0, [sp, #8]
    a4bc:	a802      	add	r0, sp, #8
    a4be:	9000      	str	r0, [sp, #0]
    a4c0:	78a2      	ldrb	r2, [r4, #2]
    a4c2:	7861      	ldrb	r1, [r4, #1]
    a4c4:	7820      	ldrb	r0, [r4, #0]
    a4c6:	ab01      	add	r3, sp, #4
    a4c8:	f004 fc9f 	bl	ee0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    a4cc:	2800      	cmp	r0, #0
    a4ce:	d111      	bne.n	a4f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    a4d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a4d4:	f004 fc03 	bl	ecde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b4>
    a4d8:	b178      	cbz	r0, a4fa <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    a4da:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a4de:	f004 fbfe 	bl	ecde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b4>
    a4e2:	b150      	cbz	r0, a4fa <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    a4e4:	4806      	ldr	r0, [pc, #24]	; (a500 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a4e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a4ea:	7481      	strb	r1, [r0, #18]
    a4ec:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a4f0:	74c1      	strb	r1, [r0, #19]
    a4f2:	2000      	movs	r0, #0
    a4f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a4f6:	2001      	movs	r0, #1
    a4f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a4fa:	2011      	movs	r0, #17
    a4fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a4fe:	0000      	.short	0x0000
    a500:	20000e48 	.word	0x20000e48

0000a504 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    a504:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a506:	4605      	mov	r5, r0
    a508:	4813      	ldr	r0, [pc, #76]	; (a558 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x54>)
    a50a:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    a50e:	6120      	str	r0, [r4, #16]
    a510:	301f      	adds	r0, #31
    a512:	61a0      	str	r0, [r4, #24]
    a514:	f000 faa6 	bl	aa64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2f8>
    a518:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    a51c:	7829      	ldrb	r1, [r5, #0]
    a51e:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    a522:	221f      	movs	r2, #31
    a524:	1c68      	adds	r0, r5, #1
    a526:	3310      	adds	r3, #16
    a528:	f004 fb37 	bl	eb9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    a52c:	b120      	cbz	r0, a538 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x34>
    a52e:	f241 218d 	movw	r1, #4749	; 0x128d
    a532:	2039      	movs	r0, #57	; 0x39
    a534:	f7f9 fd58 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a538:	2000      	movs	r0, #0
    a53a:	f88d 0000 	strb.w	r0, [sp]
    a53e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    a542:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    a546:	6900      	ldr	r0, [r0, #16]
    a548:	9001      	str	r0, [sp, #4]
    a54a:	7828      	ldrb	r0, [r5, #0]
    a54c:	f8ad 0002 	strh.w	r0, [sp, #2]
    a550:	4668      	mov	r0, sp
    a552:	f004 f9e2 	bl	e91a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    a556:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a558:	20000fc0 	.word	0x20000fc0

0000a55c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a55c:	7801      	ldrb	r1, [r0, #0]
    a55e:	b179      	cbz	r1, a580 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a560:	7841      	ldrb	r1, [r0, #1]
    a562:	b169      	cbz	r1, a580 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a564:	8841      	ldrh	r1, [r0, #2]
    a566:	291b      	cmp	r1, #27
    a568:	d30a      	bcc.n	a580 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a56a:	8881      	ldrh	r1, [r0, #4]
    a56c:	291b      	cmp	r1, #27
    a56e:	d307      	bcc.n	a580 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a570:	4904      	ldr	r1, [pc, #16]	; (a584 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a572:	6802      	ldr	r2, [r0, #0]
    a574:	f8c1 2002 	str.w	r2, [r1, #2]
    a578:	8880      	ldrh	r0, [r0, #4]
    a57a:	80c8      	strh	r0, [r1, #6]
    a57c:	2000      	movs	r0, #0
    a57e:	4770      	bx	lr
    a580:	2012      	movs	r0, #18
    a582:	4770      	bx	lr
    a584:	20000e48 	.word	0x20000e48

0000a588 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a588:	6800      	ldr	r0, [r0, #0]
    a58a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a58e:	4288      	cmp	r0, r1
    a590:	d303      	bcc.n	a59a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a592:	4903      	ldr	r1, [pc, #12]	; (a5a0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a594:	6088      	str	r0, [r1, #8]
    a596:	2000      	movs	r0, #0
    a598:	4770      	bx	lr
    a59a:	2012      	movs	r0, #18
    a59c:	4770      	bx	lr
    a59e:	0000      	.short	0x0000
    a5a0:	20000e48 	.word	0x20000e48

0000a5a4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a5a4:	4a03      	ldr	r2, [pc, #12]	; (a5b4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a5a6:	e9d2 1200 	ldrd	r1, r2, [r2]
    a5aa:	6001      	str	r1, [r0, #0]
    a5ac:	6042      	str	r2, [r0, #4]
    a5ae:	2000      	movs	r0, #0
    a5b0:	4770      	bx	lr
    a5b2:	0000      	.short	0x0000
    a5b4:	0000aabc 	.word	0x0000aabc

0000a5b8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    a5b8:	b510      	push	{r4, lr}
    a5ba:	2005      	movs	r0, #5
    a5bc:	f000 fb1e 	bl	abfc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a5c0:	f7fd feee 	bl	83a0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a5c4:	4902      	ldr	r1, [pc, #8]	; (a5d0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    a5c6:	4801      	ldr	r0, [pc, #4]	; (a5cc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    a5c8:	6048      	str	r0, [r1, #4]
    a5ca:	bd10      	pop	{r4, pc}
    a5cc:	0000a689 	.word	0x0000a689
    a5d0:	200001f4 	.word	0x200001f4

0000a5d4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a5d4:	4901      	ldr	r1, [pc, #4]	; (a5dc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    a5d6:	7048      	strb	r0, [r1, #1]
    a5d8:	f000 b802 	b.w	a5e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a5dc:	200001f4 	.word	0x200001f4

0000a5e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a5e0:	b570      	push	{r4, r5, r6, lr}
    a5e2:	f002 fde8 	bl	d1b6 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a5e6:	f7fb f905 	bl	57f4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a5ea:	4c16      	ldr	r4, [pc, #88]	; (a644 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>)
    a5ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a5f0:	2500      	movs	r5, #0
    a5f2:	81e0      	strh	r0, [r4, #14]
    a5f4:	8220      	strh	r0, [r4, #16]
    a5f6:	75e5      	strb	r5, [r4, #23]
    a5f8:	8325      	strh	r5, [r4, #24]
    a5fa:	8025      	strh	r5, [r4, #0]
    a5fc:	f000 fa22 	bl	aa44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>
    a600:	f000 fa30 	bl	aa64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2f8>
    a604:	a010      	add	r0, pc, #64	; (adr r0, a648 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>)
    a606:	4e12      	ldr	r6, [pc, #72]	; (a650 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x70>)
    a608:	6801      	ldr	r1, [r0, #0]
    a60a:	7900      	ldrb	r0, [r0, #4]
    a60c:	7035      	strb	r5, [r6, #0]
    a60e:	f8c6 1001 	str.w	r1, [r6, #1]
    a612:	7170      	strb	r0, [r6, #5]
    a614:	1c71      	adds	r1, r6, #1
    a616:	2000      	movs	r0, #0
    a618:	f003 fbf8 	bl	de0c <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a61c:	201b      	movs	r0, #27
    a61e:	80f0      	strh	r0, [r6, #6]
    a620:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a624:	8131      	strh	r1, [r6, #8]
    a626:	8170      	strh	r0, [r6, #10]
    a628:	81b1      	strh	r1, [r6, #12]
    a62a:	74a5      	strb	r5, [r4, #18]
    a62c:	74e5      	strb	r5, [r4, #19]
    a62e:	2103      	movs	r1, #3
    a630:	70a1      	strb	r1, [r4, #2]
    a632:	70e1      	strb	r1, [r4, #3]
    a634:	80a0      	strh	r0, [r4, #4]
    a636:	80e0      	strh	r0, [r4, #6]
    a638:	f640 60a6 	movw	r0, #3750	; 0xea6
    a63c:	60a0      	str	r0, [r4, #8]
    a63e:	75a5      	strb	r5, [r4, #22]
    a640:	7325      	strb	r5, [r4, #12]
    a642:	bd70      	pop	{r4, r5, r6, pc}
    a644:	20000e48 	.word	0x20000e48
    a648:	ffffffff 	.word	0xffffffff
    a64c:	0000001f 	.word	0x0000001f
    a650:	20000f50 	.word	0x20000f50

0000a654 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    a654:	b510      	push	{r4, lr}
    a656:	b158      	cbz	r0, a670 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    a658:	490a      	ldr	r1, [pc, #40]	; (a684 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    a65a:	780a      	ldrb	r2, [r1, #0]
    a65c:	b16a      	cbz	r2, a67a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    a65e:	2200      	movs	r2, #0
    a660:	7042      	strb	r2, [r0, #1]
    a662:	2303      	movs	r3, #3
    a664:	7003      	strb	r3, [r0, #0]
    a666:	2301      	movs	r3, #1
    a668:	7103      	strb	r3, [r0, #4]
    a66a:	700a      	strb	r2, [r1, #0]
    a66c:	4618      	mov	r0, r3
    a66e:	bd10      	pop	{r4, pc}
    a670:	f241 618f 	movw	r1, #5775	; 0x168f
    a674:	2039      	movs	r0, #57	; 0x39
    a676:	f7f9 fcb7 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a67e:	f7fb bc81 	b.w	5f84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    a682:	0000      	.short	0x0000
    a684:	20000e48 	.word	0x20000e48
    a688:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a68c:	4692      	mov	sl, r2
    a68e:	460f      	mov	r7, r1
    a690:	4681      	mov	r9, r0
    a692:	f004 fba5 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    a696:	2800      	cmp	r0, #0
    a698:	d063      	beq.n	a762 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a69a:	4933      	ldr	r1, [pc, #204]	; (a768 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    a69c:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    a6a0:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    a6a4:	88c8      	ldrh	r0, [r1, #6]
    a6a6:	4290      	cmp	r0, r2
    a6a8:	d300      	bcc.n	a6ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    a6aa:	4610      	mov	r0, r2
    a6ac:	4680      	mov	r8, r0
    a6ae:	8948      	ldrh	r0, [r1, #10]
    a6b0:	42b0      	cmp	r0, r6
    a6b2:	d200      	bcs.n	a6b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    a6b4:	4606      	mov	r6, r0
    a6b6:	890c      	ldrh	r4, [r1, #8]
    a6b8:	f640 0048 	movw	r0, #2120	; 0x848
    a6bc:	4284      	cmp	r4, r0
    a6be:	d300      	bcc.n	a6c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    a6c0:	4604      	mov	r4, r0
    a6c2:	898d      	ldrh	r5, [r1, #12]
    a6c4:	4285      	cmp	r5, r0
    a6c6:	d300      	bcc.n	a6ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    a6c8:	4605      	mov	r5, r0
    a6ca:	4284      	cmp	r4, r0
    a6cc:	d300      	bcc.n	a6d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    a6ce:	4604      	mov	r4, r0
    a6d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a6d4:	2e1b      	cmp	r6, #27
    a6d6:	d001      	beq.n	a6dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    a6d8:	428d      	cmp	r5, r1
    a6da:	d104      	bne.n	a6e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    a6dc:	f1b8 0f1b 	cmp.w	r8, #27
    a6e0:	d03f      	beq.n	a762 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a6e2:	428c      	cmp	r4, r1
    a6e4:	d03d      	beq.n	a762 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a6e6:	466a      	mov	r2, sp
    a6e8:	4651      	mov	r1, sl
    a6ea:	4648      	mov	r0, r9
    a6ec:	f004 fb1a 	bl	ed24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a6f0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a6f4:	4641      	mov	r1, r8
    a6f6:	4540      	cmp	r0, r8
    a6f8:	d900      	bls.n	a6fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    a6fa:	4608      	mov	r0, r1
    a6fc:	80f8      	strh	r0, [r7, #6]
    a6fe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a702:	42a1      	cmp	r1, r4
    a704:	d800      	bhi.n	a708 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    a706:	460c      	mov	r4, r1
    a708:	813c      	strh	r4, [r7, #8]
    a70a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a70e:	42b1      	cmp	r1, r6
    a710:	d800      	bhi.n	a714 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    a712:	460e      	mov	r6, r1
    a714:	807e      	strh	r6, [r7, #2]
    a716:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a71a:	42a9      	cmp	r1, r5
    a71c:	d900      	bls.n	a720 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    a71e:	4629      	mov	r1, r5
    a720:	80b9      	strh	r1, [r7, #4]
    a722:	2201      	movs	r2, #1
    a724:	703a      	strb	r2, [r7, #0]
    a726:	381b      	subs	r0, #27
    a728:	28e0      	cmp	r0, #224	; 0xe0
    a72a:	d902      	bls.n	a732 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    a72c:	f640 415b 	movw	r1, #3163	; 0xc5b
    a730:	e014      	b.n	a75c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a732:	3e1b      	subs	r6, #27
    a734:	2ee0      	cmp	r6, #224	; 0xe0
    a736:	d902      	bls.n	a73e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    a738:	f640 415d 	movw	r1, #3165	; 0xc5d
    a73c:	e00e      	b.n	a75c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a73e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a742:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a746:	4284      	cmp	r4, r0
    a748:	d902      	bls.n	a750 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    a74a:	f640 415f 	movw	r1, #3167	; 0xc5f
    a74e:	e005      	b.n	a75c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a750:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a754:	4281      	cmp	r1, r0
    a756:	d904      	bls.n	a762 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a758:	f640 4161 	movw	r1, #3169	; 0xc61
    a75c:	2039      	movs	r0, #57	; 0x39
    a75e:	f7f9 fc43 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a762:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a766:	0000      	.short	0x0000
    a768:	20000f50 	.word	0x20000f50

0000a76c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a770:	4604      	mov	r4, r0
    a772:	7840      	ldrb	r0, [r0, #1]
    a774:	2542      	movs	r5, #66	; 0x42
    a776:	b088      	sub	sp, #32
    a778:	2801      	cmp	r0, #1
    a77a:	d809      	bhi.n	a790 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    a77c:	78a0      	ldrb	r0, [r4, #2]
    a77e:	f7fb ffd9 	bl	6734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a782:	b128      	cbz	r0, a790 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    a784:	7820      	ldrb	r0, [r4, #0]
    a786:	2512      	movs	r5, #18
    a788:	2600      	movs	r6, #0
    a78a:	2801      	cmp	r0, #1
    a78c:	d004      	beq.n	a798 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c>
    a78e:	b1b8      	cbz	r0, a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    a790:	4628      	mov	r0, r5
    a792:	b008      	add	sp, #32
    a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a798:	2000      	movs	r0, #0
    a79a:	f7fb ffad 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a79e:	b128      	cbz	r0, a7ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a7a0:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    a7a4:	2800      	cmp	r0, #0
    a7a6:	d0f3      	beq.n	a790 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    a7a8:	2880      	cmp	r0, #128	; 0x80
    a7aa:	d8f1      	bhi.n	a790 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    a7ac:	7860      	ldrb	r0, [r4, #1]
    a7ae:	2800      	cmp	r0, #0
    a7b0:	d0ee      	beq.n	a790 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    a7b2:	2000      	movs	r0, #0
    a7b4:	f003 fb38 	bl	de28 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a7b8:	b158      	cbz	r0, a7d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x66>
    a7ba:	7820      	ldrb	r0, [r4, #0]
    a7bc:	2801      	cmp	r0, #1
    a7be:	d00a      	beq.n	a7d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6a>
    a7c0:	2000      	movs	r0, #0
    a7c2:	f7fc ff49 	bl	7658 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    a7c6:	4604      	mov	r4, r0
    a7c8:	2000      	movs	r0, #0
    a7ca:	f7fc ff1d 	bl	7608 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    a7ce:	2800      	cmp	r0, #0
    a7d0:	d079      	beq.n	a8c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15a>
    a7d2:	200c      	movs	r0, #12
    a7d4:	e7dd      	b.n	a792 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a7d6:	2000      	movs	r0, #0
    a7d8:	f7fb fdd6 	bl	6388 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a7dc:	b918      	cbnz	r0, a7e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x7a>
    a7de:	2000      	movs	r0, #0
    a7e0:	f003 fb24 	bl	de2c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a7e4:	b3f0      	cbz	r0, a864 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf8>
    a7e6:	2000      	movs	r0, #0
    a7e8:	f7fc ff3c 	bl	7664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a7ec:	2800      	cmp	r0, #0
    a7ee:	d1f0      	bne.n	a7d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x66>
    a7f0:	f7fb fe48 	bl	6484 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    a7f4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a7f8:	39ff      	subs	r1, #255	; 0xff
    a7fa:	d1ea      	bne.n	a7d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x66>
    a7fc:	2000      	movs	r0, #0
    a7fe:	f7fb fde1 	bl	63c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a802:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    a806:	f242 7110 	movw	r1, #10000	; 0x2710
    a80a:	fb00 f801 	mul.w	r8, r0, r1
    a80e:	7961      	ldrb	r1, [r4, #5]
    a810:	2000      	movs	r0, #0
    a812:	f7fb fe95 	bl	6540 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a816:	2000      	movs	r0, #0
    a818:	f7fb ff5e 	bl	66d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a81c:	b338      	cbz	r0, a86e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x102>
    a81e:	2200      	movs	r2, #0
    a820:	4611      	mov	r1, r2
    a822:	a804      	add	r0, sp, #16
    a824:	f7f9 fe3a 	bl	449c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a828:	0004      	movs	r4, r0
    a82a:	d065      	beq.n	a8f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a82c:	2100      	movs	r1, #0
    a82e:	f7fb fa47 	bl	5cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a832:	4621      	mov	r1, r4
    a834:	2000      	movs	r0, #0
    a836:	f7fb ffcb 	bl	67d0 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a83a:	f004 fad1 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    a83e:	4d40      	ldr	r5, [pc, #256]	; (a940 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d4>)
    a840:	b128      	cbz	r0, a84e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    a842:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a846:	88aa      	ldrh	r2, [r5, #4]
    a848:	88e9      	ldrh	r1, [r5, #6]
    a84a:	84c2      	strh	r2, [r0, #38]	; 0x26
    a84c:	8501      	strh	r1, [r0, #40]	; 0x28
    a84e:	68a8      	ldr	r0, [r5, #8]
    a850:	62a0      	str	r0, [r4, #40]	; 0x28
    a852:	4620      	mov	r0, r4
    a854:	f003 fbf4 	bl	e040 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    a858:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a85c:	2000      	movs	r0, #0
    a85e:	f003 fae7 	bl	de30 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a862:	e000      	b.n	a866 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    a864:	e001      	b.n	a86a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfe>
    a866:	b978      	cbnz	r0, a888 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    a868:	e00b      	b.n	a882 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x116>
    a86a:	2012      	movs	r0, #18
    a86c:	e791      	b.n	a792 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a86e:	2100      	movs	r1, #0
    a870:	4642      	mov	r2, r8
    a872:	4608      	mov	r0, r1
    a874:	f7fc fe52 	bl	751c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a878:	2800      	cmp	r0, #0
    a87a:	d08a      	beq.n	a792 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a87c:	f241 3155 	movw	r1, #4949	; 0x1355
    a880:	e059      	b.n	a936 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ca>
    a882:	2000      	movs	r0, #0
    a884:	f003 fad6 	bl	de34 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a888:	6067      	str	r7, [r4, #4]
    a88a:	9603      	str	r6, [sp, #12]
    a88c:	9601      	str	r6, [sp, #4]
    a88e:	9602      	str	r6, [sp, #8]
    a890:	8821      	ldrh	r1, [r4, #0]
    a892:	f8ad 1004 	strh.w	r1, [sp, #4]
    a896:	7ca9      	ldrb	r1, [r5, #18]
    a898:	f88d 1006 	strb.w	r1, [sp, #6]
    a89c:	7ce9      	ldrb	r1, [r5, #19]
    a89e:	f88d 1007 	strb.w	r1, [sp, #7]
    a8a2:	a906      	add	r1, sp, #24
    a8a4:	9100      	str	r1, [sp, #0]
    a8a6:	2001      	movs	r0, #1
    a8a8:	ab05      	add	r3, sp, #20
    a8aa:	aa01      	add	r2, sp, #4
    a8ac:	4621      	mov	r1, r4
    a8ae:	f004 fa77 	bl	eda0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x276>
    a8b2:	b148      	cbz	r0, a8c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    a8b4:	2100      	movs	r1, #0
    a8b6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    a8ba:	f7f9 fe19 	bl	44f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a8be:	b1d8      	cbz	r0, a8f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a8c0:	f241 31a3 	movw	r1, #5027	; 0x13a3
    a8c4:	e037      	b.n	a936 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ca>
    a8c6:	e02b      	b.n	a920 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>
    a8c8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a8cc:	f88d 000c 	strb.w	r0, [sp, #12]
    a8d0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a8d4:	f88d 000d 	strb.w	r0, [sp, #13]
    a8d8:	a903      	add	r1, sp, #12
    a8da:	4620      	mov	r0, r4
    a8dc:	f002 fde9 	bl	d4b2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a8e0:	78e8      	ldrb	r0, [r5, #3]
    a8e2:	9000      	str	r0, [sp, #0]
    a8e4:	78ab      	ldrb	r3, [r5, #2]
    a8e6:	88ea      	ldrh	r2, [r5, #6]
    a8e8:	88a9      	ldrh	r1, [r5, #4]
    a8ea:	8820      	ldrh	r0, [r4, #0]
    a8ec:	f7f9 fecc 	bl	4688 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a8f0:	b120      	cbz	r0, a8fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a8f2:	f241 31ae 	movw	r1, #5038	; 0x13ae
    a8f6:	e01e      	b.n	a936 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ca>
    a8f8:	2009      	movs	r0, #9
    a8fa:	e74a      	b.n	a792 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a8fc:	4642      	mov	r2, r8
    a8fe:	4621      	mov	r1, r4
    a900:	2000      	movs	r0, #0
    a902:	f7fc fe0b 	bl	751c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a906:	b110      	cbz	r0, a90e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    a908:	f241 31b0 	movw	r1, #5040	; 0x13b0
    a90c:	e013      	b.n	a936 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ca>
    a90e:	480d      	ldr	r0, [pc, #52]	; (a944 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>)
    a910:	6843      	ldr	r3, [r0, #4]
    a912:	b19b      	cbz	r3, a93c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    a914:	2200      	movs	r2, #0
    a916:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    a91a:	4620      	mov	r0, r4
    a91c:	4798      	blx	r3
    a91e:	e00d      	b.n	a93c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    a920:	b164      	cbz	r4, a93c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    a922:	8820      	ldrh	r0, [r4, #0]
    a924:	f002 fc33 	bl	d18e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a928:	8820      	ldrh	r0, [r4, #0]
    a92a:	2100      	movs	r1, #0
    a92c:	f7f9 fde0 	bl	44f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a930:	b120      	cbz	r0, a93c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    a932:	f241 31c8 	movw	r1, #5064	; 0x13c8
    a936:	2039      	movs	r0, #57	; 0x39
    a938:	f7f9 fb56 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a93c:	2000      	movs	r0, #0
    a93e:	e728      	b.n	a792 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a940:	20000e48 	.word	0x20000e48
    a944:	200001f4 	.word	0x200001f4
    a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a94c:	b088      	sub	sp, #32
    a94e:	4604      	mov	r4, r0
    a950:	8800      	ldrh	r0, [r0, #0]
    a952:	a903      	add	r1, sp, #12
    a954:	f002 fcee 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a958:	2800      	cmp	r0, #0
    a95a:	d141      	bne.n	a9e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    a95c:	9804      	ldr	r0, [sp, #16]
    a95e:	2700      	movs	r7, #0
    a960:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    a964:	f88d 1014 	strb.w	r1, [sp, #20]
    a968:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a96c:	3070      	adds	r0, #112	; 0x70
    a96e:	0689      	lsls	r1, r1, #26
    a970:	d502      	bpl.n	a978 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    a972:	f89d 1014 	ldrb.w	r1, [sp, #20]
    a976:	b149      	cbz	r1, a98c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x220>
    a978:	f05f 0100 	movs.w	r1, #0
    a97c:	f88d 1004 	strb.w	r1, [sp, #4]
    a980:	2105      	movs	r1, #5
    a982:	3044      	adds	r0, #68	; 0x44
    a984:	f003 fc81 	bl	e28a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a988:	b110      	cbz	r0, a990 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x224>
    a98a:	e004      	b.n	a996 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22a>
    a98c:	2101      	movs	r1, #1
    a98e:	e7f5      	b.n	a97c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x210>
    a990:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a994:	b318      	cbz	r0, a9de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x272>
    a996:	8921      	ldrh	r1, [r4, #8]
    a998:	88e0      	ldrh	r0, [r4, #6]
    a99a:	f004 f9b5 	bl	ed08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1de>
    a99e:	2800      	cmp	r0, #0
    a9a0:	d11e      	bne.n	a9e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    a9a2:	88a1      	ldrh	r1, [r4, #4]
    a9a4:	8860      	ldrh	r0, [r4, #2]
    a9a6:	f004 f9af 	bl	ed08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1de>
    a9aa:	2800      	cmp	r0, #0
    a9ac:	d118      	bne.n	a9e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    a9ae:	8921      	ldrh	r1, [r4, #8]
    a9b0:	88e0      	ldrh	r0, [r4, #6]
    a9b2:	f004 f99f 	bl	ecf4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ca>
    a9b6:	2800      	cmp	r0, #0
    a9b8:	d112      	bne.n	a9e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    a9ba:	88a1      	ldrh	r1, [r4, #4]
    a9bc:	8860      	ldrh	r0, [r4, #2]
    a9be:	f004 f999 	bl	ecf4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ca>
    a9c2:	0006      	movs	r6, r0
    a9c4:	d10c      	bne.n	a9e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    a9c6:	9804      	ldr	r0, [sp, #16]
    a9c8:	f04f 0801 	mov.w	r8, #1
    a9cc:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    a9d0:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    a9d4:	f89d 1014 	ldrb.w	r1, [sp, #20]
    a9d8:	b129      	cbz	r1, a9e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27a>
    a9da:	263a      	movs	r6, #58	; 0x3a
    a9dc:	e02f      	b.n	aa3e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d2>
    a9de:	201a      	movs	r0, #26
    a9e0:	b008      	add	sp, #32
    a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9e6:	4639      	mov	r1, r7
    a9e8:	aa05      	add	r2, sp, #20
    a9ea:	f004 f99b 	bl	ed24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a9ee:	8861      	ldrh	r1, [r4, #2]
    a9f0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    a9f4:	4281      	cmp	r1, r0
    a9f6:	d200      	bcs.n	a9fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28e>
    a9f8:	4608      	mov	r0, r1
    a9fa:	80e8      	strh	r0, [r5, #6]
    a9fc:	88a1      	ldrh	r1, [r4, #4]
    a9fe:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    aa02:	4281      	cmp	r1, r0
    aa04:	d200      	bcs.n	aa08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29c>
    aa06:	4608      	mov	r0, r1
    aa08:	8128      	strh	r0, [r5, #8]
    aa0a:	88e2      	ldrh	r2, [r4, #6]
    aa0c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    aa10:	428a      	cmp	r2, r1
    aa12:	d200      	bcs.n	aa16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2aa>
    aa14:	4611      	mov	r1, r2
    aa16:	8069      	strh	r1, [r5, #2]
    aa18:	8922      	ldrh	r2, [r4, #8]
    aa1a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    aa1e:	428a      	cmp	r2, r1
    aa20:	d200      	bcs.n	aa24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b8>
    aa22:	4611      	mov	r1, r2
    aa24:	f640 0248 	movw	r2, #2120	; 0x848
    aa28:	80a9      	strh	r1, [r5, #4]
    aa2a:	4291      	cmp	r1, r2
    aa2c:	d300      	bcc.n	aa30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c4>
    aa2e:	4611      	mov	r1, r2
    aa30:	80a9      	strh	r1, [r5, #4]
    aa32:	4290      	cmp	r0, r2
    aa34:	d200      	bcs.n	aa38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2cc>
    aa36:	4602      	mov	r2, r0
    aa38:	812a      	strh	r2, [r5, #8]
    aa3a:	f885 8000 	strb.w	r8, [r5]
    aa3e:	706f      	strb	r7, [r5, #1]
    aa40:	4630      	mov	r0, r6
    aa42:	e7cd      	b.n	a9e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    aa44:	4806      	ldr	r0, [pc, #24]	; (aa60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2f4>)
    aa46:	2100      	movs	r1, #0
    aa48:	f890 2020 	ldrb.w	r2, [r0, #32]
    aa4c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    aa50:	8091      	strh	r1, [r2, #4]
    aa52:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    aa56:	1c49      	adds	r1, r1, #1
    aa58:	f001 0101 	and.w	r1, r1, #1
    aa5c:	7001      	strb	r1, [r0, #0]
    aa5e:	4770      	bx	lr
    aa60:	20000f60 	.word	0x20000f60
    aa64:	4806      	ldr	r0, [pc, #24]	; (aa80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x314>)
    aa66:	2100      	movs	r1, #0
    aa68:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    aa6c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    aa70:	8291      	strh	r1, [r2, #20]
    aa72:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    aa76:	1c49      	adds	r1, r1, #1
    aa78:	f001 0101 	and.w	r1, r1, #1
    aa7c:	7001      	strb	r1, [r0, #0]
    aa7e:	4770      	bx	lr
    aa80:	20000f60 	.word	0x20000f60
    aa84:	b510      	push	{r4, lr}
    aa86:	4604      	mov	r4, r0
    aa88:	88c1      	ldrh	r1, [r0, #6]
    aa8a:	8880      	ldrh	r0, [r0, #4]
    aa8c:	f004 f93c 	bl	ed08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1de>
    aa90:	2800      	cmp	r0, #0
    aa92:	d10f      	bne.n	aab4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x348>
    aa94:	8861      	ldrh	r1, [r4, #2]
    aa96:	8820      	ldrh	r0, [r4, #0]
    aa98:	f004 f936 	bl	ed08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1de>
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d109      	bne.n	aab4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x348>
    aaa0:	4805      	ldr	r0, [pc, #20]	; (aab8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x34c>)
    aaa2:	88a1      	ldrh	r1, [r4, #4]
    aaa4:	8141      	strh	r1, [r0, #10]
    aaa6:	8821      	ldrh	r1, [r4, #0]
    aaa8:	80c1      	strh	r1, [r0, #6]
    aaaa:	88e1      	ldrh	r1, [r4, #6]
    aaac:	8181      	strh	r1, [r0, #12]
    aaae:	8861      	ldrh	r1, [r4, #2]
    aab0:	8101      	strh	r1, [r0, #8]
    aab2:	2000      	movs	r0, #0
    aab4:	bd10      	pop	{r4, pc}
    aab6:	0000      	.short	0x0000
    aab8:	20000f50 	.word	0x20000f50
    aabc:	0b11c00b 	.word	0x0b11c00b
    aac0:	11c00059 	.word	0x11c00059

0000aac4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    aac4:	b510      	push	{r4, lr}
    aac6:	4604      	mov	r4, r0
    aac8:	4804      	ldr	r0, [pc, #16]	; (aadc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    aaca:	7004      	strb	r4, [r0, #0]
    aacc:	6840      	ldr	r0, [r0, #4]
    aace:	f004 fa19 	bl	ef04 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    aad2:	4620      	mov	r0, r4
    aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aad8:	f7ff bd7c 	b.w	a5d4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    aadc:	200001fc 	.word	0x200001fc

0000aae0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    aae0:	b510      	push	{r4, lr}
    aae2:	4c07      	ldr	r4, [pc, #28]	; (ab00 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    aae4:	68a0      	ldr	r0, [r4, #8]
    aae6:	f004 fa0d 	bl	ef04 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    aaea:	68e0      	ldr	r0, [r4, #12]
    aaec:	f004 fa0a 	bl	ef04 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    aaf0:	f002 fb61 	bl	d1b6 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    aaf4:	f7fa fe7e 	bl	57f4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aafc:	f7ff bd70 	b.w	a5e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ab00:	200001fc 	.word	0x200001fc

0000ab04 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    ab04:	b500      	push	{lr}
    ab06:	4905      	ldr	r1, [pc, #20]	; (ab1c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    ab08:	4805      	ldr	r0, [pc, #20]	; (ab20 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ab0a:	f004 f9c7 	bl	ee9c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ab0e:	4804      	ldr	r0, [pc, #16]	; (ab20 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ab10:	4904      	ldr	r1, [pc, #16]	; (ab24 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    ab12:	1d00      	adds	r0, r0, #4
    ab14:	f85d eb04 	ldr.w	lr, [sp], #4
    ab18:	f004 b9c0 	b.w	ee9c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ab1c:	2000020c 	.word	0x2000020c
    ab20:	20000200 	.word	0x20000200
    ab24:	20000214 	.word	0x20000214

0000ab28 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    ab28:	b500      	push	{lr}
    ab2a:	4908      	ldr	r1, [pc, #32]	; (ab4c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    ab2c:	4808      	ldr	r0, [pc, #32]	; (ab50 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ab2e:	f004 f9b5 	bl	ee9c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ab32:	4807      	ldr	r0, [pc, #28]	; (ab50 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ab34:	4907      	ldr	r1, [pc, #28]	; (ab54 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    ab36:	1d00      	adds	r0, r0, #4
    ab38:	f004 f9b0 	bl	ee9c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ab3c:	4804      	ldr	r0, [pc, #16]	; (ab50 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ab3e:	4906      	ldr	r1, [pc, #24]	; (ab58 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    ab40:	3008      	adds	r0, #8
    ab42:	f85d eb04 	ldr.w	lr, [sp], #4
    ab46:	f004 b9a9 	b.w	ee9c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ab4a:	0000      	.short	0x0000
    ab4c:	20000238 	.word	0x20000238
    ab50:	20000200 	.word	0x20000200
    ab54:	20000240 	.word	0x20000240
    ab58:	20000230 	.word	0x20000230

0000ab5c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    ab5c:	4801      	ldr	r0, [pc, #4]	; (ab64 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    ab5e:	7840      	ldrb	r0, [r0, #1]
    ab60:	4770      	bx	lr
    ab62:	0000      	.short	0x0000
    ab64:	200001fc 	.word	0x200001fc
    ab68:	b510      	push	{r4, lr}
    ab6a:	f7fb fdd5 	bl	6718 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    ab6e:	4807      	ldr	r0, [pc, #28]	; (ab8c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    ab70:	7800      	ldrb	r0, [r0, #0]
    ab72:	f7fc fd7f 	bl	7674 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    ab76:	4806      	ldr	r0, [pc, #24]	; (ab90 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    ab78:	f7fb fd94 	bl	66a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    ab7c:	4906      	ldr	r1, [pc, #24]	; (ab98 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    ab7e:	4805      	ldr	r0, [pc, #20]	; (ab94 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    ab80:	6008      	str	r0, [r1, #0]
    ab82:	4907      	ldr	r1, [pc, #28]	; (aba0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>)
    ab84:	4805      	ldr	r0, [pc, #20]	; (ab9c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    ab86:	6008      	str	r0, [r1, #0]
    ab88:	bd10      	pop	{r4, pc}
    ab8a:	0000      	.short	0x0000
    ab8c:	200001fc 	.word	0x200001fc
    ab90:	200013e3 	.word	0x200013e3
    ab94:	0000649d 	.word	0x0000649d
    ab98:	2000021c 	.word	0x2000021c
    ab9c:	00006015 	.word	0x00006015
    aba0:	20000220 	.word	0x20000220
    aba4:	b510      	push	{r4, lr}
    aba6:	4c0d      	ldr	r4, [pc, #52]	; (abdc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    aba8:	2001      	movs	r0, #1
    abaa:	7060      	strb	r0, [r4, #1]
    abac:	f7fb fe42 	bl	6834 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    abb0:	7820      	ldrb	r0, [r4, #0]
    abb2:	f7fd fcf9 	bl	85a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    abb6:	f002 faec 	bl	d192 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    abba:	4909      	ldr	r1, [pc, #36]	; (abe0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    abbc:	7820      	ldrb	r0, [r4, #0]
    abbe:	f7fa f8a9 	bl	4d14 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    abc2:	f004 f987 	bl	eed4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    abc6:	4908      	ldr	r1, [pc, #32]	; (abe8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    abc8:	4806      	ldr	r0, [pc, #24]	; (abe4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    abca:	6008      	str	r0, [r1, #0]
    abcc:	4908      	ldr	r1, [pc, #32]	; (abf0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    abce:	4807      	ldr	r0, [pc, #28]	; (abec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    abd0:	6008      	str	r0, [r1, #0]
    abd2:	4909      	ldr	r1, [pc, #36]	; (abf8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    abd4:	4807      	ldr	r0, [pc, #28]	; (abf4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    abd6:	6008      	str	r0, [r1, #0]
    abd8:	bd10      	pop	{r4, pc}
    abda:	0000      	.short	0x0000
    abdc:	200001fc 	.word	0x200001fc
    abe0:	200013e3 	.word	0x200013e3
    abe4:	00004cdd 	.word	0x00004cdd
    abe8:	2000022c 	.word	0x2000022c
    abec:	000083d1 	.word	0x000083d1
    abf0:	20000228 	.word	0x20000228
    abf4:	00006079 	.word	0x00006079
    abf8:	20000224 	.word	0x20000224

0000abfc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    abfc:	2101      	movs	r1, #1
    abfe:	4081      	lsls	r1, r0
    ac00:	4802      	ldr	r0, [pc, #8]	; (ac0c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    ac02:	6802      	ldr	r2, [r0, #0]
    ac04:	4311      	orrs	r1, r2
    ac06:	6001      	str	r1, [r0, #0]
    ac08:	4770      	bx	lr
    ac0a:	0000      	.short	0x0000
    ac0c:	20000248 	.word	0x20000248

0000ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    ac10:	4801      	ldr	r0, [pc, #4]	; (ac18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    ac12:	6800      	ldr	r0, [r0, #0]
    ac14:	4770      	bx	lr
    ac16:	0000      	.short	0x0000
    ac18:	20000248 	.word	0x20000248

0000ac1c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    ac1c:	4803      	ldr	r0, [pc, #12]	; (ac2c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    ac1e:	8800      	ldrh	r0, [r0, #0]
    ac20:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ac24:	0040      	lsls	r0, r0, #1
    ac26:	1c40      	adds	r0, r0, #1
    ac28:	4770      	bx	lr
    ac2a:	0000      	.short	0x0000
    ac2c:	20000248 	.word	0x20000248

0000ac30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ac30:	b570      	push	{r4, r5, r6, lr}
    ac32:	4605      	mov	r5, r0
    ac34:	4616      	mov	r6, r2
    ac36:	460c      	mov	r4, r1
    ac38:	2002      	movs	r0, #2
    ac3a:	f000 f999 	bl	af70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ac3e:	4906      	ldr	r1, [pc, #24]	; (ac58 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ac40:	2001      	movs	r0, #1
    ac42:	1ef6      	subs	r6, r6, #3
    ac44:	7008      	strb	r0, [r1, #0]
    ac46:	4805      	ldr	r0, [pc, #20]	; (ac5c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ac48:	6006      	str	r6, [r0, #0]
    ac4a:	4804      	ldr	r0, [pc, #16]	; (ac5c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ac4c:	3808      	subs	r0, #8
    ac4e:	6005      	str	r5, [r0, #0]
    ac50:	1f00      	subs	r0, r0, #4
    ac52:	6004      	str	r4, [r0, #0]
    ac54:	bd70      	pop	{r4, r5, r6, pc}
    ac56:	0000      	.short	0x0000
    ac58:	2000028e 	.word	0x2000028e
    ac5c:	4000f510 	.word	0x4000f510

0000ac60 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    ac60:	b510      	push	{r4, lr}
    ac62:	4c0c      	ldr	r4, [pc, #48]	; (ac94 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    ac64:	7820      	ldrb	r0, [r4, #0]
    ac66:	b180      	cbz	r0, ac8a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    ac68:	490b      	ldr	r1, [pc, #44]	; (ac98 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    ac6a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ac6e:	6008      	str	r0, [r1, #0]
    ac70:	f000 f86a 	bl	ad48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    ac74:	2100      	movs	r1, #0
    ac76:	b120      	cbz	r0, ac82 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    ac78:	2001      	movs	r0, #1
    ac7a:	7060      	strb	r0, [r4, #1]
    ac7c:	4807      	ldr	r0, [pc, #28]	; (ac9c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    ac7e:	6800      	ldr	r0, [r0, #0]
    ac80:	e001      	b.n	ac86 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    ac82:	7061      	strb	r1, [r4, #1]
    ac84:	2010      	movs	r0, #16
    ac86:	70a0      	strb	r0, [r4, #2]
    ac88:	7021      	strb	r1, [r4, #0]
    ac8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac8e:	2000      	movs	r0, #0
    ac90:	f000 b96e 	b.w	af70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ac94:	2000028e 	.word	0x2000028e
    ac98:	4001f508 	.word	0x4001f508
    ac9c:	4000f400 	.word	0x4000f400

0000aca0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    aca0:	b510      	push	{r4, lr}
    aca2:	2002      	movs	r0, #2
    aca4:	f000 f964 	bl	af70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    aca8:	4904      	ldr	r1, [pc, #16]	; (acbc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    acaa:	2001      	movs	r0, #1
    acac:	7008      	strb	r0, [r1, #0]
    acae:	f000 f859 	bl	ad64 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    acb2:	4903      	ldr	r1, [pc, #12]	; (acc0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    acb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    acb8:	6008      	str	r0, [r1, #0]
    acba:	bd10      	pop	{r4, pc}
    acbc:	2000028e 	.word	0x2000028e
    acc0:	4001f504 	.word	0x4001f504

0000acc4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    acc4:	4803      	ldr	r0, [pc, #12]	; (acd4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    acc6:	2100      	movs	r1, #0
    acc8:	7001      	strb	r1, [r0, #0]
    acca:	7041      	strb	r1, [r0, #1]
    accc:	2110      	movs	r1, #16
    acce:	7081      	strb	r1, [r0, #2]
    acd0:	4770      	bx	lr
    acd2:	0000      	.short	0x0000
    acd4:	2000028e 	.word	0x2000028e

0000acd8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    acd8:	4807      	ldr	r0, [pc, #28]	; (acf8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    acda:	b510      	push	{r4, lr}
    acdc:	7801      	ldrb	r1, [r0, #0]
    acde:	b141      	cbz	r1, acf2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    ace0:	f000 f832 	bl	ad48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    ace4:	b118      	cbz	r0, acee <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    ace6:	4805      	ldr	r0, [pc, #20]	; (acfc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    ace8:	6800      	ldr	r0, [r0, #0]
    acea:	b2c0      	uxtb	r0, r0
    acec:	bd10      	pop	{r4, pc}
    acee:	2010      	movs	r0, #16
    acf0:	bd10      	pop	{r4, pc}
    acf2:	7880      	ldrb	r0, [r0, #2]
    acf4:	bd10      	pop	{r4, pc}
    acf6:	0000      	.short	0x0000
    acf8:	2000028e 	.word	0x2000028e
    acfc:	4000f400 	.word	0x4000f400

0000ad00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    ad00:	4808      	ldr	r0, [pc, #32]	; (ad24 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    ad02:	b510      	push	{r4, lr}
    ad04:	7801      	ldrb	r1, [r0, #0]
    ad06:	b159      	cbz	r1, ad20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    ad08:	4807      	ldr	r0, [pc, #28]	; (ad28 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    ad0a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    ad0e:	b128      	cbz	r0, ad1c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    ad10:	f000 f80c 	bl	ad2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    ad14:	2800      	cmp	r0, #0
    ad16:	d000      	beq.n	ad1a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    ad18:	2001      	movs	r0, #1
    ad1a:	bd10      	pop	{r4, pc}
    ad1c:	2002      	movs	r0, #2
    ad1e:	bd10      	pop	{r4, pc}
    ad20:	7840      	ldrb	r0, [r0, #1]
    ad22:	bd10      	pop	{r4, pc}
    ad24:	2000028e 	.word	0x2000028e
    ad28:	4000f000 	.word	0x4000f000
    ad2c:	4805      	ldr	r0, [pc, #20]	; (ad44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    ad2e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    ad32:	b111      	cbz	r1, ad3a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    ad34:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    ad38:	b108      	cbz	r0, ad3e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    ad3a:	2000      	movs	r0, #0
    ad3c:	4770      	bx	lr
    ad3e:	2001      	movs	r0, #1
    ad40:	4770      	bx	lr
    ad42:	0000      	.short	0x0000
    ad44:	4000f000 	.word	0x4000f000
    ad48:	4805      	ldr	r0, [pc, #20]	; (ad60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    ad4a:	b510      	push	{r4, lr}
    ad4c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    ad50:	b120      	cbz	r0, ad5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    ad52:	f7ff ffeb 	bl	ad2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    ad56:	b108      	cbz	r0, ad5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    ad58:	2001      	movs	r0, #1
    ad5a:	bd10      	pop	{r4, pc}
    ad5c:	2000      	movs	r0, #0
    ad5e:	bd10      	pop	{r4, pc}
    ad60:	4000f000 	.word	0x4000f000
    ad64:	4804      	ldr	r0, [pc, #16]	; (ad78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    ad66:	2100      	movs	r1, #0
    ad68:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ad6c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ad70:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    ad74:	4770      	bx	lr
    ad76:	0000      	.short	0x0000
    ad78:	4000f000 	.word	0x4000f000

0000ad7c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    ad7c:	4a08      	ldr	r2, [pc, #32]	; (ada0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    ad7e:	b510      	push	{r4, lr}
    ad80:	e9c2 0102 	strd	r0, r1, [r2, #8]
    ad84:	4907      	ldr	r1, [pc, #28]	; (ada4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    ad86:	4610      	mov	r0, r2
    ad88:	f7f9 f83a 	bl	3e00 <mpsl_fem_lna_configuration_set>
    ad8c:	2800      	cmp	r0, #0
    ad8e:	d005      	beq.n	ad9c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    ad90:	1c40      	adds	r0, r0, #1
    ad92:	d003      	beq.n	ad9c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    ad94:	2170      	movs	r1, #112	; 0x70
    ad96:	2040      	movs	r0, #64	; 0x40
    ad98:	f7f9 f926 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad9c:	bd10      	pop	{r4, pc}
    ad9e:	0000      	.short	0x0000
    ada0:	2000024c 	.word	0x2000024c
    ada4:	0000add4 	.word	0x0000add4

0000ada8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    ada8:	4a08      	ldr	r2, [pc, #32]	; (adcc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    adaa:	b510      	push	{r4, lr}
    adac:	e9c2 0102 	strd	r0, r1, [r2, #8]
    adb0:	4907      	ldr	r1, [pc, #28]	; (add0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    adb2:	4610      	mov	r0, r2
    adb4:	f7f9 f830 	bl	3e18 <mpsl_fem_pa_configuration_set>
    adb8:	2800      	cmp	r0, #0
    adba:	d005      	beq.n	adc8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    adbc:	1c40      	adds	r0, r0, #1
    adbe:	d003      	beq.n	adc8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    adc0:	2165      	movs	r1, #101	; 0x65
    adc2:	2040      	movs	r0, #64	; 0x40
    adc4:	f7f9 f910 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adc8:	bd10      	pop	{r4, pc}
    adca:	0000      	.short	0x0000
    adcc:	2000024c 	.word	0x2000024c
    add0:	0000add4 	.word	0x0000add4
    add4:	00000001 	.word	0x00000001
    add8:	40001110 	.word	0x40001110
	...

0000adec <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    adec:	b570      	push	{r4, r5, r6, lr}
    adee:	4606      	mov	r6, r0
    adf0:	4614      	mov	r4, r2
    adf2:	460d      	mov	r5, r1
    adf4:	2001      	movs	r0, #1
    adf6:	f000 f8bb 	bl	af70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    adfa:	4803      	ldr	r0, [pc, #12]	; (ae08 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    adfc:	6006      	str	r6, [r0, #0]
    adfe:	1d00      	adds	r0, r0, #4
    ae00:	6004      	str	r4, [r0, #0]
    ae02:	1d00      	adds	r0, r0, #4
    ae04:	6005      	str	r5, [r0, #0]
    ae06:	bd70      	pop	{r4, r5, r6, pc}
    ae08:	4000f508 	.word	0x4000f508

0000ae0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    ae0c:	480a      	ldr	r0, [pc, #40]	; (ae38 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    ae0e:	7801      	ldrb	r1, [r0, #0]
    ae10:	b171      	cbz	r1, ae30 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    ae12:	4a0a      	ldr	r2, [pc, #40]	; (ae3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    ae14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    ae18:	6011      	str	r1, [r2, #0]
    ae1a:	4909      	ldr	r1, [pc, #36]	; (ae40 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    ae1c:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    ae20:	2100      	movs	r1, #0
    ae22:	b11a      	cbz	r2, ae2c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    ae24:	4a07      	ldr	r2, [pc, #28]	; (ae44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    ae26:	6812      	ldr	r2, [r2, #0]
    ae28:	7042      	strb	r2, [r0, #1]
    ae2a:	e000      	b.n	ae2e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    ae2c:	7041      	strb	r1, [r0, #1]
    ae2e:	7001      	strb	r1, [r0, #0]
    ae30:	2000      	movs	r0, #0
    ae32:	f000 b89d 	b.w	af70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ae36:	0000      	.short	0x0000
    ae38:	20000291 	.word	0x20000291
    ae3c:	4001f508 	.word	0x4001f508
    ae40:	4000f000 	.word	0x4000f000
    ae44:	4000f400 	.word	0x4000f400

0000ae48 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    ae48:	b570      	push	{r4, r5, r6, lr}
    ae4a:	4604      	mov	r4, r0
    ae4c:	4816      	ldr	r0, [pc, #88]	; (aea8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    ae4e:	460e      	mov	r6, r1
    ae50:	2501      	movs	r5, #1
    ae52:	7005      	strb	r5, [r0, #0]
    ae54:	4915      	ldr	r1, [pc, #84]	; (aeac <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    ae56:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    ae5a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    ae5e:	6008      	str	r0, [r1, #0]
    ae60:	f001 f8ed 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ae64:	b930      	cbnz	r0, ae74 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    ae66:	4811      	ldr	r0, [pc, #68]	; (aeac <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    ae68:	3014      	adds	r0, #20
    ae6a:	6801      	ldr	r1, [r0, #0]
    ae6c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    ae70:	4331      	orrs	r1, r6
    ae72:	6001      	str	r1, [r0, #0]
    ae74:	490e      	ldr	r1, [pc, #56]	; (aeb0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    ae76:	2200      	movs	r2, #0
    ae78:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    ae7c:	4b0d      	ldr	r3, [pc, #52]	; (aeb4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    ae7e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    ae82:	6018      	str	r0, [r3, #0]
    ae84:	b12c      	cbz	r4, ae92 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    ae86:	2c01      	cmp	r4, #1
    ae88:	d007      	beq.n	ae9a <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    ae8a:	2185      	movs	r1, #133	; 0x85
    ae8c:	203c      	movs	r0, #60	; 0x3c
    ae8e:	f7f9 f8ab 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae92:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    ae96:	600d      	str	r5, [r1, #0]
    ae98:	bd70      	pop	{r4, r5, r6, pc}
    ae9a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    ae9e:	600d      	str	r5, [r1, #0]
    aea0:	4904      	ldr	r1, [pc, #16]	; (aeb4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    aea2:	1f09      	subs	r1, r1, #4
    aea4:	6008      	str	r0, [r1, #0]
    aea6:	bd70      	pop	{r4, r5, r6, pc}
    aea8:	20000291 	.word	0x20000291
    aeac:	4000f504 	.word	0x4000f504
    aeb0:	4000f000 	.word	0x4000f000
    aeb4:	4001f508 	.word	0x4001f508

0000aeb8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    aeb8:	4802      	ldr	r0, [pc, #8]	; (aec4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    aeba:	2100      	movs	r1, #0
    aebc:	7001      	strb	r1, [r0, #0]
    aebe:	7041      	strb	r1, [r0, #1]
    aec0:	4770      	bx	lr
    aec2:	0000      	.short	0x0000
    aec4:	20000291 	.word	0x20000291

0000aec8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    aec8:	4806      	ldr	r0, [pc, #24]	; (aee4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    aeca:	7801      	ldrb	r1, [r0, #0]
    aecc:	b141      	cbz	r1, aee0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    aece:	4806      	ldr	r0, [pc, #24]	; (aee8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    aed0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    aed4:	2800      	cmp	r0, #0
    aed6:	d002      	beq.n	aede <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    aed8:	4804      	ldr	r0, [pc, #16]	; (aeec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    aeda:	6800      	ldr	r0, [r0, #0]
    aedc:	b2c0      	uxtb	r0, r0
    aede:	4770      	bx	lr
    aee0:	7840      	ldrb	r0, [r0, #1]
    aee2:	4770      	bx	lr
    aee4:	20000291 	.word	0x20000291
    aee8:	4000f000 	.word	0x4000f000
    aeec:	4000f400 	.word	0x4000f400

0000aef0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    aef0:	4901      	ldr	r1, [pc, #4]	; (aef8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    aef2:	2001      	movs	r0, #1
    aef4:	6088      	str	r0, [r1, #8]
    aef6:	4770      	bx	lr
    aef8:	4000f000 	.word	0x4000f000

0000aefc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    aefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af00:	2800      	cmp	r0, #0
    af02:	d02c      	beq.n	af5e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    af04:	4817      	ldr	r0, [pc, #92]	; (af64 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    af06:	7800      	ldrb	r0, [r0, #0]
    af08:	b1b0      	cbz	r0, af38 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    af0a:	4d17      	ldr	r5, [pc, #92]	; (af68 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    af0c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    af10:	2800      	cmp	r0, #0
    af12:	d124      	bne.n	af5e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    af14:	2702      	movs	r7, #2
    af16:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    af1a:	4c14      	ldr	r4, [pc, #80]	; (af6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    af1c:	6820      	ldr	r0, [r4, #0]
    af1e:	43c0      	mvns	r0, r0
    af20:	f340 1600 	sbfx	r6, r0, #4, #1
    af24:	6820      	ldr	r0, [r4, #0]
    af26:	f040 0010 	orr.w	r0, r0, #16
    af2a:	6020      	str	r0, [r4, #0]
    af2c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    af30:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    af34:	1c76      	adds	r6, r6, #1
    af36:	e007      	b.n	af48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    af38:	21fd      	movs	r1, #253	; 0xfd
    af3a:	203c      	movs	r0, #60	; 0x3c
    af3c:	f7f9 f854 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af40:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    af44:	f7f8 ff0e 	bl	3d64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    af48:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    af4c:	2800      	cmp	r0, #0
    af4e:	d0f7      	beq.n	af40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    af50:	b91e      	cbnz	r6, af5a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    af52:	6820      	ldr	r0, [r4, #0]
    af54:	f020 0010 	bic.w	r0, r0, #16
    af58:	6020      	str	r0, [r4, #0]
    af5a:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    af5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    af62:	0000      	.short	0x0000
    af64:	20000291 	.word	0x20000291
    af68:	4000f000 	.word	0x4000f000
    af6c:	e000ed10 	.word	0xe000ed10

0000af70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    af70:	b510      	push	{r4, lr}
    af72:	4604      	mov	r4, r0
    af74:	f000 f822 	bl	afbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    af78:	2c00      	cmp	r4, #0
    af7a:	d017      	beq.n	afac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    af7c:	4a0c      	ldr	r2, [pc, #48]	; (afb0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    af7e:	480c      	ldr	r0, [pc, #48]	; (afb0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    af80:	490c      	ldr	r1, [pc, #48]	; (afb4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    af82:	3214      	adds	r2, #20
    af84:	4b0c      	ldr	r3, [pc, #48]	; (afb8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    af86:	2c01      	cmp	r4, #1
    af88:	d005      	beq.n	af96 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    af8a:	2c02      	cmp	r4, #2
    af8c:	d008      	beq.n	afa0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    af8e:	217d      	movs	r1, #125	; 0x7d
    af90:	203d      	movs	r0, #61	; 0x3d
    af92:	f7f9 f829 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af96:	2402      	movs	r4, #2
    af98:	6004      	str	r4, [r0, #0]
    af9a:	6011      	str	r1, [r2, #0]
    af9c:	0620      	lsls	r0, r4, #24
    af9e:	e004      	b.n	afaa <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    afa0:	2403      	movs	r4, #3
    afa2:	6004      	str	r4, [r0, #0]
    afa4:	6011      	str	r1, [r2, #0]
    afa6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    afaa:	6018      	str	r0, [r3, #0]
    afac:	bd10      	pop	{r4, pc}
    afae:	0000      	.short	0x0000
    afb0:	4000f500 	.word	0x4000f500
    afb4:	200014e5 	.word	0x200014e5
    afb8:	4001f504 	.word	0x4001f504
    afbc:	4804      	ldr	r0, [pc, #16]	; (afd0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    afbe:	2100      	movs	r1, #0
    afc0:	6001      	str	r1, [r0, #0]
    afc2:	6001      	str	r1, [r0, #0]
    afc4:	4903      	ldr	r1, [pc, #12]	; (afd4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    afc6:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    afca:	6008      	str	r0, [r1, #0]
    afcc:	4770      	bx	lr
    afce:	0000      	.short	0x0000
    afd0:	4000f500 	.word	0x4000f500
    afd4:	4001f508 	.word	0x4001f508

0000afd8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    afd8:	4805      	ldr	r0, [pc, #20]	; (aff0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    afda:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    afde:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    afe2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    afe6:	4903      	ldr	r1, [pc, #12]	; (aff4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    afe8:	2000      	movs	r0, #0
    afea:	6008      	str	r0, [r1, #0]
    afec:	4770      	bx	lr
    afee:	0000      	.short	0x0000
    aff0:	40001000 	.word	0x40001000
    aff4:	40001560 	.word	0x40001560

0000aff8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    aff8:	4904      	ldr	r1, [pc, #16]	; (b00c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    affa:	6008      	str	r0, [r1, #0]
    affc:	4804      	ldr	r0, [pc, #16]	; (b010 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    affe:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b002:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b006:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b00a:	4770      	bx	lr
    b00c:	40001560 	.word	0x40001560
    b010:	40001000 	.word	0x40001000

0000b014 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b014:	4801      	ldr	r0, [pc, #4]	; (b01c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b016:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    b01a:	4770      	bx	lr
    b01c:	20001014 	.word	0x20001014

0000b020 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    b020:	4a01      	ldr	r2, [pc, #4]	; (b028 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    b022:	7051      	strb	r1, [r2, #1]
    b024:	7010      	strb	r0, [r2, #0]
    b026:	4770      	bx	lr
    b028:	20001014 	.word	0x20001014

0000b02c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b02e:	4c1e      	ldr	r4, [pc, #120]	; (b0a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b030:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b034:	2710      	movs	r7, #16
    b036:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b03a:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b03e:	2002      	movs	r0, #2
    b040:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b044:	4819      	ldr	r0, [pc, #100]	; (b0ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b046:	2500      	movs	r5, #0
    b048:	491a      	ldr	r1, [pc, #104]	; (b0b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b04a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    b04e:	4818      	ldr	r0, [pc, #96]	; (b0b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b050:	6008      	str	r0, [r1, #0]
    b052:	4819      	ldr	r0, [pc, #100]	; (b0b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b054:	6800      	ldr	r0, [r0, #0]
    b056:	b1b0      	cbz	r0, b086 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b058:	20ff      	movs	r0, #255	; 0xff
    b05a:	f88d 0000 	strb.w	r0, [sp]
    b05e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b062:	2001      	movs	r0, #1
    b064:	6120      	str	r0, [r4, #16]
    b066:	e004      	b.n	b072 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b068:	f89d 0000 	ldrb.w	r0, [sp]
    b06c:	1e40      	subs	r0, r0, #1
    b06e:	f88d 0000 	strb.w	r0, [sp]
    b072:	f89d 0000 	ldrb.w	r0, [sp]
    b076:	b118      	cbz	r0, b080 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b078:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b07c:	2800      	cmp	r0, #0
    b07e:	d0f3      	beq.n	b068 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b080:	f89d 0000 	ldrb.w	r0, [sp]
    b084:	b150      	cbz	r0, b09c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b086:	f000 fca7 	bl	b9d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b08a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b08e:	f000 fe23 	bl	bcd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b092:	2e00      	cmp	r6, #0
    b094:	d001      	beq.n	b09a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b096:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b09c:	f240 7176 	movw	r1, #1910	; 0x776
    b0a0:	203e      	movs	r0, #62	; 0x3e
    b0a2:	f7f8 ffa1 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0a6:	0000      	.short	0x0000
    b0a8:	40001000 	.word	0x40001000
    b0ac:	20001014 	.word	0x20001014
    b0b0:	0c0e0000 	.word	0x0c0e0000
    b0b4:	4001f508 	.word	0x4001f508
    b0b8:	40001550 	.word	0x40001550

0000b0bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0c0:	4d34      	ldr	r5, [pc, #208]	; (b194 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>)
    b0c2:	4606      	mov	r6, r0
    b0c4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b0c8:	4689      	mov	r9, r1
    b0ca:	6028      	str	r0, [r5, #0]
    b0cc:	4c32      	ldr	r4, [pc, #200]	; (b198 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b0ce:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    b0d2:	f040 0002 	orr.w	r0, r0, #2
    b0d6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    b0da:	4608      	mov	r0, r1
    b0dc:	f000 fe62 	bl	bda4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b0e0:	f000 fc48 	bl	b974 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b0e4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b19c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>
    b0e8:	2700      	movs	r7, #0
    b0ea:	b116      	cbz	r6, b0f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b0ec:	2e01      	cmp	r6, #1
    b0ee:	d027      	beq.n	b140 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b0f0:	e03d      	b.n	b16e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb2>
    b0f2:	4648      	mov	r0, r9
    b0f4:	f000 fc5e 	bl	b9b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b0f8:	7a60      	ldrb	r0, [r4, #9]
    b0fa:	2801      	cmp	r0, #1
    b0fc:	d105      	bne.n	b10a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b0fe:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b102:	f041 0108 	orr.w	r1, r1, #8
    b106:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b10a:	4648      	mov	r0, r9
    b10c:	f000 fc16 	bl	b93c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b110:	2001      	movs	r0, #1
    b112:	72e0      	strb	r0, [r4, #11]
    b114:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b116:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b11a:	6320      	str	r0, [r4, #48]	; 0x30
    b11c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b120:	6028      	str	r0, [r5, #0]
    b122:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b126:	f1b9 0f02 	cmp.w	r9, #2
    b12a:	d007      	beq.n	b13c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b12c:	f640 0034 	movw	r0, #2100	; 0x834
    b130:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b134:	4410      	add	r0, r2
    b136:	fbb0 f7f1 	udiv	r7, r0, r1
    b13a:	e018      	b.n	b16e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb2>
    b13c:	4608      	mov	r0, r1
    b13e:	e7f7      	b.n	b130 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b140:	f000 fc40 	bl	b9c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b144:	7a60      	ldrb	r0, [r4, #9]
    b146:	2801      	cmp	r0, #1
    b148:	d105      	bne.n	b156 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    b14a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b14e:	f041 0104 	orr.w	r1, r1, #4
    b152:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b156:	2002      	movs	r0, #2
    b158:	72e0      	strb	r0, [r4, #11]
    b15a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b15c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b160:	6320      	str	r0, [r4, #48]	; 0x30
    b162:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b166:	6028      	str	r0, [r5, #0]
    b168:	2729      	movs	r7, #41	; 0x29
    b16a:	f000 fca7 	bl	babc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b16e:	f000 fc91 	bl	ba94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b172:	f000 fe3e 	bl	bdf2 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b176:	6800      	ldr	r0, [r0, #0]
    b178:	2801      	cmp	r0, #1
    b17a:	d006      	beq.n	b18a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b17c:	2100      	movs	r1, #0
    b17e:	4630      	mov	r0, r6
    b180:	f003 ff64 	bl	f04c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b184:	4638      	mov	r0, r7
    b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b18a:	f7ff ff4f 	bl	b02c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b18e:	2000      	movs	r0, #0
    b190:	e7f9      	b.n	b186 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xca>
    b192:	0000      	.short	0x0000
    b194:	4001f504 	.word	0x4001f504
    b198:	20001014 	.word	0x20001014
    b19c:	40001000 	.word	0x40001000

0000b1a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b1a0:	4a02      	ldr	r2, [pc, #8]	; (b1ac <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b1a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    b1a4:	6003      	str	r3, [r0, #0]
    b1a6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    b1a8:	6008      	str	r0, [r1, #0]
    b1aa:	4770      	bx	lr
    b1ac:	20001014 	.word	0x20001014

0000b1b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b1b0:	4601      	mov	r1, r0
    b1b2:	2214      	movs	r2, #20
    b1b4:	4801      	ldr	r0, [pc, #4]	; (b1bc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b1b6:	f000 bf94 	b.w	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b1ba:	0000      	.short	0x0000
    b1bc:	20001000 	.word	0x20001000

0000b1c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b1c0:	490e      	ldr	r1, [pc, #56]	; (b1fc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    b1c2:	b510      	push	{r4, lr}
    b1c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    b1c6:	4282      	cmp	r2, r0
    b1c8:	d302      	bcc.n	b1d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b1ca:	f240 71f6 	movw	r1, #2038	; 0x7f6
    b1ce:	e00a      	b.n	b1e6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    b1d0:	2201      	movs	r2, #1
    b1d2:	740a      	strb	r2, [r1, #16]
    b1d4:	6148      	str	r0, [r1, #20]
    b1d6:	490a      	ldr	r1, [pc, #40]	; (b200 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b1d8:	644a      	str	r2, [r1, #68]	; 0x44
    b1da:	4a0a      	ldr	r2, [pc, #40]	; (b204 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b1dc:	6813      	ldr	r3, [r2, #0]
    b1de:	4283      	cmp	r3, r0
    b1e0:	d304      	bcc.n	b1ec <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    b1e2:	f240 71ff 	movw	r1, #2047	; 0x7ff
    b1e6:	203e      	movs	r0, #62	; 0x3e
    b1e8:	f7f8 fefe 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1ec:	2300      	movs	r3, #0
    b1ee:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b1f2:	6010      	str	r0, [r2, #0]
    b1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1f8:	f000 bd54 	b.w	bca4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b1fc:	20001014 	.word	0x20001014
    b200:	40008000 	.word	0x40008000
    b204:	40008544 	.word	0x40008544

0000b208 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b208:	b570      	push	{r4, r5, r6, lr}
    b20a:	4c10      	ldr	r4, [pc, #64]	; (b24c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b20c:	4606      	mov	r6, r0
    b20e:	2002      	movs	r0, #2
    b210:	7420      	strb	r0, [r4, #16]
    b212:	2596      	movs	r5, #150	; 0x96
    b214:	f000 f866 	bl	b2e4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b218:	4602      	mov	r2, r0
    b21a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    b21e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b222:	2801      	cmp	r0, #1
    b224:	d00d      	beq.n	b242 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b226:	4628      	mov	r0, r5
    b228:	f003 ff28 	bl	f07c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b22c:	4908      	ldr	r1, [pc, #32]	; (b250 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b22e:	6160      	str	r0, [r4, #20]
    b230:	2000      	movs	r0, #0
    b232:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b236:	6961      	ldr	r1, [r4, #20]
    b238:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b23a:	4408      	add	r0, r1
    b23c:	4905      	ldr	r1, [pc, #20]	; (b254 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b23e:	6008      	str	r0, [r1, #0]
    b240:	bd70      	pop	{r4, r5, r6, pc}
    b242:	4633      	mov	r3, r6
    b244:	4628      	mov	r0, r5
    b246:	f003 ff35 	bl	f0b4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b24a:	e7ef      	b.n	b22c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b24c:	20001014 	.word	0x20001014
    b250:	40008000 	.word	0x40008000
    b254:	40008544 	.word	0x40008544

0000b258 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b258:	b510      	push	{r4, lr}
    b25a:	f000 ff0c 	bl	c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b25e:	2800      	cmp	r0, #0
    b260:	d006      	beq.n	b270 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b262:	4804      	ldr	r0, [pc, #16]	; (b274 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b264:	6801      	ldr	r1, [r0, #0]
    b266:	f021 0101 	bic.w	r1, r1, #1
    b26a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b26e:	6001      	str	r1, [r0, #0]
    b270:	bd10      	pop	{r4, pc}
    b272:	0000      	.short	0x0000
    b274:	40001774 	.word	0x40001774

0000b278 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b27c:	2240      	movs	r2, #64	; 0x40
    b27e:	2100      	movs	r1, #0
    b280:	4813      	ldr	r0, [pc, #76]	; (b2d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b282:	f000 ffa8 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b286:	f000 fd27 	bl	bcd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b28a:	f000 fead 	bl	bfe8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b28e:	4d11      	ldr	r5, [pc, #68]	; (b2d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b290:	4e10      	ldr	r6, [pc, #64]	; (b2d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b292:	2400      	movs	r4, #0
    b294:	4f0f      	ldr	r7, [pc, #60]	; (b2d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b296:	3508      	adds	r5, #8
    b298:	3610      	adds	r6, #16
    b29a:	b928      	cbnz	r0, b2a8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b29c:	f000 febb 	bl	c016 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b2a0:	b910      	cbnz	r0, b2a8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b2a2:	f000 fec2 	bl	c02a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b2a6:	b108      	cbz	r0, b2ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b2a8:	2224      	movs	r2, #36	; 0x24
    b2aa:	e006      	b.n	b2ba <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b2ac:	f000 fefd 	bl	c0aa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b2b0:	b910      	cbnz	r0, b2b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b2b2:	f000 fef0 	bl	c096 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b2b6:	b140      	cbz	r0, b2ca <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b2b8:	2240      	movs	r2, #64	; 0x40
    b2ba:	21ff      	movs	r1, #255	; 0xff
    b2bc:	4638      	mov	r0, r7
    b2be:	f000 ff8a 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b2c2:	602c      	str	r4, [r5, #0]
    b2c4:	6034      	str	r4, [r6, #0]
    b2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2ca:	2238      	movs	r2, #56	; 0x38
    b2cc:	e7f5      	b.n	b2ba <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b2ce:	0000      	.short	0x0000
    b2d0:	20001014 	.word	0x20001014
    b2d4:	40000e00 	.word	0x40000e00

0000b2d8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    b2d8:	4901      	ldr	r1, [pc, #4]	; (b2e0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    b2da:	7008      	strb	r0, [r1, #0]
    b2dc:	4770      	bx	lr
    b2de:	0000      	.short	0x0000
    b2e0:	20000264 	.word	0x20000264

0000b2e4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b2e4:	4814      	ldr	r0, [pc, #80]	; (b338 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b2e6:	b510      	push	{r4, lr}
    b2e8:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    b2ec:	7ac0      	ldrb	r0, [r0, #11]
    b2ee:	b141      	cbz	r1, b302 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b2f0:	2902      	cmp	r1, #2
    b2f2:	d00b      	beq.n	b30c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b2f4:	2802      	cmp	r0, #2
    b2f6:	d009      	beq.n	b30c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b2f8:	2901      	cmp	r1, #1
    b2fa:	d00b      	beq.n	b314 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b2fc:	2801      	cmp	r0, #1
    b2fe:	d009      	beq.n	b314 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b300:	e015      	b.n	b32e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b302:	2800      	cmp	r0, #0
    b304:	d1f6      	bne.n	b2f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b306:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    b30a:	e00d      	b.n	b328 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b310:	f000 bc62 	b.w	bbd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    b314:	4809      	ldr	r0, [pc, #36]	; (b33c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b316:	6800      	ldr	r0, [r0, #0]
    b318:	f000 000f 	and.w	r0, r0, #15
    b31c:	2803      	cmp	r0, #3
    b31e:	d006      	beq.n	b32e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b320:	2804      	cmp	r0, #4
    b322:	d006      	beq.n	b332 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b324:	f240 2107 	movw	r1, #519	; 0x207
    b328:	203e      	movs	r0, #62	; 0x3e
    b32a:	f7f8 fe5d 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b32e:	2001      	movs	r0, #1
    b330:	bd10      	pop	{r4, pc}
    b332:	2002      	movs	r0, #2
    b334:	bd10      	pop	{r4, pc}
    b336:	0000      	.short	0x0000
    b338:	20001014 	.word	0x20001014
    b33c:	40001510 	.word	0x40001510

0000b340 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b340:	4801      	ldr	r0, [pc, #4]	; (b348 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b342:	6a00      	ldr	r0, [r0, #32]
    b344:	4770      	bx	lr
    b346:	0000      	.short	0x0000
    b348:	20001014 	.word	0x20001014

0000b34c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    b34c:	4801      	ldr	r0, [pc, #4]	; (b354 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    b34e:	7f40      	ldrb	r0, [r0, #29]
    b350:	4770      	bx	lr
    b352:	0000      	.short	0x0000
    b354:	20001014 	.word	0x20001014

0000b358 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b358:	4913      	ldr	r1, [pc, #76]	; (b3a8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b35a:	b510      	push	{r4, lr}
    b35c:	6b08      	ldr	r0, [r1, #48]	; 0x30
    b35e:	4a13      	ldr	r2, [pc, #76]	; (b3ac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b360:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    b364:	6010      	str	r0, [r2, #0]
    b366:	2000      	movs	r0, #0
    b368:	6308      	str	r0, [r1, #48]	; 0x30
    b36a:	7408      	strb	r0, [r1, #16]
    b36c:	6248      	str	r0, [r1, #36]	; 0x24
    b36e:	6208      	str	r0, [r1, #32]
    b370:	490f      	ldr	r1, [pc, #60]	; (b3b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    b372:	6008      	str	r0, [r1, #0]
    b374:	1f09      	subs	r1, r1, #4
    b376:	6008      	str	r0, [r1, #0]
    b378:	1f09      	subs	r1, r1, #4
    b37a:	6008      	str	r0, [r1, #0]
    b37c:	490c      	ldr	r1, [pc, #48]	; (b3b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    b37e:	1d09      	adds	r1, r1, #4
    b380:	6008      	str	r0, [r1, #0]
    b382:	490c      	ldr	r1, [pc, #48]	; (b3b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    b384:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b388:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b38c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b390:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    b394:	f7ff fe4a 	bl	b02c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b398:	2001      	movs	r0, #1
    b39a:	f003 fe26 	bl	efea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3a2:	2001      	movs	r0, #1
    b3a4:	f003 be14 	b.w	efd0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b3a8:	20001014 	.word	0x20001014
    b3ac:	4001f508 	.word	0x4001f508
    b3b0:	40008548 	.word	0x40008548
    b3b4:	40008000 	.word	0x40008000

0000b3b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b3b8:	b570      	push	{r4, r5, r6, lr}
    b3ba:	2001      	movs	r0, #1
    b3bc:	f003 fe15 	bl	efea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b3c0:	4831      	ldr	r0, [pc, #196]	; (b488 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xd0>)
    b3c2:	2400      	movs	r4, #0
    b3c4:	6004      	str	r4, [r0, #0]
    b3c6:	2601      	movs	r6, #1
    b3c8:	6006      	str	r6, [r0, #0]
    b3ca:	f000 fe44 	bl	c056 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b3ce:	4d2f      	ldr	r5, [pc, #188]	; (b48c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xd4>)
    b3d0:	b118      	cbz	r0, b3da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    b3d2:	6828      	ldr	r0, [r5, #0]
    b3d4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b3d8:	6028      	str	r0, [r5, #0]
    b3da:	f000 fe30 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b3de:	b128      	cbz	r0, b3ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    b3e0:	6828      	ldr	r0, [r5, #0]
    b3e2:	492b      	ldr	r1, [pc, #172]	; (b490 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xd8>)
    b3e4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b3e8:	4308      	orrs	r0, r1
    b3ea:	6028      	str	r0, [r5, #0]
    b3ec:	f000 fe43 	bl	c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b3f0:	b138      	cbz	r0, b402 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    b3f2:	4826      	ldr	r0, [pc, #152]	; (b48c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xd4>)
    b3f4:	1d00      	adds	r0, r0, #4
    b3f6:	6801      	ldr	r1, [r0, #0]
    b3f8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b3fc:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b400:	6001      	str	r1, [r0, #0]
    b402:	4922      	ldr	r1, [pc, #136]	; (b48c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xd4>)
    b404:	4823      	ldr	r0, [pc, #140]	; (b494 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xdc>)
    b406:	313c      	adds	r1, #60	; 0x3c
    b408:	6008      	str	r0, [r1, #0]
    b40a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b40e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b410:	1c41      	adds	r1, r0, #1
    b412:	d004      	beq.n	b41e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x66>
    b414:	4920      	ldr	r1, [pc, #128]	; (b498 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe0>)
    b416:	680a      	ldr	r2, [r1, #0]
    b418:	f360 4217 	bfi	r2, r0, #16, #8
    b41c:	600a      	str	r2, [r1, #0]
    b41e:	491e      	ldr	r1, [pc, #120]	; (b498 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe0>)
    b420:	f240 605b 	movw	r0, #1627	; 0x65b
    b424:	3954      	subs	r1, #84	; 0x54
    b426:	6008      	str	r0, [r1, #0]
    b428:	1f09      	subs	r1, r1, #4
    b42a:	f240 1003 	movw	r0, #259	; 0x103
    b42e:	6008      	str	r0, [r1, #0]
    b430:	1f08      	subs	r0, r1, #4
    b432:	6006      	str	r6, [r0, #0]
    b434:	2001      	movs	r0, #1
    b436:	f000 fcb5 	bl	bda4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b43a:	4917      	ldr	r1, [pc, #92]	; (b498 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe0>)
    b43c:	f240 1001 	movw	r0, #257	; 0x101
    b440:	31c4      	adds	r1, #196	; 0xc4
    b442:	6008      	str	r0, [r1, #0]
    b444:	4e15      	ldr	r6, [pc, #84]	; (b49c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>)
    b446:	2502      	movs	r5, #2
    b448:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b44c:	4915      	ldr	r1, [pc, #84]	; (b4a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b44e:	4814      	ldr	r0, [pc, #80]	; (b4a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b450:	6008      	str	r0, [r1, #0]
    b452:	4815      	ldr	r0, [pc, #84]	; (b4a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b454:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b458:	8784      	strh	r4, [r0, #60]	; 0x3c
    b45a:	3014      	adds	r0, #20
    b45c:	6244      	str	r4, [r0, #36]	; 0x24
    b45e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    b462:	2001      	movs	r0, #1
    b464:	f003 fdb4 	bl	efd0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b468:	2010      	movs	r0, #16
    b46a:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b46e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b472:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b476:	480d      	ldr	r0, [pc, #52]	; (b4ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b478:	6840      	ldr	r0, [r0, #4]
    b47a:	2800      	cmp	r0, #0
    b47c:	d002      	beq.n	b484 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xcc>
    b47e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b482:	4700      	bx	r0
    b484:	bd70      	pop	{r4, r5, r6, pc}
    b486:	0000      	.short	0x0000
    b488:	40001ffc 	.word	0x40001ffc
    b48c:	4000173c 	.word	0x4000173c
    b490:	80000096 	.word	0x80000096
    b494:	8900002c 	.word	0x8900002c
    b498:	4000158c 	.word	0x4000158c
    b49c:	40001000 	.word	0x40001000
    b4a0:	0c0e0000 	.word	0x0c0e0000
    b4a4:	4001f508 	.word	0x4001f508
    b4a8:	20001000 	.word	0x20001000
    b4ac:	20000264 	.word	0x20000264

0000b4b0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b4b0:	4901      	ldr	r1, [pc, #4]	; (b4b8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b4b2:	7608      	strb	r0, [r1, #24]
    b4b4:	4770      	bx	lr
    b4b6:	0000      	.short	0x0000
    b4b8:	20001014 	.word	0x20001014

0000b4bc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b4bc:	4904      	ldr	r1, [pc, #16]	; (b4d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b4be:	6008      	str	r0, [r1, #0]
    b4c0:	4804      	ldr	r0, [pc, #16]	; (b4d4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b4c2:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    b4c6:	f041 0101 	orr.w	r1, r1, #1
    b4ca:	7001      	strb	r1, [r0, #0]
    b4cc:	f000 baaa 	b.w	ba24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b4d0:	40001504 	.word	0x40001504
    b4d4:	20001014 	.word	0x20001014

0000b4d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4dc:	4e36      	ldr	r6, [pc, #216]	; (b5b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b4de:	4607      	mov	r7, r0
    b4e0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b4e4:	468a      	mov	sl, r1
    b4e6:	4615      	mov	r5, r2
    b4e8:	6030      	str	r0, [r6, #0]
    b4ea:	4c34      	ldr	r4, [pc, #208]	; (b5bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b4ec:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    b4f0:	42a8      	cmp	r0, r5
    b4f2:	d002      	beq.n	b4fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    b4f4:	4610      	mov	r0, r2
    b4f6:	f000 fc55 	bl	bda4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b4fa:	f000 fa3b 	bl	b974 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b4fe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>
    b502:	f04f 0801 	mov.w	r8, #1
    b506:	b127      	cbz	r7, b512 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3a>
    b508:	2f01      	cmp	r7, #1
    b50a:	d01d      	beq.n	b548 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x70>
    b50c:	f240 61f7 	movw	r1, #1783	; 0x6f7
    b510:	e048      	b.n	b5a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    b512:	4628      	mov	r0, r5
    b514:	f000 fa4e 	bl	b9b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b518:	4628      	mov	r0, r5
    b51a:	f000 fa0f 	bl	b93c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b51e:	2d02      	cmp	r5, #2
    b520:	d00f      	beq.n	b542 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x6a>
    b522:	f640 0134 	movw	r1, #2100	; 0x834
    b526:	bf00      	nop
    b528:	f649 50f8 	movw	r0, #40440	; 0x9df8
    b52c:	4401      	add	r1, r0
    b52e:	4650      	mov	r0, sl
    b530:	f000 fbdc 	bl	bcec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x400>
    b534:	4605      	mov	r5, r0
    b536:	4648      	mov	r0, r9
    b538:	f000 fbc2 	bl	bcc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    b53c:	f884 800b 	strb.w	r8, [r4, #11]
    b540:	e012      	b.n	b568 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x90>
    b542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b546:	e7ef      	b.n	b528 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    b548:	f000 fa3c 	bl	b9c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b54c:	f000 fab6 	bl	babc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b550:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b554:	4650      	mov	r0, sl
    b556:	f000 fbc9 	bl	bcec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x400>
    b55a:	4605      	mov	r5, r0
    b55c:	4818      	ldr	r0, [pc, #96]	; (b5c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b55e:	1d00      	adds	r0, r0, #4
    b560:	f000 fbae 	bl	bcc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    b564:	2002      	movs	r0, #2
    b566:	72e0      	strb	r0, [r4, #11]
    b568:	4816      	ldr	r0, [pc, #88]	; (b5c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b56a:	6005      	str	r5, [r0, #0]
    b56c:	4917      	ldr	r1, [pc, #92]	; (b5cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b56e:	4816      	ldr	r0, [pc, #88]	; (b5c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b570:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b574:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b576:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b57a:	6320      	str	r0, [r4, #48]	; 0x30
    b57c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b580:	6030      	str	r0, [r6, #0]
    b582:	2110      	movs	r1, #16
    b584:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    b588:	1200      	asrs	r0, r0, #8
    b58a:	6030      	str	r0, [r6, #0]
    b58c:	f000 fa82 	bl	ba94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b590:	490f      	ldr	r1, [pc, #60]	; (b5d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf8>)
    b592:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    b596:	480b      	ldr	r0, [pc, #44]	; (b5c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b598:	300c      	adds	r0, #12
    b59a:	6800      	ldr	r0, [r0, #0]
    b59c:	42a8      	cmp	r0, r5
    b59e:	d304      	bcc.n	b5aa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    b5a0:	f240 711c 	movw	r1, #1820	; 0x71c
    b5a4:	203e      	movs	r0, #62	; 0x3e
    b5a6:	f7f8 fd1f 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5aa:	4629      	mov	r1, r5
    b5ac:	4638      	mov	r0, r7
    b5ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5b2:	f003 bd4b 	b.w	f04c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b5b6:	0000      	.short	0x0000
    b5b8:	4001f504 	.word	0x4001f504
    b5bc:	20001014 	.word	0x20001014
    b5c0:	40001000 	.word	0x40001000
    b5c4:	40008540 	.word	0x40008540
    b5c8:	40008140 	.word	0x40008140
    b5cc:	4001f098 	.word	0x4001f098
    b5d0:	40008000 	.word	0x40008000

0000b5d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b5d4:	b510      	push	{r4, lr}
    b5d6:	b14a      	cbz	r2, b5ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    b5d8:	4c11      	ldr	r4, [pc, #68]	; (b620 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>)
    b5da:	7260      	strb	r0, [r4, #9]
    b5dc:	7363      	strb	r3, [r4, #13]
    b5de:	07d0      	lsls	r0, r2, #31
    b5e0:	d007      	beq.n	b5f2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b5e2:	2a01      	cmp	r2, #1
    b5e4:	d005      	beq.n	b5f2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b5e6:	f640 01f6 	movw	r1, #2294	; 0x8f6
    b5ea:	e00c      	b.n	b606 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b5ec:	f640 01ef 	movw	r1, #2287	; 0x8ef
    b5f0:	e009      	b.n	b606 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b5f2:	b159      	cbz	r1, b60c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    b5f4:	2002      	movs	r0, #2
    b5f6:	72a0      	strb	r0, [r4, #10]
    b5f8:	7322      	strb	r2, [r4, #12]
    b5fa:	2801      	cmp	r0, #1
    b5fc:	d008      	beq.n	b610 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    b5fe:	2802      	cmp	r0, #2
    b600:	d00d      	beq.n	b61e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4a>
    b602:	f640 110c 	movw	r1, #2316	; 0x90c
    b606:	203e      	movs	r0, #62	; 0x3e
    b608:	f7f8 fcee 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b60c:	2001      	movs	r0, #1
    b60e:	e7f2      	b.n	b5f6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    b610:	7ae0      	ldrb	r0, [r4, #11]
    b612:	2802      	cmp	r0, #2
    b614:	d103      	bne.n	b61e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4a>
    b616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b61a:	f000 b9d3 	b.w	b9c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b61e:	bd10      	pop	{r4, pc}
    b620:	20001014 	.word	0x20001014

0000b624 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    b624:	4804      	ldr	r0, [pc, #16]	; (b638 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    b626:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b62a:	f021 0110 	bic.w	r1, r1, #16
    b62e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b632:	2101      	movs	r1, #1
    b634:	6181      	str	r1, [r0, #24]
    b636:	4770      	bx	lr
    b638:	40001000 	.word	0x40001000

0000b63c <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    b63c:	4805      	ldr	r0, [pc, #20]	; (b654 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x18>)
    b63e:	2100      	movs	r1, #0
    b640:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b644:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b648:	f041 0110 	orr.w	r1, r1, #16
    b64c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b650:	4770      	bx	lr
    b652:	0000      	.short	0x0000
    b654:	40001000 	.word	0x40001000

0000b658 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b658:	490a      	ldr	r1, [pc, #40]	; (b684 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    b65a:	b508      	push	{r3, lr}
    b65c:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    b660:	2a01      	cmp	r2, #1
    b662:	d001      	beq.n	b668 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    b664:	2000      	movs	r0, #0
    b666:	bd08      	pop	{r3, pc}
    b668:	4a07      	ldr	r2, [pc, #28]	; (b688 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b66a:	6812      	ldr	r2, [r2, #0]
    b66c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b670:	4252      	negs	r2, r2
    b672:	7002      	strb	r2, [r0, #0]
    b674:	2000      	movs	r0, #0
    b676:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b67a:	4804      	ldr	r0, [pc, #16]	; (b68c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b67c:	6800      	ldr	r0, [r0, #0]
    b67e:	9000      	str	r0, [sp, #0]
    b680:	2001      	movs	r0, #1
    b682:	bd08      	pop	{r3, pc}
    b684:	40001000 	.word	0x40001000
    b688:	40001548 	.word	0x40001548
    b68c:	4000111c 	.word	0x4000111c

0000b690 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    b690:	4a04      	ldr	r2, [pc, #16]	; (b6a4 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    b692:	6803      	ldr	r3, [r0, #0]
    b694:	f8c2 3016 	str.w	r3, [r2, #22]
    b698:	8880      	ldrh	r0, [r0, #4]
    b69a:	8350      	strh	r0, [r2, #26]
    b69c:	f102 0014 	add.w	r0, r2, #20
    b6a0:	7201      	strb	r1, [r0, #8]
    b6a2:	4770      	bx	lr
    b6a4:	20001000 	.word	0x20001000

0000b6a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b6a8:	4a04      	ldr	r2, [pc, #16]	; (b6bc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b6aa:	78c1      	ldrb	r1, [r0, #3]
    b6ac:	6011      	str	r1, [r2, #0]
    b6ae:	6800      	ldr	r0, [r0, #0]
    b6b0:	4902      	ldr	r1, [pc, #8]	; (b6bc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b6b2:	0200      	lsls	r0, r0, #8
    b6b4:	3908      	subs	r1, #8
    b6b6:	6008      	str	r0, [r1, #0]
    b6b8:	4770      	bx	lr
    b6ba:	0000      	.short	0x0000
    b6bc:	40001524 	.word	0x40001524

0000b6c0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b6c0:	6800      	ldr	r0, [r0, #0]
    b6c2:	4902      	ldr	r1, [pc, #8]	; (b6cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    b6c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b6c8:	6008      	str	r0, [r1, #0]
    b6ca:	4770      	bx	lr
    b6cc:	4000153c 	.word	0x4000153c

0000b6d0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b6d0:	b510      	push	{r4, lr}
    b6d2:	f000 fb43 	bl	bd5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x470>
    b6d6:	4806      	ldr	r0, [pc, #24]	; (b6f0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    b6d8:	6800      	ldr	r0, [r0, #0]
    b6da:	2803      	cmp	r0, #3
    b6dc:	d001      	beq.n	b6e2 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    b6de:	280b      	cmp	r0, #11
    b6e0:	d104      	bne.n	b6ec <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    b6e2:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b6e6:	203e      	movs	r0, #62	; 0x3e
    b6e8:	f7f8 fc7e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6ec:	bd10      	pop	{r4, pc}
    b6ee:	0000      	.short	0x0000
    b6f0:	40001550 	.word	0x40001550

0000b6f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b6f4:	4901      	ldr	r1, [pc, #4]	; (b6fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b6f6:	7648      	strb	r0, [r1, #25]
    b6f8:	4770      	bx	lr
    b6fa:	0000      	.short	0x0000
    b6fc:	20001014 	.word	0x20001014

0000b700 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b700:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b704:	4d70      	ldr	r5, [pc, #448]	; (b8c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    b706:	f04f 0801 	mov.w	r8, #1
    b70a:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    b70e:	486f      	ldr	r0, [pc, #444]	; (b8cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    b710:	f8d0 b000 	ldr.w	fp, [r0]
    b714:	486e      	ldr	r0, [pc, #440]	; (b8d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b716:	6800      	ldr	r0, [r0, #0]
    b718:	4c6e      	ldr	r4, [pc, #440]	; (b8d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>)
    b71a:	e9c4 0b0e 	strd	r0, fp, [r4, #56]	; 0x38
    b71e:	486e      	ldr	r0, [pc, #440]	; (b8d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b720:	7800      	ldrb	r0, [r0, #0]
    b722:	2804      	cmp	r0, #4
    b724:	d302      	bcc.n	b72c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    b726:	f640 2187 	movw	r1, #2695	; 0xa87
    b72a:	e0c2      	b.n	b8b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b2>
    b72c:	f000 f954 	bl	b9d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b730:	496a      	ldr	r1, [pc, #424]	; (b8dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b732:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b734:	6008      	str	r0, [r1, #0]
    b736:	486a      	ldr	r0, [pc, #424]	; (b8e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b738:	2600      	movs	r6, #0
    b73a:	6326      	str	r6, [r4, #48]	; 0x30
    b73c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b740:	f021 010d 	bic.w	r1, r1, #13
    b744:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b748:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b74c:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    b750:	b908      	cbnz	r0, b756 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56>
    b752:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
    b756:	f000 f9c3 	bl	bae0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f4>
    b75a:	4605      	mov	r5, r0
    b75c:	485b      	ldr	r0, [pc, #364]	; (b8cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    b75e:	1f00      	subs	r0, r0, #4
    b760:	6800      	ldr	r0, [r0, #0]
    b762:	6260      	str	r0, [r4, #36]	; 0x24
    b764:	f7ff fdbe 	bl	b2e4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b768:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b76c:	7ae0      	ldrb	r0, [r4, #11]
    b76e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b772:	46b2      	mov	sl, r6
    b774:	6226      	str	r6, [r4, #32]
    b776:	4e5b      	ldr	r6, [pc, #364]	; (b8e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b778:	2802      	cmp	r0, #2
    b77a:	d107      	bne.n	b78c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    b77c:	7860      	ldrb	r0, [r4, #1]
    b77e:	b128      	cbz	r0, b78c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    b780:	6831      	ldr	r1, [r6, #0]
    b782:	7809      	ldrb	r1, [r1, #0]
    b784:	4001      	ands	r1, r0
    b786:	7820      	ldrb	r0, [r4, #0]
    b788:	4388      	bics	r0, r1
    b78a:	d017      	beq.n	b7bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbc>
    b78c:	f884 a01c 	strb.w	sl, [r4, #28]
    b790:	f8df 9154 	ldr.w	r9, [pc, #340]	; b8e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>
    b794:	07a8      	lsls	r0, r5, #30
    b796:	d502      	bpl.n	b79e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9e>
    b798:	f8d9 0000 	ldr.w	r0, [r9]
    b79c:	6220      	str	r0, [r4, #32]
    b79e:	0728      	lsls	r0, r5, #28
    b7a0:	d502      	bpl.n	b7a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa8>
    b7a2:	f8d9 0000 	ldr.w	r0, [r9]
    b7a6:	6220      	str	r0, [r4, #32]
    b7a8:	4f4a      	ldr	r7, [pc, #296]	; (b8d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>)
    b7aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b7ac:	3f14      	subs	r7, #20
    b7ae:	6939      	ldr	r1, [r7, #16]
    b7b0:	4788      	blx	r1
    b7b2:	4849      	ldr	r0, [pc, #292]	; (b8d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b7b4:	7800      	ldrb	r0, [r0, #0]
    b7b6:	07c0      	lsls	r0, r0, #31
    b7b8:	d003      	beq.n	b7c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc2>
    b7ba:	e01b      	b.n	b7f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    b7bc:	f884 801c 	strb.w	r8, [r4, #28]
    b7c0:	e7e6      	b.n	b790 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x90>
    b7c2:	6836      	ldr	r6, [r6, #0]
    b7c4:	7830      	ldrb	r0, [r6, #0]
    b7c6:	f000 000f 	and.w	r0, r0, #15
    b7ca:	2807      	cmp	r0, #7
    b7cc:	d210      	bcs.n	b7f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    b7ce:	2206      	movs	r2, #6
    b7d0:	f106 0109 	add.w	r1, r6, #9
    b7d4:	1ca0      	adds	r0, r4, #2
    b7d6:	f000 fc72 	bl	c0be <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b7da:	b930      	cbnz	r0, b7ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    b7dc:	7a20      	ldrb	r0, [r4, #8]
    b7de:	7831      	ldrb	r1, [r6, #0]
    b7e0:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    b7e4:	d101      	bne.n	b7ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    b7e6:	2001      	movs	r0, #1
    b7e8:	e000      	b.n	b7ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b7ea:	2000      	movs	r0, #0
    b7ec:	7760      	strb	r0, [r4, #29]
    b7ee:	e001      	b.n	b7f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    b7f0:	f884 a01d 	strb.w	sl, [r4, #29]
    b7f4:	2600      	movs	r6, #0
    b7f6:	4659      	mov	r1, fp
    b7f8:	4628      	mov	r0, r5
    b7fa:	f000 fa01 	bl	bc00 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>
    b7fe:	b918      	cbnz	r0, b808 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    b800:	4937      	ldr	r1, [pc, #220]	; (b8e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b802:	f8c1 8010 	str.w	r8, [r1, #16]
    b806:	2601      	movs	r6, #1
    b808:	07e8      	lsls	r0, r5, #31
    b80a:	d002      	beq.n	b812 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x112>
    b80c:	6838      	ldr	r0, [r7, #0]
    b80e:	4780      	blx	r0
    b810:	e032      	b.n	b878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x178>
    b812:	07a8      	lsls	r0, r5, #30
    b814:	d527      	bpl.n	b866 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x166>
    b816:	0768      	lsls	r0, r5, #29
    b818:	d41f      	bmi.n	b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b81a:	f000 fc2c 	bl	c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b81e:	b9e0      	cbnz	r0, b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b820:	f000 fc19 	bl	c056 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b824:	b9c8      	cbnz	r0, b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b826:	482f      	ldr	r0, [pc, #188]	; (b8e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b828:	38b4      	subs	r0, #180	; 0xb4
    b82a:	6800      	ldr	r0, [r0, #0]
    b82c:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b830:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b834:	f000 020f 	and.w	r2, r0, #15
    b838:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b83c:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b840:	b15b      	cbz	r3, b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b842:	b10a      	cbz	r2, b848 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    b844:	b101      	cbz	r1, b848 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    b846:	b940      	cbnz	r0, b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b848:	4826      	ldr	r0, [pc, #152]	; (b8e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b84a:	38b0      	subs	r0, #176	; 0xb0
    b84c:	6800      	ldr	r0, [r0, #0]
    b84e:	b120      	cbz	r0, b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b850:	f1bc 0f03 	cmp.w	ip, #3
    b854:	d201      	bcs.n	b85a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15a>
    b856:	f045 0504 	orr.w	r5, r5, #4
    b85a:	f345 0080 	sbfx	r0, r5, #2, #1
    b85e:	4631      	mov	r1, r6
    b860:	1c40      	adds	r0, r0, #1
    b862:	687a      	ldr	r2, [r7, #4]
    b864:	e007      	b.n	b876 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x176>
    b866:	f015 0f28 	tst.w	r5, #40	; 0x28
    b86a:	d005      	beq.n	b878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x178>
    b86c:	f345 1140 	sbfx	r1, r5, #5, #1
    b870:	68ba      	ldr	r2, [r7, #8]
    b872:	4630      	mov	r0, r6
    b874:	1c49      	adds	r1, r1, #1
    b876:	4790      	blx	r2
    b878:	06e8      	lsls	r0, r5, #27
    b87a:	d501      	bpl.n	b880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    b87c:	68f8      	ldr	r0, [r7, #12]
    b87e:	4780      	blx	r0
    b880:	7ae0      	ldrb	r0, [r4, #11]
    b882:	2802      	cmp	r0, #2
    b884:	d11e      	bne.n	b8c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>
    b886:	7c20      	ldrb	r0, [r4, #16]
    b888:	2800      	cmp	r0, #0
    b88a:	d01b      	beq.n	b8c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>
    b88c:	2802      	cmp	r0, #2
    b88e:	d004      	beq.n	b89a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19a>
    b890:	2801      	cmp	r0, #1
    b892:	d008      	beq.n	b8a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a6>
    b894:	f640 3121 	movw	r1, #2849	; 0xb21
    b898:	e00b      	b.n	b8b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b2>
    b89a:	6961      	ldr	r1, [r4, #20]
    b89c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b89e:	4401      	add	r1, r0
    b8a0:	f8c9 1000 	str.w	r1, [r9]
    b8a4:	e00a      	b.n	b8bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1bc>
    b8a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b8a8:	6960      	ldr	r0, [r4, #20]
    b8aa:	4288      	cmp	r0, r1
    b8ac:	d804      	bhi.n	b8b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    b8ae:	f640 3122 	movw	r1, #2850	; 0xb22
    b8b2:	203e      	movs	r0, #62	; 0x3e
    b8b4:	f7f8 fb98 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8b8:	f8c9 0000 	str.w	r0, [r9]
    b8bc:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b8c0:	f000 b9f0 	b.w	bca4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b8c4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b8c8:	40008000 	.word	0x40008000
    b8cc:	4000854c 	.word	0x4000854c
    b8d0:	4000b504 	.word	0x4000b504
    b8d4:	20001014 	.word	0x20001014
    b8d8:	20000264 	.word	0x20000264
    b8dc:	4001f508 	.word	0x4001f508
    b8e0:	40001000 	.word	0x40001000
    b8e4:	40001504 	.word	0x40001504
    b8e8:	40008544 	.word	0x40008544

0000b8ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b8ec:	b570      	push	{r4, r5, r6, lr}
    b8ee:	4b11      	ldr	r3, [pc, #68]	; (b934 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b8f0:	888c      	ldrh	r4, [r1, #4]
    b8f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b8f6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b8fa:	780c      	ldrb	r4, [r1, #0]
    b8fc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b900:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b904:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b908:	4d0b      	ldr	r5, [pc, #44]	; (b938 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b90a:	6829      	ldr	r1, [r5, #0]
    b90c:	f100 0608 	add.w	r6, r0, #8
    b910:	2401      	movs	r4, #1
    b912:	fa04 f306 	lsl.w	r3, r4, r6
    b916:	b132      	cbz	r2, b926 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b918:	2a01      	cmp	r2, #1
    b91a:	d006      	beq.n	b92a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b91c:	f240 41a6 	movw	r1, #1190	; 0x4a6
    b920:	203e      	movs	r0, #62	; 0x3e
    b922:	f7f8 fb61 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b926:	4399      	bics	r1, r3
    b928:	e000      	b.n	b92c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b92a:	4319      	orrs	r1, r3
    b92c:	4084      	lsls	r4, r0
    b92e:	430c      	orrs	r4, r1
    b930:	602c      	str	r4, [r5, #0]
    b932:	bd70      	pop	{r4, r5, r6, pc}
    b934:	40001000 	.word	0x40001000
    b938:	40001640 	.word	0x40001640
    b93c:	b510      	push	{r4, lr}
    b93e:	4604      	mov	r4, r0
    b940:	f000 fb99 	bl	c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b944:	2800      	cmp	r0, #0
    b946:	d00e      	beq.n	b966 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    b948:	4a09      	ldr	r2, [pc, #36]	; (b970 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    b94a:	6811      	ldr	r1, [r2, #0]
    b94c:	0650      	lsls	r0, r2, #25
    b94e:	2c02      	cmp	r4, #2
    b950:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b954:	d008      	beq.n	b968 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    b956:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b95a:	bf00      	nop
    b95c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b960:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b964:	6010      	str	r0, [r2, #0]
    b966:	bd10      	pop	{r4, pc}
    b968:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b96c:	e7f6      	b.n	b95c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    b96e:	0000      	.short	0x0000
    b970:	40001588 	.word	0x40001588
    b974:	480d      	ldr	r0, [pc, #52]	; (b9ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    b976:	7e40      	ldrb	r0, [r0, #25]
    b978:	2825      	cmp	r0, #37	; 0x25
    b97a:	d007      	beq.n	b98c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    b97c:	2826      	cmp	r0, #38	; 0x26
    b97e:	d007      	beq.n	b990 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    b980:	2827      	cmp	r0, #39	; 0x27
    b982:	d007      	beq.n	b994 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    b984:	280a      	cmp	r0, #10
    b986:	d807      	bhi.n	b998 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    b988:	2204      	movs	r2, #4
    b98a:	e006      	b.n	b99a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    b98c:	2102      	movs	r1, #2
    b98e:	e007      	b.n	b9a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b990:	211a      	movs	r1, #26
    b992:	e005      	b.n	b9a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b994:	2150      	movs	r1, #80	; 0x50
    b996:	e003      	b.n	b9a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b998:	2206      	movs	r2, #6
    b99a:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b99e:	b2c9      	uxtb	r1, r1
    b9a0:	4a03      	ldr	r2, [pc, #12]	; (b9b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b9a2:	6011      	str	r1, [r2, #0]
    b9a4:	4902      	ldr	r1, [pc, #8]	; (b9b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b9a6:	314c      	adds	r1, #76	; 0x4c
    b9a8:	6008      	str	r0, [r1, #0]
    b9aa:	4770      	bx	lr
    b9ac:	20001014 	.word	0x20001014
    b9b0:	40001508 	.word	0x40001508
    b9b4:	4802      	ldr	r0, [pc, #8]	; (b9c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd4>)
    b9b6:	f990 0018 	ldrsb.w	r0, [r0, #24]
    b9ba:	f000 b9ed 	b.w	bd98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b9be:	0000      	.short	0x0000
    b9c0:	20001014 	.word	0x20001014
    b9c4:	4803      	ldr	r0, [pc, #12]	; (b9d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>)
    b9c6:	7a81      	ldrb	r1, [r0, #10]
    b9c8:	2901      	cmp	r1, #1
    b9ca:	d102      	bne.n	b9d2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe6>
    b9cc:	7b40      	ldrb	r0, [r0, #13]
    b9ce:	f7ff bff1 	b.w	b9b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b9d2:	4770      	bx	lr
    b9d4:	20001014 	.word	0x20001014
    b9d8:	4805      	ldr	r0, [pc, #20]	; (b9f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x104>)
    b9da:	7ac0      	ldrb	r0, [r0, #11]
    b9dc:	2801      	cmp	r0, #1
    b9de:	d003      	beq.n	b9e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfc>
    b9e0:	2802      	cmp	r0, #2
    b9e2:	d103      	bne.n	b9ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x100>
    b9e4:	f003 bad0 	b.w	ef88 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b9e8:	f003 bada 	b.w	efa0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b9ec:	4770      	bx	lr
    b9ee:	0000      	.short	0x0000
    b9f0:	20001014 	.word	0x20001014
    b9f4:	4809      	ldr	r0, [pc, #36]	; (ba1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>)
    b9f6:	b508      	push	{r3, lr}
    b9f8:	2100      	movs	r1, #0
    b9fa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b9fe:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ba02:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    ba06:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ba0a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    ba0e:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    ba12:	4803      	ldr	r0, [pc, #12]	; (ba20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    ba14:	6800      	ldr	r0, [r0, #0]
    ba16:	9000      	str	r0, [sp, #0]
    ba18:	bd08      	pop	{r3, pc}
    ba1a:	0000      	.short	0x0000
    ba1c:	40001000 	.word	0x40001000
    ba20:	40001118 	.word	0x40001118
    ba24:	4816      	ldr	r0, [pc, #88]	; (ba80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x194>)
    ba26:	b510      	push	{r4, lr}
    ba28:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    ba2c:	07c1      	lsls	r1, r0, #31
    ba2e:	d026      	beq.n	ba7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    ba30:	0781      	lsls	r1, r0, #30
    ba32:	d513      	bpl.n	ba5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>
    ba34:	4813      	ldr	r0, [pc, #76]	; (ba84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    ba36:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ba3a:	f041 0101 	orr.w	r1, r1, #1
    ba3e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ba42:	4811      	ldr	r0, [pc, #68]	; (ba88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x19c>)
    ba44:	6800      	ldr	r0, [r0, #0]
    ba46:	280b      	cmp	r0, #11
    ba48:	d005      	beq.n	ba56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    ba4a:	280a      	cmp	r0, #10
    ba4c:	d003      	beq.n	ba56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    ba4e:	2803      	cmp	r0, #3
    ba50:	d001      	beq.n	ba56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    ba52:	2802      	cmp	r0, #2
    ba54:	d113      	bne.n	ba7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    ba56:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    ba5a:	e00d      	b.n	ba78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>
    ba5c:	0740      	lsls	r0, r0, #29
    ba5e:	d50e      	bpl.n	ba7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    ba60:	4808      	ldr	r0, [pc, #32]	; (ba84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    ba62:	490a      	ldr	r1, [pc, #40]	; (ba8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a0>)
    ba64:	3008      	adds	r0, #8
    ba66:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ba6a:	4809      	ldr	r0, [pc, #36]	; (ba90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a4>)
    ba6c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    ba70:	2801      	cmp	r0, #1
    ba72:	d104      	bne.n	ba7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    ba74:	f240 5107 	movw	r1, #1287	; 0x507
    ba78:	203e      	movs	r0, #62	; 0x3e
    ba7a:	f7f8 fab5 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba7e:	bd10      	pop	{r4, pc}
    ba80:	20001014 	.word	0x20001014
    ba84:	40001000 	.word	0x40001000
    ba88:	40001550 	.word	0x40001550
    ba8c:	4001f098 	.word	0x4001f098
    ba90:	40008000 	.word	0x40008000
    ba94:	4808      	ldr	r0, [pc, #32]	; (bab8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>)
    ba96:	4601      	mov	r1, r0
    ba98:	7a42      	ldrb	r2, [r0, #9]
    ba9a:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    ba9e:	b112      	cbz	r2, baa6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ba>
    baa0:	2a01      	cmp	r2, #1
    baa2:	d003      	beq.n	baac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c0>
    baa4:	e006      	b.n	bab4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c8>
    baa6:	f041 0102 	orr.w	r1, r1, #2
    baaa:	e001      	b.n	bab0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c4>
    baac:	f041 0104 	orr.w	r1, r1, #4
    bab0:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    bab4:	f7ff bfb6 	b.w	ba24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    bab8:	20001014 	.word	0x20001014
    babc:	b510      	push	{r4, lr}
    babe:	f000 fada 	bl	c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bac2:	2800      	cmp	r0, #0
    bac4:	d108      	bne.n	bad8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    bac6:	f000 fac6 	bl	c056 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    baca:	2800      	cmp	r0, #0
    bacc:	d104      	bne.n	bad8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    bace:	4803      	ldr	r0, [pc, #12]	; (badc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f0>)
    bad0:	6801      	ldr	r1, [r0, #0]
    bad2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bad6:	6001      	str	r1, [r0, #0]
    bad8:	bd10      	pop	{r4, pc}
    bada:	0000      	.short	0x0000
    badc:	40001568 	.word	0x40001568
    bae0:	b538      	push	{r3, r4, r5, lr}
    bae2:	4d36      	ldr	r5, [pc, #216]	; (bbbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d0>)
    bae4:	2400      	movs	r4, #0
    bae6:	7c28      	ldrb	r0, [r5, #16]
    bae8:	b120      	cbz	r0, baf4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    baea:	4835      	ldr	r0, [pc, #212]	; (bbc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>)
    baec:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    baf0:	2801      	cmp	r0, #1
    baf2:	d007      	beq.n	bb04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x218>
    baf4:	2200      	movs	r2, #0
    baf6:	7ae9      	ldrb	r1, [r5, #11]
    baf8:	4832      	ldr	r0, [pc, #200]	; (bbc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d8>)
    bafa:	2901      	cmp	r1, #1
    bafc:	d004      	beq.n	bb08 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x21c>
    bafe:	2902      	cmp	r1, #2
    bb00:	d00a      	beq.n	bb18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    bb02:	e019      	b.n	bb38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    bb04:	2201      	movs	r2, #1
    bb06:	e7f6      	b.n	baf6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20a>
    bb08:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bb0c:	2901      	cmp	r1, #1
    bb0e:	d001      	beq.n	bb14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x228>
    bb10:	2400      	movs	r4, #0
    bb12:	e011      	b.n	bb38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    bb14:	2408      	movs	r4, #8
    bb16:	e00f      	b.n	bb38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    bb18:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bb1c:	2901      	cmp	r1, #1
    bb1e:	d006      	beq.n	bb2e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x242>
    bb20:	2100      	movs	r1, #0
    bb22:	4b29      	ldr	r3, [pc, #164]	; (bbc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    bb24:	681b      	ldr	r3, [r3, #0]
    bb26:	2b01      	cmp	r3, #1
    bb28:	d003      	beq.n	bb32 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x246>
    bb2a:	2404      	movs	r4, #4
    bb2c:	e002      	b.n	bb34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    bb2e:	2102      	movs	r1, #2
    bb30:	e7f7      	b.n	bb22 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x236>
    bb32:	2400      	movs	r4, #0
    bb34:	430c      	orrs	r4, r1
    bb36:	4314      	orrs	r4, r2
    bb38:	f014 0f0b 	tst.w	r4, #11
    bb3c:	d105      	bne.n	bb4a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25e>
    bb3e:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    bb42:	2901      	cmp	r1, #1
    bb44:	d006      	beq.n	bb54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    bb46:	2100      	movs	r1, #0
    bb48:	430c      	orrs	r4, r1
    bb4a:	4920      	ldr	r1, [pc, #128]	; (bbcc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e0>)
    bb4c:	7809      	ldrb	r1, [r1, #0]
    bb4e:	07c9      	lsls	r1, r1, #31
    bb50:	d002      	beq.n	bb58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    bb52:	e023      	b.n	bb9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2b0>
    bb54:	2110      	movs	r1, #16
    bb56:	e7f7      	b.n	bb48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    bb58:	491d      	ldr	r1, [pc, #116]	; (bbd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e4>)
    bb5a:	6809      	ldr	r1, [r1, #0]
    bb5c:	f011 0fff 	tst.w	r1, #255	; 0xff
    bb60:	d003      	beq.n	bb6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x27e>
    bb62:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    bb66:	2a01      	cmp	r2, #1
    bb68:	d000      	beq.n	bb6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x280>
    bb6a:	2200      	movs	r2, #0
    bb6c:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    bb70:	f011 0fff 	tst.w	r1, #255	; 0xff
    bb74:	d003      	beq.n	bb7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x292>
    bb76:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    bb7a:	2801      	cmp	r0, #1
    bb7c:	d000      	beq.n	bb80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x294>
    bb7e:	2000      	movs	r0, #0
    bb80:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    bb84:	4810      	ldr	r0, [pc, #64]	; (bbc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    bb86:	3010      	adds	r0, #16
    bb88:	6800      	ldr	r0, [r0, #0]
    bb8a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bb8e:	f7ff f8b7 	bl	ad00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    bb92:	2801      	cmp	r0, #1
    bb94:	d000      	beq.n	bb98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    bb96:	2000      	movs	r0, #0
    bb98:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    bb9c:	f7ff ff2a 	bl	b9f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x108>
    bba0:	06e0      	lsls	r0, r4, #27
    bba2:	d506      	bpl.n	bbb2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    bba4:	0720      	lsls	r0, r4, #28
    bba6:	d404      	bmi.n	bbb2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    bba8:	7ae8      	ldrb	r0, [r5, #11]
    bbaa:	2801      	cmp	r0, #1
    bbac:	d101      	bne.n	bbb2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    bbae:	f044 0420 	orr.w	r4, r4, #32
    bbb2:	4808      	ldr	r0, [pc, #32]	; (bbd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e8>)
    bbb4:	6800      	ldr	r0, [r0, #0]
    bbb6:	9000      	str	r0, [sp, #0]
    bbb8:	4620      	mov	r0, r4
    bbba:	bd38      	pop	{r3, r4, r5, pc}
    bbbc:	20001014 	.word	0x20001014
    bbc0:	40008000 	.word	0x40008000
    bbc4:	40001000 	.word	0x40001000
    bbc8:	40001400 	.word	0x40001400
    bbcc:	20000264 	.word	0x20000264
    bbd0:	40001640 	.word	0x40001640
    bbd4:	40008144 	.word	0x40008144
    bbd8:	4808      	ldr	r0, [pc, #32]	; (bbfc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    bbda:	b510      	push	{r4, lr}
    bbdc:	6800      	ldr	r0, [r0, #0]
    bbde:	f000 000f 	and.w	r0, r0, #15
    bbe2:	2803      	cmp	r0, #3
    bbe4:	d006      	beq.n	bbf4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x308>
    bbe6:	2804      	cmp	r0, #4
    bbe8:	d006      	beq.n	bbf8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x30c>
    bbea:	f240 2132 	movw	r1, #562	; 0x232
    bbee:	203e      	movs	r0, #62	; 0x3e
    bbf0:	f7f8 f9fa 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbf4:	2001      	movs	r0, #1
    bbf6:	bd10      	pop	{r4, pc}
    bbf8:	2002      	movs	r0, #2
    bbfa:	bd10      	pop	{r4, pc}
    bbfc:	40001510 	.word	0x40001510
    bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc04:	4c25      	ldr	r4, [pc, #148]	; (bc9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b0>)
    bc06:	460d      	mov	r5, r1
    bc08:	7aa2      	ldrb	r2, [r4, #10]
    bc0a:	b19a      	cbz	r2, bc34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    bc0c:	7b21      	ldrb	r1, [r4, #12]
    bc0e:	078b      	lsls	r3, r1, #30
    bc10:	d503      	bpl.n	bc1a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    bc12:	0783      	lsls	r3, r0, #30
    bc14:	d501      	bpl.n	bc1a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    bc16:	0743      	lsls	r3, r0, #29
    bc18:	d41c      	bmi.n	bc54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    bc1a:	06cb      	lsls	r3, r1, #27
    bc1c:	d505      	bpl.n	bc2a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    bc1e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    bc22:	b113      	cbz	r3, bc2a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    bc24:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    bc28:	b1a3      	cbz	r3, bc54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    bc2a:	070b      	lsls	r3, r1, #28
    bc2c:	d50b      	bpl.n	bc46 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    bc2e:	7f23      	ldrb	r3, [r4, #28]
    bc30:	b983      	cbnz	r3, bc54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    bc32:	e008      	b.n	bc46 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    bc34:	491a      	ldr	r1, [pc, #104]	; (bca0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b4>)
    bc36:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bc3a:	6008      	str	r0, [r1, #0]
    bc3c:	f000 f84c 	bl	bcd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    bc40:	2000      	movs	r0, #0
    bc42:	7420      	strb	r0, [r4, #16]
    bc44:	e028      	b.n	bc98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    bc46:	0749      	lsls	r1, r1, #29
    bc48:	d501      	bpl.n	bc4e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x362>
    bc4a:	7f61      	ldrb	r1, [r4, #29]
    bc4c:	b111      	cbz	r1, bc54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    bc4e:	f010 0f11 	tst.w	r0, #17
    bc52:	d002      	beq.n	bc5a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    bc54:	f7ff f9ea 	bl	b02c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bc58:	e01e      	b.n	bc98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    bc5a:	2a01      	cmp	r2, #1
    bc5c:	d001      	beq.n	bc62 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x376>
    bc5e:	2601      	movs	r6, #1
    bc60:	e000      	b.n	bc64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x378>
    bc62:	2600      	movs	r6, #0
    bc64:	7a60      	ldrb	r0, [r4, #9]
    bc66:	2801      	cmp	r0, #1
    bc68:	d00e      	beq.n	bc88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39c>
    bc6a:	2700      	movs	r7, #0
    bc6c:	f000 f834 	bl	bcd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    bc70:	2196      	movs	r1, #150	; 0x96
    bc72:	4630      	mov	r0, r6
    bc74:	f000 f848 	bl	bd08 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    bc78:	4601      	mov	r1, r0
    bc7a:	b14f      	cbz	r7, bc90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a4>
    bc7c:	353b      	adds	r5, #59	; 0x3b
    bc7e:	428d      	cmp	r5, r1
    bc80:	d904      	bls.n	bc8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a0>
    bc82:	2000      	movs	r0, #0
    bc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc88:	2701      	movs	r7, #1
    bc8a:	e7ef      	b.n	bc6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x380>
    bc8c:	2001      	movs	r0, #1
    bc8e:	7260      	strb	r0, [r4, #9]
    bc90:	7b62      	ldrb	r2, [r4, #13]
    bc92:	4630      	mov	r0, r6
    bc94:	f7ff fc20 	bl	b4d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    bc98:	2001      	movs	r0, #1
    bc9a:	e7f3      	b.n	bc84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x398>
    bc9c:	20001014 	.word	0x20001014
    bca0:	4001f508 	.word	0x4001f508
    bca4:	4804      	ldr	r0, [pc, #16]	; (bcb8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3cc>)
    bca6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    bca8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bcac:	6301      	str	r1, [r0, #48]	; 0x30
    bcae:	4903      	ldr	r1, [pc, #12]	; (bcbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d0>)
    bcb0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    bcb4:	6008      	str	r0, [r1, #0]
    bcb6:	4770      	bx	lr
    bcb8:	20001014 	.word	0x20001014
    bcbc:	4001f504 	.word	0x4001f504
    bcc0:	4903      	ldr	r1, [pc, #12]	; (bcd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>)
    bcc2:	7a49      	ldrb	r1, [r1, #9]
    bcc4:	2900      	cmp	r1, #0
    bcc6:	d102      	bne.n	bcce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e2>
    bcc8:	4902      	ldr	r1, [pc, #8]	; (bcd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e8>)
    bcca:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bcce:	4770      	bx	lr
    bcd0:	20001014 	.word	0x20001014
    bcd4:	4001f098 	.word	0x4001f098
    bcd8:	4803      	ldr	r0, [pc, #12]	; (bce8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3fc>)
    bcda:	2100      	movs	r1, #0
    bcdc:	7241      	strb	r1, [r0, #9]
    bcde:	7281      	strb	r1, [r0, #10]
    bce0:	72c1      	strb	r1, [r0, #11]
    bce2:	2101      	movs	r1, #1
    bce4:	7301      	strb	r1, [r0, #12]
    bce6:	4770      	bx	lr
    bce8:	20001014 	.word	0x20001014
    bcec:	4a05      	ldr	r2, [pc, #20]	; (bd04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x418>)
    bcee:	7a52      	ldrb	r2, [r2, #9]
    bcf0:	2a01      	cmp	r2, #1
    bcf2:	d006      	beq.n	bd02 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x416>
    bcf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bcf8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    bcfc:	fbb1 f1f2 	udiv	r1, r1, r2
    bd00:	1a40      	subs	r0, r0, r1
    bd02:	4770      	bx	lr
    bd04:	20001014 	.word	0x20001014
    bd08:	b570      	push	{r4, r5, r6, lr}
    bd0a:	4c13      	ldr	r4, [pc, #76]	; (bd58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46c>)
    bd0c:	4603      	mov	r3, r0
    bd0e:	460d      	mov	r5, r1
    bd10:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    bd14:	2000      	movs	r0, #0
    bd16:	b15a      	cbz	r2, bd30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x444>
    bd18:	4621      	mov	r1, r4
    bd1a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    bd1e:	b163      	cbz	r3, bd3a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44e>
    bd20:	2b01      	cmp	r3, #1
    bd22:	d111      	bne.n	bd48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>
    bd24:	2a01      	cmp	r2, #1
    bd26:	4628      	mov	r0, r5
    bd28:	d012      	beq.n	bd50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    bd2a:	f003 f9e7 	bl	f0fc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    bd2e:	e009      	b.n	bd44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x458>
    bd30:	f240 7139 	movw	r1, #1849	; 0x739
    bd34:	203e      	movs	r0, #62	; 0x3e
    bd36:	f7f8 f957 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd3a:	2a01      	cmp	r2, #1
    bd3c:	4628      	mov	r0, r5
    bd3e:	d004      	beq.n	bd4a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45e>
    bd40:	f003 f9ea 	bl	f118 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    bd44:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bd46:	4408      	add	r0, r1
    bd48:	bd70      	pop	{r4, r5, r6, pc}
    bd4a:	f003 f9ff 	bl	f14c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    bd4e:	e7f9      	b.n	bd44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x458>
    bd50:	f003 f9ed 	bl	f12e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    bd54:	e7f6      	b.n	bd44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x458>
    bd56:	0000      	.short	0x0000
    bd58:	20001014 	.word	0x20001014
    bd5c:	b510      	push	{r4, lr}
    bd5e:	2200      	movs	r2, #0
    bd60:	2901      	cmp	r1, #1
    bd62:	d008      	beq.n	bd76 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48a>
    bd64:	2902      	cmp	r1, #2
    bd66:	d004      	beq.n	bd72 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x486>
    bd68:	f240 217b 	movw	r1, #635	; 0x27b
    bd6c:	203e      	movs	r0, #62	; 0x3e
    bd6e:	f7f8 f93b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    bd76:	4905      	ldr	r1, [pc, #20]	; (bd8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a0>)
    bd78:	430a      	orrs	r2, r1
    bd7a:	4905      	ldr	r1, [pc, #20]	; (bd90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a4>)
    bd7c:	600a      	str	r2, [r1, #0]
    bd7e:	4905      	ldr	r1, [pc, #20]	; (bd94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a8>)
    bd80:	4308      	orrs	r0, r1
    bd82:	4903      	ldr	r1, [pc, #12]	; (bd90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a4>)
    bd84:	1d09      	adds	r1, r1, #4
    bd86:	6008      	str	r0, [r1, #0]
    bd88:	bd10      	pop	{r4, pc}
    bd8a:	0000      	.short	0x0000
    bd8c:	00100108 	.word	0x00100108
    bd90:	40001514 	.word	0x40001514
    bd94:	02030000 	.word	0x02030000

0000bd98 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    bd98:	4901      	ldr	r1, [pc, #4]	; (bda0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    bd9a:	b2c0      	uxtb	r0, r0
    bd9c:	6008      	str	r0, [r1, #0]
    bd9e:	4770      	bx	lr
    bda0:	4000150c 	.word	0x4000150c

0000bda4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    bda4:	b510      	push	{r4, lr}
    bda6:	4907      	ldr	r1, [pc, #28]	; (bdc4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    bda8:	2801      	cmp	r0, #1
    bdaa:	d005      	beq.n	bdb8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    bdac:	2802      	cmp	r0, #2
    bdae:	d005      	beq.n	bdbc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    bdb0:	2188      	movs	r1, #136	; 0x88
    bdb2:	203f      	movs	r0, #63	; 0x3f
    bdb4:	f7f8 f918 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdb8:	2003      	movs	r0, #3
    bdba:	e000      	b.n	bdbe <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    bdbc:	2004      	movs	r0, #4
    bdbe:	6008      	str	r0, [r1, #0]
    bdc0:	bd10      	pop	{r4, pc}
    bdc2:	0000      	.short	0x0000
    bdc4:	40001510 	.word	0x40001510
    bdc8:	2100      	movs	r1, #0
    bdca:	7081      	strb	r1, [r0, #2]
    bdcc:	7001      	strb	r1, [r0, #0]
    bdce:	7041      	strb	r1, [r0, #1]
    bdd0:	4770      	bx	lr

0000bdd2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bdd2:	b570      	push	{r4, r5, r6, lr}
    bdd4:	f7f4 fd82 	bl	8dc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bdd8:	4605      	mov	r5, r0
    bdda:	2400      	movs	r4, #0
    bddc:	e006      	b.n	bdec <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bdde:	4620      	mov	r0, r4
    bde0:	f7f4 fd82 	bl	8e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bde4:	f7ff fff0 	bl	bdc8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    bde8:	1c64      	adds	r4, r4, #1
    bdea:	b2e4      	uxtb	r4, r4
    bdec:	42ac      	cmp	r4, r5
    bdee:	d3f6      	bcc.n	bdde <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bdf0:	bd70      	pop	{r4, r5, r6, pc}

0000bdf2 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    bdf2:	2000      	movs	r0, #0
    bdf4:	f7f7 baa2 	b.w	333c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    bdf8:	b510      	push	{r4, lr}
    bdfa:	f7f6 ff97 	bl	2d2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    bdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be02:	f000 b800 	b.w	be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000be06 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    be06:	0a41      	lsrs	r1, r0, #9
    be08:	f643 5209 	movw	r2, #15625	; 0x3d09
    be0c:	4351      	muls	r1, r2
    be0e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    be12:	fb10 f002 	smulbb	r0, r0, r2
    be16:	f500 7080 	add.w	r0, r0, #256	; 0x100
    be1a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    be1e:	4770      	bx	lr

0000be20 <MPSL_IRQ_RADIO_Handler>:
    be20:	f7f5 bdae 	b.w	1980 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    be24:	2800      	cmp	r0, #0
    be26:	db09      	blt.n	be3c <MPSL_IRQ_RADIO_Handler+0x1c>
    be28:	f000 021f 	and.w	r2, r0, #31
    be2c:	2101      	movs	r1, #1
    be2e:	4091      	lsls	r1, r2
    be30:	0940      	lsrs	r0, r0, #5
    be32:	0080      	lsls	r0, r0, #2
    be34:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    be38:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    be3c:	4770      	bx	lr
    be3e:	2800      	cmp	r0, #0
    be40:	db0d      	blt.n	be5e <MPSL_IRQ_RADIO_Handler+0x3e>
    be42:	f000 021f 	and.w	r2, r0, #31
    be46:	2101      	movs	r1, #1
    be48:	4091      	lsls	r1, r2
    be4a:	0940      	lsrs	r0, r0, #5
    be4c:	0080      	lsls	r0, r0, #2
    be4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    be52:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    be56:	f3bf 8f4f 	dsb	sy
    be5a:	f3bf 8f6f 	isb	sy
    be5e:	4770      	bx	lr

0000be60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    be60:	b570      	push	{r4, r5, r6, lr}
    be62:	4602      	mov	r2, r0
    be64:	2000      	movs	r0, #0
    be66:	2900      	cmp	r1, #0
    be68:	d01d      	beq.n	bea6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    be6a:	fba2 0101 	umull	r0, r1, r2, r1
    be6e:	0a40      	lsrs	r0, r0, #9
    be70:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    be74:	0a49      	lsrs	r1, r1, #9
    be76:	1c40      	adds	r0, r0, #1
    be78:	f141 0100 	adc.w	r1, r1, #0
    be7c:	f240 72a1 	movw	r2, #1953	; 0x7a1
    be80:	1883      	adds	r3, r0, r2
    be82:	f141 0100 	adc.w	r1, r1, #0
    be86:	1c5b      	adds	r3, r3, #1
    be88:	f141 0400 	adc.w	r4, r1, #0
    be8c:	2100      	movs	r1, #0
    be8e:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    be92:	41a1      	sbcs	r1, r4
    be94:	d203      	bcs.n	be9e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    be96:	2171      	movs	r1, #113	; 0x71
    be98:	206d      	movs	r0, #109	; 0x6d
    be9a:	f7f7 fe3d 	bl	3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be9e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bea2:	fbb0 f0f2 	udiv	r0, r0, r2
    bea6:	bd70      	pop	{r4, r5, r6, pc}
    bea8:	5840      	ldr	r0, [r0, r1]
    beaa:	2800      	cmp	r0, #0
    beac:	d000      	beq.n	beb0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    beae:	2001      	movs	r0, #1
    beb0:	4770      	bx	lr
    beb2:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    beb6:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    beba:	f002 0201 	and.w	r2, r2, #1
    bebe:	03c0      	lsls	r0, r0, #15
    bec0:	d503      	bpl.n	beca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bec2:	428a      	cmp	r2, r1
    bec4:	d101      	bne.n	beca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bec6:	2001      	movs	r0, #1
    bec8:	4770      	bx	lr
    beca:	2000      	movs	r0, #0
    becc:	4770      	bx	lr

0000bece <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bece:	b510      	push	{r4, lr}
    bed0:	2101      	movs	r1, #1
    bed2:	0788      	lsls	r0, r1, #30
    bed4:	f7f7 fdde 	bl	3a94 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bed8:	2800      	cmp	r0, #0
    beda:	d000      	beq.n	bede <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bedc:	2001      	movs	r0, #1
    bede:	bd10      	pop	{r4, pc}

0000bee0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bee0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bee4:	2101      	movs	r1, #1
    bee6:	6001      	str	r1, [r0, #0]
    bee8:	4770      	bx	lr

0000beea <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    beea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    beee:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bef2:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bef6:	f002 0203 	and.w	r2, r2, #3
    befa:	03c9      	lsls	r1, r1, #15
    befc:	d503      	bpl.n	bf06 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    befe:	4282      	cmp	r2, r0
    bf00:	d101      	bne.n	bf06 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bf02:	2001      	movs	r0, #1
    bf04:	4770      	bx	lr
    bf06:	2000      	movs	r0, #0
    bf08:	4770      	bx	lr

0000bf0a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bf0a:	b510      	push	{r4, lr}
    bf0c:	2100      	movs	r1, #0
    bf0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bf12:	f7f7 fdbf 	bl	3a94 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bf16:	2800      	cmp	r0, #0
    bf18:	d000      	beq.n	bf1c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bf1a:	2001      	movs	r0, #1
    bf1c:	bd10      	pop	{r4, pc}
    bf1e:	2800      	cmp	r0, #0
    bf20:	db09      	blt.n	bf36 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bf22:	f000 021f 	and.w	r2, r0, #31
    bf26:	2101      	movs	r1, #1
    bf28:	4091      	lsls	r1, r2
    bf2a:	0940      	lsrs	r0, r0, #5
    bf2c:	0080      	lsls	r0, r0, #2
    bf2e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bf32:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bf36:	4770      	bx	lr
    bf38:	2800      	cmp	r0, #0
    bf3a:	db0d      	blt.n	bf58 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bf3c:	f000 021f 	and.w	r2, r0, #31
    bf40:	2101      	movs	r1, #1
    bf42:	4091      	lsls	r1, r2
    bf44:	0940      	lsrs	r0, r0, #5
    bf46:	0080      	lsls	r0, r0, #2
    bf48:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bf4c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bf50:	f3bf 8f4f 	dsb	sy
    bf54:	f3bf 8f6f 	isb	sy
    bf58:	4770      	bx	lr
    bf5a:	1000      	.short	0x1000
    bf5c:	00fa0002 	.word	0x00fa0002
    bf60:	c5ec0000 	.word	0xc5ec0000
    bf64:	d75d4ac0 	.word	0xd75d4ac0
    bf68:	9579d8c5 	.word	0x9579d8c5
    bf6c:	9bfa4265 	.word	0x9bfa4265
    bf70:	cfedefe0 	.word	0xcfedefe0
    bf74:	5f10      	.short	0x5f10
    bf76:	2800      	cmp	r0, #0
    bf78:	db09      	blt.n	bf8e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bf7a:	f000 021f 	and.w	r2, r0, #31
    bf7e:	2101      	movs	r1, #1
    bf80:	4091      	lsls	r1, r2
    bf82:	0940      	lsrs	r0, r0, #5
    bf84:	0080      	lsls	r0, r0, #2
    bf86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bf8a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bf8e:	4770      	bx	lr

0000bf90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bf90:	f3ef 8110 	mrs	r1, PRIMASK
    bf94:	b672      	cpsid	i
    bf96:	7802      	ldrb	r2, [r0, #0]
    bf98:	2a01      	cmp	r2, #1
    bf9a:	d001      	beq.n	bfa0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bf9c:	2201      	movs	r2, #1
    bf9e:	e000      	b.n	bfa2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bfa0:	2200      	movs	r2, #0
    bfa2:	2301      	movs	r3, #1
    bfa4:	7003      	strb	r3, [r0, #0]
    bfa6:	b901      	cbnz	r1, bfaa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bfa8:	b662      	cpsie	i
    bfaa:	b10a      	cbz	r2, bfb0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bfac:	2000      	movs	r0, #0
    bfae:	4770      	bx	lr
    bfb0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bfb4:	4770      	bx	lr

0000bfb6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bfb6:	2100      	movs	r1, #0
    bfb8:	7001      	strb	r1, [r0, #0]
    bfba:	4608      	mov	r0, r1
    bfbc:	4770      	bx	lr

0000bfbe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    bfbe:	f3ef 8110 	mrs	r1, PRIMASK
    bfc2:	b672      	cpsid	i
    bfc4:	2200      	movs	r2, #0
    bfc6:	7002      	strb	r2, [r0, #0]
    bfc8:	b901      	cbnz	r1, bfcc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    bfca:	b662      	cpsie	i
    bfcc:	2000      	movs	r0, #0
    bfce:	4770      	bx	lr

0000bfd0 <mpsl_low_priority_process>:
    bfd0:	f7f7 be8e 	b.w	3cf0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000bfd4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    bfd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bfd8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bfdc:	280f      	cmp	r0, #15
    bfde:	d001      	beq.n	bfe4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    bfe0:	2000      	movs	r0, #0
    bfe2:	4770      	bx	lr
    bfe4:	2001      	movs	r0, #1
    bfe6:	4770      	bx	lr

0000bfe8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    bfe8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bfec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bff0:	280a      	cmp	r0, #10
    bff2:	d001      	beq.n	bff8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    bff4:	2000      	movs	r0, #0
    bff6:	4770      	bx	lr
    bff8:	2001      	movs	r0, #1
    bffa:	4770      	bx	lr

0000bffc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    bffc:	b500      	push	{lr}
    bffe:	f7ff fff3 	bl	bfe8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c002:	b120      	cbz	r0, c00e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c004:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c008:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c00c:	b108      	cbz	r0, c012 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c00e:	2000      	movs	r0, #0
    c010:	bd00      	pop	{pc}
    c012:	2001      	movs	r0, #1
    c014:	bd00      	pop	{pc}

0000c016 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c016:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c01a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c01e:	280e      	cmp	r0, #14
    c020:	d001      	beq.n	c026 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c022:	2000      	movs	r0, #0
    c024:	4770      	bx	lr
    c026:	2001      	movs	r0, #1
    c028:	4770      	bx	lr

0000c02a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c02a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c02e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c032:	2810      	cmp	r0, #16
    c034:	d001      	beq.n	c03a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c036:	2000      	movs	r0, #0
    c038:	4770      	bx	lr
    c03a:	2001      	movs	r0, #1
    c03c:	4770      	bx	lr

0000c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c03e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c042:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c046:	2806      	cmp	r0, #6
    c048:	d003      	beq.n	c052 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c04a:	1c40      	adds	r0, r0, #1
    c04c:	d001      	beq.n	c052 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c04e:	2000      	movs	r0, #0
    c050:	4770      	bx	lr
    c052:	2001      	movs	r0, #1
    c054:	4770      	bx	lr

0000c056 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c056:	b500      	push	{lr}
    c058:	f7ff fff1 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c05c:	b148      	cbz	r0, c072 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c05e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c062:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c066:	2806      	cmp	r0, #6
    c068:	d303      	bcc.n	c072 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c06a:	1c40      	adds	r0, r0, #1
    c06c:	d001      	beq.n	c072 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c06e:	2001      	movs	r0, #1
    c070:	bd00      	pop	{pc}
    c072:	2000      	movs	r0, #0
    c074:	bd00      	pop	{pc}

0000c076 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c076:	b500      	push	{lr}
    c078:	f7ff ffe1 	bl	c03e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c07c:	b138      	cbz	r0, c08e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c07e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c082:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c086:	2806      	cmp	r0, #6
    c088:	d303      	bcc.n	c092 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c08a:	1c40      	adds	r0, r0, #1
    c08c:	d001      	beq.n	c092 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c08e:	2000      	movs	r0, #0
    c090:	bd00      	pop	{pc}
    c092:	2001      	movs	r0, #1
    c094:	bd00      	pop	{pc}

0000c096 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c096:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c09a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c09e:	280d      	cmp	r0, #13
    c0a0:	d001      	beq.n	c0a6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c0a2:	2000      	movs	r0, #0
    c0a4:	4770      	bx	lr
    c0a6:	2001      	movs	r0, #1
    c0a8:	4770      	bx	lr

0000c0aa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c0aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0ae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c0b2:	2808      	cmp	r0, #8
    c0b4:	d001      	beq.n	c0ba <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c0b6:	2000      	movs	r0, #0
    c0b8:	4770      	bx	lr
    c0ba:	2001      	movs	r0, #1
    c0bc:	4770      	bx	lr

0000c0be <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c0be:	2a00      	cmp	r2, #0
    c0c0:	bf04      	itt	eq
    c0c2:	2000      	moveq	r0, #0
    c0c4:	4770      	bxeq	lr
    c0c6:	1e52      	subs	r2, r2, #1
    c0c8:	d007      	beq.n	c0da <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c0ca:	7803      	ldrb	r3, [r0, #0]
    c0cc:	f891 c000 	ldrb.w	ip, [r1]
    c0d0:	4563      	cmp	r3, ip
    c0d2:	bf04      	itt	eq
    c0d4:	1c40      	addeq	r0, r0, #1
    c0d6:	1c49      	addeq	r1, r1, #1
    c0d8:	d0f5      	beq.n	c0c6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c0da:	7800      	ldrb	r0, [r0, #0]
    c0dc:	7809      	ldrb	r1, [r1, #0]
    c0de:	1a40      	subs	r0, r0, r1
    c0e0:	4770      	bx	lr

0000c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c0e2:	b4f0      	push	{r4, r5, r6, r7}
    c0e4:	ea80 0c01 	eor.w	ip, r0, r1
    c0e8:	4603      	mov	r3, r0
    c0ea:	f01c 0f03 	tst.w	ip, #3
    c0ee:	d13c      	bne.n	c16a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c0f0:	f013 0f03 	tst.w	r3, #3
    c0f4:	d00b      	beq.n	c10e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c0f6:	2a00      	cmp	r2, #0
    c0f8:	bf04      	itt	eq
    c0fa:	bcf0      	popeq	{r4, r5, r6, r7}
    c0fc:	4770      	bxeq	lr
    c0fe:	f811 cb01 	ldrb.w	ip, [r1], #1
    c102:	f803 cb01 	strb.w	ip, [r3], #1
    c106:	1e52      	subs	r2, r2, #1
    c108:	f013 0f03 	tst.w	r3, #3
    c10c:	d1f3      	bne.n	c0f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c10e:	2a03      	cmp	r2, #3
    c110:	d94f      	bls.n	c1b2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c112:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c116:	d24c      	bcs.n	c1b2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c118:	f1c2 0c00 	rsb	ip, r2, #0
    c11c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c120:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c124:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c128:	f1cc 0c00 	rsb	ip, ip, #0
    c12c:	f1bc 0f00 	cmp.w	ip, #0
    c130:	dd1b      	ble.n	c16a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c132:	1f0d      	subs	r5, r1, #4
    c134:	1f1c      	subs	r4, r3, #4
    c136:	f01c 0f01 	tst.w	ip, #1
    c13a:	d003      	beq.n	c144 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c13c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c140:	f844 6f04 	str.w	r6, [r4, #4]!
    c144:	ea5f 066c 	movs.w	r6, ip, asr #1
    c148:	d007      	beq.n	c15a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c14a:	686f      	ldr	r7, [r5, #4]
    c14c:	6067      	str	r7, [r4, #4]
    c14e:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c152:	f844 7f08 	str.w	r7, [r4, #8]!
    c156:	1e76      	subs	r6, r6, #1
    c158:	d1f7      	bne.n	c14a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c15a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c15e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c162:	f1cc 0c00 	rsb	ip, ip, #0
    c166:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c16a:	2a00      	cmp	r2, #0
    c16c:	bf04      	itt	eq
    c16e:	bcf0      	popeq	{r4, r5, r6, r7}
    c170:	4770      	bxeq	lr
    c172:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c176:	d226      	bcs.n	c1c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c178:	2a00      	cmp	r2, #0
    c17a:	bfdc      	itt	le
    c17c:	bcf0      	pople	{r4, r5, r6, r7}
    c17e:	4770      	bxle	lr
    c180:	1e49      	subs	r1, r1, #1
    c182:	1e5b      	subs	r3, r3, #1
    c184:	f012 0f01 	tst.w	r2, #1
    c188:	d003      	beq.n	c192 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c18a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c18e:	f803 cf01 	strb.w	ip, [r3, #1]!
    c192:	1052      	asrs	r2, r2, #1
    c194:	bf04      	itt	eq
    c196:	bcf0      	popeq	{r4, r5, r6, r7}
    c198:	4770      	bxeq	lr
    c19a:	f891 c001 	ldrb.w	ip, [r1, #1]
    c19e:	f883 c001 	strb.w	ip, [r3, #1]
    c1a2:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c1a6:	f803 cf02 	strb.w	ip, [r3, #2]!
    c1aa:	1e52      	subs	r2, r2, #1
    c1ac:	d1f5      	bne.n	c19a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c1ae:	bcf0      	pop	{r4, r5, r6, r7}
    c1b0:	4770      	bx	lr
    c1b2:	2a04      	cmp	r2, #4
    c1b4:	d3d9      	bcc.n	c16a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c1b6:	f851 cb04 	ldr.w	ip, [r1], #4
    c1ba:	1f12      	subs	r2, r2, #4
    c1bc:	f843 cb04 	str.w	ip, [r3], #4
    c1c0:	2a04      	cmp	r2, #4
    c1c2:	d2f8      	bcs.n	c1b6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c1c4:	e7d1      	b.n	c16a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c1c6:	f811 cb01 	ldrb.w	ip, [r1], #1
    c1ca:	f803 cb01 	strb.w	ip, [r3], #1
    c1ce:	1e52      	subs	r2, r2, #1
    c1d0:	d1f9      	bne.n	c1c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c1d2:	bcf0      	pop	{r4, r5, r6, r7}
    c1d4:	4770      	bx	lr

0000c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c1d6:	b470      	push	{r4, r5, r6}
    c1d8:	4603      	mov	r3, r0
    c1da:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c1de:	f010 0f03 	tst.w	r0, #3
    c1e2:	d009      	beq.n	c1f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c1e4:	2a00      	cmp	r2, #0
    c1e6:	bf04      	itt	eq
    c1e8:	bc70      	popeq	{r4, r5, r6}
    c1ea:	4770      	bxeq	lr
    c1ec:	f803 cb01 	strb.w	ip, [r3], #1
    c1f0:	1e52      	subs	r2, r2, #1
    c1f2:	f013 0f03 	tst.w	r3, #3
    c1f6:	d1f5      	bne.n	c1e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c1f8:	b2c9      	uxtb	r1, r1
    c1fa:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c1fe:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c202:	2a03      	cmp	r2, #3
    c204:	d939      	bls.n	c27a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c206:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c20a:	d236      	bcs.n	c27a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c20c:	4251      	negs	r1, r2
    c20e:	17cc      	asrs	r4, r1, #31
    c210:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c214:	1089      	asrs	r1, r1, #2
    c216:	424e      	negs	r6, r1
    c218:	2e00      	cmp	r6, #0
    c21a:	dd11      	ble.n	c240 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c21c:	1f19      	subs	r1, r3, #4
    c21e:	f016 0f01 	tst.w	r6, #1
    c222:	bf18      	it	ne
    c224:	f841 5f04 	strne.w	r5, [r1, #4]!
    c228:	1074      	asrs	r4, r6, #1
    c22a:	d004      	beq.n	c236 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c22c:	604d      	str	r5, [r1, #4]
    c22e:	f841 5f08 	str.w	r5, [r1, #8]!
    c232:	1e64      	subs	r4, r4, #1
    c234:	d1fa      	bne.n	c22c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c236:	4271      	negs	r1, r6
    c238:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c23c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c240:	2a00      	cmp	r2, #0
    c242:	bf04      	itt	eq
    c244:	bc70      	popeq	{r4, r5, r6}
    c246:	4770      	bxeq	lr
    c248:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c24c:	d21d      	bcs.n	c28a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c24e:	2a00      	cmp	r2, #0
    c250:	bfdc      	itt	le
    c252:	bc70      	pople	{r4, r5, r6}
    c254:	4770      	bxle	lr
    c256:	1e59      	subs	r1, r3, #1
    c258:	f012 0f01 	tst.w	r2, #1
    c25c:	bf18      	it	ne
    c25e:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c262:	1052      	asrs	r2, r2, #1
    c264:	bf04      	itt	eq
    c266:	bc70      	popeq	{r4, r5, r6}
    c268:	4770      	bxeq	lr
    c26a:	f881 c001 	strb.w	ip, [r1, #1]
    c26e:	f801 cf02 	strb.w	ip, [r1, #2]!
    c272:	1e52      	subs	r2, r2, #1
    c274:	d1f9      	bne.n	c26a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c276:	bc70      	pop	{r4, r5, r6}
    c278:	4770      	bx	lr
    c27a:	2a04      	cmp	r2, #4
    c27c:	d3e0      	bcc.n	c240 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c27e:	1f12      	subs	r2, r2, #4
    c280:	f843 5b04 	str.w	r5, [r3], #4
    c284:	2a04      	cmp	r2, #4
    c286:	d2fa      	bcs.n	c27e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c288:	e7da      	b.n	c240 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c28a:	f803 cb01 	strb.w	ip, [r3], #1
    c28e:	1e52      	subs	r2, r2, #1
    c290:	d1fb      	bne.n	c28a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c292:	bc70      	pop	{r4, r5, r6}
    c294:	4770      	bx	lr
    c296:	f04f 30ff 	mov.w	r0, #4294967295
    c29a:	4770      	bx	lr
    c29c:	2000      	movs	r0, #0
    c29e:	4770      	bx	lr
    c2a0:	2000      	movs	r0, #0
    c2a2:	4770      	bx	lr
    c2a4:	f04f 30ff 	mov.w	r0, #4294967295
    c2a8:	4770      	bx	lr
    c2aa:	4770      	bx	lr
    c2ac:	4770      	bx	lr
    c2ae:	f04f 30ff 	mov.w	r0, #4294967295
    c2b2:	4770      	bx	lr
    c2b4:	f04f 30ff 	mov.w	r0, #4294967295
    c2b8:	4770      	bx	lr
    c2ba:	2100      	movs	r1, #0
    c2bc:	7001      	strb	r1, [r0, #0]
    c2be:	4770      	bx	lr
    c2c0:	f04f 30ff 	mov.w	r0, #4294967295
    c2c4:	4770      	bx	lr
    c2c6:	f04f 30ff 	mov.w	r0, #4294967295
    c2ca:	4770      	bx	lr
    c2cc:	2000      	movs	r0, #0
    c2ce:	4770      	bx	lr
    c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2d2:	4604      	mov	r4, r0
    c2d4:	f100 0003 	add.w	r0, r0, #3
    c2d8:	f020 0003 	bic.w	r0, r0, #3
    c2dc:	460e      	mov	r6, r1
    c2de:	9000      	str	r0, [sp, #0]
    c2e0:	7849      	ldrb	r1, [r1, #1]
    c2e2:	0015      	movs	r5, r2
    c2e4:	d000      	beq.n	c2e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x112>
    c2e6:	2000      	movs	r0, #0
    c2e8:	2200      	movs	r2, #0
    c2ea:	f7f8 f873 	bl	43d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c2ee:	9900      	ldr	r1, [sp, #0]
    c2f0:	462a      	mov	r2, r5
    c2f2:	4408      	add	r0, r1
    c2f4:	9000      	str	r0, [sp, #0]
    c2f6:	4631      	mov	r1, r6
    c2f8:	4668      	mov	r0, sp
    c2fa:	f000 f807 	bl	c30c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c2fe:	9800      	ldr	r0, [sp, #0]
    c300:	1dc0      	adds	r0, r0, #7
    c302:	f020 0007 	bic.w	r0, r0, #7
    c306:	9000      	str	r0, [sp, #0]
    c308:	1b00      	subs	r0, r0, r4
    c30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c310:	4606      	mov	r6, r0
    c312:	460c      	mov	r4, r1
    c314:	7808      	ldrb	r0, [r1, #0]
    c316:	7849      	ldrb	r1, [r1, #1]
    c318:	2700      	movs	r7, #0
    c31a:	4408      	add	r0, r1
    c31c:	4691      	mov	r9, r2
    c31e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c322:	463d      	mov	r5, r7
    c324:	e00e      	b.n	c344 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x16e>
    c326:	7963      	ldrb	r3, [r4, #5]
    c328:	2b03      	cmp	r3, #3
    c32a:	d200      	bcs.n	c32e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x158>
    c32c:	2303      	movs	r3, #3
    c32e:	7922      	ldrb	r2, [r4, #4]
    c330:	2a03      	cmp	r2, #3
    c332:	d200      	bcs.n	c336 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x160>
    c334:	2203      	movs	r2, #3
    c336:	78e1      	ldrb	r1, [r4, #3]
    c338:	78a0      	ldrb	r0, [r4, #2]
    c33a:	f000 fee9 	bl	d110 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c33e:	1c6d      	adds	r5, r5, #1
    c340:	4407      	add	r7, r0
    c342:	b2ed      	uxtb	r5, r5
    c344:	4545      	cmp	r5, r8
    c346:	d3ee      	bcc.n	c326 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x150>
    c348:	6830      	ldr	r0, [r6, #0]
    c34a:	1cc0      	adds	r0, r0, #3
    c34c:	f020 0003 	bic.w	r0, r0, #3
    c350:	6030      	str	r0, [r6, #0]
    c352:	f1b9 0f00 	cmp.w	r9, #0
    c356:	d000      	beq.n	c35a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x184>
    c358:	2000      	movs	r0, #0
    c35a:	463a      	mov	r2, r7
    c35c:	4641      	mov	r1, r8
    c35e:	f7f8 fa11 	bl	4784 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c362:	6831      	ldr	r1, [r6, #0]
    c364:	4408      	add	r0, r1
    c366:	6030      	str	r0, [r6, #0]
    c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c36c <sdc_soc_ecb_block_encrypt>:
    c36c:	b530      	push	{r4, r5, lr}
    c36e:	460d      	mov	r5, r1
    c370:	b08d      	sub	sp, #52	; 0x34
    c372:	4614      	mov	r4, r2
    c374:	4601      	mov	r1, r0
    c376:	2210      	movs	r2, #16
    c378:	4668      	mov	r0, sp
    c37a:	f7ff feb2 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c37e:	2210      	movs	r2, #16
    c380:	4629      	mov	r1, r5
    c382:	a804      	add	r0, sp, #16
    c384:	f7ff fead 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c388:	4668      	mov	r0, sp
    c38a:	f7f8 fb05 	bl	4998 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c38e:	b118      	cbz	r0, c398 <sdc_soc_ecb_block_encrypt+0x2c>
    c390:	f06f 0015 	mvn.w	r0, #21
    c394:	b00d      	add	sp, #52	; 0x34
    c396:	bd30      	pop	{r4, r5, pc}
    c398:	2210      	movs	r2, #16
    c39a:	4620      	mov	r0, r4
    c39c:	a908      	add	r1, sp, #32
    c39e:	f7ff fea0 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c3a2:	2000      	movs	r0, #0
    c3a4:	e7f6      	b.n	c394 <sdc_soc_ecb_block_encrypt+0x28>

0000c3a6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c3a6:	2000      	movs	r0, #0
    c3a8:	4770      	bx	lr

0000c3aa <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c3aa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c3ac:	4604      	mov	r4, r0
    c3ae:	1d01      	adds	r1, r0, #4
    c3b0:	4668      	mov	r0, sp
    c3b2:	f7f9 fef1 	bl	6198 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c3b6:	2800      	cmp	r0, #0
    c3b8:	d004      	beq.n	c3c4 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c3ba:	4669      	mov	r1, sp
    c3bc:	4620      	mov	r0, r4
    c3be:	f000 f839 	bl	c434 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c3c2:	2001      	movs	r0, #1
    c3c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c3c6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c3c6:	b50e      	push	{r1, r2, r3, lr}
    c3c8:	4601      	mov	r1, r0
    c3ca:	4668      	mov	r0, sp
    c3cc:	f000 f818 	bl	c400 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c3d0:	4668      	mov	r0, sp
    c3d2:	f7f9 ff0d 	bl	61f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c3d6:	bd0e      	pop	{r1, r2, r3, pc}
    c3d8:	b570      	push	{r4, r5, r6, lr}
    c3da:	460c      	mov	r4, r1
    c3dc:	4605      	mov	r5, r0
    c3de:	f7f7 ff75 	bl	42cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c3e2:	2800      	cmp	r0, #0
    c3e4:	d002      	beq.n	c3ec <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c3e6:	2d3e      	cmp	r5, #62	; 0x3e
    c3e8:	d001      	beq.n	c3ee <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c3ea:	2001      	movs	r0, #1
    c3ec:	bd70      	pop	{r4, r5, r6, pc}
    c3ee:	2c12      	cmp	r4, #18
    c3f0:	d004      	beq.n	c3fc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c3f2:	4620      	mov	r0, r4
    c3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c3f8:	f7f7 bf84 	b.w	4304 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c3fc:	2000      	movs	r0, #0
    c3fe:	bd70      	pop	{r4, r5, r6, pc}

0000c400 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c400:	880a      	ldrh	r2, [r1, #0]
    c402:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c406:	8002      	strh	r2, [r0, #0]
    c408:	884a      	ldrh	r2, [r1, #2]
    c40a:	8042      	strh	r2, [r0, #2]
    c40c:	784a      	ldrb	r2, [r1, #1]
    c40e:	0993      	lsrs	r3, r2, #6
    c410:	2200      	movs	r2, #0
    c412:	7142      	strb	r2, [r0, #5]
    c414:	784b      	ldrb	r3, [r1, #1]
    c416:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c41a:	b11b      	cbz	r3, c424 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c41c:	2b01      	cmp	r3, #1
    c41e:	d005      	beq.n	c42c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c420:	2b02      	cmp	r3, #2
    c422:	d005      	beq.n	c430 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c424:	7102      	strb	r2, [r0, #4]
    c426:	1d09      	adds	r1, r1, #4
    c428:	6081      	str	r1, [r0, #8]
    c42a:	4770      	bx	lr
    c42c:	2201      	movs	r2, #1
    c42e:	e7f9      	b.n	c424 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c430:	2202      	movs	r2, #2
    c432:	e7f7      	b.n	c424 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c434 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c434:	b510      	push	{r4, lr}
    c436:	460c      	mov	r4, r1
    c438:	7809      	ldrb	r1, [r1, #0]
    c43a:	7001      	strb	r1, [r0, #0]
    c43c:	7841      	ldrb	r1, [r0, #1]
    c43e:	f021 010f 	bic.w	r1, r1, #15
    c442:	7041      	strb	r1, [r0, #1]
    c444:	8822      	ldrh	r2, [r4, #0]
    c446:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c44a:	4311      	orrs	r1, r2
    c44c:	7041      	strb	r1, [r0, #1]
    c44e:	78a2      	ldrb	r2, [r4, #2]
    c450:	7082      	strb	r2, [r0, #2]
    c452:	8862      	ldrh	r2, [r4, #2]
    c454:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c458:	0a12      	lsrs	r2, r2, #8
    c45a:	70c2      	strb	r2, [r0, #3]
    c45c:	7041      	strb	r1, [r0, #1]
    c45e:	7922      	ldrb	r2, [r4, #4]
    c460:	f002 0203 	and.w	r2, r2, #3
    c464:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c468:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c46c:	7041      	strb	r1, [r0, #1]
    c46e:	7962      	ldrb	r2, [r4, #5]
    c470:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c474:	7041      	strb	r1, [r0, #1]
    c476:	68a1      	ldr	r1, [r4, #8]
    c478:	1d02      	adds	r2, r0, #4
    c47a:	4291      	cmp	r1, r2
    c47c:	d006      	beq.n	c48c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c47e:	8862      	ldrh	r2, [r4, #2]
    c480:	2afb      	cmp	r2, #251	; 0xfb
    c482:	d300      	bcc.n	c486 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c484:	22fb      	movs	r2, #251	; 0xfb
    c486:	1d00      	adds	r0, r0, #4
    c488:	f7ff fe2b 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c48c:	78a0      	ldrb	r0, [r4, #2]
    c48e:	1d00      	adds	r0, r0, #4
    c490:	b2c0      	uxtb	r0, r0
    c492:	bd10      	pop	{r4, pc}

0000c494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c498:	4604      	mov	r4, r0
    c49a:	780f      	ldrb	r7, [r1, #0]
    c49c:	2000      	movs	r0, #0
    c49e:	250c      	movs	r5, #12
    c4a0:	2605      	movs	r6, #5
    c4a2:	223e      	movs	r2, #62	; 0x3e
    c4a4:	23ff      	movs	r3, #255	; 0xff
    c4a6:	2f1b      	cmp	r7, #27
    c4a8:	d27d      	bcs.n	c5a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c4aa:	e8df f007 	tbb	[pc, r7]
    c4ae:	0eeb      	.short	0x0eeb
    c4b0:	632d2725 	.word	0x632d2725
    c4b4:	af9b816d 	.word	0xaf9b816d
    c4b8:	e2c7bcb1 	.word	0xe2c7bcb1
    c4bc:	31ebebf5 	.word	0x31ebebf5
    c4c0:	f2fed5d2 	.word	0xf2fed5d2
    c4c4:	eeeff0f1 	.word	0xeeeff0f1
    c4c8:	00ed      	.short	0x00ed
    c4ca:	7025      	strb	r5, [r4, #0]
    c4cc:	7908      	ldrb	r0, [r1, #4]
    c4ce:	70a0      	strb	r0, [r4, #2]
    c4d0:	7948      	ldrb	r0, [r1, #5]
    c4d2:	70e0      	strb	r0, [r4, #3]
    c4d4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c4d8:	0a00      	lsrs	r0, r0, #8
    c4da:	7120      	strb	r0, [r4, #4]
    c4dc:	79c8      	ldrb	r0, [r1, #7]
    c4de:	7160      	strb	r0, [r4, #5]
    c4e0:	7a08      	ldrb	r0, [r1, #8]
    c4e2:	71a0      	strb	r0, [r4, #6]
    c4e4:	8908      	ldrh	r0, [r1, #8]
    c4e6:	0a00      	lsrs	r0, r0, #8
    c4e8:	71e0      	strb	r0, [r4, #7]
    c4ea:	7a88      	ldrb	r0, [r1, #10]
    c4ec:	7220      	strb	r0, [r4, #8]
    c4ee:	8948      	ldrh	r0, [r1, #10]
    c4f0:	0a00      	lsrs	r0, r0, #8
    c4f2:	7260      	strb	r0, [r4, #9]
    c4f4:	2008      	movs	r0, #8
    c4f6:	e0c2      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c4f8:	2010      	movs	r0, #16
    c4fa:	e000      	b.n	c4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c4fc:	201a      	movs	r0, #26
    c4fe:	7020      	strb	r0, [r4, #0]
    c500:	7908      	ldrb	r0, [r1, #4]
    c502:	70a0      	strb	r0, [r4, #2]
    c504:	2001      	movs	r0, #1
    c506:	e0ba      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c508:	4620      	mov	r0, r4
    c50a:	f000 f947 	bl	c79c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c50e:	e0b4      	b.n	c67a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c510:	7022      	strb	r2, [r4, #0]
    c512:	200a      	movs	r0, #10
    c514:	70a0      	strb	r0, [r4, #2]
    c516:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c51a:	70e0      	strb	r0, [r4, #3]
    c51c:	7888      	ldrb	r0, [r1, #2]
    c51e:	7120      	strb	r0, [r4, #4]
    c520:	8848      	ldrh	r0, [r1, #2]
    c522:	0a00      	lsrs	r0, r0, #8
    c524:	7160      	strb	r0, [r4, #5]
    c526:	7908      	ldrb	r0, [r1, #4]
    c528:	71a0      	strb	r0, [r4, #6]
    c52a:	7948      	ldrb	r0, [r1, #5]
    c52c:	71e0      	strb	r0, [r4, #7]
    c52e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c532:	60a0      	str	r0, [r4, #8]
    c534:	8948      	ldrh	r0, [r1, #10]
    c536:	81a0      	strh	r0, [r4, #12]
    c538:	68c8      	ldr	r0, [r1, #12]
    c53a:	f8c4 000e 	str.w	r0, [r4, #14]
    c53e:	8a08      	ldrh	r0, [r1, #16]
    c540:	8260      	strh	r0, [r4, #18]
    c542:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c546:	6160      	str	r0, [r4, #20]
    c548:	8ac8      	ldrh	r0, [r1, #22]
    c54a:	8320      	strh	r0, [r4, #24]
    c54c:	7e08      	ldrb	r0, [r1, #24]
    c54e:	76a0      	strb	r0, [r4, #26]
    c550:	8b08      	ldrh	r0, [r1, #24]
    c552:	0a00      	lsrs	r0, r0, #8
    c554:	76e0      	strb	r0, [r4, #27]
    c556:	7e88      	ldrb	r0, [r1, #26]
    c558:	7720      	strb	r0, [r4, #28]
    c55a:	8b48      	ldrh	r0, [r1, #26]
    c55c:	0a00      	lsrs	r0, r0, #8
    c55e:	7760      	strb	r0, [r4, #29]
    c560:	7f08      	ldrb	r0, [r1, #28]
    c562:	77a0      	strb	r0, [r4, #30]
    c564:	8b88      	ldrh	r0, [r1, #28]
    c566:	0a00      	lsrs	r0, r0, #8
    c568:	77e0      	strb	r0, [r4, #31]
    c56a:	7f88      	ldrb	r0, [r1, #30]
    c56c:	f884 0020 	strb.w	r0, [r4, #32]
    c570:	201f      	movs	r0, #31
    c572:	e084      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c574:	7022      	strb	r2, [r4, #0]
    c576:	2014      	movs	r0, #20
    c578:	70a0      	strb	r0, [r4, #2]
    c57a:	7908      	ldrb	r0, [r1, #4]
    c57c:	70e0      	strb	r0, [r4, #3]
    c57e:	8888      	ldrh	r0, [r1, #4]
    c580:	0a00      	lsrs	r0, r0, #8
    c582:	7120      	strb	r0, [r4, #4]
    c584:	7988      	ldrb	r0, [r1, #6]
    c586:	e0a8      	b.n	c6da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c588:	7022      	strb	r2, [r4, #0]
    c58a:	2004      	movs	r0, #4
    c58c:	70a0      	strb	r0, [r4, #2]
    c58e:	7908      	ldrb	r0, [r1, #4]
    c590:	70e0      	strb	r0, [r4, #3]
    c592:	7988      	ldrb	r0, [r1, #6]
    c594:	7120      	strb	r0, [r4, #4]
    c596:	88c8      	ldrh	r0, [r1, #6]
    c598:	0a00      	lsrs	r0, r0, #8
    c59a:	7160      	strb	r0, [r4, #5]
    c59c:	6888      	ldr	r0, [r1, #8]
    c59e:	f8c4 0006 	str.w	r0, [r4, #6]
    c5a2:	68c8      	ldr	r0, [r1, #12]
    c5a4:	e000      	b.n	c5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c5a6:	e06d      	b.n	c684 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c5a8:	f8c4 000a 	str.w	r0, [r4, #10]
    c5ac:	200c      	movs	r0, #12
    c5ae:	e066      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5b0:	7022      	strb	r2, [r4, #0]
    c5b2:	2003      	movs	r0, #3
    c5b4:	70a0      	strb	r0, [r4, #2]
    c5b6:	7908      	ldrb	r0, [r1, #4]
    c5b8:	70e0      	strb	r0, [r4, #3]
    c5ba:	7988      	ldrb	r0, [r1, #6]
    c5bc:	7120      	strb	r0, [r4, #4]
    c5be:	88c8      	ldrh	r0, [r1, #6]
    c5c0:	0a00      	lsrs	r0, r0, #8
    c5c2:	7160      	strb	r0, [r4, #5]
    c5c4:	7a08      	ldrb	r0, [r1, #8]
    c5c6:	71a0      	strb	r0, [r4, #6]
    c5c8:	8908      	ldrh	r0, [r1, #8]
    c5ca:	0a00      	lsrs	r0, r0, #8
    c5cc:	71e0      	strb	r0, [r4, #7]
    c5ce:	7a88      	ldrb	r0, [r1, #10]
    c5d0:	7220      	strb	r0, [r4, #8]
    c5d2:	8948      	ldrh	r0, [r1, #10]
    c5d4:	0a00      	lsrs	r0, r0, #8
    c5d6:	7260      	strb	r0, [r4, #9]
    c5d8:	7b08      	ldrb	r0, [r1, #12]
    c5da:	72a0      	strb	r0, [r4, #10]
    c5dc:	8988      	ldrh	r0, [r1, #12]
    c5de:	0a00      	lsrs	r0, r0, #8
    c5e0:	72e0      	strb	r0, [r4, #11]
    c5e2:	e0d9      	b.n	c798 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c5e4:	7022      	strb	r2, [r4, #0]
    c5e6:	70a6      	strb	r6, [r4, #2]
    c5e8:	7908      	ldrb	r0, [r1, #4]
    c5ea:	70e0      	strb	r0, [r4, #3]
    c5ec:	8888      	ldrh	r0, [r1, #4]
    c5ee:	0a00      	lsrs	r0, r0, #8
    c5f0:	7120      	strb	r0, [r4, #4]
    c5f2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c5f6:	f8c4 0005 	str.w	r0, [r4, #5]
    c5fa:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c5fe:	f8c4 0009 	str.w	r0, [r4, #9]
    c602:	89c8      	ldrh	r0, [r1, #14]
    c604:	f8a4 000d 	strh.w	r0, [r4, #13]
    c608:	200d      	movs	r0, #13
    c60a:	e038      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c60c:	2011      	movs	r0, #17
    c60e:	e044      	b.n	c69a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    c610:	7026      	strb	r6, [r4, #0]
    c612:	7908      	ldrb	r0, [r1, #4]
    c614:	70a0      	strb	r0, [r4, #2]
    c616:	7948      	ldrb	r0, [r1, #5]
    c618:	70e0      	strb	r0, [r4, #3]
    c61a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c61e:	0a00      	lsrs	r0, r0, #8
    c620:	7120      	strb	r0, [r4, #4]
    c622:	79c8      	ldrb	r0, [r1, #7]
    c624:	e059      	b.n	c6da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c626:	2008      	movs	r0, #8
    c628:	7020      	strb	r0, [r4, #0]
    c62a:	7908      	ldrb	r0, [r1, #4]
    c62c:	70a0      	strb	r0, [r4, #2]
    c62e:	7988      	ldrb	r0, [r1, #6]
    c630:	70e0      	strb	r0, [r4, #3]
    c632:	88c8      	ldrh	r0, [r1, #6]
    c634:	0a00      	lsrs	r0, r0, #8
    c636:	7120      	strb	r0, [r4, #4]
    c638:	7a08      	ldrb	r0, [r1, #8]
    c63a:	e04e      	b.n	c6da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c63c:	2030      	movs	r0, #48	; 0x30
    c63e:	7020      	strb	r0, [r4, #0]
    c640:	7908      	ldrb	r0, [r1, #4]
    c642:	70a0      	strb	r0, [r4, #2]
    c644:	7988      	ldrb	r0, [r1, #6]
    c646:	70e0      	strb	r0, [r4, #3]
    c648:	88c8      	ldrh	r0, [r1, #6]
    c64a:	0a00      	lsrs	r0, r0, #8
    c64c:	7120      	strb	r0, [r4, #4]
    c64e:	2003      	movs	r0, #3
    c650:	e015      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c652:	7022      	strb	r2, [r4, #0]
    c654:	2007      	movs	r0, #7
    c656:	e045      	b.n	c6e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c658:	7022      	strb	r2, [r4, #0]
    c65a:	70a5      	strb	r5, [r4, #2]
    c65c:	7908      	ldrb	r0, [r1, #4]
    c65e:	70e0      	strb	r0, [r4, #3]
    c660:	7988      	ldrb	r0, [r1, #6]
    c662:	7120      	strb	r0, [r4, #4]
    c664:	88c8      	ldrh	r0, [r1, #6]
    c666:	0a00      	lsrs	r0, r0, #8
    c668:	7160      	strb	r0, [r4, #5]
    c66a:	7a08      	ldrb	r0, [r1, #8]
    c66c:	71a0      	strb	r0, [r4, #6]
    c66e:	7a48      	ldrb	r0, [r1, #9]
    c670:	e028      	b.n	c6c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    c672:	4620      	mov	r0, r4
    c674:	1d09      	adds	r1, r1, #4
    c676:	f7f7 fdfb 	bl	4270 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x98>
    c67a:	2800      	cmp	r0, #0
    c67c:	d002      	beq.n	c684 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c67e:	7060      	strb	r0, [r4, #1]
    c680:	1c80      	adds	r0, r0, #2
    c682:	b2c0      	uxtb	r0, r0
    c684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c688:	e073      	b.n	c772 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    c68a:	e047      	b.n	c71c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c68c:	e028      	b.n	c6e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c68e:	e053      	b.n	c738 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    c690:	e061      	b.n	c756 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    c692:	e01a      	b.n	c6ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    c694:	e009      	b.n	c6aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    c696:	e7ff      	b.n	c698 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c698:	2057      	movs	r0, #87	; 0x57
    c69a:	7020      	strb	r0, [r4, #0]
    c69c:	7908      	ldrb	r0, [r1, #4]
    c69e:	70a0      	strb	r0, [r4, #2]
    c6a0:	8888      	ldrh	r0, [r1, #4]
    c6a2:	0a00      	lsrs	r0, r0, #8
    c6a4:	70e0      	strb	r0, [r4, #3]
    c6a6:	2002      	movs	r0, #2
    c6a8:	e7e9      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c6aa:	7022      	strb	r2, [r4, #0]
    c6ac:	2012      	movs	r0, #18
    c6ae:	70a0      	strb	r0, [r4, #2]
    c6b0:	7908      	ldrb	r0, [r1, #4]
    c6b2:	70e0      	strb	r0, [r4, #3]
    c6b4:	7948      	ldrb	r0, [r1, #5]
    c6b6:	7120      	strb	r0, [r4, #4]
    c6b8:	7988      	ldrb	r0, [r1, #6]
    c6ba:	7160      	strb	r0, [r4, #5]
    c6bc:	88c8      	ldrh	r0, [r1, #6]
    c6be:	0a00      	lsrs	r0, r0, #8
    c6c0:	71a0      	strb	r0, [r4, #6]
    c6c2:	7a08      	ldrb	r0, [r1, #8]
    c6c4:	71e0      	strb	r0, [r4, #7]
    c6c6:	2006      	movs	r0, #6
    c6c8:	e7d9      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c6ca:	7023      	strb	r3, [r4, #0]
    c6cc:	20a1      	movs	r0, #161	; 0xa1
    c6ce:	70a0      	strb	r0, [r4, #2]
    c6d0:	7908      	ldrb	r0, [r1, #4]
    c6d2:	70e0      	strb	r0, [r4, #3]
    c6d4:	7948      	ldrb	r0, [r1, #5]
    c6d6:	7120      	strb	r0, [r4, #4]
    c6d8:	2000      	movs	r0, #0
    c6da:	7160      	strb	r0, [r4, #5]
    c6dc:	2004      	movs	r0, #4
    c6de:	e7ce      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c6e0:	7023      	strb	r3, [r4, #0]
    c6e2:	20a2      	movs	r0, #162	; 0xa2
    c6e4:	70a0      	strb	r0, [r4, #2]
    c6e6:	7908      	ldrb	r0, [r1, #4]
    c6e8:	70e0      	strb	r0, [r4, #3]
    c6ea:	8888      	ldrh	r0, [r1, #4]
    c6ec:	0a00      	lsrs	r0, r0, #8
    c6ee:	7120      	strb	r0, [r4, #4]
    c6f0:	7988      	ldrb	r0, [r1, #6]
    c6f2:	7160      	strb	r0, [r4, #5]
    c6f4:	88c8      	ldrh	r0, [r1, #6]
    c6f6:	0a00      	lsrs	r0, r0, #8
    c6f8:	71a0      	strb	r0, [r4, #6]
    c6fa:	7a08      	ldrb	r0, [r1, #8]
    c6fc:	71e0      	strb	r0, [r4, #7]
    c6fe:	8908      	ldrh	r0, [r1, #8]
    c700:	0a00      	lsrs	r0, r0, #8
    c702:	7220      	strb	r0, [r4, #8]
    c704:	7a88      	ldrb	r0, [r1, #10]
    c706:	7260      	strb	r0, [r4, #9]
    c708:	8948      	ldrh	r0, [r1, #10]
    c70a:	0a00      	lsrs	r0, r0, #8
    c70c:	72a0      	strb	r0, [r4, #10]
    c70e:	7b08      	ldrb	r0, [r1, #12]
    c710:	72e0      	strb	r0, [r4, #11]
    c712:	8988      	ldrh	r0, [r1, #12]
    c714:	0a00      	lsrs	r0, r0, #8
    c716:	7320      	strb	r0, [r4, #12]
    c718:	200b      	movs	r0, #11
    c71a:	e7b0      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c71c:	7023      	strb	r3, [r4, #0]
    c71e:	20a3      	movs	r0, #163	; 0xa3
    c720:	70a0      	strb	r0, [r4, #2]
    c722:	7908      	ldrb	r0, [r1, #4]
    c724:	70e0      	strb	r0, [r4, #3]
    c726:	8888      	ldrh	r0, [r1, #4]
    c728:	0a00      	lsrs	r0, r0, #8
    c72a:	7120      	strb	r0, [r4, #4]
    c72c:	7988      	ldrb	r0, [r1, #6]
    c72e:	7160      	strb	r0, [r4, #5]
    c730:	79c8      	ldrb	r0, [r1, #7]
    c732:	71a0      	strb	r0, [r4, #6]
    c734:	2005      	movs	r0, #5
    c736:	e7a2      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c738:	7022      	strb	r2, [r4, #0]
    c73a:	2013      	movs	r0, #19
    c73c:	70a0      	strb	r0, [r4, #2]
    c73e:	7908      	ldrb	r0, [r1, #4]
    c740:	70e0      	strb	r0, [r4, #3]
    c742:	7948      	ldrb	r0, [r1, #5]
    c744:	7120      	strb	r0, [r4, #4]
    c746:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c74a:	f8c4 0005 	str.w	r0, [r4, #5]
    c74e:	8948      	ldrh	r0, [r1, #10]
    c750:	f8a4 0009 	strh.w	r0, [r4, #9]
    c754:	e020      	b.n	c798 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c756:	7023      	strb	r3, [r4, #0]
    c758:	20a4      	movs	r0, #164	; 0xa4
    c75a:	70a0      	strb	r0, [r4, #2]
    c75c:	7908      	ldrb	r0, [r1, #4]
    c75e:	70e0      	strb	r0, [r4, #3]
    c760:	8888      	ldrh	r0, [r1, #4]
    c762:	0a00      	lsrs	r0, r0, #8
    c764:	7120      	strb	r0, [r4, #4]
    c766:	7988      	ldrb	r0, [r1, #6]
    c768:	7160      	strb	r0, [r4, #5]
    c76a:	79c8      	ldrb	r0, [r1, #7]
    c76c:	71a0      	strb	r0, [r4, #6]
    c76e:	2007      	movs	r0, #7
    c770:	e785      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c772:	7023      	strb	r3, [r4, #0]
    c774:	2080      	movs	r0, #128	; 0x80
    c776:	70a0      	strb	r0, [r4, #2]
    c778:	888a      	ldrh	r2, [r1, #4]
    c77a:	f8a4 2003 	strh.w	r2, [r4, #3]
    c77e:	88ca      	ldrh	r2, [r1, #6]
    c780:	f8a4 2005 	strh.w	r2, [r4, #5]
    c784:	7a0a      	ldrb	r2, [r1, #8]
    c786:	71e2      	strb	r2, [r4, #7]
    c788:	7a4a      	ldrb	r2, [r1, #9]
    c78a:	8122      	strh	r2, [r4, #8]
    c78c:	7a8a      	ldrb	r2, [r1, #10]
    c78e:	72a2      	strb	r2, [r4, #10]
    c790:	7ac9      	ldrb	r1, [r1, #11]
    c792:	f001 0101 	and.w	r1, r1, #1
    c796:	72e1      	strb	r1, [r4, #11]
    c798:	200a      	movs	r0, #10
    c79a:	e770      	b.n	c67e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c79c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c79c:	223e      	movs	r2, #62	; 0x3e
    c79e:	7002      	strb	r2, [r0, #0]
    c7a0:	2201      	movs	r2, #1
    c7a2:	7082      	strb	r2, [r0, #2]
    c7a4:	790a      	ldrb	r2, [r1, #4]
    c7a6:	70c2      	strb	r2, [r0, #3]
    c7a8:	798a      	ldrb	r2, [r1, #6]
    c7aa:	7102      	strb	r2, [r0, #4]
    c7ac:	88ca      	ldrh	r2, [r1, #6]
    c7ae:	0a12      	lsrs	r2, r2, #8
    c7b0:	7142      	strb	r2, [r0, #5]
    c7b2:	7a0a      	ldrb	r2, [r1, #8]
    c7b4:	7182      	strb	r2, [r0, #6]
    c7b6:	7a4a      	ldrb	r2, [r1, #9]
    c7b8:	71c2      	strb	r2, [r0, #7]
    c7ba:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c7be:	6082      	str	r2, [r0, #8]
    c7c0:	89ca      	ldrh	r2, [r1, #14]
    c7c2:	8182      	strh	r2, [r0, #12]
    c7c4:	7c0a      	ldrb	r2, [r1, #16]
    c7c6:	7382      	strb	r2, [r0, #14]
    c7c8:	8a0a      	ldrh	r2, [r1, #16]
    c7ca:	0a12      	lsrs	r2, r2, #8
    c7cc:	73c2      	strb	r2, [r0, #15]
    c7ce:	7c8a      	ldrb	r2, [r1, #18]
    c7d0:	7402      	strb	r2, [r0, #16]
    c7d2:	8a4a      	ldrh	r2, [r1, #18]
    c7d4:	0a12      	lsrs	r2, r2, #8
    c7d6:	7442      	strb	r2, [r0, #17]
    c7d8:	7d0a      	ldrb	r2, [r1, #20]
    c7da:	7482      	strb	r2, [r0, #18]
    c7dc:	8a8a      	ldrh	r2, [r1, #20]
    c7de:	0a12      	lsrs	r2, r2, #8
    c7e0:	74c2      	strb	r2, [r0, #19]
    c7e2:	7d89      	ldrb	r1, [r1, #22]
    c7e4:	7501      	strb	r1, [r0, #20]
    c7e6:	2013      	movs	r0, #19
    c7e8:	4770      	bx	lr

0000c7ea <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c7ea:	223e      	movs	r2, #62	; 0x3e
    c7ec:	7002      	strb	r2, [r0, #0]
    c7ee:	2201      	movs	r2, #1
    c7f0:	7082      	strb	r2, [r0, #2]
    c7f2:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c7f6:	70c2      	strb	r2, [r0, #3]
    c7f8:	788a      	ldrb	r2, [r1, #2]
    c7fa:	7102      	strb	r2, [r0, #4]
    c7fc:	884a      	ldrh	r2, [r1, #2]
    c7fe:	0a12      	lsrs	r2, r2, #8
    c800:	7142      	strb	r2, [r0, #5]
    c802:	790a      	ldrb	r2, [r1, #4]
    c804:	7182      	strb	r2, [r0, #6]
    c806:	794a      	ldrb	r2, [r1, #5]
    c808:	71c2      	strb	r2, [r0, #7]
    c80a:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c80e:	6082      	str	r2, [r0, #8]
    c810:	894a      	ldrh	r2, [r1, #10]
    c812:	8182      	strh	r2, [r0, #12]
    c814:	7e0a      	ldrb	r2, [r1, #24]
    c816:	7382      	strb	r2, [r0, #14]
    c818:	8b0a      	ldrh	r2, [r1, #24]
    c81a:	0a12      	lsrs	r2, r2, #8
    c81c:	73c2      	strb	r2, [r0, #15]
    c81e:	7e8a      	ldrb	r2, [r1, #26]
    c820:	7402      	strb	r2, [r0, #16]
    c822:	8b4a      	ldrh	r2, [r1, #26]
    c824:	0a12      	lsrs	r2, r2, #8
    c826:	7442      	strb	r2, [r0, #17]
    c828:	7f0a      	ldrb	r2, [r1, #28]
    c82a:	7482      	strb	r2, [r0, #18]
    c82c:	8b8a      	ldrh	r2, [r1, #28]
    c82e:	0a12      	lsrs	r2, r2, #8
    c830:	74c2      	strb	r2, [r0, #19]
    c832:	7f89      	ldrb	r1, [r1, #30]
    c834:	7501      	strb	r1, [r0, #20]
    c836:	2113      	movs	r1, #19
    c838:	7041      	strb	r1, [r0, #1]
    c83a:	4608      	mov	r0, r1
    c83c:	4770      	bx	lr

0000c83e <sdc_hci_data_get>:
    c83e:	b510      	push	{r4, lr}
    c840:	b120      	cbz	r0, c84c <sdc_hci_data_get+0xe>
    c842:	f7ff fdb2 	bl	c3aa <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c846:	b120      	cbz	r0, c852 <sdc_hci_data_get+0x14>
    c848:	2000      	movs	r0, #0
    c84a:	bd10      	pop	{r4, pc}
    c84c:	f06f 0015 	mvn.w	r0, #21
    c850:	bd10      	pop	{r4, pc}
    c852:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c856:	bd10      	pop	{r4, pc}

0000c858 <sdc_hci_data_put>:
    c858:	b510      	push	{r4, lr}
    c85a:	f06f 0415 	mvn.w	r4, #21
    c85e:	b120      	cbz	r0, c86a <sdc_hci_data_put+0x12>
    c860:	f7ff fdb1 	bl	c3c6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c864:	b108      	cbz	r0, c86a <sdc_hci_data_put+0x12>
    c866:	2000      	movs	r0, #0
    c868:	bd10      	pop	{r4, pc}
    c86a:	4620      	mov	r0, r4
    c86c:	bd10      	pop	{r4, pc}

0000c86e <sdc_hci_evt_get>:
    c86e:	b510      	push	{r4, lr}
    c870:	b120      	cbz	r0, c87c <sdc_hci_evt_get+0xe>
    c872:	f7f7 fcb1 	bl	41d8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c876:	b120      	cbz	r0, c882 <sdc_hci_evt_get+0x14>
    c878:	2000      	movs	r0, #0
    c87a:	bd10      	pop	{r4, pc}
    c87c:	f06f 0015 	mvn.w	r0, #21
    c880:	bd10      	pop	{r4, pc}
    c882:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c886:	bd10      	pop	{r4, pc}

0000c888 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c888:	f002 b876 	b.w	e978 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c88c <sdc_hci_cmd_cb_read_transmit_power_level>:
    c88c:	f002 b8b8 	b.w	ea00 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c890 <sdc_hci_cmd_cb_set_event_mask>:
    c890:	b510      	push	{r4, lr}
    c892:	f7f7 fd4b 	bl	432c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c896:	2000      	movs	r0, #0
    c898:	bd10      	pop	{r4, pc}

0000c89a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c89a:	b510      	push	{r4, lr}
    c89c:	f7f7 fd54 	bl	4348 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c8a0:	2000      	movs	r0, #0
    c8a2:	bd10      	pop	{r4, pc}

0000c8a4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c8a4:	f002 b8c7 	b.w	ea36 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c8a8 <sdc_hci_cmd_vs_conn_event_extend>:
    c8a8:	b508      	push	{r3, lr}
    c8aa:	7800      	ldrb	r0, [r0, #0]
    c8ac:	f88d 0000 	strb.w	r0, [sp]
    c8b0:	4668      	mov	r0, sp
    c8b2:	f002 f808 	bl	e8c6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c8b6:	bd08      	pop	{r3, pc}

0000c8b8 <sdc_hci_cmd_vs_conn_update>:
    c8b8:	2001      	movs	r0, #1
    c8ba:	4770      	bx	lr

0000c8bc <sdc_hci_cmd_vs_event_length_set>:
    c8bc:	f7fd be64 	b.w	a588 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c8c0 <sdc_hci_cmd_vs_llpm_mode_set>:
    c8c0:	2001      	movs	r0, #1
    c8c2:	4770      	bx	lr

0000c8c4 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c8c4:	7800      	ldrb	r0, [r0, #0]
    c8c6:	b100      	cbz	r0, c8ca <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c8c8:	2001      	movs	r0, #1
    c8ca:	f001 bf9b 	b.w	e804 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c8ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c8ce:	b570      	push	{r4, r5, r6, lr}
    c8d0:	4605      	mov	r5, r0
    c8d2:	2210      	movs	r2, #16
    c8d4:	2100      	movs	r1, #0
    c8d6:	f7ff fc7e 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c8da:	2210      	movs	r2, #16
    c8dc:	2100      	movs	r1, #0
    c8de:	f105 0010 	add.w	r0, r5, #16
    c8e2:	f7ff fc78 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c8e6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c8ea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c8ee:	1c40      	adds	r0, r0, #1
    c8f0:	d10b      	bne.n	c90a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c8f2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c8f6:	1c40      	adds	r0, r0, #1
    c8f8:	d107      	bne.n	c90a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c8fa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c8fe:	1c40      	adds	r0, r0, #1
    c900:	d103      	bne.n	c90a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c902:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c906:	1c40      	adds	r0, r0, #1
    c908:	d00b      	beq.n	c922 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c90a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c90e:	6128      	str	r0, [r5, #16]
    c910:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c914:	6168      	str	r0, [r5, #20]
    c916:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c91a:	61a8      	str	r0, [r5, #24]
    c91c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c920:	61e8      	str	r0, [r5, #28]
    c922:	2000      	movs	r0, #0
    c924:	f7f8 f9b8 	bl	4c98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c928:	b918      	cbnz	r0, c932 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c92a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c92e:	07c0      	lsls	r0, r0, #31
    c930:	d118      	bne.n	c964 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c932:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c936:	1c40      	adds	r0, r0, #1
    c938:	d10b      	bne.n	c952 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c93a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c93e:	1c40      	adds	r0, r0, #1
    c940:	d107      	bne.n	c952 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c942:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c946:	1c40      	adds	r0, r0, #1
    c948:	d103      	bne.n	c952 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c94a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c94e:	1c40      	adds	r0, r0, #1
    c950:	d008      	beq.n	c964 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c952:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c956:	6028      	str	r0, [r5, #0]
    c958:	6860      	ldr	r0, [r4, #4]
    c95a:	6068      	str	r0, [r5, #4]
    c95c:	68a0      	ldr	r0, [r4, #8]
    c95e:	60a8      	str	r0, [r5, #8]
    c960:	68e0      	ldr	r0, [r4, #12]
    c962:	60e8      	str	r0, [r5, #12]
    c964:	2000      	movs	r0, #0
    c966:	bd70      	pop	{r4, r5, r6, pc}

0000c968 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c968:	b570      	push	{r4, r5, r6, lr}
    c96a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c96e:	4604      	mov	r4, r0
    c970:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c974:	1c40      	adds	r0, r0, #1
    c976:	d105      	bne.n	c984 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c978:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c97c:	43c0      	mvns	r0, r0
    c97e:	0400      	lsls	r0, r0, #16
    c980:	0c00      	lsrs	r0, r0, #16
    c982:	d03a      	beq.n	c9fa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c984:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c988:	07c0      	lsls	r0, r0, #31
    c98a:	d036      	beq.n	c9fa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c98c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c990:	f8c4 0001 	str.w	r0, [r4, #1]
    c994:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c998:	f8a4 0005 	strh.w	r0, [r4, #5]
    c99c:	79a0      	ldrb	r0, [r4, #6]
    c99e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c9a2:	71a0      	strb	r0, [r4, #6]
    c9a4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c9a8:	1c40      	adds	r0, r0, #1
    c9aa:	d00f      	beq.n	c9cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c9ac:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c9b0:	1c40      	adds	r0, r0, #1
    c9b2:	d00b      	beq.n	c9cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c9b4:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c9b8:	1c40      	adds	r0, r0, #1
    c9ba:	d007      	beq.n	c9cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c9bc:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c9c0:	1c40      	adds	r0, r0, #1
    c9c2:	d003      	beq.n	c9cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c9c4:	2000      	movs	r0, #0
    c9c6:	f7f8 f967 	bl	4c98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c9ca:	b140      	cbz	r0, c9de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c9cc:	2210      	movs	r2, #16
    c9ce:	2100      	movs	r1, #0
    c9d0:	1de0      	adds	r0, r4, #7
    c9d2:	f7ff fc00 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c9d6:	2001      	movs	r0, #1
    c9d8:	7020      	strb	r0, [r4, #0]
    c9da:	2000      	movs	r0, #0
    c9dc:	bd70      	pop	{r4, r5, r6, pc}
    c9de:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c9e2:	f8c4 0007 	str.w	r0, [r4, #7]
    c9e6:	6868      	ldr	r0, [r5, #4]
    c9e8:	f8c4 000b 	str.w	r0, [r4, #11]
    c9ec:	68a8      	ldr	r0, [r5, #8]
    c9ee:	f8c4 000f 	str.w	r0, [r4, #15]
    c9f2:	68e8      	ldr	r0, [r5, #12]
    c9f4:	f8c4 0013 	str.w	r0, [r4, #19]
    c9f8:	e7ed      	b.n	c9d6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c9fa:	2000      	movs	r0, #0
    c9fc:	e7ec      	b.n	c9d8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c9fe <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c9fe:	f001 bf48 	b.w	e892 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ca02 <sdc_hci_cmd_ip_read_bd_addr>:
    ca02:	f001 bfca 	b.w	e99a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ca06 <sdc_hci_cmd_ip_read_local_version_information>:
    ca06:	f7fd bdcd 	b.w	a5a4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ca0a <sdc_hci_cmd_le_add_device_to_resolving_list>:
    ca0a:	f001 bc9f 	b.w	e34c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000ca0e <sdc_hci_cmd_le_add_device_to_white_list>:
    ca0e:	f001 bcb8 	b.w	e382 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000ca12 <sdc_hci_cmd_le_clear_resolving_list>:
    ca12:	f001 bccd 	b.w	e3b0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000ca16 <sdc_hci_cmd_le_clear_white_list>:
    ca16:	f001 bcd8 	b.w	e3ca <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000ca1a <sdc_hci_cmd_le_encrypt>:
    ca1a:	f001 bce0 	b.w	e3de <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000ca1e <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    ca1e:	8802      	ldrh	r2, [r0, #0]
    ca20:	800a      	strh	r2, [r1, #0]
    ca22:	f001 bce5 	b.w	e3f0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ca26 <sdc_hci_cmd_le_long_term_key_request_reply>:
    ca26:	8802      	ldrh	r2, [r0, #0]
    ca28:	800a      	strh	r2, [r1, #0]
    ca2a:	f001 bcfa 	b.w	e422 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000ca2e <sdc_hci_cmd_le_rand>:
    ca2e:	f001 bd1c 	b.w	e46a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000ca32 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    ca32:	f001 bd20 	b.w	e476 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000ca36 <sdc_hci_cmd_le_read_buffer_size>:
    ca36:	f7fd bca9 	b.w	a38c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000ca3a <sdc_hci_cmd_le_read_channel_map>:
    ca3a:	f001 bd24 	b.w	e486 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000ca3e <sdc_hci_cmd_le_read_max_data_length>:
    ca3e:	f001 bd43 	b.w	e4c8 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000ca42 <sdc_hci_cmd_le_read_phy>:
    ca42:	f7fd bcad 	b.w	a3a0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000ca46 <sdc_hci_cmd_le_read_remote_features>:
    ca46:	f7fd bcd3 	b.w	a3f0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000ca4a <sdc_hci_cmd_le_read_resolving_list_size>:
    ca4a:	f001 bd4d 	b.w	e4e8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000ca4e <sdc_hci_cmd_le_read_suggested_default_data_length>:
    ca4e:	f7fd bcef 	b.w	a430 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000ca52 <sdc_hci_cmd_le_read_transmit_power>:
    ca52:	f001 bd4d 	b.w	e4f0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000ca56 <sdc_hci_cmd_le_read_white_list_size>:
    ca56:	f001 bd51 	b.w	e4fc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000ca5a <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    ca5a:	f001 bd53 	b.w	e504 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000ca5e <sdc_hci_cmd_le_remove_device_from_white_list>:
    ca5e:	f001 bd6a 	b.w	e536 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000ca62 <sdc_hci_cmd_le_set_address_resolution_enable>:
    ca62:	f001 bd7d 	b.w	e560 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000ca66 <sdc_hci_cmd_le_set_adv_data>:
    ca66:	f7fd bcf3 	b.w	a450 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000ca6a <sdc_hci_cmd_le_set_adv_enable>:
    ca6a:	f001 bd87 	b.w	e57c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000ca6e <sdc_hci_cmd_le_set_adv_params>:
    ca6e:	f001 bdb4 	b.w	e5da <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000ca72 <sdc_hci_cmd_le_set_data_length>:
    ca72:	f001 be3c 	b.w	e6ee <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000ca76 <sdc_hci_cmd_le_set_default_phy>:
    ca76:	f7fd bd15 	b.w	a4a4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000ca7a <sdc_hci_cmd_le_set_event_mask>:
    ca7a:	b510      	push	{r4, lr}
    ca7c:	f7f7 fc50 	bl	4320 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    ca80:	2000      	movs	r0, #0
    ca82:	bd10      	pop	{r4, pc}

0000ca84 <sdc_hci_cmd_le_set_phy>:
    ca84:	f001 be5a 	b.w	e73c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000ca88 <sdc_hci_cmd_le_set_privacy_mode>:
    ca88:	f001 be78 	b.w	e77c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000ca8c <sdc_hci_cmd_le_set_random_address>:
    ca8c:	f001 be8c 	b.w	e7a8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000ca90 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    ca90:	f001 be98 	b.w	e7c4 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000ca94 <sdc_hci_cmd_le_set_scan_response_data>:
    ca94:	f7fd bd36 	b.w	a504 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000ca98 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    ca98:	f001 be9d 	b.w	e7d6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000ca9c <sdc_hci_cmd_lc_disconnect>:
    ca9c:	f001 bc06 	b.w	e2ac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000caa0 <sdc_hci_cmd_lc_read_remote_version_information>:
    caa0:	f001 bf87 	b.w	e9b2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    caa4:	b570      	push	{r4, r5, r6, lr}
    caa6:	880b      	ldrh	r3, [r1, #0]
    caa8:	7f04      	ldrb	r4, [r0, #28]
    caaa:	f100 0524 	add.w	r5, r0, #36	; 0x24
    caae:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    cab2:	8802      	ldrh	r2, [r0, #0]
    cab4:	4435      	add	r5, r6
    cab6:	1da4      	adds	r4, r4, #6
    cab8:	882d      	ldrh	r5, [r5, #0]
    caba:	4422      	add	r2, r4
    cabc:	b292      	uxth	r2, r2
    cabe:	4425      	add	r5, r4
    cac0:	1e54      	subs	r4, r2, #1
    cac2:	442c      	add	r4, r5
    cac4:	fb94 f4f2 	sdiv	r4, r4, r2
    cac8:	fb02 6204 	mla	r2, r2, r4, r6
    cacc:	8840      	ldrh	r0, [r0, #2]
    cace:	b292      	uxth	r2, r2
    cad0:	4290      	cmp	r0, r2
    cad2:	d903      	bls.n	cadc <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cad4:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cad8:	4310      	orrs	r0, r2
    cada:	e002      	b.n	cae2 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cadc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cae0:	4398      	bics	r0, r3
    cae2:	8008      	strh	r0, [r1, #0]
    cae4:	bd70      	pop	{r4, r5, r6, pc}
    cae6:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    caea:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    caee:	429a      	cmp	r2, r3
    caf0:	d107      	bne.n	cb02 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    caf2:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    caf6:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cafa:	4288      	cmp	r0, r1
    cafc:	d001      	beq.n	cb02 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cafe:	2001      	movs	r0, #1
    cb00:	4770      	bx	lr
    cb02:	2000      	movs	r0, #0
    cb04:	4770      	bx	lr

0000cb06 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    cb06:	b570      	push	{r4, r5, r6, lr}
    cb08:	7f00      	ldrb	r0, [r0, #28]
    cb0a:	461c      	mov	r4, r3
    cb0c:	1d80      	adds	r0, r0, #6
    cb0e:	4408      	add	r0, r1
    cb10:	4613      	mov	r3, r2
    cb12:	8809      	ldrh	r1, [r1, #0]
    cb14:	9a04      	ldr	r2, [sp, #16]
    cb16:	1cc9      	adds	r1, r1, #3
    cb18:	b289      	uxth	r1, r1
    cb1a:	1915      	adds	r5, r2, r4
    cb1c:	1ec0      	subs	r0, r0, #3
    cb1e:	428d      	cmp	r5, r1
    cb20:	d805      	bhi.n	cb2e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    cb22:	1881      	adds	r1, r0, r2
    cb24:	4622      	mov	r2, r4
    cb26:	4618      	mov	r0, r3
    cb28:	f7ff fadb 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb2c:	e000      	b.n	cb30 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    cb2e:	2400      	movs	r4, #0
    cb30:	4620      	mov	r0, r4
    cb32:	bd70      	pop	{r4, r5, r6, pc}

0000cb34 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    cb34:	b570      	push	{r4, r5, r6, lr}
    cb36:	7f00      	ldrb	r0, [r0, #28]
    cb38:	461c      	mov	r4, r3
    cb3a:	1d80      	adds	r0, r0, #6
    cb3c:	4408      	add	r0, r1
    cb3e:	4613      	mov	r3, r2
    cb40:	8809      	ldrh	r1, [r1, #0]
    cb42:	9a04      	ldr	r2, [sp, #16]
    cb44:	1cc9      	adds	r1, r1, #3
    cb46:	b289      	uxth	r1, r1
    cb48:	1915      	adds	r5, r2, r4
    cb4a:	1ec0      	subs	r0, r0, #3
    cb4c:	428d      	cmp	r5, r1
    cb4e:	d805      	bhi.n	cb5c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    cb50:	4410      	add	r0, r2
    cb52:	4622      	mov	r2, r4
    cb54:	4619      	mov	r1, r3
    cb56:	f7ff fac4 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb5a:	e000      	b.n	cb5e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    cb5c:	2400      	movs	r4, #0
    cb5e:	4620      	mov	r0, r4
    cb60:	bd70      	pop	{r4, r5, r6, pc}

0000cb62 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cb62:	8881      	ldrh	r1, [r0, #4]
    cb64:	88c0      	ldrh	r0, [r0, #6]
    cb66:	4288      	cmp	r0, r1
    cb68:	d101      	bne.n	cb6e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cb6a:	2001      	movs	r0, #1
    cb6c:	4770      	bx	lr
    cb6e:	2000      	movs	r0, #0
    cb70:	4770      	bx	lr

0000cb72 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    cb72:	8881      	ldrh	r1, [r0, #4]
    cb74:	8900      	ldrh	r0, [r0, #8]
    cb76:	4288      	cmp	r0, r1
    cb78:	d101      	bne.n	cb7e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    cb7a:	2001      	movs	r0, #1
    cb7c:	4770      	bx	lr
    cb7e:	2000      	movs	r0, #0
    cb80:	4770      	bx	lr

0000cb82 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cb82:	b570      	push	{r4, r5, r6, lr}
    cb84:	4604      	mov	r4, r0
    cb86:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cb8a:	8880      	ldrh	r0, [r0, #4]
    cb8c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cb90:	4401      	add	r1, r0
    cb92:	8a20      	ldrh	r0, [r4, #16]
    cb94:	2800      	cmp	r0, #0
    cb96:	d01a      	beq.n	cbce <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cb98:	89a2      	ldrh	r2, [r4, #12]
    cb9a:	2500      	movs	r5, #0
    cb9c:	4410      	add	r0, r2
    cb9e:	b280      	uxth	r0, r0
    cba0:	81a0      	strh	r0, [r4, #12]
    cba2:	880a      	ldrh	r2, [r1, #0]
    cba4:	4290      	cmp	r0, r2
    cba6:	d905      	bls.n	cbb4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    cba8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    cbac:	f04f 0014 	mov.w	r0, #20
    cbb0:	f7f7 fa1a 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbb4:	d109      	bne.n	cbca <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cbb6:	69a0      	ldr	r0, [r4, #24]
    cbb8:	b108      	cbz	r0, cbbe <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    cbba:	7f40      	ldrb	r0, [r0, #29]
    cbbc:	7088      	strb	r0, [r1, #2]
    cbbe:	f104 0104 	add.w	r1, r4, #4
    cbc2:	4620      	mov	r0, r4
    cbc4:	f7ff ff6e 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cbc8:	81a5      	strh	r5, [r4, #12]
    cbca:	8225      	strh	r5, [r4, #16]
    cbcc:	2001      	movs	r0, #1
    cbce:	bd70      	pop	{r4, r5, r6, pc}

0000cbd0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbd4:	4604      	mov	r4, r0
    cbd6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    cbda:	88c0      	ldrh	r0, [r0, #6]
    cbdc:	460e      	mov	r6, r1
    cbde:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cbe2:	8a60      	ldrh	r0, [r4, #18]
    cbe4:	19d9      	adds	r1, r3, r7
    cbe6:	b108      	cbz	r0, cbec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cbe8:	42b0      	cmp	r0, r6
    cbea:	d202      	bcs.n	cbf2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cbec:	2000      	movs	r0, #0
    cbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbf2:	89e0      	ldrh	r0, [r4, #14]
    cbf4:	2500      	movs	r5, #0
    cbf6:	b140      	cbz	r0, cc0a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cbf8:	f8b1 c000 	ldrh.w	ip, [r1]
    cbfc:	4560      	cmp	r0, ip
    cbfe:	d008      	beq.n	cc12 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    cc00:	f240 211f 	movw	r1, #543	; 0x21f
    cc04:	2014      	movs	r0, #20
    cc06:	f7f7 f9ef 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc0a:	7f60      	ldrb	r0, [r4, #29]
    cc0c:	7088      	strb	r0, [r1, #2]
    cc0e:	800d      	strh	r5, [r1, #0]
    cc10:	e00e      	b.n	cc30 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    cc12:	f894 c01c 	ldrb.w	ip, [r4, #28]
    cc16:	4418      	add	r0, r3
    cc18:	f10c 0c06 	add.w	ip, ip, #6
    cc1c:	44bc      	add	ip, r7
    cc1e:	4460      	add	r0, ip
    cc20:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    cc24:	f820 cc03 	strh.w	ip, [r0, #-3]
    cc28:	f894 c020 	ldrb.w	ip, [r4, #32]
    cc2c:	f800 cc01 	strb.w	ip, [r0, #-1]
    cc30:	89e0      	ldrh	r0, [r4, #14]
    cc32:	4430      	add	r0, r6
    cc34:	81e0      	strh	r0, [r4, #14]
    cc36:	8808      	ldrh	r0, [r1, #0]
    cc38:	4430      	add	r0, r6
    cc3a:	8008      	strh	r0, [r1, #0]
    cc3c:	b16a      	cbz	r2, cc5a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    cc3e:	1da1      	adds	r1, r4, #6
    cc40:	4620      	mov	r0, r4
    cc42:	f7ff ff2f 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc46:	81e5      	strh	r5, [r4, #14]
    cc48:	7f60      	ldrb	r0, [r4, #29]
    cc4a:	1c40      	adds	r0, r0, #1
    cc4c:	7760      	strb	r0, [r4, #29]
    cc4e:	7da0      	ldrb	r0, [r4, #22]
    cc50:	b108      	cbz	r0, cc56 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    cc52:	88e0      	ldrh	r0, [r4, #6]
    cc54:	82a0      	strh	r0, [r4, #20]
    cc56:	75a5      	strb	r5, [r4, #22]
    cc58:	e00b      	b.n	cc72 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    cc5a:	7f20      	ldrb	r0, [r4, #28]
    cc5c:	89e1      	ldrh	r1, [r4, #14]
    cc5e:	1d80      	adds	r0, r0, #6
    cc60:	4438      	add	r0, r7
    cc62:	4419      	add	r1, r3
    cc64:	4408      	add	r0, r1
    cc66:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cc6a:	83e1      	strh	r1, [r4, #30]
    cc6c:	7880      	ldrb	r0, [r0, #2]
    cc6e:	f884 0020 	strb.w	r0, [r4, #32]
    cc72:	8265      	strh	r5, [r4, #18]
    cc74:	75e5      	strb	r5, [r4, #23]
    cc76:	2001      	movs	r0, #1
    cc78:	e7b9      	b.n	cbee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000cc7a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cc7a:	b510      	push	{r4, lr}
    cc7c:	4604      	mov	r4, r0
    cc7e:	88c0      	ldrh	r0, [r0, #6]
    cc80:	88a1      	ldrh	r1, [r4, #4]
    cc82:	4281      	cmp	r1, r0
    cc84:	d007      	beq.n	cc96 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cc86:	89a0      	ldrh	r0, [r4, #12]
    cc88:	b928      	cbnz	r0, cc96 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cc8a:	8a20      	ldrh	r0, [r4, #16]
    cc8c:	b918      	cbnz	r0, cc96 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cc8e:	88a0      	ldrh	r0, [r4, #4]
    cc90:	8aa1      	ldrh	r1, [r4, #20]
    cc92:	4288      	cmp	r0, r1
    cc94:	d101      	bne.n	cc9a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cc96:	2000      	movs	r0, #0
    cc98:	bd10      	pop	{r4, pc}
    cc9a:	1d21      	adds	r1, r4, #4
    cc9c:	4620      	mov	r0, r4
    cc9e:	f7ff ff01 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cca2:	2000      	movs	r0, #0
    cca4:	8220      	strh	r0, [r4, #16]
    cca6:	2001      	movs	r0, #1
    cca8:	bd10      	pop	{r4, pc}

0000ccaa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    ccaa:	b510      	push	{r4, lr}
    ccac:	4604      	mov	r4, r0
    ccae:	f100 0224 	add.w	r2, r0, #36	; 0x24
    ccb2:	88c0      	ldrh	r0, [r0, #6]
    ccb4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ccb8:	4402      	add	r2, r0
    ccba:	8820      	ldrh	r0, [r4, #0]
    ccbc:	2845      	cmp	r0, #69	; 0x45
    ccbe:	d200      	bcs.n	ccc2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    ccc0:	2045      	movs	r0, #69	; 0x45
    ccc2:	4288      	cmp	r0, r1
    ccc4:	d204      	bcs.n	ccd0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    ccc6:	f44f 7180 	mov.w	r1, #256	; 0x100
    ccca:	2014      	movs	r0, #20
    cccc:	f7f7 f98c 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccd0:	7de0      	ldrb	r0, [r4, #23]
    ccd2:	2800      	cmp	r0, #0
    ccd4:	d003      	beq.n	ccde <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    ccd6:	8810      	ldrh	r0, [r2, #0]
    ccd8:	4288      	cmp	r0, r1
    ccda:	d201      	bcs.n	cce0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    ccdc:	2000      	movs	r0, #0
    ccde:	bd10      	pop	{r4, pc}
    cce0:	8011      	strh	r1, [r2, #0]
    cce2:	1da1      	adds	r1, r4, #6
    cce4:	4620      	mov	r0, r4
    cce6:	f7ff fedd 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ccea:	2000      	movs	r0, #0
    ccec:	75e0      	strb	r0, [r4, #23]
    ccee:	2001      	movs	r0, #1
    ccf0:	bd10      	pop	{r4, pc}

0000ccf2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    ccf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccf6:	8941      	ldrh	r1, [r0, #10]
    ccf8:	8886      	ldrh	r6, [r0, #4]
    ccfa:	4604      	mov	r4, r0
    ccfc:	2500      	movs	r5, #0
    ccfe:	f100 070a 	add.w	r7, r0, #10
    cd02:	e006      	b.n	cd12 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    cd04:	4639      	mov	r1, r7
    cd06:	4620      	mov	r0, r4
    cd08:	f7ff fecc 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd0c:	1c6d      	adds	r5, r5, #1
    cd0e:	8961      	ldrh	r1, [r4, #10]
    cd10:	b2ad      	uxth	r5, r5
    cd12:	42b1      	cmp	r1, r6
    cd14:	d1f6      	bne.n	cd04 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    cd16:	4628      	mov	r0, r5
    cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd1c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    cd1c:	b530      	push	{r4, r5, lr}
    cd1e:	88c4      	ldrh	r4, [r0, #6]
    cd20:	8881      	ldrh	r1, [r0, #4]
    cd22:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cd26:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cd2a:	4413      	add	r3, r2
    cd2c:	8882      	ldrh	r2, [r0, #4]
    cd2e:	8a85      	ldrh	r5, [r0, #20]
    cd30:	42aa      	cmp	r2, r5
    cd32:	d012      	beq.n	cd5a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cd34:	42a1      	cmp	r1, r4
    cd36:	d010      	beq.n	cd5a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cd38:	8981      	ldrh	r1, [r0, #12]
    cd3a:	b971      	cbnz	r1, cd5a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cd3c:	6982      	ldr	r2, [r0, #24]
    cd3e:	b172      	cbz	r2, cd5e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cd40:	4610      	mov	r0, r2
    cd42:	f7ff ff16 	bl	cb72 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    cd46:	b950      	cbnz	r0, cd5e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cd48:	8910      	ldrh	r0, [r2, #8]
    cd4a:	3224      	adds	r2, #36	; 0x24
    cd4c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cd50:	4410      	add	r0, r2
    cd52:	7899      	ldrb	r1, [r3, #2]
    cd54:	7880      	ldrb	r0, [r0, #2]
    cd56:	4288      	cmp	r0, r1
    cd58:	d101      	bne.n	cd5e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cd5a:	2000      	movs	r0, #0
    cd5c:	bd30      	pop	{r4, r5, pc}
    cd5e:	4618      	mov	r0, r3
    cd60:	bd30      	pop	{r4, r5, pc}

0000cd62 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    cd62:	7f00      	ldrb	r0, [r0, #28]
    cd64:	1d80      	adds	r0, r0, #6
    cd66:	4408      	add	r0, r1
    cd68:	1ec0      	subs	r0, r0, #3
    cd6a:	6010      	str	r0, [r2, #0]
    cd6c:	8808      	ldrh	r0, [r1, #0]
    cd6e:	4770      	bx	lr

0000cd70 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd74:	460e      	mov	r6, r1
    cd76:	88c1      	ldrh	r1, [r0, #6]
    cd78:	8902      	ldrh	r2, [r0, #8]
    cd7a:	4604      	mov	r4, r0
    cd7c:	f100 0824 	add.w	r8, r0, #36	; 0x24
    cd80:	8800      	ldrh	r0, [r0, #0]
    cd82:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    cd86:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    cd8a:	2845      	cmp	r0, #69	; 0x45
    cd8c:	d200      	bcs.n	cd90 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cd8e:	2045      	movs	r0, #69	; 0x45
    cd90:	42b0      	cmp	r0, r6
    cd92:	d203      	bcs.n	cd9c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cd94:	21c2      	movs	r1, #194	; 0xc2
    cd96:	2014      	movs	r0, #20
    cd98:	f7f7 f926 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd9c:	4610      	mov	r0, r2
    cd9e:	f7ff fea2 	bl	cae6 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cda2:	b110      	cbz	r0, cdaa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cda4:	2000      	movs	r0, #0
    cda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cdaa:	42af      	cmp	r7, r5
    cdac:	d908      	bls.n	cdc0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cdae:	7f21      	ldrb	r1, [r4, #28]
    cdb0:	1b78      	subs	r0, r7, r5
    cdb2:	1a40      	subs	r0, r0, r1
    cdb4:	1f80      	subs	r0, r0, #6
    cdb6:	4286      	cmp	r6, r0
    cdb8:	dd02      	ble.n	cdc0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cdba:	2000      	movs	r0, #0
    cdbc:	75e0      	strb	r0, [r4, #23]
    cdbe:	e7f1      	b.n	cda4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cdc0:	eb08 0005 	add.w	r0, r8, r5
    cdc4:	2101      	movs	r1, #1
    cdc6:	8006      	strh	r6, [r0, #0]
    cdc8:	75e1      	strb	r1, [r4, #23]
    cdca:	e7ec      	b.n	cda6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cdcc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cdcc:	b538      	push	{r3, r4, r5, lr}
    cdce:	88c4      	ldrh	r4, [r0, #6]
    cdd0:	8881      	ldrh	r1, [r0, #4]
    cdd2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cdd6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cdda:	441a      	add	r2, r3
    cddc:	42a1      	cmp	r1, r4
    cdde:	d010      	beq.n	ce02 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cde0:	8983      	ldrh	r3, [r0, #12]
    cde2:	8a05      	ldrh	r5, [r0, #16]
    cde4:	8812      	ldrh	r2, [r2, #0]
    cde6:	442b      	add	r3, r5
    cde8:	4293      	cmp	r3, r2
    cdea:	d308      	bcc.n	cdfe <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cdec:	f8ad 1000 	strh.w	r1, [sp]
    cdf0:	4669      	mov	r1, sp
    cdf2:	f7ff fe57 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdf6:	f8bd 0000 	ldrh.w	r0, [sp]
    cdfa:	42a0      	cmp	r0, r4
    cdfc:	d001      	beq.n	ce02 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cdfe:	2001      	movs	r0, #1
    ce00:	bd38      	pop	{r3, r4, r5, pc}
    ce02:	2000      	movs	r0, #0
    ce04:	bd38      	pop	{r3, r4, r5, pc}

0000ce06 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    ce06:	b570      	push	{r4, r5, r6, lr}
    ce08:	88c6      	ldrh	r6, [r0, #6]
    ce0a:	8885      	ldrh	r5, [r0, #4]
    ce0c:	4603      	mov	r3, r0
    ce0e:	f100 0424 	add.w	r4, r0, #36	; 0x24
    ce12:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    ce16:	4420      	add	r0, r4
    ce18:	42b5      	cmp	r5, r6
    ce1a:	d102      	bne.n	ce22 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    ce1c:	2000      	movs	r0, #0
    ce1e:	8218      	strh	r0, [r3, #16]
    ce20:	bd70      	pop	{r4, r5, r6, pc}
    ce22:	8804      	ldrh	r4, [r0, #0]
    ce24:	899d      	ldrh	r5, [r3, #12]
    ce26:	7f1e      	ldrb	r6, [r3, #28]
    ce28:	1b64      	subs	r4, r4, r5
    ce2a:	4435      	add	r5, r6
    ce2c:	4428      	add	r0, r5
    ce2e:	880d      	ldrh	r5, [r1, #0]
    ce30:	b2a4      	uxth	r4, r4
    ce32:	1cc0      	adds	r0, r0, #3
    ce34:	42a5      	cmp	r5, r4
    ce36:	d900      	bls.n	ce3a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    ce38:	800c      	strh	r4, [r1, #0]
    ce3a:	899c      	ldrh	r4, [r3, #12]
    ce3c:	b124      	cbz	r4, ce48 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    ce3e:	2400      	movs	r4, #0
    ce40:	7014      	strb	r4, [r2, #0]
    ce42:	8809      	ldrh	r1, [r1, #0]
    ce44:	8219      	strh	r1, [r3, #16]
    ce46:	bd70      	pop	{r4, r5, r6, pc}
    ce48:	2401      	movs	r4, #1
    ce4a:	e7f9      	b.n	ce40 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000ce4c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    ce4c:	b510      	push	{r4, lr}
    ce4e:	8a81      	ldrh	r1, [r0, #20]
    ce50:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ce54:	3aff      	subs	r2, #255	; 0xff
    ce56:	d002      	beq.n	ce5e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    ce58:	7d82      	ldrb	r2, [r0, #22]
    ce5a:	b952      	cbnz	r2, ce72 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    ce5c:	e004      	b.n	ce68 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    ce5e:	f44f 7157 	mov.w	r1, #860	; 0x35c
    ce62:	2014      	movs	r0, #20
    ce64:	f7f7 f8c0 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce68:	8880      	ldrh	r0, [r0, #4]
    ce6a:	4281      	cmp	r1, r0
    ce6c:	d101      	bne.n	ce72 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    ce6e:	2000      	movs	r0, #0
    ce70:	bd10      	pop	{r4, pc}
    ce72:	2001      	movs	r0, #1
    ce74:	bd10      	pop	{r4, pc}

0000ce76 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    ce76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce7a:	8281      	strh	r1, [r0, #20]
    ce7c:	2100      	movs	r1, #0
    ce7e:	7581      	strb	r1, [r0, #22]
    ce80:	4770      	bx	lr

0000ce82 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    ce82:	b510      	push	{r4, lr}
    ce84:	8a81      	ldrh	r1, [r0, #20]
    ce86:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ce8a:	3aff      	subs	r2, #255	; 0xff
    ce8c:	d004      	beq.n	ce98 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    ce8e:	f240 313f 	movw	r1, #831	; 0x33f
    ce92:	2014      	movs	r0, #20
    ce94:	f7f7 f8a8 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce98:	88c1      	ldrh	r1, [r0, #6]
    ce9a:	8281      	strh	r1, [r0, #20]
    ce9c:	89c1      	ldrh	r1, [r0, #14]
    ce9e:	b101      	cbz	r1, cea2 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    cea0:	2101      	movs	r1, #1
    cea2:	7581      	strb	r1, [r0, #22]
    cea4:	bd10      	pop	{r4, pc}

0000cea6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ceaa:	461d      	mov	r5, r3
    ceac:	4616      	mov	r6, r2
    ceae:	9f06      	ldr	r7, [sp, #24]
    ceb0:	460b      	mov	r3, r1
    ceb2:	4604      	mov	r4, r0
    ceb4:	463a      	mov	r2, r7
    ceb6:	4629      	mov	r1, r5
    ceb8:	4630      	mov	r0, r6
    ceba:	f000 f84f 	bl	cf5c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cebe:	4283      	cmp	r3, r0
    cec0:	d201      	bcs.n	cec6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cec2:	21a1      	movs	r1, #161	; 0xa1
    cec4:	e018      	b.n	cef8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cec6:	1ce0      	adds	r0, r4, #3
    cec8:	f020 0103 	bic.w	r1, r0, #3
    cecc:	4620      	mov	r0, r4
    cece:	42a1      	cmp	r1, r4
    ced0:	d001      	beq.n	ced6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    ced2:	21a2      	movs	r1, #162	; 0xa2
    ced4:	e010      	b.n	cef8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    ced6:	2224      	movs	r2, #36	; 0x24
    ced8:	2100      	movs	r1, #0
    ceda:	f7ff f97c 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cede:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cee2:	82a0      	strh	r0, [r4, #20]
    cee4:	19a8      	adds	r0, r5, r6
    cee6:	1d80      	adds	r0, r0, #6
    cee8:	4378      	muls	r0, r7
    ceea:	b280      	uxth	r0, r0
    ceec:	7725      	strb	r5, [r4, #28]
    ceee:	8060      	strh	r0, [r4, #2]
    cef0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cef4:	d903      	bls.n	cefe <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cef6:	21a8      	movs	r1, #168	; 0xa8
    cef8:	2014      	movs	r0, #20
    cefa:	f7f7 f875 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cefe:	8026      	strh	r6, [r4, #0]
    cf00:	2000      	movs	r0, #0
    cf02:	7760      	strb	r0, [r4, #29]
    cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf08 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cf08:	6181      	str	r1, [r0, #24]
    cf0a:	6188      	str	r0, [r1, #24]
    cf0c:	4770      	bx	lr

0000cf0e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf12:	460b      	mov	r3, r1
    cf14:	4604      	mov	r4, r0
    cf16:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cf1a:	8905      	ldrh	r5, [r0, #8]
    cf1c:	8946      	ldrh	r6, [r0, #10]
    cf1e:	8880      	ldrh	r0, [r0, #4]
    cf20:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cf24:	4439      	add	r1, r7
    cf26:	460f      	mov	r7, r1
    cf28:	4285      	cmp	r5, r0
    cf2a:	d102      	bne.n	cf32 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cf2c:	2000      	movs	r0, #0
    cf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf32:	b10a      	cbz	r2, cf38 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cf34:	1cc8      	adds	r0, r1, #3
    cf36:	6010      	str	r0, [r2, #0]
    cf38:	b123      	cbz	r3, cf44 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cf3a:	7f22      	ldrb	r2, [r4, #28]
    cf3c:	1cf9      	adds	r1, r7, #3
    cf3e:	4618      	mov	r0, r3
    cf40:	f7ff f8cf 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf44:	883f      	ldrh	r7, [r7, #0]
    cf46:	f104 0108 	add.w	r1, r4, #8
    cf4a:	4620      	mov	r0, r4
    cf4c:	f7ff fdaa 	bl	caa4 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf50:	42b5      	cmp	r5, r6
    cf52:	d101      	bne.n	cf58 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    cf54:	8920      	ldrh	r0, [r4, #8]
    cf56:	8160      	strh	r0, [r4, #10]
    cf58:	4638      	mov	r0, r7
    cf5a:	e7e8      	b.n	cf2e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000cf5c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cf5c:	4401      	add	r1, r0
    cf5e:	1d89      	adds	r1, r1, #6
    cf60:	4351      	muls	r1, r2
    cf62:	b28a      	uxth	r2, r1
    cf64:	2100      	movs	r1, #0
    cf66:	2845      	cmp	r0, #69	; 0x45
    cf68:	d201      	bcs.n	cf6e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    cf6a:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    cf6e:	3224      	adds	r2, #36	; 0x24
    cf70:	1850      	adds	r0, r2, r1
    cf72:	b280      	uxth	r0, r0
    cf74:	4770      	bx	lr

0000cf76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    cf76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf7a:	4688      	mov	r8, r1
    cf7c:	88c1      	ldrh	r1, [r0, #6]
    cf7e:	4604      	mov	r4, r0
    cf80:	8900      	ldrh	r0, [r0, #8]
    cf82:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    cf86:	f104 0524 	add.w	r5, r4, #36	; 0x24
    cf8a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cf8e:	eb05 0906 	add.w	r9, r5, r6
    cf92:	f7ff fda8 	bl	cae6 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cf96:	2200      	movs	r2, #0
    cf98:	b998      	cbnz	r0, cfc2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    cf9a:	8820      	ldrh	r0, [r4, #0]
    cf9c:	2845      	cmp	r0, #69	; 0x45
    cf9e:	d200      	bcs.n	cfa2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    cfa0:	2045      	movs	r0, #69	; 0x45
    cfa2:	42b7      	cmp	r7, r6
    cfa4:	d906      	bls.n	cfb4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cfa6:	7f23      	ldrb	r3, [r4, #28]
    cfa8:	1bb9      	subs	r1, r7, r6
    cfaa:	1ac9      	subs	r1, r1, r3
    cfac:	1f89      	subs	r1, r1, #6
    cfae:	4281      	cmp	r1, r0
    cfb0:	da00      	bge.n	cfb4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cfb2:	4608      	mov	r0, r1
    cfb4:	89e1      	ldrh	r1, [r4, #14]
    cfb6:	b111      	cbz	r1, cfbe <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    cfb8:	f8b9 3000 	ldrh.w	r3, [r9]
    cfbc:	1ac0      	subs	r0, r0, r3
    cfbe:	4540      	cmp	r0, r8
    cfc0:	da03      	bge.n	cfca <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    cfc2:	8262      	strh	r2, [r4, #18]
    cfc4:	2000      	movs	r0, #0
    cfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cfca:	7f20      	ldrb	r0, [r4, #28]
    cfcc:	4429      	add	r1, r5
    cfce:	1d80      	adds	r0, r0, #6
    cfd0:	4430      	add	r0, r6
    cfd2:	4408      	add	r0, r1
    cfd4:	f8a4 8012 	strh.w	r8, [r4, #18]
    cfd8:	1ec0      	subs	r0, r0, #3
    cfda:	e7f4      	b.n	cfc6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000cfdc <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    cfdc:	2100      	movs	r1, #0
    cfde:	81c1      	strh	r1, [r0, #14]
    cfe0:	8241      	strh	r1, [r0, #18]
    cfe2:	75c1      	strb	r1, [r0, #23]
    cfe4:	7581      	strb	r1, [r0, #22]
    cfe6:	4770      	bx	lr

0000cfe8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    cfe8:	b570      	push	{r4, r5, r6, lr}
    cfea:	2300      	movs	r3, #0
    cfec:	2908      	cmp	r1, #8
    cfee:	d204      	bcs.n	cffa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    cff0:	f240 11cb 	movw	r1, #459	; 0x1cb
    cff4:	2015      	movs	r0, #21
    cff6:	f7f6 fff7 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cffa:	6802      	ldr	r2, [r0, #0]
    cffc:	b90a      	cbnz	r2, d002 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    cffe:	e01e      	b.n	d03e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d000:	4610      	mov	r0, r2
    d002:	6802      	ldr	r2, [r0, #0]
    d004:	8893      	ldrh	r3, [r2, #4]
    d006:	428b      	cmp	r3, r1
    d008:	d002      	beq.n	d010 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d00a:	6813      	ldr	r3, [r2, #0]
    d00c:	2b00      	cmp	r3, #0
    d00e:	d1f7      	bne.n	d000 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d010:	8894      	ldrh	r4, [r2, #4]
    d012:	4613      	mov	r3, r2
    d014:	428c      	cmp	r4, r1
    d016:	d101      	bne.n	d01c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d018:	6811      	ldr	r1, [r2, #0]
    d01a:	e00d      	b.n	d038 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d01c:	f101 0508 	add.w	r5, r1, #8
    d020:	b2ae      	uxth	r6, r5
    d022:	2500      	movs	r5, #0
    d024:	42b4      	cmp	r4, r6
    d026:	d309      	bcc.n	d03c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d028:	1a64      	subs	r4, r4, r1
    d02a:	4411      	add	r1, r2
    d02c:	600d      	str	r5, [r1, #0]
    d02e:	808c      	strh	r4, [r1, #4]
    d030:	6802      	ldr	r2, [r0, #0]
    d032:	6812      	ldr	r2, [r2, #0]
    d034:	6002      	str	r2, [r0, #0]
    d036:	600a      	str	r2, [r1, #0]
    d038:	6001      	str	r1, [r0, #0]
    d03a:	e000      	b.n	d03e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d03c:	2300      	movs	r3, #0
    d03e:	4618      	mov	r0, r3
    d040:	bd70      	pop	{r4, r5, r6, pc}

0000d042 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d042:	b510      	push	{r4, lr}
    d044:	000c      	movs	r4, r1
    d046:	d006      	beq.n	d056 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d048:	2c08      	cmp	r4, #8
    d04a:	d209      	bcs.n	d060 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d04c:	f240 1195 	movw	r1, #405	; 0x195
    d050:	2015      	movs	r0, #21
    d052:	f7f6 ffc9 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d056:	b108      	cbz	r0, d05c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d058:	2100      	movs	r1, #0
    d05a:	6001      	str	r1, [r0, #0]
    d05c:	2000      	movs	r0, #0
    d05e:	bd10      	pop	{r4, pc}
    d060:	b118      	cbz	r0, d06a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d062:	b2a1      	uxth	r1, r4
    d064:	6800      	ldr	r0, [r0, #0]
    d066:	f000 f814 	bl	d092 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d06a:	1d20      	adds	r0, r4, #4
    d06c:	bd10      	pop	{r4, pc}

0000d06e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d06e:	2100      	movs	r1, #0
    d070:	6802      	ldr	r2, [r0, #0]
    d072:	e003      	b.n	d07c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d074:	8893      	ldrh	r3, [r2, #4]
    d076:	6812      	ldr	r2, [r2, #0]
    d078:	4419      	add	r1, r3
    d07a:	b289      	uxth	r1, r1
    d07c:	2a00      	cmp	r2, #0
    d07e:	d1f9      	bne.n	d074 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d080:	f000 b807 	b.w	d092 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d084 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d084:	2300      	movs	r3, #0
    d086:	600b      	str	r3, [r1, #0]
    d088:	808a      	strh	r2, [r1, #4]
    d08a:	6802      	ldr	r2, [r0, #0]
    d08c:	600a      	str	r2, [r1, #0]
    d08e:	6001      	str	r1, [r0, #0]
    d090:	4770      	bx	lr
    d092:	2300      	movs	r3, #0
    d094:	6043      	str	r3, [r0, #4]
    d096:	1d02      	adds	r2, r0, #4
    d098:	8101      	strh	r1, [r0, #8]
    d09a:	6002      	str	r2, [r0, #0]
    d09c:	4770      	bx	lr

0000d09e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    d09e:	b50e      	push	{r1, r2, r3, lr}
    d0a0:	4669      	mov	r1, sp
    d0a2:	f000 f818 	bl	d0d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    d0a6:	b120      	cbz	r0, d0b2 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    d0a8:	f44f 71b9 	mov.w	r1, #370	; 0x172
    d0ac:	2017      	movs	r0, #23
    d0ae:	f7f6 ff9b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0b2:	4668      	mov	r0, sp
    d0b4:	f7f7 f9cc 	bl	4450 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d0b8:	b108      	cbz	r0, d0be <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    d0ba:	2000      	movs	r0, #0
    d0bc:	bd0e      	pop	{r1, r2, r3, pc}
    d0be:	2001      	movs	r0, #1
    d0c0:	bd0e      	pop	{r1, r2, r3, pc}

0000d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d0c2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d0c6:	3aff      	subs	r2, #255	; 0xff
    d0c8:	d001      	beq.n	d0ce <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d0ca:	2902      	cmp	r1, #2
    d0cc:	d301      	bcc.n	d0d2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d0ce:	2000      	movs	r0, #0
    d0d0:	4770      	bx	lr
    d0d2:	f7f7 ba79 	b.w	45c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d0d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d0d6:	b570      	push	{r4, r5, r6, lr}
    d0d8:	4605      	mov	r5, r0
    d0da:	460c      	mov	r4, r1
    d0dc:	4608      	mov	r0, r1
    d0de:	f000 f851 	bl	d184 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d0e2:	b108      	cbz	r0, d0e8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d0e4:	2010      	movs	r0, #16
    d0e6:	bd70      	pop	{r4, r5, r6, pc}
    d0e8:	2d02      	cmp	r5, #2
    d0ea:	d301      	bcc.n	d0f0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d0ec:	2007      	movs	r0, #7
    d0ee:	bd70      	pop	{r4, r5, r6, pc}
    d0f0:	7025      	strb	r5, [r4, #0]
    d0f2:	2000      	movs	r0, #0
    d0f4:	8060      	strh	r0, [r4, #2]
    d0f6:	bd70      	pop	{r4, r5, r6, pc}
    d0f8:	b510      	push	{r4, lr}
    d0fa:	4604      	mov	r4, r0
    d0fc:	f7f7 fab0 	bl	4660 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d100:	42a0      	cmp	r0, r4
    d102:	d901      	bls.n	d108 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d104:	2001      	movs	r0, #1
    d106:	bd10      	pop	{r4, pc}
    d108:	2000      	movs	r0, #0
    d10a:	bd10      	pop	{r4, pc}
    d10c:	4770      	bx	lr
    d10e:	4770      	bx	lr

0000d110 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d110:	b570      	push	{r4, r5, r6, lr}
    d112:	460e      	mov	r6, r1
    d114:	461d      	mov	r5, r3
    d116:	4611      	mov	r1, r2
    d118:	f000 f811 	bl	d13e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d11c:	4604      	mov	r4, r0
    d11e:	4629      	mov	r1, r5
    d120:	4630      	mov	r0, r6
    d122:	f000 f803 	bl	d12c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d126:	4420      	add	r0, r4
    d128:	1d00      	adds	r0, r0, #4
    d12a:	bd70      	pop	{r4, r5, r6, pc}
    d12c:	b510      	push	{r4, lr}
    d12e:	460a      	mov	r2, r1
    d130:	2101      	movs	r1, #1
    d132:	f7ff ff13 	bl	cf5c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d136:	1cc0      	adds	r0, r0, #3
    d138:	f020 0003 	bic.w	r0, r0, #3
    d13c:	bd10      	pop	{r4, pc}
    d13e:	b510      	push	{r4, lr}
    d140:	460a      	mov	r2, r1
    d142:	2101      	movs	r1, #1
    d144:	f7ff ff0a 	bl	cf5c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d148:	1cc0      	adds	r0, r0, #3
    d14a:	f020 0003 	bic.w	r0, r0, #3
    d14e:	bd10      	pop	{r4, pc}
    d150:	2800      	cmp	r0, #0
    d152:	db09      	blt.n	d168 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d154:	f000 021f 	and.w	r2, r0, #31
    d158:	2101      	movs	r1, #1
    d15a:	4091      	lsls	r1, r2
    d15c:	0940      	lsrs	r0, r0, #5
    d15e:	0080      	lsls	r0, r0, #2
    d160:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d164:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d168:	4770      	bx	lr

0000d16a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d16a:	f7f7 bc15 	b.w	4998 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d16e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d16e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d172:	2000      	movs	r0, #0
    d174:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d178:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d17c:	2001      	movs	r0, #1
    d17e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d182:	4770      	bx	lr

0000d184 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d184:	b108      	cbz	r0, d18a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d186:	2000      	movs	r0, #0
    d188:	4770      	bx	lr
    d18a:	2001      	movs	r0, #1
    d18c:	4770      	bx	lr

0000d18e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d18e:	f7f7 bd49 	b.w	4c24 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d192 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d192:	f7f7 bd37 	b.w	4c04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d196 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d196:	b510      	push	{r4, lr}
    d198:	2900      	cmp	r1, #0
    d19a:	4604      	mov	r4, r0
    d19c:	f04f 0106 	mov.w	r1, #6
    d1a0:	d002      	beq.n	d1a8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d1a2:	f7f6 ffb1 	bl	4108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d1a6:	e001      	b.n	d1ac <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d1a8:	f7f6 ffca 	bl	4140 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d1ac:	7960      	ldrb	r0, [r4, #5]
    d1ae:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d1b2:	7160      	strb	r0, [r4, #5]
    d1b4:	bd10      	pop	{r4, pc}

0000d1b6 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d1b6:	4770      	bx	lr

0000d1b8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d1b8:	b530      	push	{r4, r5, lr}
    d1ba:	460c      	mov	r4, r1
    d1bc:	4605      	mov	r5, r0
    d1be:	b08d      	sub	sp, #52	; 0x34
    d1c0:	f04f 0103 	mov.w	r1, #3
    d1c4:	f104 0003 	add.w	r0, r4, #3
    d1c8:	b112      	cbz	r2, d1d0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d1ca:	f7f6 ff9d 	bl	4108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d1ce:	e001      	b.n	d1d4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d1d0:	f7f6 ffb6 	bl	4140 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d1d4:	7960      	ldrb	r0, [r4, #5]
    d1d6:	220d      	movs	r2, #13
    d1d8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d1dc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d1e0:	7160      	strb	r0, [r4, #5]
    d1e2:	2100      	movs	r1, #0
    d1e4:	a804      	add	r0, sp, #16
    d1e6:	f7fe fff6 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1ea:	78e0      	ldrb	r0, [r4, #3]
    d1ec:	f88d 001f 	strb.w	r0, [sp, #31]
    d1f0:	7920      	ldrb	r0, [r4, #4]
    d1f2:	f88d 001e 	strb.w	r0, [sp, #30]
    d1f6:	7960      	ldrb	r0, [r4, #5]
    d1f8:	f88d 001d 	strb.w	r0, [sp, #29]
    d1fc:	2210      	movs	r2, #16
    d1fe:	4629      	mov	r1, r5
    d200:	4668      	mov	r0, sp
    d202:	f7fe ff6e 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d206:	4668      	mov	r0, sp
    d208:	f7ff ffaf 	bl	d16a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d20c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d210:	7020      	strb	r0, [r4, #0]
    d212:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d216:	7060      	strb	r0, [r4, #1]
    d218:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d21c:	70a0      	strb	r0, [r4, #2]
    d21e:	b00d      	add	sp, #52	; 0x34
    d220:	bd30      	pop	{r4, r5, pc}

0000d222 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d222:	f7f8 b86d 	b.w	5300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    d226:	07c1      	lsls	r1, r0, #31
    d228:	d001      	beq.n	d22e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d22a:	2001      	movs	r0, #1
    d22c:	4770      	bx	lr
    d22e:	0780      	lsls	r0, r0, #30
    d230:	d501      	bpl.n	d236 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d232:	2002      	movs	r0, #2
    d234:	4770      	bx	lr
    d236:	2000      	movs	r0, #0
    d238:	4770      	bx	lr
    d23a:	b510      	push	{r4, lr}
    d23c:	2801      	cmp	r0, #1
    d23e:	d008      	beq.n	d252 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d240:	2802      	cmp	r0, #2
    d242:	d004      	beq.n	d24e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d244:	f240 31b3 	movw	r1, #947	; 0x3b3
    d248:	2006      	movs	r0, #6
    d24a:	f7f6 fecd 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d24e:	2001      	movs	r0, #1
    d250:	bd10      	pop	{r4, pc}
    d252:	2000      	movs	r0, #0
    d254:	bd10      	pop	{r4, pc}
    d256:	b570      	push	{r4, r5, r6, lr}
    d258:	460c      	mov	r4, r1
    d25a:	4605      	mov	r5, r0
    d25c:	2b08      	cmp	r3, #8
    d25e:	d001      	beq.n	d264 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d260:	4619      	mov	r1, r3
    d262:	e000      	b.n	d266 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d264:	2104      	movs	r1, #4
    d266:	4610      	mov	r0, r2
    d268:	f000 f8f4 	bl	d454 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d26c:	b90d      	cbnz	r5, d272 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x50>
    d26e:	1d00      	adds	r0, r0, #4
    d270:	b280      	uxth	r0, r0
    d272:	4284      	cmp	r4, r0
    d274:	d200      	bcs.n	d278 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x56>
    d276:	4620      	mov	r0, r4
    d278:	b2c0      	uxtb	r0, r0
    d27a:	bd70      	pop	{r4, r5, r6, pc}
    d27c:	2900      	cmp	r1, #0
    d27e:	d004      	beq.n	d28a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x68>
    d280:	2801      	cmp	r0, #1
    d282:	d003      	beq.n	d28c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    d284:	2901      	cmp	r1, #1
    d286:	d001      	beq.n	d28c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    d288:	2002      	movs	r0, #2
    d28a:	4770      	bx	lr
    d28c:	2001      	movs	r0, #1
    d28e:	4770      	bx	lr
    d290:	f7ff bdb9 	b.w	ce06 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d294 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d294:	2201      	movs	r2, #1
    d296:	f7f8 bbf5 	b.w	5a84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d29a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d29a:	b510      	push	{r4, lr}
    d29c:	f001 fe62 	bl	ef64 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d2a0:	b118      	cbz	r0, d2aa <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d2a6:	f7fd bd17 	b.w	acd8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d2aa:	20ff      	movs	r0, #255	; 0xff
    d2ac:	bd10      	pop	{r4, pc}

0000d2ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d2ae:	b510      	push	{r4, lr}
    d2b0:	f7f8 fc32 	bl	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d2b4:	2810      	cmp	r0, #16
    d2b6:	d003      	beq.n	d2c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d2b8:	f7f8 fbfe 	bl	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d2bc:	2810      	cmp	r0, #16
    d2be:	d100      	bne.n	d2c2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d2c0:	2008      	movs	r0, #8
    d2c2:	bd10      	pop	{r4, pc}

0000d2c4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d2c4:	b510      	push	{r4, lr}
    d2c6:	f7f8 fc27 	bl	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d2ca:	2810      	cmp	r0, #16
    d2cc:	d007      	beq.n	d2de <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d2ce:	f7f8 fbf3 	bl	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d2d2:	2810      	cmp	r0, #16
    d2d4:	d003      	beq.n	d2de <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d2d6:	f7f8 fc67 	bl	5ba8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    d2da:	2001      	movs	r0, #1
    d2dc:	bd10      	pop	{r4, pc}
    d2de:	2000      	movs	r0, #0
    d2e0:	bd10      	pop	{r4, pc}

0000d2e2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d2e2:	b510      	push	{r4, lr}
    d2e4:	f7f8 fc18 	bl	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d2e8:	2810      	cmp	r0, #16
    d2ea:	d003      	beq.n	d2f4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d2ec:	f7f8 fca4 	bl	5c38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    d2f0:	2001      	movs	r0, #1
    d2f2:	bd10      	pop	{r4, pc}
    d2f4:	2000      	movs	r0, #0
    d2f6:	bd10      	pop	{r4, pc}

0000d2f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d2f8:	b570      	push	{r4, r5, r6, lr}
    d2fa:	460e      	mov	r6, r1
    d2fc:	b08c      	sub	sp, #48	; 0x30
    d2fe:	4614      	mov	r4, r2
    d300:	4601      	mov	r1, r0
    d302:	461d      	mov	r5, r3
    d304:	2210      	movs	r2, #16
    d306:	4668      	mov	r0, sp
    d308:	f000 f92d 	bl	d566 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d30c:	2210      	movs	r2, #16
    d30e:	4631      	mov	r1, r6
    d310:	a804      	add	r0, sp, #16
    d312:	f000 f928 	bl	d566 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d316:	4668      	mov	r0, sp
    d318:	f7ff ff27 	bl	d16a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d31c:	a908      	add	r1, sp, #32
    d31e:	f04f 0210 	mov.w	r2, #16
    d322:	4628      	mov	r0, r5
    d324:	b11c      	cbz	r4, d32e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d326:	f000 f91e 	bl	d566 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d32a:	b00c      	add	sp, #48	; 0x30
    d32c:	bd70      	pop	{r4, r5, r6, pc}
    d32e:	f7fe fed8 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d332:	e7fa      	b.n	d32a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d334:	b510      	push	{r4, lr}
    d336:	460c      	mov	r4, r1
    d338:	2100      	movs	r1, #0
    d33a:	f7ff fec2 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d33e:	6060      	str	r0, [r4, #4]
    d340:	b118      	cbz	r0, d34a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d342:	2001      	movs	r0, #1
    d344:	7020      	strb	r0, [r4, #0]
    d346:	2000      	movs	r0, #0
    d348:	bd10      	pop	{r4, pc}
    d34a:	2002      	movs	r0, #2
    d34c:	bd10      	pop	{r4, pc}

0000d34e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d34e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d352:	4348      	muls	r0, r1
    d354:	4770      	bx	lr

0000d356 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d356:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d35a:	fbb0 f0f1 	udiv	r0, r0, r1
    d35e:	b280      	uxth	r0, r0
    d360:	4770      	bx	lr

0000d362 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d362:	b570      	push	{r4, r5, r6, lr}
    d364:	4604      	mov	r4, r0
    d366:	4290      	cmp	r0, r2
    d368:	d20b      	bcs.n	d382 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d36a:	1b10      	subs	r0, r2, r4
    d36c:	2864      	cmp	r0, #100	; 0x64
    d36e:	d200      	bcs.n	d372 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d370:	2064      	movs	r0, #100	; 0x64
    d372:	1825      	adds	r5, r4, r0
    d374:	428d      	cmp	r5, r1
    d376:	d803      	bhi.n	d380 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d378:	2104      	movs	r1, #4
    d37a:	f7f4 f9b5 	bl	16e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d37e:	b108      	cbz	r0, d384 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d380:	4620      	mov	r0, r4
    d382:	bd70      	pop	{r4, r5, r6, pc}
    d384:	4628      	mov	r0, r5
    d386:	bd70      	pop	{r4, r5, r6, pc}

0000d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d388:	b510      	push	{r4, lr}
    d38a:	f1a2 030f 	sub.w	r3, r2, #15
    d38e:	290c      	cmp	r1, #12
    d390:	d244      	bcs.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d392:	e8df f001 	tbb	[pc, r1]
    d396:	0806      	.short	0x0806
    d398:	1815120d 	.word	0x1815120d
    d39c:	4127241c 	.word	0x4127241c
    d3a0:	312a      	.short	0x312a
    d3a2:	b3c2      	cbz	r2, d416 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d3a4:	e03a      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3a6:	2a07      	cmp	r2, #7
    d3a8:	d03a      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3aa:	2a08      	cmp	r2, #8
    d3ac:	d038      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3ae:	e035      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3b0:	2a0c      	cmp	r2, #12
    d3b2:	d035      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3b4:	2a0b      	cmp	r2, #11
    d3b6:	d033      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3b8:	e030      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3ba:	2a0d      	cmp	r2, #13
    d3bc:	d030      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3be:	e02d      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3c0:	2b0c      	cmp	r3, #12
    d3c2:	d92d      	bls.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3c4:	e02a      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3c6:	3a10      	subs	r2, #16
    d3c8:	2a0b      	cmp	r2, #11
    d3ca:	d929      	bls.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3cc:	e026      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3ce:	2b03      	cmp	r3, #3
    d3d0:	d926      	bls.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3d2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    d3d6:	b308      	cbz	r0, d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3d8:	2a1b      	cmp	r2, #27
    d3da:	d921      	bls.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3dc:	e01e      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3de:	2a04      	cmp	r2, #4
    d3e0:	d01e      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3e2:	e01b      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3e4:	2a06      	cmp	r2, #6
    d3e6:	d01b      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3e8:	e018      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3ea:	2a1c      	cmp	r2, #28
    d3ec:	d018      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3ee:	2a1d      	cmp	r2, #29
    d3f0:	d016      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3f2:	2a1e      	cmp	r2, #30
    d3f4:	d014      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3f6:	e011      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3f8:	2a1f      	cmp	r2, #31
    d3fa:	d011      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3fc:	2a20      	cmp	r2, #32
    d3fe:	d00f      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d400:	2a21      	cmp	r2, #33	; 0x21
    d402:	d00d      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d404:	2a22      	cmp	r2, #34	; 0x22
    d406:	d00b      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d408:	2a23      	cmp	r2, #35	; 0x23
    d40a:	d009      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d40c:	2a24      	cmp	r2, #36	; 0x24
    d40e:	d007      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d410:	2a26      	cmp	r2, #38	; 0x26
    d412:	d005      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d414:	e002      	b.n	d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d416:	e003      	b.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d418:	2a0e      	cmp	r2, #14
    d41a:	d001      	beq.n	d420 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d41c:	2000      	movs	r0, #0
    d41e:	bd10      	pop	{r4, pc}
    d420:	2001      	movs	r0, #1
    d422:	bd10      	pop	{r4, pc}

0000d424 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d424:	280c      	cmp	r0, #12
    d426:	d013      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d428:	280b      	cmp	r0, #11
    d42a:	d011      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d42c:	280d      	cmp	r0, #13
    d42e:	d00f      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d430:	281f      	cmp	r0, #31
    d432:	d00d      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d434:	2820      	cmp	r0, #32
    d436:	d00b      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d438:	2821      	cmp	r0, #33	; 0x21
    d43a:	d009      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d43c:	2822      	cmp	r0, #34	; 0x22
    d43e:	d007      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d440:	2823      	cmp	r0, #35	; 0x23
    d442:	d005      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d444:	2824      	cmp	r0, #36	; 0x24
    d446:	d003      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d448:	2826      	cmp	r0, #38	; 0x26
    d44a:	d001      	beq.n	d450 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d44c:	2000      	movs	r0, #0
    d44e:	4770      	bx	lr
    d450:	2001      	movs	r0, #1
    d452:	4770      	bx	lr

0000d454 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d454:	f011 0f0c 	tst.w	r1, #12
    d458:	d016      	beq.n	d488 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d45a:	074a      	lsls	r2, r1, #29
    d45c:	f44f 7116 	mov.w	r1, #600	; 0x258
    d460:	2a00      	cmp	r2, #0
    d462:	da02      	bge.n	d46a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d464:	f04f 0210 	mov.w	r2, #16
    d468:	e001      	b.n	d46e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d46a:	f04f 0240 	mov.w	r2, #64	; 0x40
    d46e:	da01      	bge.n	d474 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d470:	f04f 0196 	mov.w	r1, #150	; 0x96
    d474:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d478:	eba0 0301 	sub.w	r3, r0, r1
    d47c:	4288      	cmp	r0, r1
    d47e:	d910      	bls.n	d4a2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d480:	fb93 f0f2 	sdiv	r0, r3, r2
    d484:	b280      	uxth	r0, r0
    d486:	4770      	bx	lr
    d488:	2902      	cmp	r1, #2
    d48a:	d002      	beq.n	d492 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d48c:	2870      	cmp	r0, #112	; 0x70
    d48e:	d80a      	bhi.n	d4a6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d490:	e007      	b.n	d4a2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d492:	283c      	cmp	r0, #60	; 0x3c
    d494:	d905      	bls.n	d4a2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d496:	383c      	subs	r0, #60	; 0x3c
    d498:	17c1      	asrs	r1, r0, #31
    d49a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d49e:	1080      	asrs	r0, r0, #2
    d4a0:	e7f0      	b.n	d484 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d4a2:	2000      	movs	r0, #0
    d4a4:	e7ee      	b.n	d484 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d4a6:	3870      	subs	r0, #112	; 0x70
    d4a8:	17c1      	asrs	r1, r0, #31
    d4aa:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d4ae:	10c0      	asrs	r0, r0, #3
    d4b0:	e7e8      	b.n	d484 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d4b2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d4b2:	6809      	ldr	r1, [r1, #0]
    d4b4:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
    d4b8:	4770      	bx	lr

0000d4ba <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    d4ba:	7e43      	ldrb	r3, [r0, #25]
    d4bc:	b10b      	cbz	r3, d4c2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x8>
    d4be:	2b25      	cmp	r3, #37	; 0x25
    d4c0:	d901      	bls.n	d4c6 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    d4c2:	2012      	movs	r0, #18
    d4c4:	4770      	bx	lr
    d4c6:	b12a      	cbz	r2, d4d4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1a>
    d4c8:	7c4b      	ldrb	r3, [r1, #17]
    d4ca:	b12b      	cbz	r3, d4d8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1e>
    d4cc:	2b01      	cmp	r3, #1
    d4ce:	d005      	beq.n	d4dc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x22>
    d4d0:	201f      	movs	r0, #31
    d4d2:	4770      	bx	lr
    d4d4:	2000      	movs	r0, #0
    d4d6:	4770      	bx	lr
    d4d8:	f7f8 bca2 	b.w	5e20 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x1c>
    d4dc:	f000 b8e8 	b.w	d6b0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>

0000d4e0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d4e0:	07c1      	lsls	r1, r0, #31
    d4e2:	d001      	beq.n	d4e8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d4e4:	2001      	movs	r0, #1
    d4e6:	4770      	bx	lr
    d4e8:	0781      	lsls	r1, r0, #30
    d4ea:	d501      	bpl.n	d4f0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d4ec:	2002      	movs	r0, #2
    d4ee:	4770      	bx	lr
    d4f0:	0740      	lsls	r0, r0, #29
    d4f2:	d501      	bpl.n	d4f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d4f4:	2008      	movs	r0, #8
    d4f6:	4770      	bx	lr
    d4f8:	2000      	movs	r0, #0
    d4fa:	4770      	bx	lr

0000d4fc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d4fc:	b510      	push	{r4, lr}
    d4fe:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d502:	2901      	cmp	r1, #1
    d504:	d006      	beq.n	d514 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d506:	2902      	cmp	r1, #2
    d508:	d005      	beq.n	d516 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d50a:	f240 514f 	movw	r1, #1359	; 0x54f
    d50e:	2029      	movs	r0, #41	; 0x29
    d510:	f7f6 fd6a 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d514:	b108      	cbz	r0, d51a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d516:	4610      	mov	r0, r2
    d518:	bd10      	pop	{r4, pc}
    d51a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d51e:	bd10      	pop	{r4, pc}

0000d520 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d524:	460c      	mov	r4, r1
    d526:	4605      	mov	r5, r0
    d528:	68c6      	ldr	r6, [r0, #12]
    d52a:	f7f4 fd53 	bl	1fd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d52e:	b198      	cbz	r0, d558 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d530:	b1bc      	cbz	r4, d562 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d532:	4630      	mov	r0, r6
    d534:	68e9      	ldr	r1, [r5, #12]
    d536:	f7f4 f9ff 	bl	1938 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d53a:	2800      	cmp	r0, #0
    d53c:	dd11      	ble.n	d562 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d53e:	4420      	add	r0, r4
    d540:	1e40      	subs	r0, r0, #1
    d542:	fbb0 f7f4 	udiv	r7, r0, r4
    d546:	fb07 f104 	mul.w	r1, r7, r4
    d54a:	4630      	mov	r0, r6
    d54c:	f7f4 f9be 	bl	18cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d550:	60e8      	str	r0, [r5, #12]
    d552:	4638      	mov	r0, r7
    d554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d558:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    d55c:	2029      	movs	r0, #41	; 0x29
    d55e:	f7f6 fd43 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d562:	2000      	movs	r0, #0
    d564:	e7f6      	b.n	d554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d566 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d566:	b530      	push	{r4, r5, lr}
    d568:	4613      	mov	r3, r2
    d56a:	e006      	b.n	d57a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d56c:	18cc      	adds	r4, r1, r3
    d56e:	1ad5      	subs	r5, r2, r3
    d570:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d574:	1e5b      	subs	r3, r3, #1
    d576:	5544      	strb	r4, [r0, r5]
    d578:	b2db      	uxtb	r3, r3
    d57a:	2b00      	cmp	r3, #0
    d57c:	d1f6      	bne.n	d56c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d57e:	bd30      	pop	{r4, r5, pc}

0000d580 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d580:	b538      	push	{r3, r4, r5, lr}
    d582:	4605      	mov	r5, r0
    d584:	460c      	mov	r4, r1
    d586:	4668      	mov	r0, sp
    d588:	f7fe f866 	bl	b658 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d58c:	b308      	cbz	r0, d5d2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d58e:	f99d 0000 	ldrsb.w	r0, [sp]
    d592:	7220      	strb	r0, [r4, #8]
    d594:	7ee1      	ldrb	r1, [r4, #27]
    d596:	7261      	strb	r1, [r4, #9]
    d598:	f994 100a 	ldrsb.w	r1, [r4, #10]
    d59c:	2200      	movs	r2, #0
    d59e:	1a41      	subs	r1, r0, r1
    d5a0:	d500      	bpl.n	d5a4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x24>
    d5a2:	4249      	negs	r1, r1
    d5a4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    d5a8:	428b      	cmp	r3, r1
    d5aa:	dc10      	bgt.n	d5ce <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d5ac:	2bff      	cmp	r3, #255	; 0xff
    d5ae:	d00e      	beq.n	d5ce <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d5b0:	7ae1      	ldrb	r1, [r4, #11]
    d5b2:	1c49      	adds	r1, r1, #1
    d5b4:	b2c9      	uxtb	r1, r1
    d5b6:	72e1      	strb	r1, [r4, #11]
    d5b8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    d5bc:	4299      	cmp	r1, r3
    d5be:	d802      	bhi.n	d5c6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d5c0:	7aa1      	ldrb	r1, [r4, #10]
    d5c2:	297f      	cmp	r1, #127	; 0x7f
    d5c4:	d103      	bne.n	d5ce <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d5c6:	72a0      	strb	r0, [r4, #10]
    d5c8:	2000      	movs	r0, #0
    d5ca:	72e0      	strb	r0, [r4, #11]
    d5cc:	2201      	movs	r2, #1
    d5ce:	4610      	mov	r0, r2
    d5d0:	bd38      	pop	{r3, r4, r5, pc}
    d5d2:	207f      	movs	r0, #127	; 0x7f
    d5d4:	7220      	strb	r0, [r4, #8]
    d5d6:	2000      	movs	r0, #0
    d5d8:	bd38      	pop	{r3, r4, r5, pc}

0000d5da <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d5da:	2300      	movs	r3, #0
    d5dc:	6203      	str	r3, [r0, #32]
    d5de:	8502      	strh	r2, [r0, #40]	; 0x28
    d5e0:	f240 2371 	movw	r3, #625	; 0x271
    d5e4:	435a      	muls	r2, r3
    d5e6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d5ea:	1e52      	subs	r2, r2, #1
    d5ec:	fbb2 f1f1 	udiv	r1, r2, r1
    d5f0:	6241      	str	r1, [r0, #36]	; 0x24
    d5f2:	4770      	bx	lr

0000d5f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d5f4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d5f8:	4607      	mov	r7, r0
    d5fa:	4690      	mov	r8, r2
    d5fc:	468b      	mov	fp, r1
    d5fe:	2601      	movs	r6, #1
    d600:	4608      	mov	r0, r1
    d602:	f000 f93c 	bl	d87e <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d606:	4682      	mov	sl, r0
    d608:	4658      	mov	r0, fp
    d60a:	f000 f944 	bl	d896 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d60e:	4681      	mov	r9, r0
    d610:	f7ff ff66 	bl	d4e0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d614:	4604      	mov	r4, r0
    d616:	4650      	mov	r0, sl
    d618:	f7ff ff62 	bl	d4e0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d61c:	4605      	mov	r5, r0
    d61e:	ea54 0005 	orrs.w	r0, r4, r5
    d622:	d100      	bne.n	d626 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d624:	2600      	movs	r6, #0
    d626:	f7fd faf9 	bl	ac1c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d62a:	ea10 0f09 	tst.w	r0, r9
    d62e:	d100      	bne.n	d632 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d630:	2400      	movs	r4, #0
    d632:	f7fd faf3 	bl	ac1c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d636:	ea10 0f0a 	tst.w	r0, sl
    d63a:	d100      	bne.n	d63e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d63c:	2500      	movs	r5, #0
    d63e:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
    d642:	42a0      	cmp	r0, r4
    d644:	d100      	bne.n	d648 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d646:	2400      	movs	r4, #0
    d648:	f888 4000 	strb.w	r4, [r8]
    d64c:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
    d650:	42a8      	cmp	r0, r5
    d652:	d100      	bne.n	d656 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d654:	2500      	movs	r5, #0
    d656:	f888 5001 	strb.w	r5, [r8, #1]
    d65a:	b974      	cbnz	r4, d67a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d65c:	b96d      	cbnz	r5, d67a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d65e:	4658      	mov	r0, fp
    d660:	f000 f917 	bl	d892 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d664:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
    d668:	1a40      	subs	r0, r0, r1
    d66a:	b200      	sxth	r0, r0
    d66c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d670:	4288      	cmp	r0, r1
    d672:	dc01      	bgt.n	d678 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d674:	2800      	cmp	r0, #0
    d676:	dc00      	bgt.n	d67a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d678:	2600      	movs	r6, #0
    d67a:	4630      	mov	r0, r6
    d67c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d680 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d680:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d684:	4348      	muls	r0, r1
    d686:	4770      	bx	lr

0000d688 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d688:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d68c:	fb10 f001 	smulbb	r0, r0, r1
    d690:	4770      	bx	lr

0000d692 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d692:	b510      	push	{r4, lr}
    d694:	2300      	movs	r3, #0
    d696:	461a      	mov	r2, r3
    d698:	e003      	b.n	d6a2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d69a:	5c84      	ldrb	r4, [r0, r2]
    d69c:	4323      	orrs	r3, r4
    d69e:	1c52      	adds	r2, r2, #1
    d6a0:	b2d2      	uxtb	r2, r2
    d6a2:	428a      	cmp	r2, r1
    d6a4:	d3f9      	bcc.n	d69a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d6a6:	b10b      	cbz	r3, d6ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d6a8:	2000      	movs	r0, #0
    d6aa:	bd10      	pop	{r4, pc}
    d6ac:	2001      	movs	r0, #1
    d6ae:	bd10      	pop	{r4, pc}
    d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6b2:	7d0c      	ldrb	r4, [r1, #20]
    d6b4:	7c8b      	ldrb	r3, [r1, #18]
    d6b6:	7ccd      	ldrb	r5, [r1, #19]
    d6b8:	405c      	eors	r4, r3
    d6ba:	7d4b      	ldrb	r3, [r1, #21]
    d6bc:	8802      	ldrh	r2, [r0, #0]
    d6be:	406b      	eors	r3, r5
    d6c0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    d6c4:	7e46      	ldrb	r6, [r0, #25]
    d6c6:	4062      	eors	r2, r4
    d6c8:	2300      	movs	r3, #0
    d6ca:	b2d5      	uxtb	r5, r2
    d6cc:	0a12      	lsrs	r2, r2, #8
    d6ce:	fa95 f5a5 	rbit	r5, r5
    d6d2:	fa92 f2a2 	rbit	r2, r2
    d6d6:	0e2d      	lsrs	r5, r5, #24
    d6d8:	0e12      	lsrs	r2, r2, #24
    d6da:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
    d6de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    d6e2:	1c5b      	adds	r3, r3, #1
    d6e4:	4422      	add	r2, r4
    d6e6:	b2db      	uxtb	r3, r3
    d6e8:	b292      	uxth	r2, r2
    d6ea:	2b03      	cmp	r3, #3
    d6ec:	d3ed      	bcc.n	d6ca <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x38>
    d6ee:	4062      	eors	r2, r4
    d6f0:	2325      	movs	r3, #37	; 0x25
    d6f2:	fbb2 f4f3 	udiv	r4, r2, r3
    d6f6:	fb03 2314 	mls	r3, r3, r4, r2
    d6fa:	eb01 04d3 	add.w	r4, r1, r3, lsr #3
    d6fe:	7683      	strb	r3, [r0, #26]
    d700:	f003 0707 	and.w	r7, r3, #7
    d704:	7b24      	ldrb	r4, [r4, #12]
    d706:	2501      	movs	r5, #1
    d708:	fa05 f707 	lsl.w	r7, r5, r7
    d70c:	423c      	tst	r4, r7
    d70e:	d001      	beq.n	d714 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x82>
    d710:	76c3      	strb	r3, [r0, #27]
    d712:	e01a      	b.n	d74a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
    d714:	4356      	muls	r6, r2
    d716:	0c32      	lsrs	r2, r6, #16
    d718:	1c52      	adds	r2, r2, #1
    d71a:	b2d2      	uxtb	r2, r2
    d71c:	2400      	movs	r4, #0
    d71e:	1903      	adds	r3, r0, r4
    d720:	7d1b      	ldrb	r3, [r3, #20]
    d722:	4293      	cmp	r3, r2
    d724:	d313      	bcc.n	d74e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>
    d726:	2300      	movs	r3, #0
    d728:	190e      	adds	r6, r1, r4
    d72a:	7b36      	ldrb	r6, [r6, #12]
    d72c:	fa05 f703 	lsl.w	r7, r5, r3
    d730:	423e      	tst	r6, r7
    d732:	d001      	beq.n	d738 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xa6>
    d734:	1e52      	subs	r2, r2, #1
    d736:	b2d2      	uxtb	r2, r2
    d738:	b122      	cbz	r2, d744 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb2>
    d73a:	1c5b      	adds	r3, r3, #1
    d73c:	b2db      	uxtb	r3, r3
    d73e:	2b08      	cmp	r3, #8
    d740:	d3f4      	bcc.n	d72c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x9a>
    d742:	e006      	b.n	d752 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xc0>
    d744:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    d748:	76c1      	strb	r1, [r0, #27]
    d74a:	2000      	movs	r0, #0
    d74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d74e:	1ad2      	subs	r2, r2, r3
    d750:	b2d2      	uxtb	r2, r2
    d752:	1c64      	adds	r4, r4, #1
    d754:	b2e4      	uxtb	r4, r4
    d756:	2c05      	cmp	r4, #5
    d758:	d3e1      	bcc.n	d71e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8c>
    d75a:	201f      	movs	r0, #31
    d75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d75e:	b570      	push	{r4, r5, r6, lr}
    d760:	4605      	mov	r5, r0
    d762:	7c08      	ldrb	r0, [r1, #16]
    d764:	460e      	mov	r6, r1
    d766:	f000 001f 	and.w	r0, r0, #31
    d76a:	7408      	strb	r0, [r1, #16]
    d76c:	2000      	movs	r0, #0
    d76e:	7668      	strb	r0, [r5, #25]
    d770:	4604      	mov	r4, r0
    d772:	1930      	adds	r0, r6, r4
    d774:	7b00      	ldrb	r0, [r0, #12]
    d776:	f000 f811 	bl	d79c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10a>
    d77a:	1929      	adds	r1, r5, r4
    d77c:	1c64      	adds	r4, r4, #1
    d77e:	7508      	strb	r0, [r1, #20]
    d780:	7e69      	ldrb	r1, [r5, #25]
    d782:	b2e4      	uxtb	r4, r4
    d784:	4408      	add	r0, r1
    d786:	7668      	strb	r0, [r5, #25]
    d788:	2c05      	cmp	r4, #5
    d78a:	d3f2      	bcc.n	d772 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xe0>
    d78c:	b2c0      	uxtb	r0, r0
    d78e:	2825      	cmp	r0, #37	; 0x25
    d790:	d903      	bls.n	d79a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x108>
    d792:	21d9      	movs	r1, #217	; 0xd9
    d794:	2029      	movs	r0, #41	; 0x29
    d796:	f7f6 fc27 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d79a:	bd70      	pop	{r4, r5, r6, pc}
    d79c:	f000 0101 	and.w	r1, r0, #1
    d7a0:	0840      	lsrs	r0, r0, #1
    d7a2:	f000 0201 	and.w	r2, r0, #1
    d7a6:	4411      	add	r1, r2
    d7a8:	0840      	lsrs	r0, r0, #1
    d7aa:	f000 0201 	and.w	r2, r0, #1
    d7ae:	4411      	add	r1, r2
    d7b0:	0840      	lsrs	r0, r0, #1
    d7b2:	f000 0201 	and.w	r2, r0, #1
    d7b6:	4411      	add	r1, r2
    d7b8:	0840      	lsrs	r0, r0, #1
    d7ba:	f000 0201 	and.w	r2, r0, #1
    d7be:	4411      	add	r1, r2
    d7c0:	0840      	lsrs	r0, r0, #1
    d7c2:	f000 0201 	and.w	r2, r0, #1
    d7c6:	4411      	add	r1, r2
    d7c8:	0840      	lsrs	r0, r0, #1
    d7ca:	f000 0201 	and.w	r2, r0, #1
    d7ce:	4411      	add	r1, r2
    d7d0:	eb01 0050 	add.w	r0, r1, r0, lsr #1
    d7d4:	4770      	bx	lr

0000d7d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d7d6:	b570      	push	{r4, r5, r6, lr}
    d7d8:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d7dc:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d7e0:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d7e4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d7e8:	88c0      	ldrh	r0, [r0, #6]
    d7ea:	b131      	cbz	r1, d7fa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d7ec:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d7f0:	d903      	bls.n	d7fa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d7f2:	f640 5107 	movw	r1, #3335	; 0xd07
    d7f6:	428a      	cmp	r2, r1
    d7f8:	d90b      	bls.n	d812 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d7fa:	1f91      	subs	r1, r2, #6
    d7fc:	f640 467a 	movw	r6, #3194	; 0xc7a
    d800:	42b1      	cmp	r1, r6
    d802:	d80e      	bhi.n	d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d804:	b16b      	cbz	r3, d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d806:	2b08      	cmp	r3, #8
    d808:	d80b      	bhi.n	d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d80a:	4293      	cmp	r3, r2
    d80c:	d209      	bcs.n	d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d80e:	4294      	cmp	r4, r2
    d810:	d807      	bhi.n	d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d812:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d816:	d204      	bcs.n	d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d818:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d81c:	d801      	bhi.n	d822 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d81e:	2001      	movs	r0, #1
    d820:	bd70      	pop	{r4, r5, r6, pc}
    d822:	2000      	movs	r0, #0
    d824:	bd70      	pop	{r4, r5, r6, pc}

0000d826 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d826:	6842      	ldr	r2, [r0, #4]
    d828:	600a      	str	r2, [r1, #0]
    d82a:	7a00      	ldrb	r0, [r0, #8]
    d82c:	7108      	strb	r0, [r1, #4]
    d82e:	4770      	bx	lr

0000d830 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d830:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d834:	4770      	bx	lr

0000d836 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d836:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d83a:	4770      	bx	lr

0000d83c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d83c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d840:	4770      	bx	lr

0000d842 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d842:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d846:	4770      	bx	lr

0000d848 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d848:	8980      	ldrh	r0, [r0, #12]
    d84a:	8008      	strh	r0, [r1, #0]
    d84c:	4770      	bx	lr

0000d84e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d84e:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d852:	6008      	str	r0, [r1, #0]
    d854:	4770      	bx	lr

0000d856 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d856:	6842      	ldr	r2, [r0, #4]
    d858:	600a      	str	r2, [r1, #0]
    d85a:	6880      	ldr	r0, [r0, #8]
    d85c:	6048      	str	r0, [r1, #4]
    d85e:	4770      	bx	lr

0000d860 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d860:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d864:	600a      	str	r2, [r1, #0]
    d866:	6840      	ldr	r0, [r0, #4]
    d868:	6048      	str	r0, [r1, #4]
    d86a:	4770      	bx	lr

0000d86c <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d86c:	6842      	ldr	r2, [r0, #4]
    d86e:	600a      	str	r2, [r1, #0]
    d870:	6880      	ldr	r0, [r0, #8]
    d872:	6048      	str	r0, [r1, #4]
    d874:	4770      	bx	lr

0000d876 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d876:	7800      	ldrb	r0, [r0, #0]
    d878:	f000 0003 	and.w	r0, r0, #3
    d87c:	4770      	bx	lr

0000d87e <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d87e:	7900      	ldrb	r0, [r0, #4]
    d880:	4770      	bx	lr

0000d882 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d882:	8880      	ldrh	r0, [r0, #4]
    d884:	4770      	bx	lr

0000d886 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d886:	88c0      	ldrh	r0, [r0, #6]
    d888:	4770      	bx	lr

0000d88a <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d88a:	8900      	ldrh	r0, [r0, #8]
    d88c:	4770      	bx	lr

0000d88e <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d88e:	8940      	ldrh	r0, [r0, #10]
    d890:	4770      	bx	lr

0000d892 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d892:	88c0      	ldrh	r0, [r0, #6]
    d894:	4770      	bx	lr

0000d896 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d896:	7940      	ldrb	r0, [r0, #5]
    d898:	4770      	bx	lr

0000d89a <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d89a:	7900      	ldrb	r0, [r0, #4]
    d89c:	4770      	bx	lr

0000d89e <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d89e:	7900      	ldrb	r0, [r0, #4]
    d8a0:	4770      	bx	lr

0000d8a2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d8a2:	8901      	ldrh	r1, [r0, #8]
    d8a4:	291b      	cmp	r1, #27
    d8a6:	d30c      	bcc.n	d8c2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8a8:	8941      	ldrh	r1, [r0, #10]
    d8aa:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d8ae:	4291      	cmp	r1, r2
    d8b0:	d307      	bcc.n	d8c2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8b2:	8881      	ldrh	r1, [r0, #4]
    d8b4:	291b      	cmp	r1, #27
    d8b6:	d304      	bcc.n	d8c2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8b8:	88c0      	ldrh	r0, [r0, #6]
    d8ba:	4290      	cmp	r0, r2
    d8bc:	d301      	bcc.n	d8c2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8be:	2001      	movs	r0, #1
    d8c0:	4770      	bx	lr
    d8c2:	2000      	movs	r0, #0
    d8c4:	4770      	bx	lr

0000d8c6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d8c6:	b510      	push	{r4, lr}
    d8c8:	29fb      	cmp	r1, #251	; 0xfb
    d8ca:	d904      	bls.n	d8d6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d8cc:	f240 515b 	movw	r1, #1371	; 0x55b
    d8d0:	202a      	movs	r0, #42	; 0x2a
    d8d2:	f7f6 fb89 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8d6:	7041      	strb	r1, [r0, #1]
    d8d8:	bd10      	pop	{r4, pc}

0000d8da <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d8da:	7901      	ldrb	r1, [r0, #4]
    d8dc:	0749      	lsls	r1, r1, #29
    d8de:	d004      	beq.n	d8ea <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d8e0:	7940      	ldrb	r0, [r0, #5]
    d8e2:	0740      	lsls	r0, r0, #29
    d8e4:	d001      	beq.n	d8ea <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d8e6:	2001      	movs	r0, #1
    d8e8:	4770      	bx	lr
    d8ea:	2000      	movs	r0, #0
    d8ec:	4770      	bx	lr

0000d8ee <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d8ee:	7900      	ldrb	r0, [r0, #4]
    d8f0:	4770      	bx	lr

0000d8f2 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d8f2:	7940      	ldrb	r0, [r0, #5]
    d8f4:	4770      	bx	lr

0000d8f6 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d8f6:	7101      	strb	r1, [r0, #4]
    d8f8:	4770      	bx	lr

0000d8fa <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d8fa:	7141      	strb	r1, [r0, #5]
    d8fc:	4770      	bx	lr

0000d8fe <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d8fe:	b510      	push	{r4, lr}
    d900:	2a1b      	cmp	r2, #27
    d902:	d904      	bls.n	d90e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d904:	f240 31c2 	movw	r1, #962	; 0x3c2
    d908:	202a      	movs	r0, #42	; 0x2a
    d90a:	f7f6 fb6d 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d90e:	7042      	strb	r2, [r0, #1]
    d910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d914:	1cc0      	adds	r0, r0, #3
    d916:	f7fe bbe4 	b.w	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d91a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d91a:	6809      	ldr	r1, [r1, #0]
    d91c:	60c1      	str	r1, [r0, #12]
    d91e:	4770      	bx	lr

0000d920 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d920:	680a      	ldr	r2, [r1, #0]
    d922:	6042      	str	r2, [r0, #4]
    d924:	6849      	ldr	r1, [r1, #4]
    d926:	6081      	str	r1, [r0, #8]
    d928:	4770      	bx	lr

0000d92a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d92a:	680a      	ldr	r2, [r1, #0]
    d92c:	6042      	str	r2, [r0, #4]
    d92e:	6849      	ldr	r1, [r1, #4]
    d930:	6081      	str	r1, [r0, #8]
    d932:	4770      	bx	lr

0000d934 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d934:	680a      	ldr	r2, [r1, #0]
    d936:	6042      	str	r2, [r0, #4]
    d938:	6849      	ldr	r1, [r1, #4]
    d93a:	6081      	str	r1, [r0, #8]
    d93c:	4770      	bx	lr

0000d93e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d93e:	7802      	ldrb	r2, [r0, #0]
    d940:	f001 0103 	and.w	r1, r1, #3
    d944:	f022 0203 	bic.w	r2, r2, #3
    d948:	430a      	orrs	r2, r1
    d94a:	7002      	strb	r2, [r0, #0]
    d94c:	4770      	bx	lr

0000d94e <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d94e:	7101      	strb	r1, [r0, #4]
    d950:	0a09      	lsrs	r1, r1, #8
    d952:	7141      	strb	r1, [r0, #5]
    d954:	4770      	bx	lr

0000d956 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d956:	7181      	strb	r1, [r0, #6]
    d958:	0a09      	lsrs	r1, r1, #8
    d95a:	71c1      	strb	r1, [r0, #7]
    d95c:	4770      	bx	lr

0000d95e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d95e:	7201      	strb	r1, [r0, #8]
    d960:	0a09      	lsrs	r1, r1, #8
    d962:	7241      	strb	r1, [r0, #9]
    d964:	4770      	bx	lr

0000d966 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d966:	7281      	strb	r1, [r0, #10]
    d968:	0a09      	lsrs	r1, r1, #8
    d96a:	72c1      	strb	r1, [r0, #11]
    d96c:	4770      	bx	lr

0000d96e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d96e:	b570      	push	{r4, r5, r6, lr}
    d970:	7802      	ldrb	r2, [r0, #0]
    d972:	f002 020f 	and.w	r2, r2, #15
    d976:	2a03      	cmp	r2, #3
    d978:	d02c      	beq.n	d9d4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    d97a:	2a05      	cmp	r2, #5
    d97c:	d12d      	bne.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d97e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d982:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d986:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d98a:	7d83      	ldrb	r3, [r0, #22]
    d98c:	b141      	cbz	r1, d9a0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d98e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d992:	d905      	bls.n	d9a0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d994:	f640 5107 	movw	r1, #3335	; 0xd07
    d998:	428a      	cmp	r2, r1
    d99a:	d801      	bhi.n	d9a0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d99c:	2101      	movs	r1, #1
    d99e:	e000      	b.n	d9a2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    d9a0:	2100      	movs	r1, #0
    d9a2:	7846      	ldrb	r6, [r0, #1]
    d9a4:	2e22      	cmp	r6, #34	; 0x22
    d9a6:	d118      	bne.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9a8:	b959      	cbnz	r1, d9c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    d9aa:	1f91      	subs	r1, r2, #6
    d9ac:	f640 467a 	movw	r6, #3194	; 0xc7a
    d9b0:	42b1      	cmp	r1, r6
    d9b2:	d812      	bhi.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9b4:	b18b      	cbz	r3, d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9b6:	2b08      	cmp	r3, #8
    d9b8:	d80f      	bhi.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9ba:	4293      	cmp	r3, r2
    d9bc:	d20d      	bcs.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9be:	4294      	cmp	r4, r2
    d9c0:	d80b      	bhi.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9c2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d9c6:	d208      	bcs.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9c8:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d9cc:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d9d0:	d905      	bls.n	d9de <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d9d2:	e002      	b.n	d9da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d9d4:	7840      	ldrb	r0, [r0, #1]
    d9d6:	280c      	cmp	r0, #12
    d9d8:	d001      	beq.n	d9de <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d9da:	2000      	movs	r0, #0
    d9dc:	bd70      	pop	{r4, r5, r6, pc}
    d9de:	2001      	movs	r0, #1
    d9e0:	bd70      	pop	{r4, r5, r6, pc}

0000d9e2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d9e2:	b570      	push	{r4, r5, r6, lr}
    d9e4:	4614      	mov	r4, r2
    d9e6:	4605      	mov	r5, r0
    d9e8:	2a1f      	cmp	r2, #31
    d9ea:	d903      	bls.n	d9f4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d9ec:	21b2      	movs	r1, #178	; 0xb2
    d9ee:	202a      	movs	r0, #42	; 0x2a
    d9f0:	f7f6 fafa 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9f4:	f105 0009 	add.w	r0, r5, #9
    d9f8:	f7fe fb73 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9fc:	1da4      	adds	r4, r4, #6
    d9fe:	706c      	strb	r4, [r5, #1]
    da00:	bd70      	pop	{r4, r5, r6, pc}

0000da02 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    da02:	b510      	push	{r4, lr}
    da04:	7802      	ldrb	r2, [r0, #0]
    da06:	f001 030f 	and.w	r3, r1, #15
    da0a:	f022 020f 	bic.w	r2, r2, #15
    da0e:	431a      	orrs	r2, r3
    da10:	7002      	strb	r2, [r0, #0]
    da12:	2907      	cmp	r1, #7
    da14:	d20c      	bcs.n	da30 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    da16:	e8df f001 	tbb	[pc, r1]
    da1a:	0604      	.short	0x0604
    da1c:	08040604 	.word	0x08040604
    da20:	0004      	.short	0x0004
    da22:	2106      	movs	r1, #6
    da24:	e002      	b.n	da2c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    da26:	210c      	movs	r1, #12
    da28:	e000      	b.n	da2c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    da2a:	2122      	movs	r1, #34	; 0x22
    da2c:	7041      	strb	r1, [r0, #1]
    da2e:	bd10      	pop	{r4, pc}
    da30:	216e      	movs	r1, #110	; 0x6e
    da32:	202a      	movs	r0, #42	; 0x2a
    da34:	f7f6 fad8 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da38 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    da38:	680a      	ldr	r2, [r1, #0]
    da3a:	f840 2f09 	str.w	r2, [r0, #9]!
    da3e:	8889      	ldrh	r1, [r1, #4]
    da40:	8081      	strh	r1, [r0, #4]
    da42:	4770      	bx	lr

0000da44 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    da44:	7802      	ldrb	r2, [r0, #0]
    da46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    da4a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    da4e:	7002      	strb	r2, [r0, #0]
    da50:	4770      	bx	lr

0000da52 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    da52:	680a      	ldr	r2, [r1, #0]
    da54:	f840 2f03 	str.w	r2, [r0, #3]!
    da58:	8889      	ldrh	r1, [r1, #4]
    da5a:	8081      	strh	r1, [r0, #4]
    da5c:	4770      	bx	lr

0000da5e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    da5e:	7802      	ldrb	r2, [r0, #0]
    da60:	2340      	movs	r3, #64	; 0x40
    da62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    da66:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    da6a:	430a      	orrs	r2, r1
    da6c:	7002      	strb	r2, [r0, #0]
    da6e:	4770      	bx	lr

0000da70 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    da70:	b570      	push	{r4, r5, r6, lr}
    da72:	4614      	mov	r4, r2
    da74:	4605      	mov	r5, r0
    da76:	2a1f      	cmp	r2, #31
    da78:	d903      	bls.n	da82 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    da7a:	21d4      	movs	r1, #212	; 0xd4
    da7c:	202a      	movs	r0, #42	; 0x2a
    da7e:	f7f6 fab3 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da82:	f105 0009 	add.w	r0, r5, #9
    da86:	f7fe fb2c 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da8a:	1da4      	adds	r4, r4, #6
    da8c:	706c      	strb	r4, [r5, #1]
    da8e:	bd70      	pop	{r4, r5, r6, pc}

0000da90 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    da90:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    da94:	4604      	mov	r4, r0
    da96:	460f      	mov	r7, r1
    da98:	2000      	movs	r0, #0
    da9a:	f7f6 fc8d 	bl	43b8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    da9e:	2600      	movs	r6, #0
    daa0:	4605      	mov	r5, r0
    daa2:	46b0      	mov	r8, r6
    daa4:	4407      	add	r7, r0
    daa6:	e017      	b.n	dad8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x48>
    daa8:	8820      	ldrh	r0, [r4, #0]
    daaa:	1c40      	adds	r0, r0, #1
    daac:	b280      	uxth	r0, r0
    daae:	8020      	strh	r0, [r4, #0]
    dab0:	42b8      	cmp	r0, r7
    dab2:	d302      	bcc.n	daba <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
    dab4:	4640      	mov	r0, r8
    dab6:	f8a4 8000 	strh.w	r8, [r4]
    daba:	b280      	uxth	r0, r0
    dabc:	42a8      	cmp	r0, r5
    dabe:	d304      	bcc.n	daca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3a>
    dac0:	42b8      	cmp	r0, r7
    dac2:	d202      	bcs.n	daca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3a>
    dac4:	2000      	movs	r0, #0
    dac6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    daca:	4669      	mov	r1, sp
    dacc:	f7ff fc32 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dad0:	2800      	cmp	r0, #0
    dad2:	d0f8      	beq.n	dac6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x36>
    dad4:	1c76      	adds	r6, r6, #1
    dad6:	b2f6      	uxtb	r6, r6
    dad8:	42b7      	cmp	r7, r6
    dada:	d8e5      	bhi.n	daa8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x18>
    dadc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dae0:	8020      	strh	r0, [r4, #0]
    dae2:	2012      	movs	r0, #18
    dae4:	e7ef      	b.n	dac6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x36>

0000dae6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    dae6:	6841      	ldr	r1, [r0, #4]
    dae8:	2200      	movs	r2, #0
    daea:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    daee:	2b00      	cmp	r3, #0
    daf0:	d004      	beq.n	dafc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    daf2:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    daf6:	6840      	ldr	r0, [r0, #4]
    daf8:	f000 bab0 	b.w	e05c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    dafc:	4770      	bx	lr
    dafe:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    db02:	460e      	mov	r6, r1
    db04:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    db08:	4617      	mov	r7, r2
    db0a:	39ff      	subs	r1, #255	; 0xff
    db0c:	d014      	beq.n	db38 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    db0e:	8030      	strh	r0, [r6, #0]
    db10:	2100      	movs	r1, #0
    db12:	7171      	strb	r1, [r6, #5]
    db14:	f7f6 fe7e 	bl	4814 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    db18:	4604      	mov	r4, r0
    db1a:	f7ff f8ff 	bl	cd1c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    db1e:	0005      	movs	r5, r0
    db20:	d00a      	beq.n	db38 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    db22:	4620      	mov	r0, r4
    db24:	4629      	mov	r1, r5
    db26:	aa01      	add	r2, sp, #4
    db28:	f7ff f91b 	bl	cd62 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    db2c:	8070      	strh	r0, [r6, #2]
    db2e:	b130      	cbz	r0, db3e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    db30:	28fb      	cmp	r0, #251	; 0xfb
    db32:	d906      	bls.n	db42 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    db34:	21c1      	movs	r1, #193	; 0xc1
    db36:	e026      	b.n	db86 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    db38:	2000      	movs	r0, #0
    db3a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    db3e:	21c0      	movs	r1, #192	; 0xc0
    db40:	e021      	b.n	db86 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    db42:	9801      	ldr	r0, [sp, #4]
    db44:	f7ff fe97 	bl	d876 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    db48:	2801      	cmp	r0, #1
    db4a:	d003      	beq.n	db54 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    db4c:	2802      	cmp	r0, #2
    db4e:	d001      	beq.n	db54 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    db50:	21d0      	movs	r1, #208	; 0xd0
    db52:	e018      	b.n	db86 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    db54:	7130      	strb	r0, [r6, #4]
    db56:	4629      	mov	r1, r5
    db58:	8873      	ldrh	r3, [r6, #2]
    db5a:	2503      	movs	r5, #3
    db5c:	4620      	mov	r0, r4
    db5e:	463a      	mov	r2, r7
    db60:	9500      	str	r5, [sp, #0]
    db62:	f7fe ffd0 	bl	cb06 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    db66:	4620      	mov	r0, r4
    db68:	60b7      	str	r7, [r6, #8]
    db6a:	f7ff f886 	bl	cc7a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    db6e:	b138      	cbz	r0, db80 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    db70:	2100      	movs	r1, #0
    db72:	4620      	mov	r0, r4
    db74:	460a      	mov	r2, r1
    db76:	f7ff f9ca 	bl	cf0e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    db7a:	b118      	cbz	r0, db84 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    db7c:	2001      	movs	r0, #1
    db7e:	e7dc      	b.n	db3a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    db80:	21e0      	movs	r1, #224	; 0xe0
    db82:	e000      	b.n	db86 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    db84:	21e5      	movs	r1, #229	; 0xe5
    db86:	202b      	movs	r0, #43	; 0x2b
    db88:	f7f6 fa2e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000db8c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    db8c:	b570      	push	{r4, r5, r6, lr}
    db8e:	8050      	strh	r0, [r2, #2]
    db90:	890c      	ldrh	r4, [r1, #8]
    db92:	8094      	strh	r4, [r2, #4]
    db94:	898b      	ldrh	r3, [r1, #12]
    db96:	80d3      	strh	r3, [r2, #6]
    db98:	8948      	ldrh	r0, [r1, #10]
    db9a:	8110      	strh	r0, [r2, #8]
    db9c:	89cd      	ldrh	r5, [r1, #14]
    db9e:	8155      	strh	r5, [r2, #10]
    dba0:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    dba2:	42ae      	cmp	r6, r5
    dba4:	d108      	bne.n	dbb8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dba6:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    dba8:	4285      	cmp	r5, r0
    dbaa:	d105      	bne.n	dbb8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dbac:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    dbae:	429d      	cmp	r5, r3
    dbb0:	d102      	bne.n	dbb8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dbb2:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    dbb4:	42a3      	cmp	r3, r4
    dbb6:	d001      	beq.n	dbbc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    dbb8:	2301      	movs	r3, #1
    dbba:	e000      	b.n	dbbe <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    dbbc:	2300      	movs	r3, #0
    dbbe:	7313      	strb	r3, [r2, #12]
    dbc0:	8548      	strh	r0, [r1, #42]	; 0x2a
    dbc2:	8950      	ldrh	r0, [r2, #10]
    dbc4:	85c8      	strh	r0, [r1, #46]	; 0x2e
    dbc6:	8890      	ldrh	r0, [r2, #4]
    dbc8:	8588      	strh	r0, [r1, #44]	; 0x2c
    dbca:	88d0      	ldrh	r0, [r2, #6]
    dbcc:	8608      	strh	r0, [r1, #48]	; 0x30
    dbce:	2001      	movs	r0, #1
    dbd0:	7010      	strb	r0, [r2, #0]
    dbd2:	bd70      	pop	{r4, r5, r6, pc}

0000dbd4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    dbd4:	b510      	push	{r4, lr}
    dbd6:	888c      	ldrh	r4, [r1, #4]
    dbd8:	890a      	ldrh	r2, [r1, #8]
    dbda:	884b      	ldrh	r3, [r1, #2]
    dbdc:	88c9      	ldrh	r1, [r1, #6]
    dbde:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    dbe2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    dbe6:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    dbea:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    dbee:	bd10      	pop	{r4, pc}

0000dbf0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    dbf0:	b570      	push	{r4, r5, r6, lr}
    dbf2:	4615      	mov	r5, r2
    dbf4:	460c      	mov	r4, r1
    dbf6:	f000 f8c3 	bl	dd80 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dbfa:	3096      	adds	r0, #150	; 0x96
    dbfc:	4428      	add	r0, r5
    dbfe:	42a0      	cmp	r0, r4
    dc00:	d801      	bhi.n	dc06 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    dc02:	1a20      	subs	r0, r4, r0
    dc04:	bd70      	pop	{r4, r5, r6, pc}
    dc06:	2000      	movs	r0, #0
    dc08:	bd70      	pop	{r4, r5, r6, pc}

0000dc0a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    dc0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc0e:	4604      	mov	r4, r0
    dc10:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    dc12:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    dc14:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    dc18:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    dc1a:	4285      	cmp	r5, r0
    dc1c:	d300      	bcc.n	dc20 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    dc1e:	4605      	mov	r5, r0
    dc20:	4620      	mov	r0, r4
    dc22:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    dc26:	f000 f89b 	bl	dd60 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dc2a:	4601      	mov	r1, r0
    dc2c:	8665      	strh	r5, [r4, #50]	; 0x32
    dc2e:	86e1      	strh	r1, [r4, #54]	; 0x36
    dc30:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    dc32:	f104 0028 	add.w	r0, r4, #40	; 0x28
    dc36:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    dc38:	4680      	mov	r8, r0
    dc3a:	42aa      	cmp	r2, r5
    dc3c:	d200      	bcs.n	dc40 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    dc3e:	462a      	mov	r2, r5
    dc40:	428b      	cmp	r3, r1
    dc42:	d200      	bcs.n	dc46 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    dc44:	460b      	mov	r3, r1
    dc46:	8202      	strh	r2, [r0, #16]
    dc48:	f8a8 3012 	strh.w	r3, [r8, #18]
    dc4c:	42bd      	cmp	r5, r7
    dc4e:	d101      	bne.n	dc54 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    dc50:	42b1      	cmp	r1, r6
    dc52:	d001      	beq.n	dc58 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    dc54:	2001      	movs	r0, #1
    dc56:	e000      	b.n	dc5a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dc58:	2000      	movs	r0, #0
    dc5a:	4681      	mov	r9, r0
    dc5c:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
    dc60:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    dc62:	8e27      	ldrh	r7, [r4, #48]	; 0x30
    dc64:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    dc66:	4285      	cmp	r5, r0
    dc68:	d300      	bcc.n	dc6c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    dc6a:	4605      	mov	r5, r0
    dc6c:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    dc70:	4620      	mov	r0, r4
    dc72:	f000 f87d 	bl	dd70 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dc76:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    dc7a:	2902      	cmp	r1, #2
    dc7c:	d108      	bne.n	dc90 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    dc7e:	42af      	cmp	r7, r5
    dc80:	d200      	bcs.n	dc84 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    dc82:	463d      	mov	r5, r7
    dc84:	4286      	cmp	r6, r0
    dc86:	d200      	bcs.n	dc8a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    dc88:	4630      	mov	r0, r6
    dc8a:	2100      	movs	r1, #0
    dc8c:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    dc90:	f8a8 5008 	strh.w	r5, [r8, #8]
    dc94:	f8a8 000c 	strh.w	r0, [r8, #12]
    dc98:	42bd      	cmp	r5, r7
    dc9a:	d101      	bne.n	dca0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    dc9c:	42b0      	cmp	r0, r6
    dc9e:	d001      	beq.n	dca4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dca0:	2001      	movs	r0, #1
    dca2:	e000      	b.n	dca6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    dca4:	2000      	movs	r0, #0
    dca6:	ea40 0009 	orr.w	r0, r0, r9
    dcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dcae <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcb2:	4616      	mov	r6, r2
    dcb4:	460f      	mov	r7, r1
    dcb6:	4604      	mov	r4, r0
    dcb8:	f000 f862 	bl	dd80 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dcbc:	4605      	mov	r5, r0
    dcbe:	463a      	mov	r2, r7
    dcc0:	6861      	ldr	r1, [r4, #4]
    dcc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dcc4:	f000 f847 	bl	dd56 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dcc8:	19a9      	adds	r1, r5, r6
    dcca:	4281      	cmp	r1, r0
    dccc:	d300      	bcc.n	dcd0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dcce:	4608      	mov	r0, r1
    dcd0:	62e0      	str	r0, [r4, #44]	; 0x2c
    dcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dcd6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dcd6:	221b      	movs	r2, #27
    dcd8:	8402      	strh	r2, [r0, #32]
    dcda:	8382      	strh	r2, [r0, #28]
    dcdc:	82c2      	strh	r2, [r0, #22]
    dcde:	8282      	strh	r2, [r0, #20]
    dce0:	8142      	strh	r2, [r0, #10]
    dce2:	8202      	strh	r2, [r0, #16]
    dce4:	8102      	strh	r2, [r0, #8]
    dce6:	8542      	strh	r2, [r0, #42]	; 0x2a
    dce8:	8582      	strh	r2, [r0, #44]	; 0x2c
    dcea:	8482      	strh	r2, [r0, #36]	; 0x24
    dcec:	2900      	cmp	r1, #0
    dcee:	d10a      	bne.n	dd06 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    dcf0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dcf4:	8441      	strh	r1, [r0, #34]	; 0x22
    dcf6:	83c1      	strh	r1, [r0, #30]
    dcf8:	8341      	strh	r1, [r0, #26]
    dcfa:	8301      	strh	r1, [r0, #24]
    dcfc:	81c1      	strh	r1, [r0, #14]
    dcfe:	8241      	strh	r1, [r0, #18]
    dd00:	8181      	strh	r1, [r0, #12]
    dd02:	85c1      	strh	r1, [r0, #46]	; 0x2e
    dd04:	8601      	strh	r1, [r0, #48]	; 0x30
    dd06:	4770      	bx	lr

0000dd08 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    dd08:	6800      	ldr	r0, [r0, #0]
    dd0a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    dd0e:	4290      	cmp	r0, r2
    dd10:	d903      	bls.n	dd1a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dd12:	1a40      	subs	r0, r0, r1
    dd14:	389c      	subs	r0, #156	; 0x9c
    dd16:	0840      	lsrs	r0, r0, #1
    dd18:	4770      	bx	lr
    dd1a:	2000      	movs	r0, #0
    dd1c:	4770      	bx	lr

0000dd1e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    dd1e:	b510      	push	{r4, lr}
    dd20:	9c02      	ldr	r4, [sp, #8]
    dd22:	8281      	strh	r1, [r0, #20]
    dd24:	82c2      	strh	r2, [r0, #22]
    dd26:	8303      	strh	r3, [r0, #24]
    dd28:	8344      	strh	r4, [r0, #26]
    dd2a:	bd10      	pop	{r4, pc}

0000dd2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    dd2c:	8050      	strh	r0, [r2, #2]
    dd2e:	8a88      	ldrh	r0, [r1, #20]
    dd30:	8090      	strh	r0, [r2, #4]
    dd32:	8ac8      	ldrh	r0, [r1, #22]
    dd34:	80d0      	strh	r0, [r2, #6]
    dd36:	8b08      	ldrh	r0, [r1, #24]
    dd38:	8110      	strh	r0, [r2, #8]
    dd3a:	8b48      	ldrh	r0, [r1, #26]
    dd3c:	8150      	strh	r0, [r2, #10]
    dd3e:	2001      	movs	r0, #1
    dd40:	7010      	strb	r0, [r2, #0]
    dd42:	4770      	bx	lr
    dd44:	2902      	cmp	r1, #2
    dd46:	d003      	beq.n	dd50 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    dd48:	00c0      	lsls	r0, r0, #3
    dd4a:	3070      	adds	r0, #112	; 0x70
    dd4c:	b280      	uxth	r0, r0
    dd4e:	4770      	bx	lr
    dd50:	0080      	lsls	r0, r0, #2
    dd52:	303c      	adds	r0, #60	; 0x3c
    dd54:	e7fa      	b.n	dd4c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    dd56:	4288      	cmp	r0, r1
    dd58:	d300      	bcc.n	dd5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    dd5a:	4608      	mov	r0, r1
    dd5c:	1a80      	subs	r0, r0, r2
    dd5e:	4770      	bx	lr
    dd60:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    dd64:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    dd68:	4281      	cmp	r1, r0
    dd6a:	d200      	bcs.n	dd6e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    dd6c:	4608      	mov	r0, r1
    dd6e:	4770      	bx	lr
    dd70:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    dd74:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
    dd78:	4281      	cmp	r1, r0
    dd7a:	d200      	bcs.n	dd7e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    dd7c:	4608      	mov	r0, r1
    dd7e:	4770      	bx	lr
    dd80:	2196      	movs	r1, #150	; 0x96
    dd82:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    dd86:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    dd8a:	f000 b800 	b.w	dd8e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    dd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd92:	460d      	mov	r5, r1
    dd94:	4606      	mov	r6, r0
    dd96:	4698      	mov	r8, r3
    dd98:	4617      	mov	r7, r2
    dd9a:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    dd9c:	4611      	mov	r1, r2
    dd9e:	f7ff ffd1 	bl	dd44 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    dda2:	4604      	mov	r4, r0
    dda4:	4639      	mov	r1, r7
    dda6:	4630      	mov	r0, r6
    dda8:	f7ff ffe2 	bl	dd70 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ddac:	42a0      	cmp	r0, r4
    ddae:	d200      	bcs.n	ddb2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    ddb0:	4604      	mov	r4, r0
    ddb2:	8f30      	ldrh	r0, [r6, #56]	; 0x38
    ddb4:	4641      	mov	r1, r8
    ddb6:	f7ff ffc5 	bl	dd44 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ddba:	4607      	mov	r7, r0
    ddbc:	4641      	mov	r1, r8
    ddbe:	4630      	mov	r0, r6
    ddc0:	f7ff ffce 	bl	dd60 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ddc4:	42b8      	cmp	r0, r7
    ddc6:	d300      	bcc.n	ddca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    ddc8:	4638      	mov	r0, r7
    ddca:	4420      	add	r0, r4
    ddcc:	4428      	add	r0, r5
    ddce:	1d80      	adds	r0, r0, #6
    ddd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddd4:	2801      	cmp	r0, #1
    ddd6:	d102      	bne.n	ddde <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    ddd8:	7948      	ldrb	r0, [r1, #5]
    ddda:	0980      	lsrs	r0, r0, #6
    dddc:	d001      	beq.n	dde2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    ddde:	2000      	movs	r0, #0
    dde0:	4770      	bx	lr
    dde2:	2001      	movs	r0, #1
    dde4:	4770      	bx	lr
    dde6:	2801      	cmp	r0, #1
    dde8:	d106      	bne.n	ddf8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    ddea:	7948      	ldrb	r0, [r1, #5]
    ddec:	2101      	movs	r1, #1
    ddee:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ddf2:	d101      	bne.n	ddf8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    ddf4:	2001      	movs	r0, #1
    ddf6:	4770      	bx	lr
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr
    ddfc:	2802      	cmp	r0, #2
    ddfe:	d003      	beq.n	de08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    de00:	2803      	cmp	r0, #3
    de02:	d001      	beq.n	de08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    de04:	2000      	movs	r0, #0
    de06:	4770      	bx	lr
    de08:	2001      	movs	r0, #1
    de0a:	4770      	bx	lr

0000de0c <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>:
    de0c:	4770      	bx	lr

0000de0e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    de0e:	b500      	push	{lr}
    de10:	2000      	movs	r0, #0
    de12:	f7f8 fc69 	bl	66e8 <sym_7M3JUUGD5O2FPMBCNLYSNKUZ5ZOQOWLN7Y6RMLQ>
    de16:	b108      	cbz	r0, de1c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xe>
    de18:	2000      	movs	r0, #0
    de1a:	bd00      	pop	{pc}
    de1c:	201f      	movs	r0, #31
    de1e:	bd00      	pop	{pc}

0000de20 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    de20:	f7f9 b8ce 	b.w	6fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>

0000de24 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    de24:	2001      	movs	r0, #1
    de26:	4770      	bx	lr

0000de28 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    de28:	2001      	movs	r0, #1
    de2a:	4770      	bx	lr

0000de2c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    de2c:	2000      	movs	r0, #0
    de2e:	4770      	bx	lr

0000de30 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    de30:	2001      	movs	r0, #1
    de32:	4770      	bx	lr

0000de34 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    de34:	2001      	movs	r0, #1
    de36:	4770      	bx	lr
    de38:	b510      	push	{r4, lr}
    de3a:	f7ff fa38 	bl	d2ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    de3e:	4604      	mov	r4, r0
    de40:	f7f7 fd94 	bl	596c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    de44:	b138      	cbz	r0, de56 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x22>
    de46:	4620      	mov	r0, r4
    de48:	f7f7 fcc8 	bl	57dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    de4c:	b118      	cbz	r0, de56 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x22>
    de4e:	2110      	movs	r1, #16
    de50:	f7ff fc1f 	bl	d692 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    de54:	b108      	cbz	r0, de5a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x26>
    de56:	2000      	movs	r0, #0
    de58:	bd10      	pop	{r4, pc}
    de5a:	2001      	movs	r0, #1
    de5c:	bd10      	pop	{r4, pc}
    de5e:	2001      	movs	r0, #1
    de60:	f7f8 bd1e 	b.w	68a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    de64:	2001      	movs	r0, #1
    de66:	f7f8 bd1b 	b.w	68a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    de6a:	b510      	push	{r4, lr}
    de6c:	f7f8 fe92 	bl	6b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    de70:	2800      	cmp	r0, #0
    de72:	d102      	bne.n	de7a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x46>
    de74:	f7f8 fd14 	bl	68a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    de78:	2000      	movs	r0, #0
    de7a:	bd10      	pop	{r4, pc}
    de7c:	2001      	movs	r0, #1
    de7e:	f7f8 bd0f 	b.w	68a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    de82:	7802      	ldrb	r2, [r0, #0]
    de84:	2320      	movs	r3, #32
    de86:	f022 0220 	bic.w	r2, r2, #32
    de8a:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    de8e:	430a      	orrs	r2, r1
    de90:	7002      	strb	r2, [r0, #0]
    de92:	4770      	bx	lr

0000de94 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    de94:	b570      	push	{r4, r5, r6, lr}
    de96:	7001      	strb	r1, [r0, #0]
    de98:	7042      	strb	r2, [r0, #1]
    de9a:	4614      	mov	r4, r2
    de9c:	460d      	mov	r5, r1
    de9e:	7880      	ldrb	r0, [r0, #2]
    dea0:	f000 f87f 	bl	dfa2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dea4:	fb10 f005 	smulbb	r0, r0, r5
    dea8:	4360      	muls	r0, r4
    deaa:	28ff      	cmp	r0, #255	; 0xff
    deac:	d303      	bcc.n	deb6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    deae:	215c      	movs	r1, #92	; 0x5c
    deb0:	202e      	movs	r0, #46	; 0x2e
    deb2:	f7f6 f899 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deb6:	bd70      	pop	{r4, r5, r6, pc}

0000deb8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    deb8:	b510      	push	{r4, lr}
    deba:	4604      	mov	r4, r0
    debc:	7880      	ldrb	r0, [r0, #2]
    debe:	f000 f870 	bl	dfa2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dec2:	7861      	ldrb	r1, [r4, #1]
    dec4:	7822      	ldrb	r2, [r4, #0]
    dec6:	fb11 f102 	smulbb	r1, r1, r2
    deca:	4348      	muls	r0, r1
    decc:	b2c0      	uxtb	r0, r0
    dece:	bd10      	pop	{r4, pc}

0000ded0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ded0:	b510      	push	{r4, lr}
    ded2:	4604      	mov	r4, r0
    ded4:	f000 f84d 	bl	df72 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ded8:	7961      	ldrb	r1, [r4, #5]
    deda:	1c49      	adds	r1, r1, #1
    dedc:	b2c9      	uxtb	r1, r1
    dede:	7161      	strb	r1, [r4, #5]
    dee0:	7862      	ldrb	r2, [r4, #1]
    dee2:	4291      	cmp	r1, r2
    dee4:	d10b      	bne.n	defe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dee6:	2200      	movs	r2, #0
    dee8:	7162      	strb	r2, [r4, #5]
    deea:	78e1      	ldrb	r1, [r4, #3]
    deec:	4301      	orrs	r1, r0
    deee:	70e1      	strb	r1, [r4, #3]
    def0:	78a3      	ldrb	r3, [r4, #2]
    def2:	4299      	cmp	r1, r3
    def4:	d103      	bne.n	defe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    def6:	70e2      	strb	r2, [r4, #3]
    def8:	7921      	ldrb	r1, [r4, #4]
    defa:	1c49      	adds	r1, r1, #1
    defc:	7121      	strb	r1, [r4, #4]
    defe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df02:	f000 b825 	b.w	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000df06 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    df06:	7081      	strb	r1, [r0, #2]
    df08:	4770      	bx	lr

0000df0a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    df0a:	b570      	push	{r4, r5, r6, lr}
    df0c:	4604      	mov	r4, r0
    df0e:	7880      	ldrb	r0, [r0, #2]
    df10:	f000 f847 	bl	dfa2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    df14:	7861      	ldrb	r1, [r4, #1]
    df16:	fb11 f500 	smulbb	r5, r1, r0
    df1a:	78e0      	ldrb	r0, [r4, #3]
    df1c:	f000 f841 	bl	dfa2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    df20:	7861      	ldrb	r1, [r4, #1]
    df22:	7962      	ldrb	r2, [r4, #5]
    df24:	fb10 2001 	smlabb	r0, r0, r1, r2
    df28:	7821      	ldrb	r1, [r4, #0]
    df2a:	7922      	ldrb	r2, [r4, #4]
    df2c:	1a89      	subs	r1, r1, r2
    df2e:	fb11 f105 	smulbb	r1, r1, r5
    df32:	1a08      	subs	r0, r1, r0
    df34:	b2c0      	uxtb	r0, r0
    df36:	bd70      	pop	{r4, r5, r6, pc}

0000df38 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    df38:	2100      	movs	r1, #0
    df3a:	6001      	str	r1, [r0, #0]
    df3c:	8081      	strh	r1, [r0, #4]
    df3e:	2101      	movs	r1, #1
    df40:	7041      	strb	r1, [r0, #1]
    df42:	7001      	strb	r1, [r0, #0]
    df44:	4770      	bx	lr

0000df46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    df46:	2100      	movs	r1, #0
    df48:	70c1      	strb	r1, [r0, #3]
    df4a:	7141      	strb	r1, [r0, #5]
    df4c:	7101      	strb	r1, [r0, #4]
    df4e:	4770      	bx	lr
    df50:	b510      	push	{r4, lr}
    df52:	2801      	cmp	r0, #1
    df54:	d007      	beq.n	df66 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    df56:	2802      	cmp	r0, #2
    df58:	d007      	beq.n	df6a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    df5a:	2804      	cmp	r0, #4
    df5c:	d007      	beq.n	df6e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    df5e:	2139      	movs	r1, #57	; 0x39
    df60:	202e      	movs	r0, #46	; 0x2e
    df62:	f7f6 f841 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df66:	2025      	movs	r0, #37	; 0x25
    df68:	bd10      	pop	{r4, pc}
    df6a:	2026      	movs	r0, #38	; 0x26
    df6c:	bd10      	pop	{r4, pc}
    df6e:	2027      	movs	r0, #39	; 0x27
    df70:	bd10      	pop	{r4, pc}
    df72:	4601      	mov	r1, r0
    df74:	2000      	movs	r0, #0
    df76:	788a      	ldrb	r2, [r1, #2]
    df78:	07d3      	lsls	r3, r2, #31
    df7a:	d002      	beq.n	df82 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    df7c:	78cb      	ldrb	r3, [r1, #3]
    df7e:	07db      	lsls	r3, r3, #31
    df80:	d006      	beq.n	df90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    df82:	0793      	lsls	r3, r2, #30
    df84:	d506      	bpl.n	df94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    df86:	78cb      	ldrb	r3, [r1, #3]
    df88:	079b      	lsls	r3, r3, #30
    df8a:	d403      	bmi.n	df94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    df8c:	2002      	movs	r0, #2
    df8e:	4770      	bx	lr
    df90:	2001      	movs	r0, #1
    df92:	4770      	bx	lr
    df94:	0752      	lsls	r2, r2, #29
    df96:	d5fc      	bpl.n	df92 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    df98:	78c9      	ldrb	r1, [r1, #3]
    df9a:	0749      	lsls	r1, r1, #29
    df9c:	d4f9      	bmi.n	df92 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    df9e:	2004      	movs	r0, #4
    dfa0:	4770      	bx	lr
    dfa2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    dfa6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    dfaa:	4411      	add	r1, r2
    dfac:	f000 0001 	and.w	r0, r0, #1
    dfb0:	4408      	add	r0, r1
    dfb2:	4770      	bx	lr

0000dfb4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    dfb4:	f240 315a 	movw	r1, #858	; 0x35a
    dfb8:	4348      	muls	r0, r1
    dfba:	4770      	bx	lr

0000dfbc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    dfbc:	f240 20ef 	movw	r0, #751	; 0x2ef
    dfc0:	4770      	bx	lr
    dfc2:	020e      	.short	0x020e
    dfc4:	0630041c 	.word	0x0630041c
    dfc8:	035a0c60 	.word	0x035a0c60
    dfcc:	05c506b4 	.word	0x05c506b4
    dfd0:	12250bf5 	.word	0x12250bf5
    dfd4:	03b101a3 	.word	0x03b101a3
    dfd8:	02ef05bf 	.word	0x02ef05bf
    dfdc:	09a30649 	.word	0x09a30649

0000dfe0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    dfe0:	b510      	push	{r4, lr}
    dfe2:	2000      	movs	r0, #0
    dfe4:	f7f9 fb10 	bl	7608 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    dfe8:	f7f9 fc58 	bl	789c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    dfec:	2000      	movs	r0, #0
    dfee:	bd10      	pop	{r4, pc}

0000dff0 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>:
    dff0:	b538      	push	{r3, r4, r5, lr}
    dff2:	2500      	movs	r5, #0
    dff4:	4604      	mov	r4, r0
    dff6:	f880 512c 	strb.w	r5, [r0, #300]	; 0x12c
    dffa:	f8a0 515c 	strh.w	r5, [r0, #348]	; 0x15c
    dffe:	462b      	mov	r3, r5
    e000:	462a      	mov	r2, r5
    e002:	4629      	mov	r1, r5
    e004:	9500      	str	r5, [sp, #0]
    e006:	f7f9 fddb 	bl	7bc0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x474>
    e00a:	b120      	cbz	r0, e016 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA+0x26>
    e00c:	f240 2117 	movw	r1, #535	; 0x217
    e010:	2030      	movs	r0, #48	; 0x30
    e012:	f7f5 ffe9 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e016:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e01a:	2001      	movs	r0, #1
    e01c:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    e020:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e024:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    e028:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    e02c:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    e030:	f834 0f70 	ldrh.w	r0, [r4, #112]!
    e034:	1e40      	subs	r0, r0, #1
    e036:	f824 0bb8 	strh.w	r0, [r4], #184
    e03a:	2000      	movs	r0, #0
    e03c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e03e:	bd38      	pop	{r3, r4, r5, pc}

0000e040 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
    e040:	b510      	push	{r4, lr}
    e042:	4604      	mov	r4, r0
    e044:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    e048:	f000 f8af 	bl	e1aa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x14e>
    e04c:	4602      	mov	r2, r0
    e04e:	4620      	mov	r0, r4
    e050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e054:	f240 111b 	movw	r1, #283	; 0x11b
    e058:	f7ff be29 	b.w	dcae <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

0000e05c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e05c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e05e:	4604      	mov	r4, r0
    e060:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e064:	2800      	cmp	r0, #0
    e066:	d153      	bne.n	e110 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e068:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e06c:	2803      	cmp	r0, #3
    e06e:	d14f      	bne.n	e110 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e070:	f7fd fec2 	bl	bdf8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e074:	4601      	mov	r1, r0
    e076:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e07a:	f7f3 fc5d 	bl	1938 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e07e:	2800      	cmp	r0, #0
    e080:	dd46      	ble.n	e110 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e082:	6861      	ldr	r1, [r4, #4]
    e084:	b111      	cbz	r1, e08c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e086:	fbb0 f0f1 	udiv	r0, r0, r1
    e08a:	e000      	b.n	e08e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e08c:	2000      	movs	r0, #0
    e08e:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    e092:	1c40      	adds	r0, r0, #1
    e094:	4408      	add	r0, r1
    e096:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e09a:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e09e:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e0a2:	1a08      	subs	r0, r1, r0
    e0a4:	b200      	sxth	r0, r0
    e0a6:	2800      	cmp	r0, #0
    e0a8:	dd32      	ble.n	e110 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0aa:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e0ae:	f7f4 f96d 	bl	238c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e0b2:	2800      	cmp	r0, #0
    e0b4:	d02c      	beq.n	e110 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0b6:	2001      	movs	r0, #1
    e0b8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e0bc:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e0c0:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e0c4:	ae01      	add	r6, sp, #4
    e0c6:	1a40      	subs	r0, r0, r1
    e0c8:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    e0cc:	1e40      	subs	r0, r0, #1
    e0ce:	4408      	add	r0, r1
    e0d0:	b285      	uxth	r5, r0
    e0d2:	e017      	b.n	e104 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e0d4:	9600      	str	r6, [sp, #0]
    e0d6:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e0da:	2300      	movs	r3, #0
    e0dc:	2201      	movs	r2, #1
    e0de:	4620      	mov	r0, r4
    e0e0:	f7f9 fd6e 	bl	7bc0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x474>
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d013      	beq.n	e110 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0e8:	2801      	cmp	r0, #1
    e0ea:	d004      	beq.n	e0f6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e0ec:	f240 51ec 	movw	r1, #1516	; 0x5ec
    e0f0:	2030      	movs	r0, #48	; 0x30
    e0f2:	f7f5 ff79 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0f6:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e0fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e0fe:	4408      	add	r0, r1
    e100:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e104:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e108:	1a28      	subs	r0, r5, r0
    e10a:	b200      	sxth	r0, r0
    e10c:	2800      	cmp	r0, #0
    e10e:	dae1      	bge.n	e0d4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e110:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e112:	2000      	movs	r0, #0
    e114:	4770      	bx	lr
    e116:	b510      	push	{r4, lr}
    e118:	2000      	movs	r0, #0
    e11a:	f7f8 fa03 	bl	6524 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e11e:	f200 100d 	addw	r0, r0, #269	; 0x10d
    e122:	bd10      	pop	{r4, pc}
    e124:	b510      	push	{r4, lr}
    e126:	f7fd f917 	bl	b358 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e12e:	f7f4 bb87 	b.w	2840 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e132:	b570      	push	{r4, r5, r6, lr}
    e134:	460c      	mov	r4, r1
    e136:	4605      	mov	r5, r0
    e138:	f000 ff76 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e13c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e140:	4408      	add	r0, r1
    e142:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e146:	fbb0 f6f1 	udiv	r6, r0, r1
    e14a:	4628      	mov	r0, r5
    e14c:	f000 ff5e 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e150:	4430      	add	r0, r6
    e152:	4420      	add	r0, r4
    e154:	bd70      	pop	{r4, r5, r6, pc}
    e156:	f7f3 bd05 	b.w	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e15a:	b510      	push	{r4, lr}
    e15c:	4604      	mov	r4, r0
    e15e:	2000      	movs	r0, #0
    e160:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e164:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e168:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e16c:	f204 1441 	addw	r4, r4, #321	; 0x141
    e170:	f7f7 fe48 	bl	5e04 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    e174:	7fe0      	ldrb	r0, [r4, #31]
    e176:	f7f4 fa15 	bl	25a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e17a:	2020      	movs	r0, #32
    e17c:	77e0      	strb	r0, [r4, #31]
    e17e:	bd10      	pop	{r4, pc}
    e180:	b508      	push	{r3, lr}
    e182:	2800      	cmp	r0, #0
    e184:	f04f 0101 	mov.w	r1, #1
    e188:	4668      	mov	r0, sp
    e18a:	d002      	beq.n	e192 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x136>
    e18c:	f7f5 ffbc 	bl	4108 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e190:	e001      	b.n	e196 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    e192:	f7f5 ffc7 	bl	4124 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e196:	f89d 0000 	ldrb.w	r0, [sp]
    e19a:	f242 7110 	movw	r1, #10000	; 0x2710
    e19e:	0200      	lsls	r0, r0, #8
    e1a0:	fbb0 f2f1 	udiv	r2, r0, r1
    e1a4:	fb01 0012 	mls	r0, r1, r2, r0
    e1a8:	bd08      	pop	{r3, pc}
    e1aa:	b510      	push	{r4, lr}
    e1ac:	f000 ff3c 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e1b0:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e1b4:	4408      	add	r0, r1
    e1b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e1ba:	fbb0 f0f1 	udiv	r0, r0, r1
    e1be:	f500 70bc 	add.w	r0, r0, #376	; 0x178
    e1c2:	bd10      	pop	{r4, pc}
    e1c4:	00fa01f4 	.word	0x00fa01f4
    e1c8:	00640096 	.word	0x00640096
    e1cc:	0032004b 	.word	0x0032004b
    e1d0:	0014001e 	.word	0x0014001e
    e1d4:	0005000a 	.word	0x0005000a
    e1d8:	00010002 	.word	0x00010002
    e1dc:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e1e0:	f001 0307 	and.w	r3, r1, #7
    e1e4:	7802      	ldrb	r2, [r0, #0]
    e1e6:	2101      	movs	r1, #1
    e1e8:	4099      	lsls	r1, r3
    e1ea:	438a      	bics	r2, r1
    e1ec:	7002      	strb	r2, [r0, #0]
    e1ee:	4770      	bx	lr

0000e1f0 <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
    e1f0:	b570      	push	{r4, r5, r6, lr}
    e1f2:	460c      	mov	r4, r1
    e1f4:	4605      	mov	r5, r0
    e1f6:	f44f 7204 	mov.w	r2, #528	; 0x210
    e1fa:	2100      	movs	r1, #0
    e1fc:	4620      	mov	r0, r4
    e1fe:	f7fd ffea 	bl	c1d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e202:	8025      	strh	r5, [r4, #0]
    e204:	bd70      	pop	{r4, r5, r6, pc}

0000e206 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e206:	f7f6 ba91 	b.w	472c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e20a <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e20a:	2000      	movs	r0, #0
    e20c:	4770      	bx	lr

0000e20e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e20e:	f7f6 bebd 	b.w	4f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e212 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e212:	2100      	movs	r1, #0
    e214:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    e218:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e21c:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    e220:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e224:	b109      	cbz	r1, e22a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e226:	2102      	movs	r1, #2
    e228:	e000      	b.n	e22c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e22a:	2103      	movs	r1, #3
    e22c:	f7f9 ba8e 	b.w	774c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e230:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    e234:	28fe      	cmp	r0, #254	; 0xfe
    e236:	d001      	beq.n	e23c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e238:	2001      	movs	r0, #1
    e23a:	4770      	bx	lr
    e23c:	2000      	movs	r0, #0
    e23e:	4770      	bx	lr
    e240:	b510      	push	{r4, lr}
    e242:	2801      	cmp	r0, #1
    e244:	d006      	beq.n	e254 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e246:	2802      	cmp	r0, #2
    e248:	d004      	beq.n	e254 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e24a:	f240 218f 	movw	r1, #655	; 0x28f
    e24e:	2006      	movs	r0, #6
    e250:	f7f5 feca 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e254:	bd10      	pop	{r4, pc}
    e256:	2801      	cmp	r0, #1
    e258:	d002      	beq.n	e260 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e25a:	2802      	cmp	r0, #2
    e25c:	d105      	bne.n	e26a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e25e:	e002      	b.n	e266 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e260:	2901      	cmp	r1, #1
    e262:	d004      	beq.n	e26e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e264:	e001      	b.n	e26a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e266:	2902      	cmp	r1, #2
    e268:	d001      	beq.n	e26e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e26a:	2000      	movs	r0, #0
    e26c:	4770      	bx	lr
    e26e:	2001      	movs	r0, #1
    e270:	4770      	bx	lr
    e272:	1a40      	subs	r0, r0, r1
    e274:	b200      	sxth	r0, r0
    e276:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e27a:	4288      	cmp	r0, r1
    e27c:	dc01      	bgt.n	e282 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e27e:	2800      	cmp	r0, #0
    e280:	dc01      	bgt.n	e286 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e282:	2001      	movs	r0, #1
    e284:	4770      	bx	lr
    e286:	2000      	movs	r0, #0
    e288:	4770      	bx	lr
    e28a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e28e:	f001 0107 	and.w	r1, r1, #7
    e292:	7800      	ldrb	r0, [r0, #0]
    e294:	2201      	movs	r2, #1
    e296:	408a      	lsls	r2, r1
    e298:	4010      	ands	r0, r2
    e29a:	40c8      	lsrs	r0, r1
    e29c:	4770      	bx	lr
    e29e:	b118      	cbz	r0, e2a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e2a0:	2802      	cmp	r0, #2
    e2a2:	d001      	beq.n	e2a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e2a4:	2001      	movs	r0, #1
    e2a6:	4770      	bx	lr
    e2a8:	2000      	movs	r0, #0
    e2aa:	4770      	bx	lr

0000e2ac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e2ac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e2b0:	7881      	ldrb	r1, [r0, #2]
    e2b2:	4604      	mov	r4, r0
    e2b4:	291a      	cmp	r1, #26
    e2b6:	d025      	beq.n	e304 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e2b8:	dc0e      	bgt.n	e2d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e2ba:	2916      	cmp	r1, #22
    e2bc:	d22e      	bcs.n	e31c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e2be:	e8df f001 	tbb	[pc, r1]
    e2c2:	2d2d      	.short	0x2d2d
    e2c4:	212d2d2d 	.word	0x212d2d2d
    e2c8:	2d2d2d2d 	.word	0x2d2d2d2d
    e2cc:	2d2d2d2d 	.word	0x2d2d2d2d
    e2d0:	2d2d2d2d 	.word	0x2d2d2d2d
    e2d4:	2121212d 	.word	0x2121212d
    e2d8:	292a      	cmp	r1, #42	; 0x2a
    e2da:	d01f      	beq.n	e31c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e2dc:	dc0b      	bgt.n	e2f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e2de:	f1a1 011e 	sub.w	r1, r1, #30
    e2e2:	290c      	cmp	r1, #12
    e2e4:	d21a      	bcs.n	e31c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e2e6:	e8df f001 	tbb	[pc, r1]
    e2ea:	1919      	.short	0x1919
    e2ec:	19191919 	.word	0x19191919
    e2f0:	19191919 	.word	0x19191919
    e2f4:	0d19      	.short	0x0d19
    e2f6:	393a      	subs	r1, #58	; 0x3a
    e2f8:	2904      	cmp	r1, #4
    e2fa:	d20f      	bcs.n	e31c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e2fc:	e8df f001 	tbb	[pc, r1]
    e300:	020e020e 	.word	0x020e020e
    e304:	8820      	ldrh	r0, [r4, #0]
    e306:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e30a:	d207      	bcs.n	e31c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e30c:	2701      	movs	r7, #1
    e30e:	4669      	mov	r1, sp
    e310:	f7ff f810 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e314:	b120      	cbz	r0, e320 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e316:	2002      	movs	r0, #2
    e318:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e31c:	2012      	movs	r0, #18
    e31e:	e7fb      	b.n	e318 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e320:	9d01      	ldr	r5, [sp, #4]
    e322:	4668      	mov	r0, sp
    e324:	462e      	mov	r6, r5
    e326:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e32a:	f206 1671 	addw	r6, r6, #369	; 0x171
    e32e:	f000 fd5d 	bl	edec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    e332:	b108      	cbz	r0, e338 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e334:	7828      	ldrb	r0, [r5, #0]
    e336:	b108      	cbz	r0, e33c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e338:	200c      	movs	r0, #12
    e33a:	e7ed      	b.n	e318 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e33c:	702f      	strb	r7, [r5, #0]
    e33e:	78a0      	ldrb	r0, [r4, #2]
    e340:	7030      	strb	r0, [r6, #0]
    e342:	4668      	mov	r0, sp
    e344:	f7ff fbcf 	bl	dae6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e348:	2000      	movs	r0, #0
    e34a:	e7e5      	b.n	e318 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e34c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e34c:	b510      	push	{r4, lr}
    e34e:	4604      	mov	r4, r0
    e350:	7800      	ldrb	r0, [r0, #0]
    e352:	b118      	cbz	r0, e35c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e354:	2801      	cmp	r0, #1
    e356:	d001      	beq.n	e35c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e358:	2012      	movs	r0, #18
    e35a:	bd10      	pop	{r4, pc}
    e35c:	f000 fd18 	bl	ed90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x266>
    e360:	b120      	cbz	r0, e36c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e362:	f7f7 fa67 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e366:	b108      	cbz	r0, e36c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e368:	200c      	movs	r0, #12
    e36a:	bd10      	pop	{r4, pc}
    e36c:	7820      	ldrb	r0, [r4, #0]
    e36e:	f7ff ff96 	bl	e29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e372:	1de2      	adds	r2, r4, #7
    e374:	f104 0317 	add.w	r3, r4, #23
    e378:	1c61      	adds	r1, r4, #1
    e37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e37e:	f7f7 ba8b 	b.w	5898 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e382 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e382:	b510      	push	{r4, lr}
    e384:	4604      	mov	r4, r0
    e386:	f000 fd7c 	bl	ee82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    e38a:	b108      	cbz	r0, e390 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e38c:	200c      	movs	r0, #12
    e38e:	bd10      	pop	{r4, pc}
    e390:	7820      	ldrb	r0, [r4, #0]
    e392:	b118      	cbz	r0, e39c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e394:	2801      	cmp	r0, #1
    e396:	d001      	beq.n	e39c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e398:	2012      	movs	r0, #18
    e39a:	bd10      	pop	{r4, pc}
    e39c:	f7ff ff7f 	bl	e29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e3a0:	1c61      	adds	r1, r4, #1
    e3a2:	f7f7 faf1 	bl	5988 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e3a6:	b108      	cbz	r0, e3ac <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e3a8:	2000      	movs	r0, #0
    e3aa:	bd10      	pop	{r4, pc}
    e3ac:	2007      	movs	r0, #7
    e3ae:	bd10      	pop	{r4, pc}

0000e3b0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e3b0:	b510      	push	{r4, lr}
    e3b2:	f000 fced 	bl	ed90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x266>
    e3b6:	b120      	cbz	r0, e3c2 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e3b8:	f7f7 fa3c 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e3bc:	b108      	cbz	r0, e3c2 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e3be:	200c      	movs	r0, #12
    e3c0:	bd10      	pop	{r4, pc}
    e3c2:	f7f7 faaf 	bl	5924 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e3c6:	2000      	movs	r0, #0
    e3c8:	bd10      	pop	{r4, pc}

0000e3ca <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e3ca:	b510      	push	{r4, lr}
    e3cc:	f000 fd59 	bl	ee82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    e3d0:	b108      	cbz	r0, e3d6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e3d2:	200c      	movs	r0, #12
    e3d4:	bd10      	pop	{r4, pc}
    e3d6:	f7f7 faff 	bl	59d8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e3da:	2000      	movs	r0, #0
    e3dc:	bd10      	pop	{r4, pc}

0000e3de <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e3de:	b510      	push	{r4, lr}
    e3e0:	460b      	mov	r3, r1
    e3e2:	2201      	movs	r2, #1
    e3e4:	f100 0110 	add.w	r1, r0, #16
    e3e8:	f7fe ff86 	bl	d2f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e3ec:	2000      	movs	r0, #0
    e3ee:	bd10      	pop	{r4, pc}

0000e3f0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e3f0:	b510      	push	{r4, lr}
    e3f2:	8800      	ldrh	r0, [r0, #0]
    e3f4:	2100      	movs	r1, #0
    e3f6:	f7fe fe64 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e3fa:	b118      	cbz	r0, e404 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e3fc:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e400:	b111      	cbz	r1, e408 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e402:	e007      	b.n	e414 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e404:	2002      	movs	r0, #2
    e406:	bd10      	pop	{r4, pc}
    e408:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    e40c:	2914      	cmp	r1, #20
    e40e:	d003      	beq.n	e418 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e410:	2915      	cmp	r1, #21
    e412:	d001      	beq.n	e418 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e414:	200c      	movs	r0, #12
    e416:	bd10      	pop	{r4, pc}
    e418:	2102      	movs	r1, #2
    e41a:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e41e:	2000      	movs	r0, #0
    e420:	bd10      	pop	{r4, pc}

0000e422 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e422:	b570      	push	{r4, r5, r6, lr}
    e424:	4605      	mov	r5, r0
    e426:	8800      	ldrh	r0, [r0, #0]
    e428:	2100      	movs	r1, #0
    e42a:	f7fe fe4a 	bl	d0c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e42e:	0004      	movs	r4, r0
    e430:	d003      	beq.n	e43a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e432:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e436:	b110      	cbz	r0, e43e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e438:	e00a      	b.n	e450 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
    e43a:	2002      	movs	r0, #2
    e43c:	bd70      	pop	{r4, r5, r6, pc}
    e43e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    e442:	2814      	cmp	r0, #20
    e444:	d001      	beq.n	e44a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e446:	2815      	cmp	r0, #21
    e448:	d102      	bne.n	e450 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
    e44a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e44e:	b108      	cbz	r0, e454 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
    e450:	200c      	movs	r0, #12
    e452:	bd70      	pop	{r4, r5, r6, pc}
    e454:	2210      	movs	r2, #16
    e456:	1ca9      	adds	r1, r5, #2
    e458:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e45c:	f7fd fe41 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e460:	2001      	movs	r0, #1
    e462:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e466:	2000      	movs	r0, #0
    e468:	bd70      	pop	{r4, r5, r6, pc}

0000e46a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e46a:	b510      	push	{r4, lr}
    e46c:	2108      	movs	r1, #8
    e46e:	f7f5 fe67 	bl	4140 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e472:	2000      	movs	r0, #0
    e474:	bd10      	pop	{r4, pc}

0000e476 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e476:	b510      	push	{r4, lr}
    e478:	4604      	mov	r4, r0
    e47a:	2000      	movs	r0, #0
    e47c:	f7f8 f954 	bl	6728 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e480:	7020      	strb	r0, [r4, #0]
    e482:	2000      	movs	r0, #0
    e484:	bd10      	pop	{r4, pc}

0000e486 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    e486:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e488:	460c      	mov	r4, r1
    e48a:	4605      	mov	r5, r0
    e48c:	8800      	ldrh	r0, [r0, #0]
    e48e:	4669      	mov	r1, sp
    e490:	f7fe ff50 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e494:	2200      	movs	r2, #0
    e496:	b128      	cbz	r0, e4a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    e498:	f8c4 2002 	str.w	r2, [r4, #2]
    e49c:	71a2      	strb	r2, [r4, #6]
    e49e:	8022      	strh	r2, [r4, #0]
    e4a0:	2002      	movs	r0, #2
    e4a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e4a4:	9901      	ldr	r1, [sp, #4]
    e4a6:	4608      	mov	r0, r1
    e4a8:	3170      	adds	r1, #112	; 0x70
    e4aa:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
    e4ae:	68c3      	ldr	r3, [r0, #12]
    e4b0:	f8c4 3002 	str.w	r3, [r4, #2]
    e4b4:	7c03      	ldrb	r3, [r0, #16]
    e4b6:	71a3      	strb	r3, [r4, #6]
    e4b8:	882b      	ldrh	r3, [r5, #0]
    e4ba:	8023      	strh	r3, [r4, #0]
    e4bc:	f891 3046 	ldrb.w	r3, [r1, #70]	; 0x46
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d1f2      	bne.n	e4aa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    e4c4:	2000      	movs	r0, #0
    e4c6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e4c8 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e4c8:	b510      	push	{r4, lr}
    e4ca:	4604      	mov	r4, r0
    e4cc:	f000 fc88 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    e4d0:	b140      	cbz	r0, e4e4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e4d2:	20fb      	movs	r0, #251	; 0xfb
    e4d4:	8020      	strh	r0, [r4, #0]
    e4d6:	f640 0148 	movw	r1, #2120	; 0x848
    e4da:	8061      	strh	r1, [r4, #2]
    e4dc:	80a0      	strh	r0, [r4, #4]
    e4de:	80e1      	strh	r1, [r4, #6]
    e4e0:	2000      	movs	r0, #0
    e4e2:	bd10      	pop	{r4, pc}
    e4e4:	2001      	movs	r0, #1
    e4e6:	bd10      	pop	{r4, pc}

0000e4e8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e4e8:	2108      	movs	r1, #8
    e4ea:	7001      	strb	r1, [r0, #0]
    e4ec:	2000      	movs	r0, #0
    e4ee:	4770      	bx	lr

0000e4f0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e4f0:	21d8      	movs	r1, #216	; 0xd8
    e4f2:	7001      	strb	r1, [r0, #0]
    e4f4:	2108      	movs	r1, #8
    e4f6:	7041      	strb	r1, [r0, #1]
    e4f8:	2000      	movs	r0, #0
    e4fa:	4770      	bx	lr

0000e4fc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e4fc:	2108      	movs	r1, #8
    e4fe:	7001      	strb	r1, [r0, #0]
    e500:	2000      	movs	r0, #0
    e502:	4770      	bx	lr

0000e504 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e504:	b510      	push	{r4, lr}
    e506:	4604      	mov	r4, r0
    e508:	7800      	ldrb	r0, [r0, #0]
    e50a:	b108      	cbz	r0, e510 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e50c:	2801      	cmp	r0, #1
    e50e:	d110      	bne.n	e532 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e510:	f000 fc3e 	bl	ed90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x266>
    e514:	b120      	cbz	r0, e520 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e516:	f7f7 f98d 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e51a:	b108      	cbz	r0, e520 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e51c:	200c      	movs	r0, #12
    e51e:	bd10      	pop	{r4, pc}
    e520:	7820      	ldrb	r0, [r4, #0]
    e522:	f7ff febc 	bl	e29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e526:	1c61      	adds	r1, r4, #1
    e528:	f7fe fecc 	bl	d2c4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e52c:	b108      	cbz	r0, e532 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e52e:	2000      	movs	r0, #0
    e530:	bd10      	pop	{r4, pc}
    e532:	2012      	movs	r0, #18
    e534:	bd10      	pop	{r4, pc}

0000e536 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e536:	b510      	push	{r4, lr}
    e538:	4604      	mov	r4, r0
    e53a:	f000 fca2 	bl	ee82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    e53e:	b108      	cbz	r0, e544 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e540:	200c      	movs	r0, #12
    e542:	bd10      	pop	{r4, pc}
    e544:	7820      	ldrb	r0, [r4, #0]
    e546:	b108      	cbz	r0, e54c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e548:	2801      	cmp	r0, #1
    e54a:	d107      	bne.n	e55c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e54c:	f7ff fea7 	bl	e29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e550:	1c61      	adds	r1, r4, #1
    e552:	f7fe fec6 	bl	d2e2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e556:	b108      	cbz	r0, e55c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e558:	2000      	movs	r0, #0
    e55a:	bd10      	pop	{r4, pc}
    e55c:	2012      	movs	r0, #18
    e55e:	bd10      	pop	{r4, pc}

0000e560 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e560:	b510      	push	{r4, lr}
    e562:	4604      	mov	r4, r0
    e564:	f000 fc14 	bl	ed90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x266>
    e568:	b108      	cbz	r0, e56e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e56a:	200c      	movs	r0, #12
    e56c:	bd10      	pop	{r4, pc}
    e56e:	7820      	ldrb	r0, [r4, #0]
    e570:	f000 0001 	and.w	r0, r0, #1
    e574:	f7f7 f958 	bl	5828 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e578:	2000      	movs	r0, #0
    e57a:	bd10      	pop	{r4, pc}

0000e57c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e57c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e57e:	4605      	mov	r5, r0
    e580:	7800      	ldrb	r0, [r0, #0]
    e582:	2400      	movs	r4, #0
    e584:	b180      	cbz	r0, e5a8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    e586:	f88d 4008 	strb.w	r4, [sp, #8]
    e58a:	f10d 0109 	add.w	r1, sp, #9
    e58e:	2001      	movs	r0, #1
    e590:	f7f6 fb56 	bl	4c40 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e594:	b140      	cbz	r0, e5a8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    e596:	a802      	add	r0, sp, #8
    e598:	f000 f88f 	bl	e6ba <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e59c:	b120      	cbz	r0, e5a8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    e59e:	f241 4184 	movw	r1, #5252	; 0x1484
    e5a2:	2039      	movs	r0, #57	; 0x39
    e5a4:	f7f5 fd20 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a8:	7828      	ldrb	r0, [r5, #0]
    e5aa:	f88d 0000 	strb.w	r0, [sp]
    e5ae:	2001      	movs	r0, #1
    e5b0:	f88d 0001 	strb.w	r0, [sp, #1]
    e5b4:	f88d 4002 	strb.w	r4, [sp, #2]
    e5b8:	2000      	movs	r0, #0
    e5ba:	f7f8 f89d 	bl	66f8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e5be:	b118      	cbz	r0, e5c8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x4c>
    e5c0:	2080      	movs	r0, #128	; 0x80
    e5c2:	f8ad 0003 	strh.w	r0, [sp, #3]
    e5c6:	e001      	b.n	e5cc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e5c8:	f8ad 4003 	strh.w	r4, [sp, #3]
    e5cc:	f88d 4005 	strb.w	r4, [sp, #5]
    e5d0:	4668      	mov	r0, sp
    e5d2:	f7fc f8cb 	bl	a76c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e5d6:	b004      	add	sp, #16
    e5d8:	bd70      	pop	{r4, r5, r6, pc}

0000e5da <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e5da:	b510      	push	{r4, lr}
    e5dc:	8841      	ldrh	r1, [r0, #2]
    e5de:	b08a      	sub	sp, #40	; 0x28
    e5e0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    e5e4:	d902      	bls.n	e5ec <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x12>
    e5e6:	2012      	movs	r0, #18
    e5e8:	b00a      	add	sp, #40	; 0x28
    e5ea:	bd10      	pop	{r4, pc}
    e5ec:	2400      	movs	r4, #0
    e5ee:	f88d 4004 	strb.w	r4, [sp, #4]
    e5f2:	7902      	ldrb	r2, [r0, #4]
    e5f4:	9400      	str	r4, [sp, #0]
    e5f6:	f89d 1000 	ldrb.w	r1, [sp]
    e5fa:	2a05      	cmp	r2, #5
    e5fc:	f041 0110 	orr.w	r1, r1, #16
    e600:	f88d 1000 	strb.w	r1, [sp]
    e604:	d254      	bcs.n	e6b0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xd6>
    e606:	e8df f002 	tbb	[pc, r2]
    e60a:	0803      	.short	0x0803
    e60c:	000b1105 	.word	0x000b1105
    e610:	f041 0101 	orr.w	r1, r1, #1
    e614:	f041 0102 	orr.w	r1, r1, #2
    e618:	e006      	b.n	e628 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x4e>
    e61a:	f041 0109 	orr.w	r1, r1, #9
    e61e:	e001      	b.n	e624 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x4a>
    e620:	f041 0101 	orr.w	r1, r1, #1
    e624:	f041 0104 	orr.w	r1, r1, #4
    e628:	f88d 1000 	strb.w	r1, [sp]
    e62c:	f8bd 1000 	ldrh.w	r1, [sp]
    e630:	9100      	str	r1, [sp, #0]
    e632:	f8bd 1000 	ldrh.w	r1, [sp]
    e636:	f8ad 1005 	strh.w	r1, [sp, #5]
    e63a:	8802      	ldrh	r2, [r0, #0]
    e63c:	f8dd 1006 	ldr.w	r1, [sp, #6]
    e640:	f362 211f 	bfi	r1, r2, #8, #24
    e644:	f8cd 1006 	str.w	r1, [sp, #6]
    e648:	8842      	ldrh	r2, [r0, #2]
    e64a:	f8dd 1009 	ldr.w	r1, [sp, #9]
    e64e:	f362 211f 	bfi	r1, r2, #8, #24
    e652:	f8cd 1009 	str.w	r1, [sp, #9]
    e656:	7b41      	ldrb	r1, [r0, #13]
    e658:	f88d 100d 	strb.w	r1, [sp, #13]
    e65c:	7941      	ldrb	r1, [r0, #5]
    e65e:	f88d 100e 	strb.w	r1, [sp, #14]
    e662:	7981      	ldrb	r1, [r0, #6]
    e664:	f88d 100f 	strb.w	r1, [sp, #15]
    e668:	f8d0 1007 	ldr.w	r1, [r0, #7]
    e66c:	9104      	str	r1, [sp, #16]
    e66e:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    e672:	f8ad 1014 	strh.w	r1, [sp, #20]
    e676:	7b80      	ldrb	r0, [r0, #14]
    e678:	f88d 0016 	strb.w	r0, [sp, #22]
    e67c:	207f      	movs	r0, #127	; 0x7f
    e67e:	f88d 0017 	strb.w	r0, [sp, #23]
    e682:	2001      	movs	r0, #1
    e684:	f88d 0018 	strb.w	r0, [sp, #24]
    e688:	f88d 4019 	strb.w	r4, [sp, #25]
    e68c:	f88d 001a 	strb.w	r0, [sp, #26]
    e690:	f88d 401b 	strb.w	r4, [sp, #27]
    e694:	2000      	movs	r0, #0
    e696:	f7f8 f895 	bl	67c4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    e69a:	f88d 001c 	strb.w	r0, [sp, #28]
    e69e:	f88d 401d 	strb.w	r4, [sp, #29]
    e6a2:	f88d 401e 	strb.w	r4, [sp, #30]
    e6a6:	a908      	add	r1, sp, #32
    e6a8:	a801      	add	r0, sp, #4
    e6aa:	f000 f8c5 	bl	e838 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    e6ae:	e79b      	b.n	e5e8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe>
    e6b0:	f241 015f 	movw	r1, #4191	; 0x105f
    e6b4:	2039      	movs	r0, #57	; 0x39
    e6b6:	f7f5 fc97 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6ba <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    e6ba:	b510      	push	{r4, lr}
    e6bc:	4604      	mov	r4, r0
    e6be:	2000      	movs	r0, #0
    e6c0:	f7f8 ffd0 	bl	7664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e6c4:	b148      	cbz	r0, e6da <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    e6c6:	2000      	movs	r0, #0
    e6c8:	f7f8 f81e 	bl	6708 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e6cc:	b918      	cbnz	r0, e6d6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x1c>
    e6ce:	2000      	movs	r0, #0
    e6d0:	f7f8 f802 	bl	66d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e6d4:	b108      	cbz	r0, e6da <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    e6d6:	200c      	movs	r0, #12
    e6d8:	bd10      	pop	{r4, pc}
    e6da:	7820      	ldrb	r0, [r4, #0]
    e6dc:	b108      	cbz	r0, e6e2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x28>
    e6de:	2042      	movs	r0, #66	; 0x42
    e6e0:	bd10      	pop	{r4, pc}
    e6e2:	1c61      	adds	r1, r4, #1
    e6e4:	2000      	movs	r0, #0
    e6e6:	f7f8 f835 	bl	6754 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    e6ea:	2000      	movs	r0, #0
    e6ec:	bd10      	pop	{r4, pc}

0000e6ee <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    e6ee:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e6f0:	460d      	mov	r5, r1
    e6f2:	4604      	mov	r4, r0
    e6f4:	f000 fb74 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    e6f8:	b130      	cbz	r0, e708 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    e6fa:	88a2      	ldrh	r2, [r4, #4]
    e6fc:	f244 2090 	movw	r0, #17040	; 0x4290
    e700:	4282      	cmp	r2, r0
    e702:	d903      	bls.n	e70c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    e704:	2012      	movs	r0, #18
    e706:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e708:	2001      	movs	r0, #1
    e70a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e70c:	f640 0048 	movw	r0, #2120	; 0x848
    e710:	4282      	cmp	r2, r0
    e712:	d300      	bcc.n	e716 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    e714:	4602      	mov	r2, r0
    e716:	8820      	ldrh	r0, [r4, #0]
    e718:	f8ad 0000 	strh.w	r0, [sp]
    e71c:	8860      	ldrh	r0, [r4, #2]
    e71e:	f8ad 0002 	strh.w	r0, [sp, #2]
    e722:	f8ad 2004 	strh.w	r2, [sp, #4]
    e726:	8860      	ldrh	r0, [r4, #2]
    e728:	f8ad 0006 	strh.w	r0, [sp, #6]
    e72c:	f8ad 2008 	strh.w	r2, [sp, #8]
    e730:	8820      	ldrh	r0, [r4, #0]
    e732:	8028      	strh	r0, [r5, #0]
    e734:	4668      	mov	r0, sp
    e736:	f7fc f907 	bl	a948 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    e73a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e73c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    e73c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e73e:	4604      	mov	r4, r0
    e740:	f7fc fa66 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e744:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e748:	b1b0      	cbz	r0, e778 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    e74a:	f10d 0007 	add.w	r0, sp, #7
    e74e:	9000      	str	r0, [sp, #0]
    e750:	7922      	ldrb	r2, [r4, #4]
    e752:	78e1      	ldrb	r1, [r4, #3]
    e754:	78a0      	ldrb	r0, [r4, #2]
    e756:	f10d 0306 	add.w	r3, sp, #6
    e75a:	f000 fb56 	bl	ee0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    e75e:	2800      	cmp	r0, #0
    e760:	d109      	bne.n	e776 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    e762:	8820      	ldrh	r0, [r4, #0]
    e764:	f8ad 0004 	strh.w	r0, [sp, #4]
    e768:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    e76c:	f8ad 0008 	strh.w	r0, [sp, #8]
    e770:	a801      	add	r0, sp, #4
    e772:	f000 f8e7 	bl	e944 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    e776:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e778:	2001      	movs	r0, #1
    e77a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e77c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    e77c:	b510      	push	{r4, lr}
    e77e:	4604      	mov	r4, r0
    e780:	f000 fb06 	bl	ed90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x266>
    e784:	b120      	cbz	r0, e790 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e786:	f7f7 f855 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e78a:	b108      	cbz	r0, e790 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e78c:	200c      	movs	r0, #12
    e78e:	bd10      	pop	{r4, pc}
    e790:	7820      	ldrb	r0, [r4, #0]
    e792:	f7ff fd84 	bl	e29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e796:	79e2      	ldrb	r2, [r4, #7]
    e798:	1c61      	adds	r1, r4, #1
    e79a:	f7f6 fff9 	bl	5790 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    e79e:	b108      	cbz	r0, e7a4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    e7a0:	2000      	movs	r0, #0
    e7a2:	bd10      	pop	{r4, pc}
    e7a4:	2002      	movs	r0, #2
    e7a6:	bd10      	pop	{r4, pc}

0000e7a8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    e7a8:	b510      	push	{r4, lr}
    e7aa:	4604      	mov	r4, r0
    e7ac:	2001      	movs	r0, #1
    e7ae:	f000 f9e3 	bl	eb78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    e7b2:	b128      	cbz	r0, e7c0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    e7b4:	4621      	mov	r1, r4
    e7b6:	2001      	movs	r0, #1
    e7b8:	f7f6 fa5a 	bl	4c70 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e7bc:	2000      	movs	r0, #0
    e7be:	bd10      	pop	{r4, pc}
    e7c0:	200c      	movs	r0, #12
    e7c2:	bd10      	pop	{r4, pc}

0000e7c4 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    e7c4:	b510      	push	{r4, lr}
    e7c6:	8800      	ldrh	r0, [r0, #0]
    e7c8:	f7f7 f8c2 	bl	5950 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    e7cc:	b108      	cbz	r0, e7d2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    e7ce:	2000      	movs	r0, #0
    e7d0:	bd10      	pop	{r4, pc}
    e7d2:	2030      	movs	r0, #48	; 0x30
    e7d4:	bd10      	pop	{r4, pc}

0000e7d6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    e7d6:	b51c      	push	{r2, r3, r4, lr}
    e7d8:	4604      	mov	r4, r0
    e7da:	f000 fb01 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    e7de:	b178      	cbz	r0, e800 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    e7e0:	8820      	ldrh	r0, [r4, #0]
    e7e2:	f8ad 0000 	strh.w	r0, [sp]
    e7e6:	8860      	ldrh	r0, [r4, #2]
    e7e8:	f8ad 0002 	strh.w	r0, [sp, #2]
    e7ec:	8820      	ldrh	r0, [r4, #0]
    e7ee:	f8ad 0004 	strh.w	r0, [sp, #4]
    e7f2:	8860      	ldrh	r0, [r4, #2]
    e7f4:	f8ad 0006 	strh.w	r0, [sp, #6]
    e7f8:	4668      	mov	r0, sp
    e7fa:	f7fc f943 	bl	aa84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x318>
    e7fe:	bd1c      	pop	{r2, r3, r4, pc}
    e800:	2001      	movs	r0, #1
    e802:	bd1c      	pop	{r2, r3, r4, pc}

0000e804 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    e804:	b510      	push	{r4, lr}
    e806:	f7f6 fa57 	bl	4cb8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    e80a:	2000      	movs	r0, #0
    e80c:	bd10      	pop	{r4, pc}

0000e80e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    e80e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e810:	460c      	mov	r4, r1
    e812:	4605      	mov	r5, r0
    e814:	f000 fae4 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    e818:	b160      	cbz	r0, e834 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    e81a:	4669      	mov	r1, sp
    e81c:	4628      	mov	r0, r5
    e81e:	f7fe fd89 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e822:	2800      	cmp	r0, #0
    e824:	d105      	bne.n	e832 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    e826:	2100      	movs	r1, #0
    e828:	4622      	mov	r2, r4
    e82a:	9801      	ldr	r0, [sp, #4]
    e82c:	f000 fa7a 	bl	ed24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    e830:	2000      	movs	r0, #0
    e832:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e834:	2001      	movs	r0, #1
    e836:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e838 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    e838:	b538      	push	{r3, r4, r5, lr}
    e83a:	460d      	mov	r5, r1
    e83c:	4604      	mov	r4, r0
    e83e:	f000 f9fd 	bl	ec3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x112>
    e842:	2800      	cmp	r0, #0
    e844:	d108      	bne.n	e858 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
    e846:	4620      	mov	r0, r4
    e848:	f000 f9dc 	bl	ec04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    e84c:	2800      	cmp	r0, #0
    e84e:	d103      	bne.n	e858 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
    e850:	f7f8 ff08 	bl	7664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e854:	b108      	cbz	r0, e85a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
    e856:	200c      	movs	r0, #12
    e858:	bd38      	pop	{r3, r4, r5, pc}
    e85a:	2000      	movs	r0, #0
    e85c:	f7f7 ff64 	bl	6728 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e860:	7028      	strb	r0, [r5, #0]
    e862:	74e0      	strb	r0, [r4, #19]
    e864:	4621      	mov	r1, r4
    e866:	2000      	movs	r0, #0
    e868:	f7f7 fe76 	bl	6558 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    e86c:	4605      	mov	r5, r0
    e86e:	7e60      	ldrb	r0, [r4, #25]
    e870:	b168      	cbz	r0, e88e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    e872:	b965      	cbnz	r5, e88e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    e874:	20ff      	movs	r0, #255	; 0xff
    e876:	f88d 0000 	strb.w	r0, [sp]
    e87a:	2100      	movs	r1, #0
    e87c:	466a      	mov	r2, sp
    e87e:	4608      	mov	r0, r1
    e880:	f7f7 ffac 	bl	67dc <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e884:	2100      	movs	r1, #0
    e886:	466a      	mov	r2, sp
    e888:	4608      	mov	r0, r1
    e88a:	f7f7 ffb5 	bl	67f8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e88e:	4628      	mov	r0, r5
    e890:	bd38      	pop	{r3, r4, r5, pc}

0000e892 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    e892:	b510      	push	{r4, lr}
    e894:	4604      	mov	r4, r0
    e896:	2000      	movs	r0, #0
    e898:	f000 f96e 	bl	eb78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    e89c:	b128      	cbz	r0, e8aa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    e89e:	4621      	mov	r1, r4
    e8a0:	2000      	movs	r0, #0
    e8a2:	f7f6 f9e5 	bl	4c70 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e8a6:	2000      	movs	r0, #0
    e8a8:	bd10      	pop	{r4, pc}
    e8aa:	200c      	movs	r0, #12
    e8ac:	bd10      	pop	{r4, pc}

0000e8ae <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    e8ae:	b510      	push	{r4, lr}
    e8b0:	4604      	mov	r4, r0
    e8b2:	f7f8 fef1 	bl	7698 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    e8b6:	b120      	cbz	r0, e8c2 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    e8b8:	7820      	ldrb	r0, [r4, #0]
    e8ba:	f7f8 ff0b 	bl	76d4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    e8be:	2000      	movs	r0, #0
    e8c0:	bd10      	pop	{r4, pc}
    e8c2:	200c      	movs	r0, #12
    e8c4:	bd10      	pop	{r4, pc}

0000e8c6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    e8c6:	b510      	push	{r4, lr}
    e8c8:	7800      	ldrb	r0, [r0, #0]
    e8ca:	f000 0001 	and.w	r0, r0, #1
    e8ce:	f7f8 ff07 	bl	76e0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    e8d2:	2000      	movs	r0, #0
    e8d4:	bd10      	pop	{r4, pc}

0000e8d6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    e8d6:	b510      	push	{r4, lr}
    e8d8:	4604      	mov	r4, r0
    e8da:	f000 fa81 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    e8de:	b120      	cbz	r0, e8ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    e8e0:	4620      	mov	r0, r4
    e8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8e6:	f7fc b82f 	b.w	a948 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    e8ea:	2001      	movs	r0, #1
    e8ec:	bd10      	pop	{r4, pc}

0000e8ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    e8ee:	b510      	push	{r4, lr}
    e8f0:	4604      	mov	r4, r0
    e8f2:	8841      	ldrh	r1, [r0, #2]
    e8f4:	2201      	movs	r2, #1
    e8f6:	7800      	ldrb	r0, [r0, #0]
    e8f8:	f000 f964 	bl	ebc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    e8fc:	2800      	cmp	r0, #0
    e8fe:	d10b      	bne.n	e918 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2a>
    e900:	f7ff fa85 	bl	de0e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    e904:	8861      	ldrh	r1, [r4, #2]
    e906:	4281      	cmp	r1, r0
    e908:	d800      	bhi.n	e90c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x1e>
    e90a:	4608      	mov	r0, r1
    e90c:	4601      	mov	r1, r0
    e90e:	2000      	movs	r0, #0
    e910:	6862      	ldr	r2, [r4, #4]
    e912:	f7f7 ff63 	bl	67dc <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e916:	2000      	movs	r0, #0
    e918:	bd10      	pop	{r4, pc}

0000e91a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    e91a:	b570      	push	{r4, r5, r6, lr}
    e91c:	4604      	mov	r4, r0
    e91e:	8841      	ldrh	r1, [r0, #2]
    e920:	2201      	movs	r2, #1
    e922:	7800      	ldrb	r0, [r0, #0]
    e924:	f000 f94e 	bl	ebc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    e928:	2800      	cmp	r0, #0
    e92a:	d10a      	bne.n	e942 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    e92c:	8865      	ldrh	r5, [r4, #2]
    e92e:	f7f7 feeb 	bl	6708 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e932:	b900      	cbnz	r0, e936 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1c>
    e934:	2500      	movs	r5, #0
    e936:	4629      	mov	r1, r5
    e938:	2000      	movs	r0, #0
    e93a:	6862      	ldr	r2, [r4, #4]
    e93c:	f7f7 ff5c 	bl	67f8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e940:	2000      	movs	r0, #0
    e942:	bd70      	pop	{r4, r5, r6, pc}

0000e944 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    e944:	b510      	push	{r4, lr}
    e946:	4604      	mov	r4, r0
    e948:	8880      	ldrh	r0, [r0, #4]
    e94a:	b128      	cbz	r0, e958 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e94c:	2801      	cmp	r0, #1
    e94e:	d003      	beq.n	e958 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e950:	2802      	cmp	r0, #2
    e952:	d001      	beq.n	e958 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e954:	2012      	movs	r0, #18
    e956:	bd10      	pop	{r4, pc}
    e958:	78e0      	ldrb	r0, [r4, #3]
    e95a:	f000 f9c0 	bl	ecde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b4>
    e95e:	b148      	cbz	r0, e974 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e960:	78a0      	ldrb	r0, [r4, #2]
    e962:	f000 f9bc 	bl	ecde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b4>
    e966:	b128      	cbz	r0, e974 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e968:	4620      	mov	r0, r4
    e96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e96e:	2101      	movs	r1, #1
    e970:	f000 b880 	b.w	ea74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    e974:	2011      	movs	r0, #17
    e976:	bd10      	pop	{r4, pc}

0000e978 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    e978:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e97a:	460c      	mov	r4, r1
    e97c:	4605      	mov	r5, r0
    e97e:	8800      	ldrh	r0, [r0, #0]
    e980:	4669      	mov	r1, sp
    e982:	f7fe fcd7 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e986:	2800      	cmp	r0, #0
    e988:	d106      	bne.n	e998 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    e98a:	9801      	ldr	r0, [sp, #4]
    e98c:	8829      	ldrh	r1, [r5, #0]
    e98e:	8021      	strh	r1, [r4, #0]
    e990:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    e994:	8060      	strh	r0, [r4, #2]
    e996:	2000      	movs	r0, #0
    e998:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e99a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    e99a:	b510      	push	{r4, lr}
    e99c:	4604      	mov	r4, r0
    e99e:	4601      	mov	r1, r0
    e9a0:	2000      	movs	r0, #0
    e9a2:	f7f6 f94d 	bl	4c40 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e9a6:	b910      	cbnz	r0, e9ae <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    e9a8:	2000      	movs	r0, #0
    e9aa:	6020      	str	r0, [r4, #0]
    e9ac:	80a0      	strh	r0, [r4, #4]
    e9ae:	2000      	movs	r0, #0
    e9b0:	bd10      	pop	{r4, pc}

0000e9b2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    e9b2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e9b4:	8800      	ldrh	r0, [r0, #0]
    e9b6:	4669      	mov	r1, sp
    e9b8:	f7fe fcbc 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9bc:	b958      	cbnz	r0, e9d6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e9be:	4668      	mov	r0, sp
    e9c0:	f000 fa14 	bl	edec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    e9c4:	b138      	cbz	r0, e9d6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e9c6:	9c01      	ldr	r4, [sp, #4]
    e9c8:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    e9cc:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    e9d0:	3470      	adds	r4, #112	; 0x70
    e9d2:	b929      	cbnz	r1, e9e0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    e9d4:	e001      	b.n	e9da <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    e9d6:	2002      	movs	r0, #2
    e9d8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e9da:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    e9de:	b109      	cbz	r1, e9e4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    e9e0:	203a      	movs	r0, #58	; 0x3a
    e9e2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e9e4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    e9e8:	f04f 0501 	mov.w	r5, #1
    e9ec:	0789      	lsls	r1, r1, #30
    e9ee:	d103      	bne.n	e9f8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    e9f0:	7005      	strb	r5, [r0, #0]
    e9f2:	4668      	mov	r0, sp
    e9f4:	f7ff f877 	bl	dae6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e9f8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    e9fc:	2000      	movs	r0, #0
    e9fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ea00 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ea00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ea02:	460c      	mov	r4, r1
    ea04:	4605      	mov	r5, r0
    ea06:	8800      	ldrh	r0, [r0, #0]
    ea08:	4669      	mov	r1, sp
    ea0a:	f7fe fc93 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ea0e:	b108      	cbz	r0, ea14 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ea10:	2002      	movs	r0, #2
    ea12:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ea14:	78a8      	ldrb	r0, [r5, #2]
    ea16:	b128      	cbz	r0, ea24 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
    ea18:	2008      	movs	r0, #8
    ea1a:	70a0      	strb	r0, [r4, #2]
    ea1c:	8828      	ldrh	r0, [r5, #0]
    ea1e:	8020      	strh	r0, [r4, #0]
    ea20:	2000      	movs	r0, #0
    ea22:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ea24:	9801      	ldr	r0, [sp, #4]
    ea26:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ea2a:	e7f6      	b.n	ea1a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

0000ea2c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ea2c:	b510      	push	{r4, lr}
    ea2e:	f7fc f857 	bl	aae0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ea32:	2000      	movs	r0, #0
    ea34:	bd10      	pop	{r4, pc}

0000ea36 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ea36:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ea3a:	4604      	mov	r4, r0
    ea3c:	8840      	ldrh	r0, [r0, #2]
    ea3e:	460d      	mov	r5, r1
    ea40:	b1b0      	cbz	r0, ea70 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    ea42:	8820      	ldrh	r0, [r4, #0]
    ea44:	4669      	mov	r1, sp
    ea46:	f7fe fc75 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ea4a:	2800      	cmp	r0, #0
    ea4c:	d10e      	bne.n	ea6c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    ea4e:	8820      	ldrh	r0, [r4, #0]
    ea50:	8028      	strh	r0, [r5, #0]
    ea52:	9e01      	ldr	r6, [sp, #4]
    ea54:	1d35      	adds	r5, r6, #4
    ea56:	3670      	adds	r6, #112	; 0x70
    ea58:	682f      	ldr	r7, [r5, #0]
    ea5a:	8862      	ldrh	r2, [r4, #2]
    ea5c:	4639      	mov	r1, r7
    ea5e:	4630      	mov	r0, r6
    ea60:	f7fe fdbb 	bl	d5da <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    ea64:	6828      	ldr	r0, [r5, #0]
    ea66:	42b8      	cmp	r0, r7
    ea68:	d1f6      	bne.n	ea58 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    ea6a:	2000      	movs	r0, #0
    ea6c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ea70:	2012      	movs	r0, #18
    ea72:	e7fb      	b.n	ea6c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000ea74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ea74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea78:	b086      	sub	sp, #24
    ea7a:	4689      	mov	r9, r1
    ea7c:	4604      	mov	r4, r0
    ea7e:	8800      	ldrh	r0, [r0, #0]
    ea80:	a901      	add	r1, sp, #4
    ea82:	f7fe fc57 	bl	d334 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ea86:	2800      	cmp	r0, #0
    ea88:	d131      	bne.n	eaee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7a>
    ea8a:	9802      	ldr	r0, [sp, #8]
    ea8c:	2700      	movs	r7, #0
    ea8e:	4601      	mov	r1, r0
    ea90:	f890 61f4 	ldrb.w	r6, [r0, #500]	; 0x1f4
    ea94:	4688      	mov	r8, r1
    ea96:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    ea9a:	3070      	adds	r0, #112	; 0x70
    ea9c:	2921      	cmp	r1, #33	; 0x21
    ea9e:	d100      	bne.n	eaa2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2e>
    eaa0:	b13e      	cbz	r6, eab2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    eaa2:	2500      	movs	r5, #0
    eaa4:	3044      	adds	r0, #68	; 0x44
    eaa6:	2108      	movs	r1, #8
    eaa8:	4682      	mov	sl, r0
    eaaa:	f7ff fbee 	bl	e28a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    eaae:	b110      	cbz	r0, eab6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    eab0:	e007      	b.n	eac2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
    eab2:	2501      	movs	r5, #1
    eab4:	e7f6      	b.n	eaa4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x30>
    eab6:	210b      	movs	r1, #11
    eab8:	4650      	mov	r0, sl
    eaba:	f7ff fbe6 	bl	e28a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    eabe:	b900      	cbnz	r0, eac2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
    eac0:	b1a5      	cbz	r5, eaec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x78>
    eac2:	a804      	add	r0, sp, #16
    eac4:	9000      	str	r0, [sp, #0]
    eac6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eaca:	ab03      	add	r3, sp, #12
    eacc:	4622      	mov	r2, r4
    eace:	4641      	mov	r1, r8
    ead0:	f000 f966 	bl	eda0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x276>
    ead4:	0005      	movs	r5, r0
    ead6:	d10a      	bne.n	eaee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7a>
    ead8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eadc:	9c02      	ldr	r4, [sp, #8]
    eade:	b148      	cbz	r0, eaf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    eae0:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    eae4:	2001      	movs	r0, #1
    eae6:	7060      	strb	r0, [r4, #1]
    eae8:	b94e      	cbnz	r6, eafe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    eaea:	e006      	b.n	eafa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    eaec:	201a      	movs	r0, #26
    eaee:	b006      	add	sp, #24
    eaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eaf4:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    eaf8:	e7f4      	b.n	eae4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x70>
    eafa:	7820      	ldrb	r0, [r4, #0]
    eafc:	b108      	cbz	r0, eb02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    eafe:	253a      	movs	r5, #58	; 0x3a
    eb00:	e010      	b.n	eb24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb0>
    eb02:	9700      	str	r7, [sp, #0]
    eb04:	f884 9000 	strb.w	r9, [r4]
    eb08:	f89d 100c 	ldrb.w	r1, [sp, #12]
    eb0c:	70a1      	strb	r1, [r4, #2]
    eb0e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    eb12:	70e0      	strb	r0, [r4, #3]
    eb14:	f88d 1000 	strb.w	r1, [sp]
    eb18:	f88d 0001 	strb.w	r0, [sp, #1]
    eb1c:	4669      	mov	r1, sp
    eb1e:	4640      	mov	r0, r8
    eb20:	f7fe fcc7 	bl	d4b2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    eb24:	7067      	strb	r7, [r4, #1]
    eb26:	4628      	mov	r0, r5
    eb28:	e7e1      	b.n	eaee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7a>

0000eb2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    eb2a:	b510      	push	{r4, lr}
    eb2c:	2008      	movs	r0, #8
    eb2e:	f7fc f865 	bl	abfc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    eb32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb36:	f7f9 bda7 	b.w	8688 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    eb3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eb3e:	4288      	cmp	r0, r1
    eb40:	d303      	bcc.n	eb4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    eb42:	f640 0148 	movw	r1, #2120	; 0x848
    eb46:	4288      	cmp	r0, r1
    eb48:	d300      	bcc.n	eb4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    eb4a:	4608      	mov	r0, r1
    eb4c:	4770      	bx	lr
    eb4e:	07c1      	lsls	r1, r0, #31
    eb50:	d001      	beq.n	eb56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    eb52:	2001      	movs	r0, #1
    eb54:	4770      	bx	lr
    eb56:	0780      	lsls	r0, r0, #30
    eb58:	d501      	bpl.n	eb5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    eb5a:	2002      	movs	r0, #2
    eb5c:	4770      	bx	lr
    eb5e:	2000      	movs	r0, #0
    eb60:	4770      	bx	lr
    eb62:	b510      	push	{r4, lr}
    eb64:	2801      	cmp	r0, #1
    eb66:	d006      	beq.n	eb76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eb68:	2802      	cmp	r0, #2
    eb6a:	d004      	beq.n	eb76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eb6c:	f240 218f 	movw	r1, #655	; 0x28f
    eb70:	2006      	movs	r0, #6
    eb72:	f7f5 fa39 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb76:	bd10      	pop	{r4, pc}
    eb78:	b510      	push	{r4, lr}
    eb7a:	2000      	movs	r0, #0
    eb7c:	f7f8 fd72 	bl	7664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eb80:	b148      	cbz	r0, eb96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x6c>
    eb82:	2000      	movs	r0, #0
    eb84:	f7f7 fdc0 	bl	6708 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eb88:	b918      	cbnz	r0, eb92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x68>
    eb8a:	2000      	movs	r0, #0
    eb8c:	f7f7 fda4 	bl	66d8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eb90:	b108      	cbz	r0, eb96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x6c>
    eb92:	2000      	movs	r0, #0
    eb94:	bd10      	pop	{r4, pc}
    eb96:	2001      	movs	r0, #1
    eb98:	bd10      	pop	{r4, pc}
    eb9a:	b570      	push	{r4, r5, r6, lr}
    eb9c:	460d      	mov	r5, r1
    eb9e:	8899      	ldrh	r1, [r3, #4]
    eba0:	461c      	mov	r4, r3
    eba2:	194b      	adds	r3, r1, r5
    eba4:	4293      	cmp	r3, r2
    eba6:	d901      	bls.n	ebac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x82>
    eba8:	2007      	movs	r0, #7
    ebaa:	bd70      	pop	{r4, r5, r6, pc}
    ebac:	6822      	ldr	r2, [r4, #0]
    ebae:	1853      	adds	r3, r2, r1
    ebb0:	4601      	mov	r1, r0
    ebb2:	462a      	mov	r2, r5
    ebb4:	4618      	mov	r0, r3
    ebb6:	f7fd fa94 	bl	c0e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ebba:	88a0      	ldrh	r0, [r4, #4]
    ebbc:	4428      	add	r0, r5
    ebbe:	80a0      	strh	r0, [r4, #4]
    ebc0:	2000      	movs	r0, #0
    ebc2:	bd70      	pop	{r4, r5, r6, pc}
    ebc4:	b570      	push	{r4, r5, r6, lr}
    ebc6:	460c      	mov	r4, r1
    ebc8:	4605      	mov	r5, r0
    ebca:	b112      	cbz	r2, ebd2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa8>
    ebcc:	291f      	cmp	r1, #31
    ebce:	d808      	bhi.n	ebe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    ebd0:	e012      	b.n	ebf8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xce>
    ebd2:	2cff      	cmp	r4, #255	; 0xff
    ebd4:	d805      	bhi.n	ebe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    ebd6:	2000      	movs	r0, #0
    ebd8:	f7ff f92a 	bl	de30 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ebdc:	b118      	cbz	r0, ebe6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    ebde:	2c1f      	cmp	r4, #31
    ebe0:	d901      	bls.n	ebe6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    ebe2:	2012      	movs	r0, #18
    ebe4:	bd70      	pop	{r4, r5, r6, pc}
    ebe6:	4628      	mov	r0, r5
    ebe8:	f7f7 fda4 	bl	6734 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ebec:	b130      	cbz	r0, ebfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xd2>
    ebee:	4621      	mov	r1, r4
    ebf0:	2000      	movs	r0, #0
    ebf2:	f7ff f917 	bl	de24 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    ebf6:	b118      	cbz	r0, ec00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xd6>
    ebf8:	2000      	movs	r0, #0
    ebfa:	bd70      	pop	{r4, r5, r6, pc}
    ebfc:	2042      	movs	r0, #66	; 0x42
    ebfe:	bd70      	pop	{r4, r5, r6, pc}
    ec00:	2045      	movs	r0, #69	; 0x45
    ec02:	bd70      	pop	{r4, r5, r6, pc}
    ec04:	b510      	push	{r4, lr}
    ec06:	4604      	mov	r4, r0
    ec08:	7840      	ldrb	r0, [r0, #1]
    ec0a:	06c1      	lsls	r1, r0, #27
    ec0c:	d512      	bpl.n	ec34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    ec0e:	07c0      	lsls	r0, r0, #31
    ec10:	d00b      	beq.n	ec2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x100>
    ec12:	f7fb ffa3 	bl	ab5c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    ec16:	b168      	cbz	r0, ec34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    ec18:	7860      	ldrb	r0, [r4, #1]
    ec1a:	06c1      	lsls	r1, r0, #27
    ec1c:	d405      	bmi.n	ec2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x100>
    ec1e:	0700      	lsls	r0, r0, #28
    ec20:	d503      	bpl.n	ec2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x100>
    ec22:	7d20      	ldrb	r0, [r4, #20]
    ec24:	2802      	cmp	r0, #2
    ec26:	d105      	bne.n	ec34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    ec28:	e006      	b.n	ec38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10e>
    ec2a:	7d20      	ldrb	r0, [r4, #20]
    ec2c:	2802      	cmp	r0, #2
    ec2e:	d003      	beq.n	ec38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10e>
    ec30:	7ea0      	ldrb	r0, [r4, #26]
    ec32:	b108      	cbz	r0, ec38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10e>
    ec34:	2011      	movs	r0, #17
    ec36:	bd10      	pop	{r4, pc}
    ec38:	2000      	movs	r0, #0
    ec3a:	bd10      	pop	{r4, pc}
    ec3c:	b538      	push	{r3, r4, r5, lr}
    ec3e:	4604      	mov	r4, r0
    ec40:	7800      	ldrb	r0, [r0, #0]
    ec42:	28ef      	cmp	r0, #239	; 0xef
    ec44:	d847      	bhi.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec46:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ec4a:	f8ad 0000 	strh.w	r0, [sp]
    ec4e:	9800      	ldr	r0, [sp, #0]
    ec50:	f000 f8f2 	bl	ee38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ec54:	b3c0      	cbz	r0, ecc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    ec56:	7861      	ldrb	r1, [r4, #1]
    ec58:	0708      	lsls	r0, r1, #28
    ec5a:	d40f      	bmi.n	ec7c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x152>
    ec5c:	f8d4 2002 	ldr.w	r2, [r4, #2]
    ec60:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ec64:	0a13      	lsrs	r3, r2, #8
    ec66:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    ec6a:	d834      	bhi.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec6c:	2320      	movs	r3, #32
    ec6e:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    ec72:	d830      	bhi.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec74:	025a      	lsls	r2, r3, #9
    ec76:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ec7a:	d32c      	bcc.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec7c:	7a60      	ldrb	r0, [r4, #9]
    ec7e:	b318      	cbz	r0, ecc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    ec80:	2807      	cmp	r0, #7
    ec82:	d828      	bhi.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec84:	7aa0      	ldrb	r0, [r4, #10]
    ec86:	b128      	cbz	r0, ec94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16a>
    ec88:	2801      	cmp	r0, #1
    ec8a:	d003      	beq.n	ec94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16a>
    ec8c:	2802      	cmp	r0, #2
    ec8e:	d001      	beq.n	ec94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16a>
    ec90:	2803      	cmp	r0, #3
    ec92:	d120      	bne.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ec94:	074a      	lsls	r2, r1, #29
    ec96:	d403      	bmi.n	eca0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x176>
    ec98:	2802      	cmp	r0, #2
    ec9a:	d001      	beq.n	eca0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x176>
    ec9c:	2803      	cmp	r0, #3
    ec9e:	d105      	bne.n	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    eca0:	7ae0      	ldrb	r0, [r4, #11]
    eca2:	b108      	cbz	r0, eca8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x17e>
    eca4:	2801      	cmp	r0, #1
    eca6:	d116      	bne.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    eca8:	0748      	lsls	r0, r1, #29
    ecaa:	d407      	bmi.n	ecbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    ecac:	7ca0      	ldrb	r0, [r4, #18]
    ecae:	b128      	cbz	r0, ecbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    ecb0:	2801      	cmp	r0, #1
    ecb2:	d003      	beq.n	ecbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    ecb4:	2802      	cmp	r0, #2
    ecb6:	d001      	beq.n	ecbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    ecb8:	2803      	cmp	r0, #3
    ecba:	d10c      	bne.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ecbc:	06c8      	lsls	r0, r1, #27
    ecbe:	7d20      	ldrb	r0, [r4, #20]
    ecc0:	d503      	bpl.n	ecca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a0>
    ecc2:	2801      	cmp	r0, #1
    ecc4:	d107      	bne.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ecc6:	e002      	b.n	ecce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a4>
    ecc8:	e005      	b.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ecca:	2802      	cmp	r0, #2
    eccc:	d003      	beq.n	ecd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    ecce:	7e20      	ldrb	r0, [r4, #24]
    ecd0:	b118      	cbz	r0, ecda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b0>
    ecd2:	2801      	cmp	r0, #1
    ecd4:	d001      	beq.n	ecda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b0>
    ecd6:	2012      	movs	r0, #18
    ecd8:	bd38      	pop	{r3, r4, r5, pc}
    ecda:	2000      	movs	r0, #0
    ecdc:	bd38      	pop	{r3, r4, r5, pc}
    ecde:	b510      	push	{r4, lr}
    ece0:	0004      	movs	r4, r0
    ece2:	d005      	beq.n	ecf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c6>
    ece4:	f7fb ff9a 	bl	ac1c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ece8:	4384      	bics	r4, r0
    ecea:	d001      	beq.n	ecf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c6>
    ecec:	2000      	movs	r0, #0
    ecee:	bd10      	pop	{r4, pc}
    ecf0:	2001      	movs	r0, #1
    ecf2:	bd10      	pop	{r4, pc}
    ecf4:	28fb      	cmp	r0, #251	; 0xfb
    ecf6:	d803      	bhi.n	ed00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d6>
    ecf8:	f640 0048 	movw	r0, #2120	; 0x848
    ecfc:	4281      	cmp	r1, r0
    ecfe:	d901      	bls.n	ed04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1da>
    ed00:	2011      	movs	r0, #17
    ed02:	4770      	bx	lr
    ed04:	2000      	movs	r0, #0
    ed06:	4770      	bx	lr
    ed08:	381b      	subs	r0, #27
    ed0a:	28e1      	cmp	r0, #225	; 0xe1
    ed0c:	d206      	bcs.n	ed1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    ed0e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    ed12:	d303      	bcc.n	ed1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    ed14:	f244 2090 	movw	r0, #17040	; 0x4290
    ed18:	4281      	cmp	r1, r0
    ed1a:	d901      	bls.n	ed20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ed1c:	2012      	movs	r0, #18
    ed1e:	4770      	bx	lr
    ed20:	2000      	movs	r0, #0
    ed22:	4770      	bx	lr
    ed24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed28:	4606      	mov	r6, r0
    ed2a:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
    ed2e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
    ed32:	4615      	mov	r5, r2
    ed34:	3028      	adds	r0, #40	; 0x28
    ed36:	f7f8 fcd9 	bl	76ec <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    ed3a:	4680      	mov	r8, r0
    ed3c:	2102      	movs	r1, #2
    ed3e:	f7fe fb89 	bl	d454 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ed42:	4287      	cmp	r7, r0
    ed44:	d200      	bcs.n	ed48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x21e>
    ed46:	4638      	mov	r0, r7
    ed48:	4607      	mov	r7, r0
    ed4a:	2102      	movs	r1, #2
    ed4c:	4640      	mov	r0, r8
    ed4e:	f7fe fb81 	bl	d454 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ed52:	4284      	cmp	r4, r0
    ed54:	d200      	bcs.n	ed58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22e>
    ed56:	4620      	mov	r0, r4
    ed58:	8831      	ldrh	r1, [r6, #0]
    ed5a:	8029      	strh	r1, [r5, #0]
    ed5c:	2f1b      	cmp	r7, #27
    ed5e:	d913      	bls.n	ed88 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    ed60:	2ffb      	cmp	r7, #251	; 0xfb
    ed62:	d300      	bcc.n	ed66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    ed64:	27fb      	movs	r7, #251	; 0xfb
    ed66:	806f      	strh	r7, [r5, #2]
    ed68:	281b      	cmp	r0, #27
    ed6a:	d90f      	bls.n	ed8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x262>
    ed6c:	28fb      	cmp	r0, #251	; 0xfb
    ed6e:	d300      	bcc.n	ed72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x248>
    ed70:	20fb      	movs	r0, #251	; 0xfb
    ed72:	80e8      	strh	r0, [r5, #6]
    ed74:	4640      	mov	r0, r8
    ed76:	f7ff fee0 	bl	eb3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed7a:	80a8      	strh	r0, [r5, #4]
    ed7c:	4640      	mov	r0, r8
    ed7e:	f7ff fedc 	bl	eb3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed82:	8128      	strh	r0, [r5, #8]
    ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed88:	271b      	movs	r7, #27
    ed8a:	e7ec      	b.n	ed66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    ed8c:	201b      	movs	r0, #27
    ed8e:	e7f0      	b.n	ed72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x248>
    ed90:	b510      	push	{r4, lr}
    ed92:	2000      	movs	r0, #0
    ed94:	f7f8 fc66 	bl	7664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ed98:	2800      	cmp	r0, #0
    ed9a:	d000      	beq.n	ed9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x274>
    ed9c:	2001      	movs	r0, #1
    ed9e:	bd10      	pop	{r4, pc}
    eda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eda4:	7890      	ldrb	r0, [r2, #2]
    eda6:	9e06      	ldr	r6, [sp, #24]
    eda8:	461d      	mov	r5, r3
    edaa:	4614      	mov	r4, r2
    edac:	b908      	cbnz	r0, edb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x288>
    edae:	f7fb ff35 	bl	ac1c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    edb2:	78e4      	ldrb	r4, [r4, #3]
    edb4:	4607      	mov	r7, r0
    edb6:	b914      	cbnz	r4, edbe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
    edb8:	f7fb ff30 	bl	ac1c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    edbc:	4604      	mov	r4, r0
    edbe:	b16f      	cbz	r7, eddc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b2>
    edc0:	b164      	cbz	r4, eddc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b2>
    edc2:	4638      	mov	r0, r7
    edc4:	f7ff fec3 	bl	eb4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    edc8:	4620      	mov	r0, r4
    edca:	f7ff fec0 	bl	eb4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    edce:	b12f      	cbz	r7, eddc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b2>
    edd0:	b124      	cbz	r4, eddc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b2>
    edd2:	702f      	strb	r7, [r5, #0]
    edd4:	7034      	strb	r4, [r6, #0]
    edd6:	2000      	movs	r0, #0
    edd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eddc:	2009      	movs	r0, #9
    edde:	e7fb      	b.n	edd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ae>
    ede0:	b510      	push	{r4, lr}
    ede2:	f7fb ff15 	bl	ac10 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ede6:	f3c0 1040 	ubfx	r0, r0, #5, #1
    edea:	bd10      	pop	{r4, pc}
    edec:	6840      	ldr	r0, [r0, #4]
    edee:	f000 b800 	b.w	edf2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    edf2:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    edf6:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    edfa:	b920      	cbnz	r0, ee06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    edfc:	b119      	cbz	r1, ee06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    edfe:	2904      	cmp	r1, #4
    ee00:	d001      	beq.n	ee06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    ee02:	2001      	movs	r0, #1
    ee04:	4770      	bx	lr
    ee06:	2000      	movs	r0, #0
    ee08:	4770      	bx	lr
    ee0a:	b530      	push	{r4, r5, lr}
    ee0c:	f340 0400 	sbfx	r4, r0, #0, #1
    ee10:	f340 0040 	sbfx	r0, r0, #1, #1
    ee14:	1c40      	adds	r0, r0, #1
    ee16:	9d03      	ldr	r5, [sp, #12]
    ee18:	1c64      	adds	r4, r4, #1
    ee1a:	d000      	beq.n	ee1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f4>
    ee1c:	b119      	cbz	r1, ee26 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    ee1e:	b100      	cbz	r0, ee22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    ee20:	b10a      	cbz	r2, ee26 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    ee22:	b91c      	cbnz	r4, ee2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x302>
    ee24:	e001      	b.n	ee2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ee26:	2011      	movs	r0, #17
    ee28:	bd30      	pop	{r4, r5, pc}
    ee2a:	2100      	movs	r1, #0
    ee2c:	7019      	strb	r1, [r3, #0]
    ee2e:	b900      	cbnz	r0, ee32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x308>
    ee30:	2200      	movs	r2, #0
    ee32:	702a      	strb	r2, [r5, #0]
    ee34:	2000      	movs	r0, #0
    ee36:	bd30      	pop	{r4, r5, pc}
    ee38:	b2c0      	uxtb	r0, r0
    ee3a:	06c1      	lsls	r1, r0, #27
    ee3c:	d40c      	bmi.n	ee58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    ee3e:	0681      	lsls	r1, r0, #26
    ee40:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    ee44:	d503      	bpl.n	ee4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x324>
    ee46:	b9d1      	cbnz	r1, ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee48:	0781      	lsls	r1, r0, #30
    ee4a:	d418      	bmi.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee4c:	e001      	b.n	ee52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x328>
    ee4e:	2900      	cmp	r1, #0
    ee50:	d1fa      	bne.n	ee48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31e>
    ee52:	0700      	lsls	r0, r0, #28
    ee54:	d413      	bmi.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee56:	e010      	b.n	ee7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x350>
    ee58:	0641      	lsls	r1, r0, #25
    ee5a:	d410      	bmi.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee5c:	0681      	lsls	r1, r0, #26
    ee5e:	d40e      	bmi.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee60:	07c1      	lsls	r1, r0, #31
    ee62:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ee66:	d004      	beq.n	ee72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    ee68:	2900      	cmp	r1, #0
    ee6a:	db02      	blt.n	ee72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    ee6c:	0740      	lsls	r0, r0, #29
    ee6e:	d404      	bmi.n	ee7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x350>
    ee70:	e005      	b.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee72:	0701      	lsls	r1, r0, #28
    ee74:	d403      	bmi.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee76:	0740      	lsls	r0, r0, #29
    ee78:	d401      	bmi.n	ee7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x354>
    ee7a:	2001      	movs	r0, #1
    ee7c:	4770      	bx	lr
    ee7e:	2000      	movs	r0, #0
    ee80:	4770      	bx	lr
    ee82:	b510      	push	{r4, lr}
    ee84:	2000      	movs	r0, #0
    ee86:	f7f8 fbed 	bl	7664 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ee8a:	b128      	cbz	r0, ee98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36e>
    ee8c:	2000      	movs	r0, #0
    ee8e:	f7f7 fcff 	bl	6890 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    ee92:	b108      	cbz	r0, ee98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36e>
    ee94:	2001      	movs	r0, #1
    ee96:	bd10      	pop	{r4, pc}
    ee98:	2000      	movs	r0, #0
    ee9a:	bd10      	pop	{r4, pc}

0000ee9c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    ee9c:	6802      	ldr	r2, [r0, #0]
    ee9e:	b912      	cbnz	r2, eea6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    eea0:	6001      	str	r1, [r0, #0]
    eea2:	4770      	bx	lr
    eea4:	4602      	mov	r2, r0
    eea6:	6850      	ldr	r0, [r2, #4]
    eea8:	b108      	cbz	r0, eeae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    eeaa:	428a      	cmp	r2, r1
    eeac:	d1fa      	bne.n	eea4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    eeae:	428a      	cmp	r2, r1
    eeb0:	d0f7      	beq.n	eea2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    eeb2:	6051      	str	r1, [r2, #4]
    eeb4:	4770      	bx	lr
    eeb6:	b510      	push	{r4, lr}
    eeb8:	f7ff f892 	bl	dfe0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    eebc:	b108      	cbz	r0, eec2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    eebe:	21e2      	movs	r1, #226	; 0xe2
    eec0:	e004      	b.n	eecc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x30>
    eec2:	f7f7 fc53 	bl	676c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    eec6:	2800      	cmp	r0, #0
    eec8:	d003      	beq.n	eed2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x36>
    eeca:	21e7      	movs	r1, #231	; 0xe7
    eecc:	2001      	movs	r0, #1
    eece:	f7f5 f88b 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eed2:	bd10      	pop	{r4, pc}
    eed4:	b50e      	push	{r1, r2, r3, lr}
    eed6:	4669      	mov	r1, sp
    eed8:	2000      	movs	r0, #0
    eeda:	f7fe f8fc 	bl	d0d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eede:	b158      	cbz	r0, eef8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    eee0:	219c      	movs	r1, #156	; 0x9c
    eee2:	e006      	b.n	eef2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
    eee4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    eee8:	2100      	movs	r1, #0
    eeea:	f7f5 fb01 	bl	44f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    eeee:	b118      	cbz	r0, eef8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    eef0:	21a0      	movs	r1, #160	; 0xa0
    eef2:	2001      	movs	r0, #1
    eef4:	f7f5 f878 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eef8:	4668      	mov	r0, sp
    eefa:	f7f5 faa9 	bl	4450 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eefe:	2800      	cmp	r0, #0
    ef00:	d0f0      	beq.n	eee4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x48>
    ef02:	bd0e      	pop	{r1, r2, r3, pc}
    ef04:	b510      	push	{r4, lr}
    ef06:	4604      	mov	r4, r0
    ef08:	e002      	b.n	ef10 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x74>
    ef0a:	6820      	ldr	r0, [r4, #0]
    ef0c:	4780      	blx	r0
    ef0e:	6864      	ldr	r4, [r4, #4]
    ef10:	2c00      	cmp	r4, #0
    ef12:	d1fa      	bne.n	ef0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6e>
    ef14:	bd10      	pop	{r4, pc}
    ef16:	b510      	push	{r4, lr}
    ef18:	f7ff ffdc 	bl	eed4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    ef1c:	f7f5 fc66 	bl	47ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    ef20:	f7f5 fe70 	bl	4c04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    ef24:	f7f6 f824 	bl	4f70 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    ef28:	2800      	cmp	r0, #0
    ef2a:	d003      	beq.n	ef34 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    ef2c:	21c0      	movs	r1, #192	; 0xc0
    ef2e:	2001      	movs	r0, #1
    ef30:	f7f5 f85a 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef34:	bd10      	pop	{r4, pc}
    ef36:	b510      	push	{r4, lr}
    ef38:	f7ff ffbd 	bl	eeb6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    ef3c:	f7ff f965 	bl	e20a <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    ef40:	2800      	cmp	r0, #0
    ef42:	d003      	beq.n	ef4c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb0>
    ef44:	21fe      	movs	r1, #254	; 0xfe
    ef46:	2001      	movs	r0, #1
    ef48:	f7f5 f84e 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef4c:	bd10      	pop	{r4, pc}

0000ef4e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    ef4e:	b510      	push	{r4, lr}
    ef50:	f7fc f992 	bl	b278 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    ef54:	f000 f830 	bl	efb8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    ef58:	f7fb feb4 	bl	acc4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    ef5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef60:	f7fb bfaa 	b.w	aeb8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000ef64 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    ef64:	b510      	push	{r4, lr}
    ef66:	24c8      	movs	r4, #200	; 0xc8
    ef68:	1e64      	subs	r4, r4, #1
    ef6a:	b2e4      	uxtb	r4, r4
    ef6c:	f7fb fec8 	bl	ad00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    ef70:	2802      	cmp	r0, #2
    ef72:	d003      	beq.n	ef7c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    ef74:	2801      	cmp	r0, #1
    ef76:	d000      	beq.n	ef7a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    ef78:	2000      	movs	r0, #0
    ef7a:	bd10      	pop	{r4, pc}
    ef7c:	2c00      	cmp	r4, #0
    ef7e:	d1f3      	bne.n	ef68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    ef80:	218f      	movs	r1, #143	; 0x8f
    ef82:	203b      	movs	r0, #59	; 0x3b
    ef84:	f7f5 f830 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef88 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    ef88:	b510      	push	{r4, lr}
    ef8a:	f7f4 ff33 	bl	3df4 <mpsl_fem_lna_configuration_clear>
    ef8e:	2800      	cmp	r0, #0
    ef90:	d005      	beq.n	ef9e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    ef92:	1c40      	adds	r0, r0, #1
    ef94:	d003      	beq.n	ef9e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    ef96:	214a      	movs	r1, #74	; 0x4a
    ef98:	2040      	movs	r0, #64	; 0x40
    ef9a:	f7f5 f825 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef9e:	bd10      	pop	{r4, pc}

0000efa0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    efa0:	b510      	push	{r4, lr}
    efa2:	f7f4 ff33 	bl	3e0c <mpsl_fem_pa_configuration_clear>
    efa6:	2800      	cmp	r0, #0
    efa8:	d005      	beq.n	efb6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    efaa:	1c40      	adds	r0, r0, #1
    efac:	d003      	beq.n	efb6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    efae:	2143      	movs	r1, #67	; 0x43
    efb0:	2040      	movs	r0, #64	; 0x40
    efb2:	f7f5 f819 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efb6:	bd10      	pop	{r4, pc}

0000efb8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    efb8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    efbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    efc0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    efc4:	f3bf 8f4f 	dsb	sy
    efc8:	f3bf 8f6f 	isb	sy
    efcc:	f7fb bff6 	b.w	afbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    efd0:	2800      	cmp	r0, #0
    efd2:	db09      	blt.n	efe8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    efd4:	f000 021f 	and.w	r2, r0, #31
    efd8:	2101      	movs	r1, #1
    efda:	4091      	lsls	r1, r2
    efdc:	0940      	lsrs	r0, r0, #5
    efde:	0080      	lsls	r0, r0, #2
    efe0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    efe4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    efe8:	4770      	bx	lr
    efea:	2800      	cmp	r0, #0
    efec:	db0d      	blt.n	f00a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    efee:	f000 021f 	and.w	r2, r0, #31
    eff2:	2101      	movs	r1, #1
    eff4:	4091      	lsls	r1, r2
    eff6:	0940      	lsrs	r0, r0, #5
    eff8:	0080      	lsls	r0, r0, #2
    effa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    effe:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f002:	f3bf 8f4f 	dsb	sy
    f006:	f3bf 8f6f 	isb	sy
    f00a:	4770      	bx	lr

0000f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f00c:	b510      	push	{r4, lr}
    f00e:	2801      	cmp	r0, #1
    f010:	d006      	beq.n	f020 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f012:	2802      	cmp	r0, #2
    f014:	d006      	beq.n	f024 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f016:	f44f 6138 	mov.w	r1, #2944	; 0xb80
    f01a:	203e      	movs	r0, #62	; 0x3e
    f01c:	f7f4 ffe4 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f020:	2028      	movs	r0, #40	; 0x28
    f022:	bd10      	pop	{r4, pc}
    f024:	2018      	movs	r0, #24
    f026:	bd10      	pop	{r4, pc}

0000f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f028:	b510      	push	{r4, lr}
    f02a:	2801      	cmp	r0, #1
    f02c:	d006      	beq.n	f03c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f02e:	2802      	cmp	r0, #2
    f030:	d007      	beq.n	f042 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f032:	f640 3194 	movw	r1, #2964	; 0xb94
    f036:	203e      	movs	r0, #62	; 0x3e
    f038:	f7f4 ffd6 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f03c:	f641 6014 	movw	r0, #7700	; 0x1e14
    f040:	bd10      	pop	{r4, pc}
    f042:	f241 1030 	movw	r0, #4400	; 0x1130
    f046:	bd10      	pop	{r4, pc}

0000f048 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f048:	f7fc be88 	b.w	bd5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x470>
    f04c:	b510      	push	{r4, lr}
    f04e:	460a      	mov	r2, r1
    f050:	b130      	cbz	r0, f060 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f052:	2801      	cmp	r0, #1
    f054:	d00b      	beq.n	f06e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f056:	f240 6104 	movw	r1, #1540	; 0x604
    f05a:	203e      	movs	r0, #62	; 0x3e
    f05c:	f7f4 ffc4 	bl	3fe8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f064:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f068:	4610      	mov	r0, r2
    f06a:	f7fb be9d 	b.w	ada8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f072:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f076:	4610      	mov	r0, r2
    f078:	f7fb be80 	b.w	ad7c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f07c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f07c:	b570      	push	{r4, r5, r6, lr}
    f07e:	4605      	mov	r5, r0
    f080:	4614      	mov	r4, r2
    f082:	4608      	mov	r0, r1
    f084:	f7ff ffd0 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f088:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f08c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f090:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f094:	4620      	mov	r0, r4
    f096:	f7ff ffc7 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f09a:	4428      	add	r0, r5
    f09c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f0a0:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f0a4:	fbb0 f5f1 	udiv	r5, r0, r1
    f0a8:	4620      	mov	r0, r4
    f0aa:	f7ff ffaf 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f0ae:	4428      	add	r0, r5
    f0b0:	1d40      	adds	r0, r0, #5
    f0b2:	bd70      	pop	{r4, r5, r6, pc}

0000f0b4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0b8:	4607      	mov	r7, r0
    f0ba:	461d      	mov	r5, r3
    f0bc:	460e      	mov	r6, r1
    f0be:	4614      	mov	r4, r2
    f0c0:	4610      	mov	r0, r2
    f0c2:	f7ff ffb1 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f0c6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f0ca:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f0ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f0d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f0d6:	2e02      	cmp	r6, #2
    f0d8:	d00e      	beq.n	f0f8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f0da:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f0de:	4411      	add	r1, r2
    f0e0:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f0e4:	fbb1 f6f0 	udiv	r6, r1, r0
    f0e8:	4620      	mov	r0, r4
    f0ea:	f7ff ff8f 	bl	f00c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f0ee:	4430      	add	r0, r6
    f0f0:	4428      	add	r0, r5
    f0f2:	1d40      	adds	r0, r0, #5
    f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0f8:	4602      	mov	r2, r0
    f0fa:	e7f0      	b.n	f0de <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f0fc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f0fc:	b510      	push	{r4, lr}
    f0fe:	4604      	mov	r4, r0
    f100:	4608      	mov	r0, r1
    f102:	f7ff ff91 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f106:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f10a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f10e:	fbb0 f0f1 	udiv	r0, r0, r1
    f112:	1a20      	subs	r0, r4, r0
    f114:	1e80      	subs	r0, r0, #2
    f116:	bd10      	pop	{r4, pc}

0000f118 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f118:	b510      	push	{r4, lr}
    f11a:	4604      	mov	r4, r0
    f11c:	4608      	mov	r0, r1
    f11e:	f7ff ff83 	bl	f028 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f122:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f126:	fbb0 f0f1 	udiv	r0, r0, r1
    f12a:	1a20      	subs	r0, r4, r0
    f12c:	bd10      	pop	{r4, pc}

0000f12e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f12e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f132:	2902      	cmp	r1, #2
    f134:	d008      	beq.n	f148 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f136:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f13a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f13e:	fbb1 f1f2 	udiv	r1, r1, r2
    f142:	4408      	add	r0, r1
    f144:	1e80      	subs	r0, r0, #2
    f146:	4770      	bx	lr
    f148:	4611      	mov	r1, r2
    f14a:	e7f6      	b.n	f13a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f14c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f14c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f150:	2902      	cmp	r1, #2
    f152:	d007      	beq.n	f164 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f154:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f158:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f15c:	fbb1 f1f2 	udiv	r1, r1, r2
    f160:	4408      	add	r0, r1
    f162:	4770      	bx	lr
    f164:	4611      	mov	r1, r2
    f166:	e7f7      	b.n	f158 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f168:	1702080c 	.word	0x1702080c
    f16c:	0201010d 	.word	0x0201010d
    f170:	01010909 	.word	0x01010909
    f174:	18090206 	.word	0x18090206
    f178:	01010318 	.word	0x01010318
    f17c:	03030909 	.word	0x03030909
    f180:	00000005 	.word	0x00000005
    f184:	00000000 	.word	0x00000000

0000f188 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    f188:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f18a:	4d3d      	ldr	r5, [pc, #244]	; (f280 <hci_init+0xf8>)
    f18c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    f190:	6899      	ldr	r1, [r3, #8]
    f192:	f011 0101 	ands.w	r1, r1, #1
    f196:	d11f      	bne.n	f1d8 <hci_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f198:	aa01      	add	r2, sp, #4
    f19a:	f640 4003 	movw	r0, #3075	; 0xc03
    f19e:	f002 ff87 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f1a2:	4604      	mov	r4, r0
    f1a4:	2800      	cmp	r0, #0
    f1a6:	d167      	bne.n	f278 <hci_init+0xf0>
		hci_reset_complete(rsp);
    f1a8:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    f1aa:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f1ac:	781b      	ldrb	r3, [r3, #0]
    f1ae:	b983      	cbnz	r3, f1d2 <hci_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f1b0:	f105 0398 	add.w	r3, r5, #152	; 0x98
    f1b4:	4618      	mov	r0, r3
    f1b6:	f00c f8c0 	bl	1b33a <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f1ba:	f3bf 8f5b 	dmb	ish
    f1be:	f000 0005 	and.w	r0, r0, #5
    f1c2:	e853 2f00 	ldrex	r2, [r3]
    f1c6:	e843 0100 	strex	r1, r0, [r3]
    f1ca:	2900      	cmp	r1, #0
    f1cc:	d1f9      	bne.n	f1c2 <hci_init+0x3a>
    f1ce:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    f1d2:	9801      	ldr	r0, [sp, #4]
    f1d4:	f007 f8b8 	bl	16348 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f1d8:	aa01      	add	r2, sp, #4
    f1da:	2100      	movs	r1, #0
    f1dc:	f241 0003 	movw	r0, #4099	; 0x1003
    f1e0:	f002 ff66 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f1e4:	4604      	mov	r4, r0
    f1e6:	2800      	cmp	r0, #0
    f1e8:	d146      	bne.n	f278 <hci_init+0xf0>
	read_local_features_complete(rsp);
    f1ea:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f1ec:	4825      	ldr	r0, [pc, #148]	; (f284 <hci_init+0xfc>)
    f1ee:	6899      	ldr	r1, [r3, #8]
    f1f0:	2208      	movs	r2, #8
    f1f2:	3101      	adds	r1, #1
    f1f4:	f00b ff10 	bl	1b018 <memcpy>
	net_buf_unref(rsp);
    f1f8:	9801      	ldr	r0, [sp, #4]
    f1fa:	f007 f8a5 	bl	16348 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f1fe:	4621      	mov	r1, r4
    f200:	aa01      	add	r2, sp, #4
    f202:	f241 0001 	movw	r0, #4097	; 0x1001
    f206:	f002 ff53 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f20a:	4604      	mov	r4, r0
    f20c:	2800      	cmp	r0, #0
    f20e:	d133      	bne.n	f278 <hci_init+0xf0>
	read_local_ver_complete(rsp);
    f210:	9801      	ldr	r0, [sp, #4]
    f212:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f214:	785a      	ldrb	r2, [r3, #1]
    f216:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f21a:	78d9      	ldrb	r1, [r3, #3]
    f21c:	789a      	ldrb	r2, [r3, #2]
    f21e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f222:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f224:	791a      	ldrb	r2, [r3, #4]
    f226:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f22a:	7a19      	ldrb	r1, [r3, #8]
    f22c:	79da      	ldrb	r2, [r3, #7]
    f22e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f232:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f234:	795a      	ldrb	r2, [r3, #5]
    f236:	799b      	ldrb	r3, [r3, #6]
    f238:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f23c:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f23e:	f007 f883 	bl	16348 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f242:	4621      	mov	r1, r4
    f244:	aa01      	add	r2, sp, #4
    f246:	f241 0002 	movw	r0, #4098	; 0x1002
    f24a:	f002 ff31 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f24e:	4604      	mov	r4, r0
    f250:	b990      	cbnz	r0, f278 <hci_init+0xf0>
	read_supported_commands_complete(rsp);
    f252:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    f254:	480c      	ldr	r0, [pc, #48]	; (f288 <hci_init+0x100>)
    f256:	6899      	ldr	r1, [r3, #8]
    f258:	2240      	movs	r2, #64	; 0x40
    f25a:	3101      	adds	r1, #1
    f25c:	f00b fedc 	bl	1b018 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    f260:	4809      	ldr	r0, [pc, #36]	; (f288 <hci_init+0x100>)
    f262:	f00b ffa8 	bl	1b1b6 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    f266:	9801      	ldr	r0, [sp, #4]
    f268:	f007 f86e 	bl	16348 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f26c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f270:	065a      	lsls	r2, r3, #25
    f272:	d40b      	bmi.n	f28c <hci_init+0x104>
		return -ENODEV;
    f274:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
    f278:	4620      	mov	r0, r4
    f27a:	b002      	add	sp, #8
    f27c:	bd70      	pop	{r4, r5, r6, pc}
    f27e:	bf00      	nop
    f280:	20000298 	.word	0x20000298
    f284:	200002d4 	.word	0x200002d4
    f288:	200002dc 	.word	0x200002dc
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f28c:	4621      	mov	r1, r4
    f28e:	aa01      	add	r2, sp, #4
    f290:	f242 0003 	movw	r0, #8195	; 0x2003
    f294:	f002 ff0c 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f298:	4604      	mov	r4, r0
    f29a:	2800      	cmp	r0, #0
    f29c:	d1ec      	bne.n	f278 <hci_init+0xf0>
	read_le_features_complete(rsp);
    f29e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f2a0:	48b3      	ldr	r0, [pc, #716]	; (f570 <hci_init+0x3e8>)
    f2a2:	6899      	ldr	r1, [r3, #8]
    f2a4:	2208      	movs	r2, #8
    f2a6:	3101      	adds	r1, #1
    f2a8:	f00b feb6 	bl	1b018 <memcpy>
	net_buf_unref(rsp);
    f2ac:	9801      	ldr	r0, [sp, #4]
    f2ae:	f007 f84b 	bl	16348 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f2b2:	4621      	mov	r1, r4
    f2b4:	aa01      	add	r2, sp, #4
    f2b6:	f242 0002 	movw	r0, #8194	; 0x2002
    f2ba:	f002 fef9 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f2be:	4604      	mov	r4, r0
    f2c0:	2800      	cmp	r0, #0
    f2c2:	d1d9      	bne.n	f278 <hci_init+0xf0>
		le_read_buffer_size_complete(rsp);
    f2c4:	9b01      	ldr	r3, [sp, #4]
    f2c6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f2c8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f2cc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    f2d0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    f2d2:	b121      	cbz	r1, f2de <hci_init+0x156>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f2d4:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    f2d6:	48a7      	ldr	r0, [pc, #668]	; (f574 <hci_init+0x3ec>)
    f2d8:	4611      	mov	r1, r2
    f2da:	f00e ffca 	bl	1e272 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f2de:	9801      	ldr	r0, [sp, #4]
    f2e0:	f007 f832 	bl	16348 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f2e4:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f2e8:	f016 0620 	ands.w	r6, r6, #32
    f2ec:	f000 811b 	beq.w	f526 <hci_init+0x39e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f2f0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f2f4:	071b      	lsls	r3, r3, #28
    f2f6:	d511      	bpl.n	f31c <hci_init+0x194>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f2f8:	aa01      	add	r2, sp, #4
    f2fa:	2100      	movs	r1, #0
    f2fc:	f242 001c 	movw	r0, #8220	; 0x201c
    f300:	f002 fed6 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f304:	4604      	mov	r4, r0
    f306:	2800      	cmp	r0, #0
    f308:	d1b6      	bne.n	f278 <hci_init+0xf0>
		le_read_supp_states_complete(rsp);
    f30a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f30c:	6883      	ldr	r3, [r0, #8]
    f30e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    f312:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f314:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    f318:	f007 f816 	bl	16348 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f31c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f320:	069e      	lsls	r6, r3, #26
    f322:	d523      	bpl.n	f36c <hci_init+0x1e4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f324:	f10d 0102 	add.w	r1, sp, #2
    f328:	4668      	mov	r0, sp
    f32a:	f00c f973 	bl	1b614 <hci_le_read_max_data_len>
		if (err) {
    f32e:	4604      	mov	r4, r0
    f330:	2800      	cmp	r0, #0
    f332:	d1a1      	bne.n	f278 <hci_init+0xf0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f334:	2104      	movs	r1, #4
    f336:	f242 0024 	movw	r0, #8228	; 0x2024
    f33a:	f002 fe5f 	bl	11ffc <bt_hci_cmd_create>
		if (!buf) {
    f33e:	4606      	mov	r6, r0
    f340:	2800      	cmp	r0, #0
    f342:	f000 80f7 	beq.w	f534 <hci_init+0x3ac>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    f346:	2104      	movs	r1, #4
    f348:	3008      	adds	r0, #8
    f34a:	f00e fbd9 	bl	1db00 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f34e:	f8bd 3000 	ldrh.w	r3, [sp]
    f352:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f354:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f358:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f35a:	4622      	mov	r2, r4
    f35c:	4631      	mov	r1, r6
    f35e:	f242 0024 	movw	r0, #8228	; 0x2024
    f362:	f002 fea5 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f366:	4604      	mov	r4, r0
    f368:	2800      	cmp	r0, #0
    f36a:	d185      	bne.n	f278 <hci_init+0xf0>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    f36c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f370:	065c      	lsls	r4, r3, #25
    f372:	d510      	bpl.n	f396 <hci_init+0x20e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    f374:	aa01      	add	r2, sp, #4
    f376:	2100      	movs	r1, #0
    f378:	f242 002a 	movw	r0, #8234	; 0x202a
    f37c:	f002 fe98 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f380:	4604      	mov	r4, r0
    f382:	2800      	cmp	r0, #0
    f384:	f47f af78 	bne.w	f278 <hci_init+0xf0>
		le_read_resolving_list_size_complete(rsp);
    f388:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
    f38a:	6883      	ldr	r3, [r0, #8]
    f38c:	785b      	ldrb	r3, [r3, #1]
    f38e:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
    f392:	f006 ffd9 	bl	16348 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f396:	2108      	movs	r1, #8
    f398:	f242 0001 	movw	r0, #8193	; 0x2001
    f39c:	f002 fe2e 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
    f3a0:	4604      	mov	r4, r0
    f3a2:	2800      	cmp	r0, #0
    f3a4:	f000 80c6 	beq.w	f534 <hci_init+0x3ac>
    f3a8:	2108      	movs	r1, #8
    f3aa:	4408      	add	r0, r1
    f3ac:	f00e fba8 	bl	1db00 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    f3b0:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    f3b4:	f011 0f40 	tst.w	r1, #64	; 0x40
    f3b8:	4602      	mov	r2, r0
    f3ba:	f240 2302 	movw	r3, #514	; 0x202
    f3be:	bf08      	it	eq
    f3c0:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f3c2:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f3c4:	bf4c      	ite	mi
    f3c6:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    f3ca:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f3ce:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f3d0:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f3d4:	bf48      	it	mi
    f3d6:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f3da:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f3de:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f3e2:	bf18      	it	ne
    f3e4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f3e8:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    f3ec:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    f3ee:	bf48      	it	mi
    f3f0:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f3f4:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    f3f6:	bf08      	it	eq
    f3f8:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    f3fc:	2100      	movs	r1, #0
    f3fe:	f00c f84a 	bl	1b496 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f402:	4621      	mov	r1, r4
    f404:	2200      	movs	r2, #0
    f406:	f242 0001 	movw	r0, #8193	; 0x2001
    f40a:	f002 fe51 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f40e:	4604      	mov	r4, r0
    f410:	2800      	cmp	r0, #0
    f412:	f47f af31 	bne.w	f278 <hci_init+0xf0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f416:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f41a:	0698      	lsls	r0, r3, #26
    f41c:	d41e      	bmi.n	f45c <hci_init+0x2d4>
	if (bt_dev.le.acl_mtu) {
    f41e:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    f422:	b9d9      	cbnz	r1, f45c <hci_init+0x2d4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f424:	aa01      	add	r2, sp, #4
    f426:	f241 0005 	movw	r0, #4101	; 0x1005
    f42a:	f002 fe41 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f42e:	4604      	mov	r4, r0
    f430:	2800      	cmp	r0, #0
    f432:	f47f af21 	bne.w	f278 <hci_init+0xf0>
	if (bt_dev.le.acl_mtu) {
    f436:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    f43a:	b963      	cbnz	r3, f456 <hci_init+0x2ce>
	read_buffer_size_complete(rsp);
    f43c:	9b01      	ldr	r3, [sp, #4]
    f43e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f440:	785a      	ldrb	r2, [r3, #1]
    f442:	7899      	ldrb	r1, [r3, #2]
    f444:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f448:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f44c:	889a      	ldrh	r2, [r3, #4]
    f44e:	4849      	ldr	r0, [pc, #292]	; (f574 <hci_init+0x3ec>)
    f450:	4611      	mov	r1, r2
    f452:	f00e ff0e 	bl	1e272 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f456:	9801      	ldr	r0, [sp, #4]
    f458:	f006 ff76 	bl	16348 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f45c:	2108      	movs	r1, #8
    f45e:	f640 4001 	movw	r0, #3073	; 0xc01
    f462:	f002 fdcb 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
    f466:	4604      	mov	r4, r0
    f468:	2800      	cmp	r0, #0
    f46a:	d063      	beq.n	f534 <hci_init+0x3ac>
    f46c:	2108      	movs	r1, #8
    f46e:	4408      	add	r0, r1
    f470:	f00e fb46 	bl	1db00 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    f474:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f478:	07d9      	lsls	r1, r3, #31
    f47a:	4602      	mov	r2, r0
    f47c:	d56f      	bpl.n	f55e <hci_init+0x3d6>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    f47e:	a13a      	add	r1, pc, #232	; (adr r1, f568 <hci_init+0x3e0>)
    f480:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    f484:	f00c f807 	bl	1b496 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f488:	4621      	mov	r1, r4
    f48a:	2200      	movs	r2, #0
    f48c:	f640 4001 	movw	r0, #3073	; 0xc01
    f490:	f002 fe0e 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f494:	4604      	mov	r4, r0
    f496:	2800      	cmp	r0, #0
    f498:	f47f aeee 	bne.w	f278 <hci_init+0xf0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f49c:	4601      	mov	r1, r0
    f49e:	aa01      	add	r2, sp, #4
    f4a0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f4a4:	f002 fe04 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f4a8:	bb40      	cbnz	r0, f4fc <hci_init+0x374>
	net_buf_unref(rsp);
    f4aa:	9801      	ldr	r0, [sp, #4]
    f4ac:	f006 ff4c 	bl	16348 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f4b0:	aa01      	add	r2, sp, #4
    f4b2:	4621      	mov	r1, r4
    f4b4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f4b8:	f002 fdfa 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
    f4bc:	b9f0      	cbnz	r0, f4fc <hci_init+0x374>
	rp.cmds = (void *)rsp->data;
    f4be:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f4c0:	482d      	ldr	r0, [pc, #180]	; (f578 <hci_init+0x3f0>)
    f4c2:	6899      	ldr	r1, [r3, #8]
    f4c4:	2202      	movs	r2, #2
    f4c6:	3101      	adds	r1, #1
    f4c8:	f00b fda6 	bl	1b018 <memcpy>
	net_buf_unref(rsp);
    f4cc:	9801      	ldr	r0, [sp, #4]
    f4ce:	f006 ff3b 	bl	16348 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f4d2:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    f4d6:	075b      	lsls	r3, r3, #29
    f4d8:	d510      	bpl.n	f4fc <hci_init+0x374>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f4da:	aa01      	add	r2, sp, #4
    f4dc:	4621      	mov	r1, r4
    f4de:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f4e2:	f002 fde5 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f4e6:	b948      	cbnz	r0, f4fc <hci_init+0x374>
		rp.feat = (void *)rsp->data;
    f4e8:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f4ea:	4824      	ldr	r0, [pc, #144]	; (f57c <hci_init+0x3f4>)
    f4ec:	6899      	ldr	r1, [r3, #8]
    f4ee:	2201      	movs	r2, #1
    f4f0:	4411      	add	r1, r2
    f4f2:	f00b fd91 	bl	1b018 <memcpy>
		net_buf_unref(rsp);
    f4f6:	9801      	ldr	r0, [sp, #4]
    f4f8:	f006 ff26 	bl	16348 <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    f4fc:	79eb      	ldrb	r3, [r5, #7]
    f4fe:	2b00      	cmp	r3, #0
    f500:	f47f aeba 	bne.w	f278 <hci_init+0xf0>
		bt_setup_public_id_addr();
    f504:	f003 f9a2 	bl	1284c <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    f508:	79eb      	ldrb	r3, [r5, #7]
    f50a:	2b00      	cmp	r3, #0
    f50c:	f47f aeb4 	bne.w	f278 <hci_init+0xf0>
		err = bt_setup_random_id_addr();
    f510:	f003 fa0e 	bl	12930 <bt_setup_random_id_addr>
		if (err) {
    f514:	4604      	mov	r4, r0
    f516:	2800      	cmp	r0, #0
    f518:	f47f aeae 	bne.w	f278 <hci_init+0xf0>
		err = set_random_address(&bt_dev.id_addr[0].a);
    f51c:	4818      	ldr	r0, [pc, #96]	; (f580 <hci_init+0x3f8>)
    f51e:	f002 fe29 	bl	12174 <set_random_address>
    f522:	4604      	mov	r4, r0
		if (err) {
    f524:	e6a8      	b.n	f278 <hci_init+0xf0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f526:	2102      	movs	r1, #2
    f528:	f640 406d 	movw	r0, #3181	; 0xc6d
    f52c:	f002 fd66 	bl	11ffc <bt_hci_cmd_create>
		if (!buf) {
    f530:	4604      	mov	r4, r0
    f532:	b910      	cbnz	r0, f53a <hci_init+0x3b2>
		return -ENOBUFS;
    f534:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f538:	e69e      	b.n	f278 <hci_init+0xf0>
    f53a:	2102      	movs	r1, #2
    f53c:	3008      	adds	r0, #8
    f53e:	f00e fadf 	bl	1db00 <net_buf_simple_add>
		cp_le->le = 0x01;
    f542:	2301      	movs	r3, #1
    f544:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f546:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f548:	4621      	mov	r1, r4
    f54a:	4632      	mov	r2, r6
    f54c:	f640 406d 	movw	r0, #3181	; 0xc6d
    f550:	f002 fdae 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
    f554:	4604      	mov	r4, r0
    f556:	2800      	cmp	r0, #0
    f558:	f43f aeca 	beq.w	f2f0 <hci_init+0x168>
    f55c:	e68c      	b.n	f278 <hci_init+0xf0>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    f55e:	4809      	ldr	r0, [pc, #36]	; (f584 <hci_init+0x3fc>)
    f560:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f564:	e78e      	b.n	f484 <hci_init+0x2fc>
    f566:	bf00      	nop
    f568:	02008890 	.word	0x02008890
    f56c:	20008000 	.word	0x20008000
    f570:	20000338 	.word	0x20000338
    f574:	20000368 	.word	0x20000368
    f578:	2000031d 	.word	0x2000031d
    f57c:	2000031c 	.word	0x2000031c
    f580:	20000299 	.word	0x20000299
    f584:	02008810 	.word	0x02008810

0000f588 <flow_ccc_cfg_changed>:
};

static void flow_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 uint16_t value)
{
	notify_enabled = value == BT_GATT_CCC_NOTIFY;
    f588:	1e4b      	subs	r3, r1, #1
    f58a:	4259      	negs	r1, r3
    f58c:	4159      	adcs	r1, r3
    f58e:	4b01      	ldr	r3, [pc, #4]	; (f594 <flow_ccc_cfg_changed+0xc>)
    f590:	7019      	strb	r1, [r3, #0]
}
    f592:	4770      	bx	lr
    f594:	20002125 	.word	0x20002125

0000f598 <disconnected>:

	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    f598:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
    f59a:	4803      	ldr	r0, [pc, #12]	; (f5a8 <disconnected+0x10>)
    f59c:	f009 ff97 	bl	194ce <printk>
    red_led = 0;
    f5a0:	4b02      	ldr	r3, [pc, #8]	; (f5ac <disconnected+0x14>)
    f5a2:	2200      	movs	r2, #0
    f5a4:	601a      	str	r2, [r3, #0]
}
    f5a6:	bd08      	pop	{r3, pc}
    f5a8:	0001f200 	.word	0x0001f200
    f5ac:	20001e04 	.word	0x20001e04

0000f5b0 <connected>:
{
    f5b0:	b508      	push	{r3, lr}
	if (err) {
    f5b2:	b121      	cbz	r1, f5be <connected+0xe>
}
    f5b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err 0x%02x)\n", err);
    f5b8:	4804      	ldr	r0, [pc, #16]	; (f5cc <connected+0x1c>)
    f5ba:	f009 bf88 	b.w	194ce <printk>
		printk("Connected\n");
    f5be:	4804      	ldr	r0, [pc, #16]	; (f5d0 <connected+0x20>)
    f5c0:	f009 ff85 	bl	194ce <printk>
        red_led = 1;
    f5c4:	4b03      	ldr	r3, [pc, #12]	; (f5d4 <connected+0x24>)
    f5c6:	2201      	movs	r2, #1
    f5c8:	601a      	str	r2, [r3, #0]
}
    f5ca:	bd08      	pop	{r3, pc}
    f5cc:	0001f21e 	.word	0x0001f21e
    f5d0:	0001f23e 	.word	0x0001f23e
    f5d4:	20001e04 	.word	0x20001e04

0000f5d8 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    f5d8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f5da:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    f5dc:	b08a      	sub	sp, #40	; 0x28
    f5de:	4604      	mov	r4, r0
    f5e0:	460e      	mov	r6, r1
    f5e2:	ad07      	add	r5, sp, #28
    f5e4:	2b03      	cmp	r3, #3
    f5e6:	d820      	bhi.n	f62a <bt_addr_le_to_str.constprop.0+0x52>
    f5e8:	e8df f003 	tbb	[pc, r3]
    f5ec:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f5f0:	4911      	ldr	r1, [pc, #68]	; (f638 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    f5f2:	4628      	mov	r0, r5
    f5f4:	f00b fcda 	bl	1afac <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f5f8:	7863      	ldrb	r3, [r4, #1]
    f5fa:	9304      	str	r3, [sp, #16]
    f5fc:	78a3      	ldrb	r3, [r4, #2]
    f5fe:	9303      	str	r3, [sp, #12]
    f600:	78e3      	ldrb	r3, [r4, #3]
    f602:	9302      	str	r3, [sp, #8]
    f604:	7923      	ldrb	r3, [r4, #4]
    f606:	9301      	str	r3, [sp, #4]
    f608:	7963      	ldrb	r3, [r4, #5]
    f60a:	9300      	str	r3, [sp, #0]
    f60c:	4a0b      	ldr	r2, [pc, #44]	; (f63c <bt_addr_le_to_str.constprop.0+0x64>)
    f60e:	79a3      	ldrb	r3, [r4, #6]
    f610:	9505      	str	r5, [sp, #20]
    f612:	211e      	movs	r1, #30
    f614:	4630      	mov	r0, r6
    f616:	f009 ff67 	bl	194e8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    f61a:	b00a      	add	sp, #40	; 0x28
    f61c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    f61e:	4908      	ldr	r1, [pc, #32]	; (f640 <bt_addr_le_to_str.constprop.0+0x68>)
    f620:	e7e7      	b.n	f5f2 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    f622:	4908      	ldr	r1, [pc, #32]	; (f644 <bt_addr_le_to_str.constprop.0+0x6c>)
    f624:	e7e5      	b.n	f5f2 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    f626:	4908      	ldr	r1, [pc, #32]	; (f648 <bt_addr_le_to_str.constprop.0+0x70>)
    f628:	e7e3      	b.n	f5f2 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    f62a:	4a08      	ldr	r2, [pc, #32]	; (f64c <bt_addr_le_to_str.constprop.0+0x74>)
    f62c:	210a      	movs	r1, #10
    f62e:	4628      	mov	r0, r5
    f630:	f009 ff5a 	bl	194e8 <snprintk>
		break;
    f634:	e7e0      	b.n	f5f8 <bt_addr_le_to_str.constprop.0+0x20>
    f636:	bf00      	nop
    f638:	0001f249 	.word	0x0001f249
    f63c:	0001f272 	.word	0x0001f272
    f640:	0001f250 	.word	0x0001f250
    f644:	0001f257 	.word	0x0001f257
    f648:	0001f261 	.word	0x0001f261
    f64c:	0001f26b 	.word	0x0001f26b

0000f650 <auth_passkey_display>:

	printk("Advertising successfully started\n");
}

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
    f650:	b510      	push	{r4, lr}
    f652:	b088      	sub	sp, #32
    f654:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f656:	f00c fb28 	bl	1bcaa <bt_conn_get_dst>
    f65a:	4669      	mov	r1, sp
    f65c:	f7ff ffbc 	bl	f5d8 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
    f660:	4803      	ldr	r0, [pc, #12]	; (f670 <auth_passkey_display+0x20>)
    f662:	4622      	mov	r2, r4
    f664:	4669      	mov	r1, sp
    f666:	f009 ff32 	bl	194ce <printk>
}
    f66a:	b008      	add	sp, #32
    f66c:	bd10      	pop	{r4, pc}
    f66e:	bf00      	nop
    f670:	0001f295 	.word	0x0001f295

0000f674 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
    f674:	b500      	push	{lr}
    f676:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f678:	f00c fb17 	bl	1bcaa <bt_conn_get_dst>
    f67c:	4669      	mov	r1, sp
    f67e:	f7ff ffab 	bl	f5d8 <bt_addr_le_to_str.constprop.0>

	printk("Pairing cancelled: %s\n", addr);
    f682:	4803      	ldr	r0, [pc, #12]	; (f690 <auth_cancel+0x1c>)
    f684:	4669      	mov	r1, sp
    f686:	f009 ff22 	bl	194ce <printk>
}
    f68a:	b009      	add	sp, #36	; 0x24
    f68c:	f85d fb04 	ldr.w	pc, [sp], #4
    f690:	0001f2ab 	.word	0x0001f2ab

0000f694 <main>:

	bt_bas_set_battery_level(battery_level);
}

void main(void)
{
    f694:	b570      	push	{r4, r5, r6, lr}
    f696:	b08a      	sub	sp, #40	; 0x28
    int err;

    err = generic_led_init();
    f698:	f000 f996 	bl	f9c8 <generic_led_init>
    if (err) {
    f69c:	4601      	mov	r1, r0
    f69e:	b120      	cbz	r0, f6aa <__kernel_ram_size+0x12>
        printk("LED error! (err %d)\n", err);
    f6a0:	485e      	ldr	r0, [pc, #376]	; (f81c <__kernel_ram_size+0x184>)
        return;
    }

    err = bt_enable(NULL);
    if (err) {
        printk("Bluetooth init failed (err %d)\n", err);
    f6a2:	f009 ff14 	bl	194ce <printk>
            i=0;
        }

        
    }
}
    f6a6:	b00a      	add	sp, #40	; 0x28
    f6a8:	bd70      	pop	{r4, r5, r6, pc}
    err = generic_sensor_adc_init();
    f6aa:	f000 f945 	bl	f938 <generic_sensor_adc_init>
    f6ae:	4601      	mov	r1, r0
    if (err) {
    f6b0:	b108      	cbz	r0, f6b6 <__kernel_ram_size+0x1e>
        printk("ADC error! (err %d)\n", err);
    f6b2:	485b      	ldr	r0, [pc, #364]	; (f820 <__kernel_ram_size+0x188>)
    f6b4:	e7f5      	b.n	f6a2 <__kernel_ram_size+0xa>
    err = bt_enable(NULL);
    f6b6:	f003 f967 	bl	12988 <bt_enable>
    if (err) {
    f6ba:	4606      	mov	r6, r0
    f6bc:	b110      	cbz	r0, f6c4 <__kernel_ram_size+0x2c>
        printk("Bluetooth init failed (err %d)\n", err);
    f6be:	4601      	mov	r1, r0
    f6c0:	4858      	ldr	r0, [pc, #352]	; (f824 <__kernel_ram_size+0x18c>)
    f6c2:	e7ee      	b.n	f6a2 <__kernel_ram_size+0xa>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    f6c4:	4d58      	ldr	r5, [pc, #352]	; (f828 <__kernel_ram_size+0x190>)
	printk("Bluetooth initialized\n");
    f6c6:	4859      	ldr	r0, [pc, #356]	; (f82c <__kernel_ram_size+0x194>)
    f6c8:	f009 ff01 	bl	194ce <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    f6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f6ce:	ac04      	add	r4, sp, #16
    f6d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f6d2:	682b      	ldr	r3, [r5, #0]
    f6d4:	6023      	str	r3, [r4, #0]
    f6d6:	4956      	ldr	r1, [pc, #344]	; (f830 <__kernel_ram_size+0x198>)
    f6d8:	9600      	str	r6, [sp, #0]
    f6da:	4633      	mov	r3, r6
    f6dc:	2203      	movs	r2, #3
    f6de:	a804      	add	r0, sp, #16
    f6e0:	f003 faea 	bl	12cb8 <bt_le_adv_start>
	if (err) {
    f6e4:	4601      	mov	r1, r0
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d037      	beq.n	f75a <__kernel_ram_size+0xc2>
		printk("Advertising failed to start (err %d)\n", err);
    f6ea:	4852      	ldr	r0, [pc, #328]	; (f834 <__kernel_ram_size+0x19c>)
    f6ec:	f009 feef 	bl	194ce <printk>
    bt_conn_cb_register(&conn_callbacks);
    f6f0:	4851      	ldr	r0, [pc, #324]	; (f838 <__kernel_ram_size+0x1a0>)
        if (notify_enabled) {
    f6f2:	4d52      	ldr	r5, [pc, #328]	; (f83c <__kernel_ram_size+0x1a4>)
    if (!(i % SENSOR_1_UPDATE_IVAL)) {
    f6f4:	4c52      	ldr	r4, [pc, #328]	; (f840 <__kernel_ram_size+0x1a8>)
    bt_conn_cb_register(&conn_callbacks);
    f6f6:	f003 fdf7 	bl	132e8 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&auth_cb_display);
    f6fa:	4852      	ldr	r0, [pc, #328]	; (f844 <__kernel_ram_size+0x1ac>)
    f6fc:	f004 f8fe 	bl	138fc <bt_conn_auth_cb_register>
	return z_impl_k_sleep(timeout);
    f700:	2021      	movs	r0, #33	; 0x21
    f702:	2100      	movs	r1, #0
    f704:	f009 f806 	bl	18714 <z_impl_k_sleep>
        if (notify_enabled) {
    f708:	782b      	ldrb	r3, [r5, #0]
    f70a:	2b00      	cmp	r3, #0
    f70c:	d037      	beq.n	f77e <__kernel_ram_size+0xe6>
    if (!(i % SENSOR_1_UPDATE_IVAL)) {
    f70e:	7821      	ldrb	r1, [r4, #0]
    f710:	2264      	movs	r2, #100	; 0x64
    f712:	fbb1 f3f2 	udiv	r3, r1, r2
    f716:	fb02 1313 	mls	r3, r2, r3, r1
    f71a:	f013 0fff 	tst.w	r3, #255	; 0xff
    f71e:	d12b      	bne.n	f778 <__kernel_ram_size+0xe0>
        values = generic_sensor_adc_sample();
    f720:	f000 f8a4 	bl	f86c <generic_sensor_adc_sample>
        val1 = values[0];
    f724:	4a48      	ldr	r2, [pc, #288]	; (f848 <__kernel_ram_size+0x1b0>)
    f726:	6803      	ldr	r3, [r0, #0]
    f728:	6013      	str	r3, [r2, #0]
        val2 = values[1];
    f72a:	4a48      	ldr	r2, [pc, #288]	; (f84c <__kernel_ram_size+0x1b4>)
    f72c:	6841      	ldr	r1, [r0, #4]
    f72e:	6011      	str	r1, [r2, #0]
        val3 = values[2];
    f730:	4a47      	ldr	r2, [pc, #284]	; (f850 <__kernel_ram_size+0x1b8>)
    f732:	6881      	ldr	r1, [r0, #8]
    f734:	6011      	str	r1, [r2, #0]
	bool notify = check_condition(sensor->condition,
    f736:	4947      	ldr	r1, [pc, #284]	; (f854 <__kernel_ram_size+0x1bc>)
    f738:	9303      	str	r3, [sp, #12]
    f73a:	7988      	ldrb	r0, [r1, #6]
    f73c:	f9b1 6000 	ldrsh.w	r6, [r1]
    f740:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
    f744:	3801      	subs	r0, #1
    f746:	b21b      	sxth	r3, r3
	switch (condition) {
    f748:	2808      	cmp	r0, #8
    f74a:	d80a      	bhi.n	f762 <__kernel_ram_size+0xca>
    f74c:	e8df f000 	tbb	[pc, r0]
    f750:	48440931 	.word	0x48440931
    f754:	5f5a5550 	.word	0x5f5a5550
    f758:	63          	.byte	0x63
    f759:	00          	.byte	0x00
	printk("Advertising successfully started\n");
    f75a:	483f      	ldr	r0, [pc, #252]	; (f858 <__kernel_ram_size+0x1c0>)
    f75c:	f009 feb7 	bl	194ce <printk>
    f760:	e7c6      	b.n	f6f0 <__kernel_ram_size+0x58>
	sensor->flow_value = value;
    f762:	800b      	strh	r3, [r1, #0]
        update_flow(NULL, &ess_svc.attrs[2], val1, &sensor_1);
    f764:	7821      	ldrb	r1, [r4, #0]
    f766:	2264      	movs	r2, #100	; 0x64
    f768:	fbb1 f3f2 	udiv	r3, r1, r2
    f76c:	fb02 1313 	mls	r3, r2, r3, r1
    if (!(i % 100U)) {
    f770:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        i = 0U; // unsigned int
    f774:	bf08      	it	eq
    f776:	7023      	strbeq	r3, [r4, #0]
    i++;
    f778:	7823      	ldrb	r3, [r4, #0]
    f77a:	3301      	adds	r3, #1
    f77c:	7023      	strb	r3, [r4, #0]
	uint8_t battery_level = bt_bas_get_battery_level();
    f77e:	f000 fe71 	bl	10464 <bt_bas_get_battery_level>
	battery_level--;
    f782:	3801      	subs	r0, #1
		battery_level = 100U;
    f784:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        if (i == 0){
    f788:	4e34      	ldr	r6, [pc, #208]	; (f85c <__kernel_ram_size+0x1c4>)
	bt_bas_set_battery_level(battery_level);
    f78a:	bf08      	it	eq
    f78c:	2064      	moveq	r0, #100	; 0x64
    f78e:	f000 fe6f 	bl	10470 <bt_bas_set_battery_level>
        if (i == 0){
    f792:	6833      	ldr	r3, [r6, #0]
    f794:	b92b      	cbnz	r3, f7a2 <__kernel_ram_size+0x10a>
            generic_led_blink(red_led, blue_led);
    f796:	4b32      	ldr	r3, [pc, #200]	; (f860 <__kernel_ram_size+0x1c8>)
    f798:	6819      	ldr	r1, [r3, #0]
    f79a:	4b32      	ldr	r3, [pc, #200]	; (f864 <__kernel_ram_size+0x1cc>)
    f79c:	6818      	ldr	r0, [r3, #0]
    f79e:	f000 f947 	bl	fa30 <generic_led_blink>
        i++;
    f7a2:	6833      	ldr	r3, [r6, #0]
    f7a4:	3301      	adds	r3, #1
        if (i >= 400) {
    f7a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
            i=0;
    f7aa:	bfa8      	it	ge
    f7ac:	2300      	movge	r3, #0
    f7ae:	6033      	str	r3, [r6, #0]
    while (1) {
    f7b0:	e7a6      	b.n	f700 <__kernel_ram_size+0x68>
	sensor->flow_value = value;
    f7b2:	800b      	strh	r3, [r1, #0]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    f7b4:	2218      	movs	r2, #24
    f7b6:	2100      	movs	r1, #0
    f7b8:	a804      	add	r0, sp, #16
		value = sys_cpu_to_le16(sensor->flow_value);
    f7ba:	9303      	str	r3, [sp, #12]
    f7bc:	f00b fc57 	bl	1b06e <memset>

	params.attr = attr;
    f7c0:	4b29      	ldr	r3, [pc, #164]	; (f868 <__kernel_ram_size+0x1d0>)
    f7c2:	9305      	str	r3, [sp, #20]
	params.data = data;
    f7c4:	ab03      	add	r3, sp, #12
    f7c6:	9306      	str	r3, [sp, #24]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    f7c8:	a904      	add	r1, sp, #16
	params.len = len;
    f7ca:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
    f7cc:	2000      	movs	r0, #0
	params.len = len;
    f7ce:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
    f7d2:	f005 f9f7 	bl	14bc4 <bt_gatt_notify_cb>
    f7d6:	e7c5      	b.n	f764 <__kernel_ram_size+0xcc>
		return new_val != old_val;
    f7d8:	1af2      	subs	r2, r6, r3
		return new_val != ref_val;
    f7da:	bf18      	it	ne
    f7dc:	2201      	movne	r2, #1
    f7de:	e003      	b.n	f7e8 <__kernel_ram_size+0x150>
		return new_val < ref_val;
    f7e0:	4293      	cmp	r3, r2
    f7e2:	bfac      	ite	ge
    f7e4:	2200      	movge	r2, #0
    f7e6:	2201      	movlt	r2, #1
	sensor->flow_value = value;
    f7e8:	800b      	strh	r3, [r1, #0]
	if (notify) {
    f7ea:	2a00      	cmp	r2, #0
    f7ec:	d0ba      	beq.n	f764 <__kernel_ram_size+0xcc>
    f7ee:	e7e1      	b.n	f7b4 <__kernel_ram_size+0x11c>
		return new_val <= ref_val;
    f7f0:	4293      	cmp	r3, r2
    f7f2:	bfcc      	ite	gt
    f7f4:	2200      	movgt	r2, #0
    f7f6:	2201      	movle	r2, #1
    f7f8:	e7f6      	b.n	f7e8 <__kernel_ram_size+0x150>
		return new_val > ref_val;
    f7fa:	4293      	cmp	r3, r2
    f7fc:	bfd4      	ite	le
    f7fe:	2200      	movle	r2, #0
    f800:	2201      	movgt	r2, #1
    f802:	e7f1      	b.n	f7e8 <__kernel_ram_size+0x150>
		return new_val >= ref_val;
    f804:	4293      	cmp	r3, r2
    f806:	bfb4      	ite	lt
    f808:	2200      	movlt	r2, #0
    f80a:	2201      	movge	r2, #1
    f80c:	e7ec      	b.n	f7e8 <__kernel_ram_size+0x150>
		return new_val == ref_val;
    f80e:	1a98      	subs	r0, r3, r2
    f810:	4242      	negs	r2, r0
    f812:	4142      	adcs	r2, r0
    f814:	e7e8      	b.n	f7e8 <__kernel_ram_size+0x150>
		return new_val != ref_val;
    f816:	1a9a      	subs	r2, r3, r2
    f818:	e7df      	b.n	f7da <__kernel_ram_size+0x142>
    f81a:	bf00      	nop
    f81c:	0001f2c2 	.word	0x0001f2c2
    f820:	0001f2d7 	.word	0x0001f2d7
    f824:	0001f2ec 	.word	0x0001f2ec
    f828:	0001ea20 	.word	0x0001ea20
    f82c:	0001f30c 	.word	0x0001f30c
    f830:	0001eac8 	.word	0x0001eac8
    f834:	0001f323 	.word	0x0001f323
    f838:	200004d4 	.word	0x200004d4
    f83c:	20002125 	.word	0x20002125
    f840:	20002124 	.word	0x20002124
    f844:	200004ac 	.word	0x200004ac
    f848:	20001e08 	.word	0x20001e08
    f84c:	20001e0c 	.word	0x20001e0c
    f850:	20001e10 	.word	0x20001e10
    f854:	200004f0 	.word	0x200004f0
    f858:	0001f349 	.word	0x0001f349
    f85c:	20001e00 	.word	0x20001e00
    f860:	200004d0 	.word	0x200004d0
    f864:	20001e04 	.word	0x20001e04
    f868:	0001eb08 	.word	0x0001eb08

0000f86c <generic_sensor_adc_sample>:
    .input_positive = NRF_SAADC_INPUT_AIN4,
    .input_negative = NRF_SAADC_INPUT_AIN5,
};

int * generic_sensor_adc_sample(void)
{
    f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static int err;
    static int16_t m_sample_buffer[BUFFER_SIZE];
    static int adc_voltage[BUFFER_SIZE];

    if (!adc_dev) {
    f870:	4b27      	ldr	r3, [pc, #156]	; (f910 <generic_sensor_adc_sample+0xa4>)
    f872:	681c      	ldr	r4, [r3, #0]
{
    f874:	b086      	sub	sp, #24
    if (!adc_dev) {
    f876:	2c00      	cmp	r4, #0
    f878:	d042      	beq.n	f900 <generic_sensor_adc_sample+0x94>
        return adc_voltage;
    }
    
    // init the adc_voltage with zeros
    for (int i = 0; i < BUFFER_SIZE; i++) {
        adc_voltage[i] = 0;
    f87a:	4b26      	ldr	r3, [pc, #152]	; (f914 <generic_sensor_adc_sample+0xa8>)
    f87c:	2100      	movs	r1, #0
    }

    const struct adc_sequence sequence = {
    f87e:	2214      	movs	r2, #20
    f880:	a801      	add	r0, sp, #4
        adc_voltage[i] = 0;
    f882:	e9c3 1100 	strd	r1, r1, [r3]
    f886:	6099      	str	r1, [r3, #8]
    const struct adc_sequence sequence = {
    f888:	f00b fbf1 	bl	1b06e <memset>
    f88c:	4a22      	ldr	r2, [pc, #136]	; (f918 <generic_sensor_adc_sample+0xac>)
    f88e:	9203      	str	r2, [sp, #12]
    f890:	230e      	movs	r3, #14
    f892:	2206      	movs	r2, #6
    f894:	9302      	str	r3, [sp, #8]
    f896:	9204      	str	r2, [sp, #16]
    f898:	f88d 3014 	strb.w	r3, [sp, #20]
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    f89c:	68a3      	ldr	r3, [r4, #8]
    f89e:	a901      	add	r1, sp, #4
    f8a0:	685b      	ldr	r3, [r3, #4]
    f8a2:	4620      	mov	r0, r4
    f8a4:	4798      	blx	r3
        .buffer_size = sizeof(m_sample_buffer),
        .resolution = ADC_RESOLUTION,
    };
        
    err = adc_read(adc_dev, &sequence);
    if (err) {
    f8a6:	4601      	mov	r1, r0
    f8a8:	b110      	cbz	r0, f8b0 <generic_sensor_adc_sample+0x44>
        printk("Error in adc sampling: %d\n", err);
    f8aa:	481c      	ldr	r0, [pc, #112]	; (f91c <generic_sensor_adc_sample+0xb0>)
    f8ac:	f009 fe0f 	bl	194ce <printk>
    f8b0:	4f19      	ldr	r7, [pc, #100]	; (f918 <generic_sensor_adc_sample+0xac>)
    f8b2:	4d18      	ldr	r5, [pc, #96]	; (f914 <generic_sensor_adc_sample+0xa8>)
         2^11 = 2048
         2^12 = 4096
         2^13 = 8192
         2^14 = 16384
         */
        adc_voltage[i] = (int)((((float)m_sample_buffer[i] / 8192.0f) * 600.0f * 6.0f) * 1.0f);
    f8b4:	f8df 9078 	ldr.w	r9, [pc, #120]	; f930 <generic_sensor_adc_sample+0xc4>
    f8b8:	f8df 8078 	ldr.w	r8, [pc, #120]	; f934 <generic_sensor_adc_sample+0xc8>
{
    f8bc:	2400      	movs	r4, #0
        adc_voltage[i] = (int)((((float)m_sample_buffer[i] / 8192.0f) * 600.0f * 6.0f) * 1.0f);
    f8be:	f04f 5a64 	mov.w	sl, #956301312	; 0x39000000
    f8c2:	f937 6b02 	ldrsh.w	r6, [r7], #2
    f8c6:	4630      	mov	r0, r6
    f8c8:	f7f0 fcc4 	bl	254 <__aeabi_i2f>
    f8cc:	4651      	mov	r1, sl
    f8ce:	f7f0 fd15 	bl	2fc <__aeabi_fmul>
    f8d2:	4649      	mov	r1, r9
    f8d4:	f7f0 fd12 	bl	2fc <__aeabi_fmul>
    f8d8:	4641      	mov	r1, r8
    f8da:	f7f0 fd0f 	bl	2fc <__aeabi_fmul>
    f8de:	f7f0 fe5d 	bl	59c <__aeabi_f2iz>
        // Print the values
        printk("ADC raw value: %d \n", m_sample_buffer[i]);
    f8e2:	4631      	mov	r1, r6
        adc_voltage[i] = (int)((((float)m_sample_buffer[i] / 8192.0f) * 600.0f * 6.0f) * 1.0f);
    f8e4:	6028      	str	r0, [r5, #0]
        printk("ADC raw value: %d \n", m_sample_buffer[i]);
    f8e6:	480e      	ldr	r0, [pc, #56]	; (f920 <generic_sensor_adc_sample+0xb4>)
    f8e8:	f009 fdf1 	bl	194ce <printk>
    for (int i = 0; i < BUFFER_SIZE; i++) {
    f8ec:	3401      	adds	r4, #1
        printk("Estimated voltage: %d mV\n", adc_voltage[i]);
    f8ee:	f855 1b04 	ldr.w	r1, [r5], #4
    f8f2:	480c      	ldr	r0, [pc, #48]	; (f924 <generic_sensor_adc_sample+0xb8>)
    f8f4:	f009 fdeb 	bl	194ce <printk>
    for (int i = 0; i < BUFFER_SIZE; i++) {
    f8f8:	2c03      	cmp	r4, #3
    f8fa:	d1e2      	bne.n	f8c2 <generic_sensor_adc_sample+0x56>
    }

    printk("\n");
    f8fc:	480a      	ldr	r0, [pc, #40]	; (f928 <generic_sensor_adc_sample+0xbc>)
    f8fe:	e000      	b.n	f902 <generic_sensor_adc_sample+0x96>
        printk("Missing device\n");
    f900:	480a      	ldr	r0, [pc, #40]	; (f92c <generic_sensor_adc_sample+0xc0>)
    printk("\n");
    f902:	f009 fde4 	bl	194ce <printk>
    return adc_voltage;
}
    f906:	4803      	ldr	r0, [pc, #12]	; (f914 <generic_sensor_adc_sample+0xa8>)
    f908:	b006      	add	sp, #24
    f90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f90e:	bf00      	nop
    f910:	20001e14 	.word	0x20001e14
    f914:	20001e18 	.word	0x20001e18
    f918:	20002104 	.word	0x20002104
    f91c:	0001f384 	.word	0x0001f384
    f920:	0001f39f 	.word	0x0001f39f
    f924:	0001f3b3 	.word	0x0001f3b3
    f928:	0001f3b1 	.word	0x0001f3b1
    f92c:	0001f374 	.word	0x0001f374
    f930:	44160000 	.word	0x44160000
    f934:	40c00000 	.word	0x40c00000

0000f938 <generic_sensor_adc_init>:

int generic_sensor_adc_init(void)
{
    f938:	b510      	push	{r4, lr}
    int err;

    printk("nrf52 saadc sampling 3 channels differential AIN0~AIN1 AIN2~AIN3 AIN4~AIN5\n");
    f93a:	4818      	ldr	r0, [pc, #96]	; (f99c <generic_sensor_adc_init+0x64>)
    f93c:	f009 fdc7 	bl	194ce <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    f940:	4817      	ldr	r0, [pc, #92]	; (f9a0 <generic_sensor_adc_init+0x68>)

    adc_dev = device_get_binding("ADC_0");
    f942:	4c18      	ldr	r4, [pc, #96]	; (f9a4 <generic_sensor_adc_init+0x6c>)
    f944:	f008 fa8c 	bl	17e60 <z_impl_device_get_binding>
    f948:	6020      	str	r0, [r4, #0]
    if (!adc_dev) {
    f94a:	b930      	cbnz	r0, f95a <generic_sensor_adc_init+0x22>
        printk("device_get_binding ADC_0 failed\n");
    f94c:	4816      	ldr	r0, [pc, #88]	; (f9a8 <generic_sensor_adc_init+0x70>)
    f94e:	f009 fdbe 	bl	194ce <printk>
    }

    err = adc_channel_setup(adc_dev, &m_channel_3_cfg);
    if (err) {
        printk("Error in adc setup 3: %d\n", err);
        return -1;
    f952:	f04f 34ff 	mov.w	r4, #4294967295
    //     }
    //     printk("*** *** *** *** *** *** *** *** *** ***\n\n");
    //     k_sleep(K_MSEC(50));
    // }
    return 0;
}
    f956:	4620      	mov	r0, r4
    f958:	bd10      	pop	{r4, pc}
    err = adc_channel_setup(adc_dev, &m_channel_1_cfg);
    f95a:	4914      	ldr	r1, [pc, #80]	; (f9ac <generic_sensor_adc_init+0x74>)
    f95c:	f009 fd55 	bl	1940a <adc_channel_setup>
    if (err) {
    f960:	4601      	mov	r1, r0
    f962:	b118      	cbz	r0, f96c <generic_sensor_adc_init+0x34>
        printk("Error in adc setup 1 : %d\n", err);
    f964:	4812      	ldr	r0, [pc, #72]	; (f9b0 <generic_sensor_adc_init+0x78>)
        printk("Error in adc setup 3: %d\n", err);
    f966:	f009 fdb2 	bl	194ce <printk>
    f96a:	e7f2      	b.n	f952 <generic_sensor_adc_init+0x1a>
    err = adc_channel_setup(adc_dev, &m_channel_2_cfg);
    f96c:	4911      	ldr	r1, [pc, #68]	; (f9b4 <generic_sensor_adc_init+0x7c>)
    f96e:	6820      	ldr	r0, [r4, #0]
    f970:	f009 fd4b 	bl	1940a <adc_channel_setup>
    if (err) {
    f974:	4601      	mov	r1, r0
    f976:	b108      	cbz	r0, f97c <generic_sensor_adc_init+0x44>
        printk("Error in adc setup 2: %d\n", err);
    f978:	480f      	ldr	r0, [pc, #60]	; (f9b8 <generic_sensor_adc_init+0x80>)
    f97a:	e7f4      	b.n	f966 <generic_sensor_adc_init+0x2e>
    err = adc_channel_setup(adc_dev, &m_channel_3_cfg);
    f97c:	6820      	ldr	r0, [r4, #0]
    f97e:	490f      	ldr	r1, [pc, #60]	; (f9bc <generic_sensor_adc_init+0x84>)
    f980:	f009 fd43 	bl	1940a <adc_channel_setup>
    if (err) {
    f984:	4604      	mov	r4, r0
    f986:	b110      	cbz	r0, f98e <generic_sensor_adc_init+0x56>
        printk("Error in adc setup 3: %d\n", err);
    f988:	4601      	mov	r1, r0
    f98a:	480d      	ldr	r0, [pc, #52]	; (f9c0 <generic_sensor_adc_init+0x88>)
    f98c:	e7eb      	b.n	f966 <generic_sensor_adc_init+0x2e>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    f98e:	4b0d      	ldr	r3, [pc, #52]	; (f9c4 <generic_sensor_adc_init+0x8c>)
    f990:	2201      	movs	r2, #1
    f992:	60da      	str	r2, [r3, #12]
    values = generic_sensor_adc_sample();
    f994:	f7ff ff6a 	bl	f86c <generic_sensor_adc_sample>
    return 0;
    f998:	e7dd      	b.n	f956 <generic_sensor_adc_init+0x1e>
    f99a:	bf00      	nop
    f99c:	0001f3cd 	.word	0x0001f3cd
    f9a0:	0001f419 	.word	0x0001f419
    f9a4:	20001e14 	.word	0x20001e14
    f9a8:	0001f41f 	.word	0x0001f41f
    f9ac:	0001f1e8 	.word	0x0001f1e8
    f9b0:	0001f440 	.word	0x0001f440
    f9b4:	0001f1f0 	.word	0x0001f1f0
    f9b8:	0001f45b 	.word	0x0001f45b
    f9bc:	0001f1f8 	.word	0x0001f1f8
    f9c0:	0001f475 	.word	0x0001f475
    f9c4:	40007000 	.word	0x40007000

0000f9c8 <generic_led_init>:
const struct device *led0_dev;
const struct device *led1_dev;
bool led0_is_on = true;
bool led1_is_on = false;

int generic_led_init(void){
    f9c8:	b508      	push	{r3, lr}
    f9ca:	4812      	ldr	r0, [pc, #72]	; (fa14 <generic_led_init+0x4c>)
    f9cc:	f008 fa48 	bl	17e60 <z_impl_device_get_binding>
    // Config LED
    int err;
    led0_dev = device_get_binding(LED0);
    f9d0:	4a11      	ldr	r2, [pc, #68]	; (fa18 <generic_led_init+0x50>)
    f9d2:	6010      	str	r0, [r2, #0]
    if (led0_dev == NULL) {
    f9d4:	b928      	cbnz	r0, f9e2 <generic_led_init+0x1a>
        printk("No device for LED0.");
    f9d6:	4811      	ldr	r0, [pc, #68]	; (fa1c <generic_led_init+0x54>)
        printk("No device.");
        return -1;
    }
    err = gpio_pin_configure(led1_dev, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    if (err < 0) {
        printk("GPIO config error.");
    f9d8:	f009 fd79 	bl	194ce <printk>
        return -1;
    f9dc:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return 0;
}
    f9e0:	bd08      	pop	{r3, pc}
    err = gpio_pin_configure(led0_dev, PIN0, GPIO_OUTPUT_ACTIVE | FLAGS0);
    f9e2:	2111      	movs	r1, #17
    f9e4:	f009 fd20 	bl	19428 <gpio_pin_configure.constprop.0>
    if (err < 0) {
    f9e8:	2800      	cmp	r0, #0
    f9ea:	da01      	bge.n	f9f0 <generic_led_init+0x28>
        printk("GPIO config error in LED0.");
    f9ec:	480c      	ldr	r0, [pc, #48]	; (fa20 <generic_led_init+0x58>)
    f9ee:	e7f3      	b.n	f9d8 <generic_led_init+0x10>
    f9f0:	4808      	ldr	r0, [pc, #32]	; (fa14 <generic_led_init+0x4c>)
    f9f2:	f008 fa35 	bl	17e60 <z_impl_device_get_binding>
    led1_dev = device_get_binding(LED1);
    f9f6:	4a0b      	ldr	r2, [pc, #44]	; (fa24 <generic_led_init+0x5c>)
    f9f8:	6010      	str	r0, [r2, #0]
    if (led1_dev == NULL) {
    f9fa:	b908      	cbnz	r0, fa00 <generic_led_init+0x38>
        printk("No device.");
    f9fc:	480a      	ldr	r0, [pc, #40]	; (fa28 <generic_led_init+0x60>)
    f9fe:	e7eb      	b.n	f9d8 <generic_led_init+0x10>
    err = gpio_pin_configure(led1_dev, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    fa00:	2113      	movs	r1, #19
    fa02:	f009 fd11 	bl	19428 <gpio_pin_configure.constprop.0>
    if (err < 0) {
    fa06:	2800      	cmp	r0, #0
    fa08:	da01      	bge.n	fa0e <generic_led_init+0x46>
        printk("GPIO config error.");
    fa0a:	4808      	ldr	r0, [pc, #32]	; (fa2c <generic_led_init+0x64>)
    fa0c:	e7e4      	b.n	f9d8 <generic_led_init+0x10>
    return 0;
    fa0e:	2000      	movs	r0, #0
    fa10:	e7e6      	b.n	f9e0 <generic_led_init+0x18>
    fa12:	bf00      	nop
    fa14:	0001f48f 	.word	0x0001f48f
    fa18:	20001e24 	.word	0x20001e24
    fa1c:	0001f496 	.word	0x0001f496
    fa20:	0001f4aa 	.word	0x0001f4aa
    fa24:	20001e28 	.word	0x20001e28
    fa28:	0001f4c5 	.word	0x0001f4c5
    fa2c:	0001f4d0 	.word	0x0001f4d0

0000fa30 <generic_led_blink>:

void generic_led_blink(int red, int blue){
    fa30:	b538      	push	{r3, r4, r5, lr}
    gpio_pin_set(led0_dev, PIN0, (int)(led0_is_on & red));
    fa32:	4b13      	ldr	r3, [pc, #76]	; (fa80 <generic_led_blink+0x50>)
    fa34:	4c13      	ldr	r4, [pc, #76]	; (fa84 <generic_led_blink+0x54>)
    fa36:	681b      	ldr	r3, [r3, #0]
    fa38:	7822      	ldrb	r2, [r4, #0]
void generic_led_blink(int red, int blue){
    fa3a:	460d      	mov	r5, r1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    fa3c:	6919      	ldr	r1, [r3, #16]
    fa3e:	6809      	ldr	r1, [r1, #0]
    gpio_pin_set(led0_dev, PIN0, (int)(led0_is_on & red));
    fa40:	4002      	ands	r2, r0
    fa42:	0389      	lsls	r1, r1, #14
		value = (value != 0) ? 0 : 1;
    fa44:	bf48      	it	mi
    fa46:	f082 0201 	eormi.w	r2, r2, #1
	}

	return gpio_pin_set_raw(port, pin, value);
    fa4a:	2111      	movs	r1, #17
    fa4c:	4618      	mov	r0, r3
    fa4e:	f009 fcdf 	bl	19410 <gpio_pin_set_raw>
    led0_is_on = !led0_is_on;
    fa52:	7823      	ldrb	r3, [r4, #0]
    fa54:	f083 0301 	eor.w	r3, r3, #1
    fa58:	7023      	strb	r3, [r4, #0]
    gpio_pin_set(led1_dev, PIN1, (int)(led1_is_on & blue));
    fa5a:	4b0b      	ldr	r3, [pc, #44]	; (fa88 <generic_led_blink+0x58>)
    fa5c:	4c0b      	ldr	r4, [pc, #44]	; (fa8c <generic_led_blink+0x5c>)
    fa5e:	6818      	ldr	r0, [r3, #0]
    fa60:	7822      	ldrb	r2, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    fa62:	6903      	ldr	r3, [r0, #16]
    fa64:	681b      	ldr	r3, [r3, #0]
    fa66:	402a      	ands	r2, r5
    fa68:	031b      	lsls	r3, r3, #12
		value = (value != 0) ? 0 : 1;
    fa6a:	bf48      	it	mi
    fa6c:	f082 0201 	eormi.w	r2, r2, #1
	return gpio_pin_set_raw(port, pin, value);
    fa70:	2113      	movs	r1, #19
    fa72:	f009 fccd 	bl	19410 <gpio_pin_set_raw>
    led1_is_on = !led1_is_on;
    fa76:	7823      	ldrb	r3, [r4, #0]
    fa78:	f083 0301 	eor.w	r3, r3, #1
    fa7c:	7023      	strb	r3, [r4, #0]
    // printk("led\n");
}
    fa7e:	bd38      	pop	{r3, r4, r5, pc}
    fa80:	20001e24 	.word	0x20001e24
    fa84:	200006ff 	.word	0x200006ff
    fa88:	20001e28 	.word	0x20001e28
    fa8c:	20002126 	.word	0x20002126

0000fa90 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fa90:	680b      	ldr	r3, [r1, #0]
    fa92:	3301      	adds	r3, #1
    fa94:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    fa96:	4b01      	ldr	r3, [pc, #4]	; (fa9c <char_out+0xc>)
    fa98:	681b      	ldr	r3, [r3, #0]
    fa9a:	4718      	bx	r3
    fa9c:	2000050c 	.word	0x2000050c

0000faa0 <__printk_hook_install>:
	_char_out = fn;
    faa0:	4b01      	ldr	r3, [pc, #4]	; (faa8 <__printk_hook_install+0x8>)
    faa2:	6018      	str	r0, [r3, #0]
}
    faa4:	4770      	bx	lr
    faa6:	bf00      	nop
    faa8:	2000050c 	.word	0x2000050c

0000faac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    faac:	b507      	push	{r0, r1, r2, lr}
    faae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fab0:	2100      	movs	r1, #0
{
    fab2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    fab4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    fab6:	4803      	ldr	r0, [pc, #12]	; (fac4 <vprintk+0x18>)
    fab8:	a901      	add	r1, sp, #4
    faba:	f000 f8ff 	bl	fcbc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fabe:	b003      	add	sp, #12
    fac0:	f85d fb04 	ldr.w	pc, [sp], #4
    fac4:	0000fa91 	.word	0x0000fa91

0000fac8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fac8:	b530      	push	{r4, r5, lr}
    faca:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    facc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fad0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fad2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    fad4:	a901      	add	r1, sp, #4
    fad6:	4805      	ldr	r0, [pc, #20]	; (faec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fad8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    fada:	f000 f8ef 	bl	fcbc <cbvprintf>

	if (ctx.count < ctx.max) {
    fade:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fae2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fae4:	bfb8      	it	lt
    fae6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fae8:	b005      	add	sp, #20
    faea:	bd30      	pop	{r4, r5, pc}
    faec:	000194a9 	.word	0x000194a9

0000faf0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    faf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    faf4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    faf8:	f019 0808 	ands.w	r8, r9, #8
{
    fafc:	4604      	mov	r4, r0
    fafe:	4693      	mov	fp, r2
	if (processing) {
    fb00:	d00d      	beq.n	fb1e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    fb02:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fb04:	bf0c      	ite	eq
    fb06:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fb0a:	f049 0920 	orrne.w	r9, r9, #32
    fb0e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fb12:	f38b 8811 	msr	BASEPRI, fp
    fb16:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    fb1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fb1e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    fb22:	2902      	cmp	r1, #2
    fb24:	d107      	bne.n	fb36 <process_event+0x46>
			evt = process_recheck(mgr);
    fb26:	4620      	mov	r0, r4
    fb28:	f009 fceb 	bl	19502 <process_recheck>
		if (evt == EVT_NOP) {
    fb2c:	2800      	cmp	r0, #0
    fb2e:	d0f0      	beq.n	fb12 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    fb30:	2801      	cmp	r0, #1
    fb32:	8b23      	ldrh	r3, [r4, #24]
    fb34:	d150      	bne.n	fbd8 <process_event+0xe8>
			res = mgr->last_res;
    fb36:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fb38:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    fb3a:	2f00      	cmp	r7, #0
    fb3c:	da15      	bge.n	fb6a <process_event+0x7a>
		*clients = mgr->clients;
    fb3e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb40:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    fb44:	e9c4 8800 	strd	r8, r8, [r4]
    fb48:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fb4c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    fb4e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fb50:	8b21      	ldrh	r1, [r4, #24]
    fb52:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    fb56:	45ca      	cmp	sl, r9
    fb58:	d002      	beq.n	fb60 <process_event+0x70>
		if (do_monitors
    fb5a:	68a3      	ldr	r3, [r4, #8]
    fb5c:	2b00      	cmp	r3, #0
    fb5e:	d15c      	bne.n	fc1a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    fb60:	b90d      	cbnz	r5, fb66 <process_event+0x76>
		    || (transit != NULL)) {
    fb62:	2e00      	cmp	r6, #0
    fb64:	d074      	beq.n	fc50 <process_event+0x160>
    fb66:	2300      	movs	r3, #0
    fb68:	e058      	b.n	fc1c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fb6a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    fb6e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    fb70:	2a01      	cmp	r2, #1
    fb72:	d820      	bhi.n	fbb6 <process_event+0xc6>
		*clients = mgr->clients;
    fb74:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    fb78:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    fb7a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    fb7c:	b289      	uxth	r1, r1
	list->tail = NULL;
    fb7e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    fb82:	d10c      	bne.n	fb9e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fb84:	2d00      	cmp	r5, #0
    fb86:	462b      	mov	r3, r5
    fb88:	bf38      	it	cc
    fb8a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fb8c:	b12b      	cbz	r3, fb9a <process_event+0xaa>
				mgr->refs += 1U;
    fb8e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fb90:	681b      	ldr	r3, [r3, #0]
    fb92:	3201      	adds	r2, #1
    fb94:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fb96:	2b00      	cmp	r3, #0
    fb98:	d1f8      	bne.n	fb8c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fb9a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    fb9e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    fba0:	4620      	mov	r0, r4
    fba2:	f009 fcae 	bl	19502 <process_recheck>
    fba6:	4606      	mov	r6, r0
    fba8:	2800      	cmp	r0, #0
    fbaa:	d0d1      	beq.n	fb50 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fbac:	8b23      	ldrh	r3, [r4, #24]
    fbae:	f043 0320 	orr.w	r3, r3, #32
    fbb2:	8323      	strh	r3, [r4, #24]
    fbb4:	e7cb      	b.n	fb4e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    fbb6:	2b04      	cmp	r3, #4
    fbb8:	d10c      	bne.n	fbd4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fbba:	f021 0107 	bic.w	r1, r1, #7
    fbbe:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fbc0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    fbc2:	4620      	mov	r0, r4
    fbc4:	f009 fc9d 	bl	19502 <process_recheck>
    fbc8:	4605      	mov	r5, r0
    fbca:	2800      	cmp	r0, #0
    fbcc:	d0bf      	beq.n	fb4e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fbce:	f041 0120 	orr.w	r1, r1, #32
    fbd2:	8321      	strh	r1, [r4, #24]
    fbd4:	2500      	movs	r5, #0
    fbd6:	e7ba      	b.n	fb4e <process_event+0x5e>
		} else if (evt == EVT_START) {
    fbd8:	2803      	cmp	r0, #3
    fbda:	d109      	bne.n	fbf0 <process_event+0x100>
			transit = mgr->transitions->start;
    fbdc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fbde:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    fbe2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fbe4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    fbe8:	8323      	strh	r3, [r4, #24]
}
    fbea:	2500      	movs	r5, #0
		res = 0;
    fbec:	462f      	mov	r7, r5
    fbee:	e7af      	b.n	fb50 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    fbf0:	2804      	cmp	r0, #4
    fbf2:	d106      	bne.n	fc02 <process_event+0x112>
			transit = mgr->transitions->stop;
    fbf4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fbf6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    fbfa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fbfc:	f043 0304 	orr.w	r3, r3, #4
    fc00:	e7f2      	b.n	fbe8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    fc02:	2805      	cmp	r0, #5
    fc04:	d106      	bne.n	fc14 <process_event+0x124>
			transit = mgr->transitions->reset;
    fc06:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fc08:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    fc0c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fc0e:	f043 0305 	orr.w	r3, r3, #5
    fc12:	e7e9      	b.n	fbe8 <process_event+0xf8>
    fc14:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    fc16:	462e      	mov	r6, r5
    fc18:	e7e8      	b.n	fbec <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    fc1a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fc1c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    fc20:	8321      	strh	r1, [r4, #24]
    fc22:	f38b 8811 	msr	BASEPRI, fp
    fc26:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    fc2a:	bb03      	cbnz	r3, fc6e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    fc2c:	2d00      	cmp	r5, #0
    fc2e:	d133      	bne.n	fc98 <process_event+0x1a8>
			if (transit != NULL) {
    fc30:	b116      	cbz	r6, fc38 <process_event+0x148>
				transit(mgr, transition_complete);
    fc32:	4921      	ldr	r1, [pc, #132]	; (fcb8 <process_event+0x1c8>)
    fc34:	4620      	mov	r0, r4
    fc36:	47b0      	blx	r6
	__asm__ volatile(
    fc38:	f04f 0340 	mov.w	r3, #64	; 0x40
    fc3c:	f3ef 8b11 	mrs	fp, BASEPRI
    fc40:	f383 8811 	msr	BASEPRI, r3
    fc44:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    fc48:	8b23      	ldrh	r3, [r4, #24]
    fc4a:	f023 0308 	bic.w	r3, r3, #8
    fc4e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    fc50:	8b23      	ldrh	r3, [r4, #24]
    fc52:	06da      	lsls	r2, r3, #27
    fc54:	d528      	bpl.n	fca8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    fc56:	f023 0310 	bic.w	r3, r3, #16
    fc5a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    fc5c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    fc5e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    fc62:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    fc66:	2900      	cmp	r1, #0
    fc68:	f47f af5b 	bne.w	fb22 <process_event+0x32>
out:
    fc6c:	e751      	b.n	fb12 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fc6e:	68a1      	ldr	r1, [r4, #8]
    fc70:	2900      	cmp	r1, #0
    fc72:	d0db      	beq.n	fc2c <process_event+0x13c>
	return node->next;
    fc74:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    fc76:	f8d1 b004 	ldr.w	fp, [r1, #4]
    fc7a:	2b00      	cmp	r3, #0
    fc7c:	bf38      	it	cc
    fc7e:	2300      	movcc	r3, #0
    fc80:	4699      	mov	r9, r3
    fc82:	4652      	mov	r2, sl
    fc84:	463b      	mov	r3, r7
    fc86:	4620      	mov	r0, r4
    fc88:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fc8a:	f1b9 0f00 	cmp.w	r9, #0
    fc8e:	d0cd      	beq.n	fc2c <process_event+0x13c>
    fc90:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fc94:	4649      	mov	r1, r9
    fc96:	e7ee      	b.n	fc76 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fc98:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    fc9a:	463b      	mov	r3, r7
    fc9c:	4652      	mov	r2, sl
    fc9e:	4620      	mov	r0, r4
    fca0:	682d      	ldr	r5, [r5, #0]
    fca2:	f009 fc4a 	bl	1953a <notify_one>
    fca6:	e7c1      	b.n	fc2c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    fca8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    fcac:	bf1e      	ittt	ne
    fcae:	f023 0320 	bicne.w	r3, r3, #32
    fcb2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    fcb4:	2102      	movne	r1, #2
    fcb6:	e7d2      	b.n	fc5e <process_event+0x16e>
    fcb8:	00019567 	.word	0x00019567

0000fcbc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    fcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcc0:	b091      	sub	sp, #68	; 0x44
    fcc2:	468b      	mov	fp, r1
    fcc4:	9002      	str	r0, [sp, #8]
    fcc6:	4692      	mov	sl, r2
    fcc8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    fcca:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    fccc:	f89a 0000 	ldrb.w	r0, [sl]
    fcd0:	b908      	cbnz	r0, fcd6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    fcd2:	4628      	mov	r0, r5
    fcd4:	e35e      	b.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
		if (*fp != '%') {
    fcd6:	2825      	cmp	r0, #37	; 0x25
    fcd8:	f10a 0701 	add.w	r7, sl, #1
    fcdc:	d007      	beq.n	fcee <cbvprintf+0x32>
			OUTC('%');
    fcde:	9b02      	ldr	r3, [sp, #8]
    fce0:	4659      	mov	r1, fp
    fce2:	4798      	blx	r3
    fce4:	2800      	cmp	r0, #0
    fce6:	f2c0 8355 	blt.w	10394 <CONFIG_PM_SRAM_SIZE+0x394>
    fcea:	3501      	adds	r5, #1
			break;
    fcec:	e210      	b.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
		} state = {
    fcee:	2218      	movs	r2, #24
    fcf0:	2100      	movs	r1, #0
    fcf2:	a80a      	add	r0, sp, #40	; 0x28
    fcf4:	f00b f9bb 	bl	1b06e <memset>
	if (*sp == '%') {
    fcf8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    fcfc:	2b25      	cmp	r3, #37	; 0x25
    fcfe:	d078      	beq.n	fdf2 <cbvprintf+0x136>
    fd00:	2200      	movs	r2, #0
    fd02:	4694      	mov	ip, r2
    fd04:	4616      	mov	r6, r2
    fd06:	4696      	mov	lr, r2
    fd08:	4610      	mov	r0, r2
    fd0a:	4639      	mov	r1, r7
		switch (*sp) {
    fd0c:	f817 3b01 	ldrb.w	r3, [r7], #1
    fd10:	2b2b      	cmp	r3, #43	; 0x2b
    fd12:	f000 809d 	beq.w	fe50 <cbvprintf+0x194>
    fd16:	f200 8094 	bhi.w	fe42 <cbvprintf+0x186>
    fd1a:	2b20      	cmp	r3, #32
    fd1c:	f000 809b 	beq.w	fe56 <cbvprintf+0x19a>
    fd20:	2b23      	cmp	r3, #35	; 0x23
    fd22:	f000 809a 	beq.w	fe5a <cbvprintf+0x19e>
    fd26:	b128      	cbz	r0, fd34 <cbvprintf+0x78>
    fd28:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fd2c:	f040 0004 	orr.w	r0, r0, #4
    fd30:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fd34:	f1be 0f00 	cmp.w	lr, #0
    fd38:	d005      	beq.n	fd46 <cbvprintf+0x8a>
    fd3a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fd3e:	f040 0008 	orr.w	r0, r0, #8
    fd42:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fd46:	b12e      	cbz	r6, fd54 <cbvprintf+0x98>
    fd48:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fd4c:	f040 0010 	orr.w	r0, r0, #16
    fd50:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fd54:	f1bc 0f00 	cmp.w	ip, #0
    fd58:	d005      	beq.n	fd66 <cbvprintf+0xaa>
    fd5a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fd5e:	f040 0020 	orr.w	r0, r0, #32
    fd62:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fd66:	b12a      	cbz	r2, fd74 <cbvprintf+0xb8>
    fd68:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fd6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fd70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    fd74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fd78:	f002 0044 	and.w	r0, r2, #68	; 0x44
    fd7c:	2844      	cmp	r0, #68	; 0x44
    fd7e:	d103      	bne.n	fd88 <cbvprintf+0xcc>
		conv->flag_zero = false;
    fd80:	f36f 1286 	bfc	r2, #6, #1
    fd84:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    fd88:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    fd8c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    fd8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    fd92:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    fd96:	d17b      	bne.n	fe90 <cbvprintf+0x1d4>
		conv->width_star = true;
    fd98:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fd9c:	f042 0201 	orr.w	r2, r2, #1
    fda0:	1c4b      	adds	r3, r1, #1
    fda2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    fda6:	781a      	ldrb	r2, [r3, #0]
    fda8:	2a2e      	cmp	r2, #46	; 0x2e
    fdaa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fdae:	bf0c      	ite	eq
    fdb0:	2101      	moveq	r1, #1
    fdb2:	2100      	movne	r1, #0
    fdb4:	f361 0241 	bfi	r2, r1, #1, #1
    fdb8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    fdbc:	d174      	bne.n	fea8 <cbvprintf+0x1ec>
	if (*sp == '*') {
    fdbe:	785a      	ldrb	r2, [r3, #1]
    fdc0:	2a2a      	cmp	r2, #42	; 0x2a
    fdc2:	d06a      	beq.n	fe9a <cbvprintf+0x1de>
    fdc4:	3301      	adds	r3, #1
	size_t val = 0;
    fdc6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    fdc8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    fdca:	4618      	mov	r0, r3
    fdcc:	f810 2b01 	ldrb.w	r2, [r0], #1
    fdd0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    fdd4:	2f09      	cmp	r7, #9
    fdd6:	f240 808e 	bls.w	fef6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    fdda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    fdde:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    fde0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    fde4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    fde8:	f361 0241 	bfi	r2, r1, #1, #1
    fdec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    fdf0:	e05a      	b.n	fea8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    fdf2:	f10a 0702 	add.w	r7, sl, #2
    fdf6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    fdfa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fdfe:	07d9      	lsls	r1, r3, #31
    fe00:	f140 8149 	bpl.w	10096 <CONFIG_PM_SRAM_SIZE+0x96>
			width = va_arg(ap, int);
    fe04:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    fe08:	f1b9 0f00 	cmp.w	r9, #0
    fe0c:	da07      	bge.n	fe1e <cbvprintf+0x162>
				conv->flag_dash = true;
    fe0e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fe12:	f042 0204 	orr.w	r2, r2, #4
    fe16:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    fe1a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    fe1e:	075a      	lsls	r2, r3, #29
    fe20:	f140 8142 	bpl.w	100a8 <CONFIG_PM_SRAM_SIZE+0xa8>
			int arg = va_arg(ap, int);
    fe24:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    fe28:	f1b8 0f00 	cmp.w	r8, #0
    fe2c:	f280 8141 	bge.w	100b2 <CONFIG_PM_SRAM_SIZE+0xb2>
				conv->prec_present = false;
    fe30:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    fe34:	f36f 0341 	bfc	r3, #1, #1
    fe38:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    fe3c:	f04f 38ff 	mov.w	r8, #4294967295
    fe40:	e137      	b.n	100b2 <CONFIG_PM_SRAM_SIZE+0xb2>
		switch (*sp) {
    fe42:	2b2d      	cmp	r3, #45	; 0x2d
    fe44:	d00c      	beq.n	fe60 <cbvprintf+0x1a4>
    fe46:	2b30      	cmp	r3, #48	; 0x30
    fe48:	f47f af6d 	bne.w	fd26 <cbvprintf+0x6a>
			conv->flag_zero = true;
    fe4c:	2201      	movs	r2, #1
	} while (loop);
    fe4e:	e75c      	b.n	fd0a <cbvprintf+0x4e>
			conv->flag_plus = true;
    fe50:	f04f 0e01 	mov.w	lr, #1
    fe54:	e759      	b.n	fd0a <cbvprintf+0x4e>
			conv->flag_space = true;
    fe56:	2601      	movs	r6, #1
    fe58:	e757      	b.n	fd0a <cbvprintf+0x4e>
			conv->flag_hash = true;
    fe5a:	f04f 0c01 	mov.w	ip, #1
    fe5e:	e754      	b.n	fd0a <cbvprintf+0x4e>
		switch (*sp) {
    fe60:	2001      	movs	r0, #1
    fe62:	e752      	b.n	fd0a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    fe64:	fb0c 0202 	mla	r2, ip, r2, r0
    fe68:	3a30      	subs	r2, #48	; 0x30
    fe6a:	4633      	mov	r3, r6
    fe6c:	461e      	mov	r6, r3
    fe6e:	f816 0b01 	ldrb.w	r0, [r6], #1
    fe72:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    fe76:	2f09      	cmp	r7, #9
    fe78:	d9f4      	bls.n	fe64 <cbvprintf+0x1a8>
	if (sp != wp) {
    fe7a:	4299      	cmp	r1, r3
    fe7c:	d093      	beq.n	fda6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    fe7e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    fe82:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    fe84:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    fe86:	f362 0141 	bfi	r1, r2, #1, #1
    fe8a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    fe8e:	e78a      	b.n	fda6 <cbvprintf+0xea>
    fe90:	460b      	mov	r3, r1
	size_t val = 0;
    fe92:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    fe94:	f04f 0c0a 	mov.w	ip, #10
    fe98:	e7e8      	b.n	fe6c <cbvprintf+0x1b0>
		conv->prec_star = true;
    fe9a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    fe9e:	f042 0204 	orr.w	r2, r2, #4
    fea2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    fea6:	3302      	adds	r3, #2
	switch (*sp) {
    fea8:	461f      	mov	r7, r3
    feaa:	f817 2b01 	ldrb.w	r2, [r7], #1
    feae:	2a6c      	cmp	r2, #108	; 0x6c
    feb0:	d041      	beq.n	ff36 <cbvprintf+0x27a>
    feb2:	d825      	bhi.n	ff00 <cbvprintf+0x244>
    feb4:	2a68      	cmp	r2, #104	; 0x68
    feb6:	d02b      	beq.n	ff10 <cbvprintf+0x254>
    feb8:	2a6a      	cmp	r2, #106	; 0x6a
    feba:	d046      	beq.n	ff4a <cbvprintf+0x28e>
    febc:	2a4c      	cmp	r2, #76	; 0x4c
    febe:	d04c      	beq.n	ff5a <cbvprintf+0x29e>
    fec0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    fec2:	f817 2b01 	ldrb.w	r2, [r7], #1
    fec6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    feca:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    fece:	2a78      	cmp	r2, #120	; 0x78
    fed0:	f200 80d9 	bhi.w	10086 <CONFIG_PM_SRAM_SIZE+0x86>
    fed4:	2a57      	cmp	r2, #87	; 0x57
    fed6:	d84d      	bhi.n	ff74 <cbvprintf+0x2b8>
    fed8:	2a41      	cmp	r2, #65	; 0x41
    feda:	d003      	beq.n	fee4 <cbvprintf+0x228>
    fedc:	3a45      	subs	r2, #69	; 0x45
    fede:	2a02      	cmp	r2, #2
    fee0:	f200 80d1 	bhi.w	10086 <CONFIG_PM_SRAM_SIZE+0x86>
		conv->specifier_cat = SPECIFIER_FP;
    fee4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    fee8:	2204      	movs	r2, #4
    feea:	f362 0302 	bfi	r3, r2, #0, #3
    feee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    fef2:	2301      	movs	r3, #1
			break;
    fef4:	e09e      	b.n	10034 <CONFIG_PM_SRAM_SIZE+0x34>
		val = 10U * val + *sp++ - '0';
    fef6:	fb06 2101 	mla	r1, r6, r1, r2
    fefa:	3930      	subs	r1, #48	; 0x30
    fefc:	4603      	mov	r3, r0
    fefe:	e764      	b.n	fdca <cbvprintf+0x10e>
	switch (*sp) {
    ff00:	2a74      	cmp	r2, #116	; 0x74
    ff02:	d026      	beq.n	ff52 <cbvprintf+0x296>
    ff04:	2a7a      	cmp	r2, #122	; 0x7a
    ff06:	d1db      	bne.n	fec0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    ff08:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ff0c:	2206      	movs	r2, #6
    ff0e:	e00d      	b.n	ff2c <cbvprintf+0x270>
		if (*++sp == 'h') {
    ff10:	785a      	ldrb	r2, [r3, #1]
    ff12:	2a68      	cmp	r2, #104	; 0x68
    ff14:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ff18:	d106      	bne.n	ff28 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    ff1a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ff1c:	f361 02c6 	bfi	r2, r1, #3, #4
    ff20:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    ff24:	1c9f      	adds	r7, r3, #2
    ff26:	e7cc      	b.n	fec2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    ff28:	4613      	mov	r3, r2
    ff2a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    ff2c:	f362 03c6 	bfi	r3, r2, #3, #4
    ff30:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    ff34:	e7c5      	b.n	fec2 <cbvprintf+0x206>
		if (*++sp == 'l') {
    ff36:	785a      	ldrb	r2, [r3, #1]
    ff38:	2a6c      	cmp	r2, #108	; 0x6c
    ff3a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ff3e:	d101      	bne.n	ff44 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    ff40:	2104      	movs	r1, #4
    ff42:	e7eb      	b.n	ff1c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    ff44:	4613      	mov	r3, r2
    ff46:	2203      	movs	r2, #3
    ff48:	e7f0      	b.n	ff2c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    ff4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ff4e:	2205      	movs	r2, #5
    ff50:	e7ec      	b.n	ff2c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ff52:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ff56:	2207      	movs	r2, #7
    ff58:	e7e8      	b.n	ff2c <cbvprintf+0x270>
		conv->unsupported = true;
    ff5a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ff5e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    ff62:	f023 0302 	bic.w	r3, r3, #2
    ff66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ff6a:	f043 0302 	orr.w	r3, r3, #2
    ff6e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    ff72:	e7a6      	b.n	fec2 <cbvprintf+0x206>
    ff74:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    ff78:	2920      	cmp	r1, #32
    ff7a:	f200 8084 	bhi.w	10086 <CONFIG_PM_SRAM_SIZE+0x86>
    ff7e:	a001      	add	r0, pc, #4	; (adr r0, ff84 <cbvprintf+0x2c8>)
    ff80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    ff84:	00010049 	.word	0x00010049
    ff88:	00010087 	.word	0x00010087
    ff8c:	00010087 	.word	0x00010087
    ff90:	00010087 	.word	0x00010087
    ff94:	00010087 	.word	0x00010087
    ff98:	00010087 	.word	0x00010087
    ff9c:	00010087 	.word	0x00010087
    ffa0:	00010087 	.word	0x00010087
    ffa4:	00010087 	.word	0x00010087
    ffa8:	0000fee5 	.word	0x0000fee5
    ffac:	00010087 	.word	0x00010087
    ffb0:	00010049 	.word	0x00010049
    ffb4:	00010009 	.word	0x00010009
    ffb8:	0000fee5 	.word	0x0000fee5
    ffbc:	0000fee5 	.word	0x0000fee5
    ffc0:	0000fee5 	.word	0x0000fee5
    ffc4:	00010087 	.word	0x00010087
    ffc8:	00010009 	.word	0x00010009
    ffcc:	00010087 	.word	0x00010087
    ffd0:	00010087 	.word	0x00010087
    ffd4:	00010087 	.word	0x00010087
    ffd8:	00010087 	.word	0x00010087
    ffdc:	00010051 	.word	0x00010051
    ffe0:	00010049 	.word	0x00010049
    ffe4:	0001006d 	.word	0x0001006d
    ffe8:	00010087 	.word	0x00010087
    ffec:	00010087 	.word	0x00010087
    fff0:	0001006d 	.word	0x0001006d
    fff4:	00010087 	.word	0x00010087
    fff8:	00010049 	.word	0x00010049
    fffc:	00010087 	.word	0x00010087
   10000:	00010087 	.word	0x00010087
   10004:	00010049 	.word	0x00010049
		conv->specifier_cat = SPECIFIER_SINT;
   10008:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1000c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1000e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10012:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10016:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10018:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1001c:	bf02      	ittt	eq
   1001e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   10022:	f041 0101 	orreq.w	r1, r1, #1
   10026:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1002a:	2a63      	cmp	r2, #99	; 0x63
   1002c:	d131      	bne.n	10092 <CONFIG_PM_SRAM_SIZE+0x92>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1002e:	3b00      	subs	r3, #0
   10030:	bf18      	it	ne
   10032:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10034:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10038:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1003c:	430b      	orrs	r3, r1
   1003e:	f363 0241 	bfi	r2, r3, #1, #1
   10042:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10046:	e6d8      	b.n	fdfa <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   10048:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1004c:	2002      	movs	r0, #2
   1004e:	e7de      	b.n	1000e <CONFIG_PM_SRAM_SIZE+0xe>
		conv->specifier_cat = SPECIFIER_PTR;
   10050:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10054:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10058:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1005c:	2103      	movs	r1, #3
   1005e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10062:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10064:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10068:	4143      	adcs	r3, r0
   1006a:	e7e3      	b.n	10034 <CONFIG_PM_SRAM_SIZE+0x34>
		conv->specifier_cat = SPECIFIER_PTR;
   1006c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   10070:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   10072:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10076:	f361 0202 	bfi	r2, r1, #0, #3
   1007a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1007e:	bf14      	ite	ne
   10080:	2301      	movne	r3, #1
   10082:	2300      	moveq	r3, #0
   10084:	e7d6      	b.n	10034 <CONFIG_PM_SRAM_SIZE+0x34>
		conv->invalid = true;
   10086:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1008a:	f043 0301 	orr.w	r3, r3, #1
   1008e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   10092:	2300      	movs	r3, #0
   10094:	e7ce      	b.n	10034 <CONFIG_PM_SRAM_SIZE+0x34>
		} else if (conv->width_present) {
   10096:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1009a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1009c:	bfb4      	ite	lt
   1009e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   100a2:	f04f 39ff 	movge.w	r9, #4294967295
   100a6:	e6ba      	b.n	fe1e <cbvprintf+0x162>
		} else if (conv->prec_present) {
   100a8:	079b      	lsls	r3, r3, #30
   100aa:	f57f aec7 	bpl.w	fe3c <cbvprintf+0x180>
			precision = conv->prec_value;
   100ae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   100b2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   100b6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   100b8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   100bc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   100c0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   100c4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   100c6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   100ca:	d136      	bne.n	1013a <CONFIG_PM_SRAM_SIZE+0x13a>
			switch (length_mod) {
   100cc:	1ed3      	subs	r3, r2, #3
   100ce:	2b04      	cmp	r3, #4
   100d0:	d820      	bhi.n	10114 <CONFIG_PM_SRAM_SIZE+0x114>
   100d2:	e8df f003 	tbb	[pc, r3]
   100d6:	0703      	.short	0x0703
   100d8:	1f07      	.short	0x1f07
   100da:	1f          	.byte	0x1f
   100db:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   100dc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   100e0:	17c1      	asrs	r1, r0, #31
   100e2:	e004      	b.n	100ee <CONFIG_PM_SRAM_SIZE+0xee>
					(sint_value_type)va_arg(ap, intmax_t);
   100e4:	3407      	adds	r4, #7
   100e6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   100ea:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   100ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   100f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   100f6:	f013 0603 	ands.w	r6, r3, #3
   100fa:	d054      	beq.n	101a6 <CONFIG_PM_SRAM_SIZE+0x1a6>
			OUTS(sp, fp);
   100fc:	9802      	ldr	r0, [sp, #8]
   100fe:	463b      	mov	r3, r7
   10100:	4652      	mov	r2, sl
   10102:	4659      	mov	r1, fp
   10104:	f009 fdaf 	bl	19c66 <outs>
   10108:	2800      	cmp	r0, #0
   1010a:	f2c0 8143 	blt.w	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   1010e:	4405      	add	r5, r0
			continue;
   10110:	46ba      	mov	sl, r7
   10112:	e5db      	b.n	fccc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10114:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   10118:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1011a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1011e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10122:	d105      	bne.n	10130 <CONFIG_PM_SRAM_SIZE+0x130>
				value->uint = (unsigned char)value->uint;
   10124:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   10128:	930a      	str	r3, [sp, #40]	; 0x28
   1012a:	2300      	movs	r3, #0
   1012c:	930b      	str	r3, [sp, #44]	; 0x2c
   1012e:	e7e0      	b.n	100f2 <CONFIG_PM_SRAM_SIZE+0xf2>
			} else if (length_mod == LENGTH_H) {
   10130:	2a02      	cmp	r2, #2
   10132:	d1de      	bne.n	100f2 <CONFIG_PM_SRAM_SIZE+0xf2>
				value->sint = (short)value->sint;
   10134:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   10138:	e7d2      	b.n	100e0 <CONFIG_PM_SRAM_SIZE+0xe0>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1013a:	2b02      	cmp	r3, #2
   1013c:	d123      	bne.n	10186 <CONFIG_PM_SRAM_SIZE+0x186>
			switch (length_mod) {
   1013e:	1ed3      	subs	r3, r2, #3
   10140:	2b04      	cmp	r3, #4
   10142:	d813      	bhi.n	1016c <CONFIG_PM_SRAM_SIZE+0x16c>
   10144:	e8df f003 	tbb	[pc, r3]
   10148:	120a0a03 	.word	0x120a0a03
   1014c:	12          	.byte	0x12
   1014d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1014e:	6820      	ldr	r0, [r4, #0]
   10150:	900a      	str	r0, [sp, #40]	; 0x28
   10152:	2100      	movs	r1, #0
   10154:	1d23      	adds	r3, r4, #4
   10156:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   10158:	461c      	mov	r4, r3
   1015a:	e7ca      	b.n	100f2 <CONFIG_PM_SRAM_SIZE+0xf2>
					(uint_value_type)va_arg(ap,
   1015c:	3407      	adds	r4, #7
   1015e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   10162:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   10166:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1016a:	e7f5      	b.n	10158 <CONFIG_PM_SRAM_SIZE+0x158>
					(uint_value_type)va_arg(ap, size_t);
   1016c:	f854 3b04 	ldr.w	r3, [r4], #4
   10170:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10172:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   10174:	f04f 0300 	mov.w	r3, #0
   10178:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1017a:	d0d3      	beq.n	10124 <CONFIG_PM_SRAM_SIZE+0x124>
			} else if (length_mod == LENGTH_H) {
   1017c:	2a02      	cmp	r2, #2
   1017e:	d1b8      	bne.n	100f2 <CONFIG_PM_SRAM_SIZE+0xf2>
				value->uint = (unsigned short)value->uint;
   10180:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10184:	e7d0      	b.n	10128 <CONFIG_PM_SRAM_SIZE+0x128>
		} else if (specifier_cat == SPECIFIER_FP) {
   10186:	2b04      	cmp	r3, #4
   10188:	d107      	bne.n	1019a <CONFIG_PM_SRAM_SIZE+0x19a>
			if (length_mod == LENGTH_UPPER_L) {
   1018a:	3407      	adds	r4, #7
   1018c:	f024 0407 	bic.w	r4, r4, #7
   10190:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   10194:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10198:	e7ab      	b.n	100f2 <CONFIG_PM_SRAM_SIZE+0xf2>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1019a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1019c:	bf04      	itt	eq
   1019e:	f854 3b04 	ldreq.w	r3, [r4], #4
   101a2:	930a      	streq	r3, [sp, #40]	; 0x28
   101a4:	e7a5      	b.n	100f2 <CONFIG_PM_SRAM_SIZE+0xf2>
		switch (conv->specifier) {
   101a6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   101aa:	2878      	cmp	r0, #120	; 0x78
   101ac:	d8b0      	bhi.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
   101ae:	2862      	cmp	r0, #98	; 0x62
   101b0:	d822      	bhi.n	101f8 <CONFIG_PM_SRAM_SIZE+0x1f8>
   101b2:	2825      	cmp	r0, #37	; 0x25
   101b4:	f43f ad93 	beq.w	fcde <cbvprintf+0x22>
   101b8:	2858      	cmp	r0, #88	; 0x58
   101ba:	d1a9      	bne.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
			bps = encode_uint(value->uint, conv, buf, bpe);
   101bc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   101c0:	9300      	str	r3, [sp, #0]
   101c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   101c6:	ab04      	add	r3, sp, #16
   101c8:	aa0c      	add	r2, sp, #48	; 0x30
   101ca:	f009 fd01 	bl	19bd0 <encode_uint>
   101ce:	4682      	mov	sl, r0
			if (precision >= 0) {
   101d0:	f1b8 0f00 	cmp.w	r8, #0
   101d4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   101d8:	db0c      	blt.n	101f4 <CONFIG_PM_SRAM_SIZE+0x1f4>
				conv->flag_zero = false;
   101da:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   101de:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   101e2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   101e6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   101e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   101ec:	d902      	bls.n	101f4 <CONFIG_PM_SRAM_SIZE+0x1f4>
					conv->pad0_value = precision - (int)len;
   101ee:	eba8 0303 	sub.w	r3, r8, r3
   101f2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   101f4:	4680      	mov	r8, r0
   101f6:	e03d      	b.n	10274 <CONFIG_PM_SRAM_SIZE+0x274>
   101f8:	3863      	subs	r0, #99	; 0x63
   101fa:	2815      	cmp	r0, #21
   101fc:	d888      	bhi.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
   101fe:	a101      	add	r1, pc, #4	; (adr r1, 10204 <CONFIG_PM_SRAM_SIZE+0x204>)
   10200:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   10204:	00010285 	.word	0x00010285
   10208:	000102e9 	.word	0x000102e9
   1020c:	00010111 	.word	0x00010111
   10210:	00010111 	.word	0x00010111
   10214:	00010111 	.word	0x00010111
   10218:	00010111 	.word	0x00010111
   1021c:	000102e9 	.word	0x000102e9
   10220:	00010111 	.word	0x00010111
   10224:	00010111 	.word	0x00010111
   10228:	00010111 	.word	0x00010111
   1022c:	00010111 	.word	0x00010111
   10230:	00010347 	.word	0x00010347
   10234:	00010315 	.word	0x00010315
   10238:	00010319 	.word	0x00010319
   1023c:	00010111 	.word	0x00010111
   10240:	00010111 	.word	0x00010111
   10244:	0001025d 	.word	0x0001025d
   10248:	00010111 	.word	0x00010111
   1024c:	00010315 	.word	0x00010315
   10250:	00010111 	.word	0x00010111
   10254:	00010111 	.word	0x00010111
   10258:	00010315 	.word	0x00010315
			if (precision >= 0) {
   1025c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   10260:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   10264:	db0a      	blt.n	1027c <CONFIG_PM_SRAM_SIZE+0x27c>
				len = strnlen(bps, precision);
   10266:	4641      	mov	r1, r8
   10268:	4650      	mov	r0, sl
   1026a:	f00a feb0 	bl	1afce <strnlen>
			bpe = bps + len;
   1026e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   10272:	2600      	movs	r6, #0
		if (bps == NULL) {
   10274:	f1ba 0f00 	cmp.w	sl, #0
   10278:	d10c      	bne.n	10294 <CONFIG_PM_SRAM_SIZE+0x294>
   1027a:	e749      	b.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
				len = strlen(bps);
   1027c:	4650      	mov	r0, sl
   1027e:	f00a fe9f 	bl	1afc0 <strlen>
   10282:	e7f4      	b.n	1026e <CONFIG_PM_SRAM_SIZE+0x26e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10286:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   1028a:	2600      	movs	r6, #0
			bpe = buf + 1;
   1028c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   10290:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   10294:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   10298:	b106      	cbz	r6, 1029c <CONFIG_PM_SRAM_SIZE+0x29c>
			nj_len += 1U;
   1029a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1029c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   102a0:	06d0      	lsls	r0, r2, #27
   102a2:	d56b      	bpl.n	1037c <CONFIG_PM_SRAM_SIZE+0x37c>
			nj_len += 2U;
   102a4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   102a6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   102a8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   102aa:	bf48      	it	mi
   102ac:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   102ae:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   102b0:	bf48      	it	mi
   102b2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   102b4:	f1b9 0f00 	cmp.w	r9, #0
   102b8:	dd79      	ble.n	103ae <CONFIG_PM_SRAM_SIZE+0x3ae>
			if (!conv->flag_dash) {
   102ba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   102be:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   102c2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   102c6:	9303      	str	r3, [sp, #12]
   102c8:	0753      	lsls	r3, r2, #29
   102ca:	d470      	bmi.n	103ae <CONFIG_PM_SRAM_SIZE+0x3ae>
				if (conv->flag_zero) {
   102cc:	0650      	lsls	r0, r2, #25
   102ce:	d564      	bpl.n	1039a <CONFIG_PM_SRAM_SIZE+0x39a>
					if (sign != 0) {
   102d0:	b146      	cbz	r6, 102e4 <CONFIG_PM_SRAM_SIZE+0x2e4>
						OUTC(sign);
   102d2:	9b02      	ldr	r3, [sp, #8]
   102d4:	4659      	mov	r1, fp
   102d6:	4630      	mov	r0, r6
   102d8:	4798      	blx	r3
   102da:	2800      	cmp	r0, #0
   102dc:	db5a      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
						sign = 0;
   102de:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   102e0:	3501      	adds	r5, #1
						sign = 0;
   102e2:	461e      	mov	r6, r3
					pad = '0';
   102e4:	2330      	movs	r3, #48	; 0x30
   102e6:	e059      	b.n	1039c <CONFIG_PM_SRAM_SIZE+0x39c>
			if (conv->flag_plus) {
   102e8:	071e      	lsls	r6, r3, #28
   102ea:	d411      	bmi.n	10310 <CONFIG_PM_SRAM_SIZE+0x310>
				sign = ' ';
   102ec:	f013 0610 	ands.w	r6, r3, #16
   102f0:	bf18      	it	ne
   102f2:	2620      	movne	r6, #32
			sint = value->sint;
   102f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   102f8:	2a00      	cmp	r2, #0
   102fa:	f173 0100 	sbcs.w	r1, r3, #0
   102fe:	f6bf af5d 	bge.w	101bc <CONFIG_PM_SRAM_SIZE+0x1bc>
				value->uint = (uint_value_type)-sint;
   10302:	4252      	negs	r2, r2
   10304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10308:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   1030c:	262d      	movs	r6, #45	; 0x2d
   1030e:	e755      	b.n	101bc <CONFIG_PM_SRAM_SIZE+0x1bc>
				sign = '+';
   10310:	262b      	movs	r6, #43	; 0x2b
   10312:	e7ef      	b.n	102f4 <CONFIG_PM_SRAM_SIZE+0x2f4>
		switch (conv->specifier) {
   10314:	2600      	movs	r6, #0
   10316:	e751      	b.n	101bc <CONFIG_PM_SRAM_SIZE+0x1bc>
			if (value->ptr != NULL) {
   10318:	980a      	ldr	r0, [sp, #40]	; 0x28
   1031a:	b348      	cbz	r0, 10370 <CONFIG_PM_SRAM_SIZE+0x370>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1031c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10320:	9300      	str	r3, [sp, #0]
   10322:	aa0c      	add	r2, sp, #48	; 0x30
   10324:	ab04      	add	r3, sp, #16
   10326:	2100      	movs	r1, #0
   10328:	f009 fc52 	bl	19bd0 <encode_uint>
				conv->altform_0c = true;
   1032c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   10330:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10334:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10338:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1033c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1033e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   10342:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10344:	e744      	b.n	101d0 <CONFIG_PM_SRAM_SIZE+0x1d0>
				store_count(conv, value->ptr, count);
   10346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   10348:	2a07      	cmp	r2, #7
   1034a:	f63f aee1 	bhi.w	10110 <CONFIG_PM_SRAM_SIZE+0x110>
   1034e:	e8df f002 	tbb	[pc, r2]
   10352:	040d      	.short	0x040d
   10354:	08080d06 	.word	0x08080d06
   10358:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1035a:	701d      	strb	r5, [r3, #0]
		break;
   1035c:	e6d8      	b.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
		*(short *)dp = (short)count;
   1035e:	801d      	strh	r5, [r3, #0]
		break;
   10360:	e6d6      	b.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
		*(intmax_t *)dp = (intmax_t)count;
   10362:	4628      	mov	r0, r5
   10364:	17e9      	asrs	r1, r5, #31
   10366:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1036a:	e6d1      	b.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1036c:	601d      	str	r5, [r3, #0]
		break;
   1036e:	e6cf      	b.n	10110 <CONFIG_PM_SRAM_SIZE+0x110>
			bpe = bps + 5;
   10370:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 10438 <CONFIG_PM_SRAM_SIZE+0x438>
   10374:	4606      	mov	r6, r0
			bps = "(nil)";
   10376:	f1a8 0a05 	sub.w	sl, r8, #5
   1037a:	e78b      	b.n	10294 <CONFIG_PM_SRAM_SIZE+0x294>
		} else if (conv->altform_0) {
   1037c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1037e:	bf48      	it	mi
   10380:	3301      	addmi	r3, #1
   10382:	e790      	b.n	102a6 <CONFIG_PM_SRAM_SIZE+0x2a6>
					OUTC(pad);
   10384:	4618      	mov	r0, r3
   10386:	9303      	str	r3, [sp, #12]
   10388:	4659      	mov	r1, fp
   1038a:	9b02      	ldr	r3, [sp, #8]
   1038c:	4798      	blx	r3
   1038e:	2800      	cmp	r0, #0
   10390:	9b03      	ldr	r3, [sp, #12]
   10392:	da04      	bge.n	1039e <CONFIG_PM_SRAM_SIZE+0x39e>
#undef OUTS
#undef OUTC
}
   10394:	b011      	add	sp, #68	; 0x44
   10396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1039a:	2320      	movs	r3, #32
   1039c:	444d      	add	r5, r9
   1039e:	464a      	mov	r2, r9
				while (width-- > 0) {
   103a0:	2a00      	cmp	r2, #0
   103a2:	eba5 0109 	sub.w	r1, r5, r9
   103a6:	f109 39ff 	add.w	r9, r9, #4294967295
   103aa:	dceb      	bgt.n	10384 <CONFIG_PM_SRAM_SIZE+0x384>
   103ac:	460d      	mov	r5, r1
		if (sign != 0) {
   103ae:	b136      	cbz	r6, 103be <CONFIG_PM_SRAM_SIZE+0x3be>
			OUTC(sign);
   103b0:	9b02      	ldr	r3, [sp, #8]
   103b2:	4659      	mov	r1, fp
   103b4:	4630      	mov	r0, r6
   103b6:	4798      	blx	r3
   103b8:	2800      	cmp	r0, #0
   103ba:	dbeb      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   103bc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   103be:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   103c2:	06d9      	lsls	r1, r3, #27
   103c4:	d401      	bmi.n	103ca <CONFIG_PM_SRAM_SIZE+0x3ca>
   103c6:	071a      	lsls	r2, r3, #28
   103c8:	d506      	bpl.n	103d8 <CONFIG_PM_SRAM_SIZE+0x3d8>
				OUTC('0');
   103ca:	9b02      	ldr	r3, [sp, #8]
   103cc:	4659      	mov	r1, fp
   103ce:	2030      	movs	r0, #48	; 0x30
   103d0:	4798      	blx	r3
   103d2:	2800      	cmp	r0, #0
   103d4:	dbde      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   103d6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   103d8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   103dc:	06db      	lsls	r3, r3, #27
   103de:	d507      	bpl.n	103f0 <CONFIG_PM_SRAM_SIZE+0x3f0>
				OUTC(conv->specifier);
   103e0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   103e4:	9b02      	ldr	r3, [sp, #8]
   103e6:	4659      	mov	r1, fp
   103e8:	4798      	blx	r3
   103ea:	2800      	cmp	r0, #0
   103ec:	dbd2      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   103ee:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   103f0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   103f2:	442e      	add	r6, r5
   103f4:	1b73      	subs	r3, r6, r5
   103f6:	2b00      	cmp	r3, #0
   103f8:	dc16      	bgt.n	10428 <CONFIG_PM_SRAM_SIZE+0x428>
			OUTS(bps, bpe);
   103fa:	9802      	ldr	r0, [sp, #8]
   103fc:	4643      	mov	r3, r8
   103fe:	4652      	mov	r2, sl
   10400:	4659      	mov	r1, fp
   10402:	f009 fc30 	bl	19c66 <outs>
   10406:	2800      	cmp	r0, #0
   10408:	dbc4      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   1040a:	4405      	add	r5, r0
		while (width > 0) {
   1040c:	44a9      	add	r9, r5
   1040e:	eba9 0305 	sub.w	r3, r9, r5
   10412:	2b00      	cmp	r3, #0
   10414:	f77f ae7c 	ble.w	10110 <CONFIG_PM_SRAM_SIZE+0x110>
			OUTC(' ');
   10418:	9b02      	ldr	r3, [sp, #8]
   1041a:	4659      	mov	r1, fp
   1041c:	2020      	movs	r0, #32
   1041e:	4798      	blx	r3
   10420:	2800      	cmp	r0, #0
   10422:	dbb7      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   10424:	3501      	adds	r5, #1
			--width;
   10426:	e7f2      	b.n	1040e <CONFIG_PM_SRAM_SIZE+0x40e>
				OUTC('0');
   10428:	9b02      	ldr	r3, [sp, #8]
   1042a:	4659      	mov	r1, fp
   1042c:	2030      	movs	r0, #48	; 0x30
   1042e:	4798      	blx	r3
   10430:	2800      	cmp	r0, #0
   10432:	dbaf      	blt.n	10394 <CONFIG_PM_SRAM_SIZE+0x394>
   10434:	3501      	adds	r5, #1
   10436:	e7dd      	b.n	103f4 <CONFIG_PM_SRAM_SIZE+0x3f4>
   10438:	0001f4e8 	.word	0x0001f4e8

0001043c <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   1043c:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   1043e:	4c08      	ldr	r4, [pc, #32]	; (10460 <read_blvl+0x24>)
{
   10440:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   10442:	7824      	ldrb	r4, [r4, #0]
   10444:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   10448:	2401      	movs	r4, #1
   1044a:	9402      	str	r4, [sp, #8]
   1044c:	f10d 0417 	add.w	r4, sp, #23
   10450:	9401      	str	r4, [sp, #4]
   10452:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   10456:	9400      	str	r4, [sp, #0]
   10458:	f00c fca8 	bl	1cdac <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   1045c:	b006      	add	sp, #24
   1045e:	bd10      	pop	{r4, pc}
   10460:	20000700 	.word	0x20000700

00010464 <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
   10464:	4b01      	ldr	r3, [pc, #4]	; (1046c <bt_bas_get_battery_level+0x8>)
   10466:	7818      	ldrb	r0, [r3, #0]
   10468:	4770      	bx	lr
   1046a:	bf00      	nop
   1046c:	20000700 	.word	0x20000700

00010470 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
   10470:	b500      	push	{lr}
   10472:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   10474:	2864      	cmp	r0, #100	; 0x64
{
   10476:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   1047a:	d819      	bhi.n	104b0 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   1047c:	4b0e      	ldr	r3, [pc, #56]	; (104b8 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   1047e:	2218      	movs	r2, #24
   10480:	7018      	strb	r0, [r3, #0]
   10482:	2100      	movs	r1, #0
   10484:	a802      	add	r0, sp, #8
   10486:	f00a fdf2 	bl	1b06e <memset>
	params.attr = attr;
   1048a:	4b0c      	ldr	r3, [pc, #48]	; (104bc <bt_bas_set_battery_level+0x4c>)
   1048c:	9303      	str	r3, [sp, #12]
	params.data = data;
   1048e:	f10d 0307 	add.w	r3, sp, #7
   10492:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   10494:	a902      	add	r1, sp, #8
	params.len = len;
   10496:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   10498:	2000      	movs	r0, #0
	params.len = len;
   1049a:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   1049e:	f004 fb91 	bl	14bc4 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   104a2:	f110 0f39 	cmn.w	r0, #57	; 0x39
   104a6:	bf08      	it	eq
   104a8:	2000      	moveq	r0, #0
}
   104aa:	b009      	add	sp, #36	; 0x24
   104ac:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   104b0:	f06f 0015 	mvn.w	r0, #21
   104b4:	e7f9      	b.n	104aa <bt_bas_set_battery_level+0x3a>
   104b6:	bf00      	nop
   104b8:	20000700 	.word	0x20000700
   104bc:	0001ebf8 	.word	0x0001ebf8

000104c0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104c2:	4605      	mov	r5, r0
   104c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   104c8:	f3ef 8611 	mrs	r6, BASEPRI
   104cc:	f383 8811 	msr	BASEPRI, r3
   104d0:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   104d4:	4b0b      	ldr	r3, [pc, #44]	; (10504 <pm_state_notify+0x44>)
   104d6:	681c      	ldr	r4, [r3, #0]
   104d8:	2c00      	cmp	r4, #0
   104da:	bf38      	it	cc
   104dc:	2400      	movcc	r4, #0
   104de:	b15c      	cbz	r4, 104f8 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   104e0:	4f09      	ldr	r7, [pc, #36]	; (10508 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   104e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   104e6:	2d00      	cmp	r5, #0
   104e8:	bf08      	it	eq
   104ea:	4613      	moveq	r3, r2
		if (callback) {
   104ec:	b10b      	cbz	r3, 104f2 <pm_state_notify+0x32>
			callback(z_power_state.state);
   104ee:	7838      	ldrb	r0, [r7, #0]
   104f0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   104f2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   104f4:	2c00      	cmp	r4, #0
   104f6:	d1f4      	bne.n	104e2 <pm_state_notify+0x22>
	__asm__ volatile(
   104f8:	f386 8811 	msr	BASEPRI, r6
   104fc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10502:	bf00      	nop
   10504:	20001e2c 	.word	0x20001e2c
   10508:	20001e34 	.word	0x20001e34

0001050c <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
   1050c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
   10510:	4f18      	ldr	r7, [pc, #96]	; (10574 <pm_system_suspend+0x68>)
   10512:	4c19      	ldr	r4, [pc, #100]	; (10578 <pm_system_suspend+0x6c>)
   10514:	783b      	ldrb	r3, [r7, #0]
{
   10516:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
   10518:	b93b      	cbnz	r3, 1052a <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
   1051a:	466d      	mov	r5, sp
   1051c:	4628      	mov	r0, r5
   1051e:	f009 fbd6 	bl	19cce <pm_policy_next_state>
   10522:	e895 0003 	ldmia.w	r5, {r0, r1}
   10526:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   1052a:	7825      	ldrb	r5, [r4, #0]
   1052c:	b1f5      	cbz	r5, 1056c <pm_system_suspend+0x60>
	post_ops_done = 0;
   1052e:	4e13      	ldr	r6, [pc, #76]	; (1057c <pm_system_suspend+0x70>)
   10530:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
   10534:	2001      	movs	r0, #1
	if (deep_sleep) {
   10536:	3d04      	subs	r5, #4
	post_ops_done = 0;
   10538:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
   1053c:	f7ff ffc0 	bl	104c0 <pm_state_notify>
	if (deep_sleep) {
   10540:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
   10542:	bf98      	it	ls
   10544:	4b0e      	ldrls	r3, [pc, #56]	; (10580 <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
   10546:	e894 0003 	ldmia.w	r4, {r0, r1}
   1054a:	bf98      	it	ls
   1054c:	f883 8000 	strbls.w	r8, [r3]
   10550:	f00a fdb5 	bl	1b0be <pm_power_state_set>
	if (!post_ops_done) {
   10554:	6830      	ldr	r0, [r6, #0]
   10556:	b940      	cbnz	r0, 1056a <pm_system_suspend+0x5e>
		post_ops_done = 1;
   10558:	2301      	movs	r3, #1
		z_forced_power_state = false;
   1055a:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
   1055c:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
   1055e:	f7ff ffaf 	bl	104c0 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
   10562:	e894 0003 	ldmia.w	r4, {r0, r1}
   10566:	f00a fdbd 	bl	1b0e4 <pm_power_state_exit_post_ops>
	return z_power_state.state;
   1056a:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
   1056c:	4628      	mov	r0, r5
   1056e:	b002      	add	sp, #8
   10570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10574:	20002127 	.word	0x20002127
   10578:	20001e34 	.word	0x20001e34
   1057c:	2000054c 	.word	0x2000054c
   10580:	2000262f 	.word	0x2000262f

00010584 <pm_system_resume>:

void pm_system_resume(void)
{
   10584:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   10586:	4b06      	ldr	r3, [pc, #24]	; (105a0 <pm_system_resume+0x1c>)
   10588:	6818      	ldr	r0, [r3, #0]
   1058a:	b940      	cbnz	r0, 1059e <pm_system_resume+0x1a>
		post_ops_done = 1;
   1058c:	2201      	movs	r2, #1
   1058e:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
   10590:	f7ff ff96 	bl	104c0 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
   10594:	4b03      	ldr	r3, [pc, #12]	; (105a4 <pm_system_resume+0x20>)
   10596:	e893 0003 	ldmia.w	r3, {r0, r1}
   1059a:	f00a fda3 	bl	1b0e4 <pm_power_state_exit_post_ops>
	}
}
   1059e:	bd08      	pop	{r3, pc}
   105a0:	2000054c 	.word	0x2000054c
   105a4:	20001e34 	.word	0x20001e34

000105a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   105a8:	b510      	push	{r4, lr}
   105aa:	4807      	ldr	r0, [pc, #28]	; (105c8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   105ac:	4c07      	ldr	r4, [pc, #28]	; (105cc <uart_console_init+0x24>)
   105ae:	f007 fc57 	bl	17e60 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   105b2:	4b07      	ldr	r3, [pc, #28]	; (105d0 <uart_console_init+0x28>)
   105b4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   105b6:	4620      	mov	r0, r4
   105b8:	f000 ff3e 	bl	11438 <__stdout_hook_install>
	__printk_hook_install(console_out);
   105bc:	4620      	mov	r0, r4
   105be:	f7ff fa6f 	bl	faa0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   105c2:	2000      	movs	r0, #0
   105c4:	bd10      	pop	{r4, pc}
   105c6:	bf00      	nop
   105c8:	0001f504 	.word	0x0001f504
   105cc:	000105d5 	.word	0x000105d5
   105d0:	20001e3c 	.word	0x20001e3c

000105d4 <console_out>:
	if ('\n' == c) {
   105d4:	280a      	cmp	r0, #10
{
   105d6:	b538      	push	{r3, r4, r5, lr}
   105d8:	4d07      	ldr	r5, [pc, #28]	; (105f8 <console_out+0x24>)
   105da:	4604      	mov	r4, r0
	if ('\n' == c) {
   105dc:	d104      	bne.n	105e8 <console_out+0x14>
   105de:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   105e0:	6883      	ldr	r3, [r0, #8]
   105e2:	210d      	movs	r1, #13
   105e4:	685b      	ldr	r3, [r3, #4]
   105e6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   105e8:	6828      	ldr	r0, [r5, #0]
   105ea:	6883      	ldr	r3, [r0, #8]
   105ec:	b2e1      	uxtb	r1, r4
   105ee:	685b      	ldr	r3, [r3, #4]
   105f0:	4798      	blx	r3
}
   105f2:	4620      	mov	r0, r4
   105f4:	bd38      	pop	{r3, r4, r5, pc}
   105f6:	bf00      	nop
   105f8:	20001e3c 	.word	0x20001e3c

000105fc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   105fc:	4a0e      	ldr	r2, [pc, #56]	; (10638 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   105fe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10600:	1a84      	subs	r4, r0, r2
   10602:	10a3      	asrs	r3, r4, #2
   10604:	4c0d      	ldr	r4, [pc, #52]	; (1063c <onoff_stop+0x40>)
   10606:	435c      	muls	r4, r3
{
   10608:	4605      	mov	r5, r0
   1060a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   1060c:	200c      	movs	r0, #12
   1060e:	fb00 2004 	mla	r0, r0, r4, r2
{
   10612:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   10614:	2140      	movs	r1, #64	; 0x40
   10616:	4408      	add	r0, r1
   10618:	f009 fb66 	bl	19ce8 <set_off_state>
	if (err < 0) {
   1061c:	1e01      	subs	r1, r0, #0
   1061e:	db05      	blt.n	1062c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   10620:	4b07      	ldr	r3, [pc, #28]	; (10640 <onoff_stop+0x44>)
   10622:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   10626:	6863      	ldr	r3, [r4, #4]
   10628:	4798      	blx	r3
	return 0;
   1062a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   1062c:	4628      	mov	r0, r5
   1062e:	4633      	mov	r3, r6
}
   10630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   10634:	4718      	bx	r3
   10636:	bf00      	nop
   10638:	20001e54 	.word	0x20001e54
   1063c:	b6db6db7 	.word	0xb6db6db7
   10640:	0001ec48 	.word	0x0001ec48

00010644 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10648:	4e10      	ldr	r6, [pc, #64]	; (1068c <onoff_start+0x48>)
   1064a:	1b84      	subs	r4, r0, r6
   1064c:	10a3      	asrs	r3, r4, #2
   1064e:	4c10      	ldr	r4, [pc, #64]	; (10690 <onoff_start+0x4c>)
   10650:	435c      	muls	r4, r3
   10652:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   10654:	250c      	movs	r5, #12
   10656:	4365      	muls	r5, r4
{
   10658:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   1065a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   1065e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   10660:	4430      	add	r0, r6
   10662:	2140      	movs	r1, #64	; 0x40
   10664:	f009 fb59 	bl	19d1a <set_starting_state>
	if (err < 0) {
   10668:	1e01      	subs	r1, r0, #0
   1066a:	db09      	blt.n	10680 <onoff_start+0x3c>
	subdata->cb = cb;
   1066c:	4a09      	ldr	r2, [pc, #36]	; (10694 <onoff_start+0x50>)
   1066e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   10670:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   10674:	4b08      	ldr	r3, [pc, #32]	; (10698 <onoff_start+0x54>)
   10676:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1067a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1067e:	4718      	bx	r3
		notify(mgr, err);
   10680:	4640      	mov	r0, r8
   10682:	463b      	mov	r3, r7
}
   10684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   10688:	4718      	bx	r3
   1068a:	bf00      	nop
   1068c:	20001e54 	.word	0x20001e54
   10690:	b6db6db7 	.word	0xb6db6db7
   10694:	00019d7d 	.word	0x00019d7d
   10698:	0001ec48 	.word	0x0001ec48

0001069c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1069c:	2200      	movs	r2, #0
{
   1069e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   106a0:	2101      	movs	r1, #1
{
   106a2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   106a4:	4610      	mov	r0, r2
   106a6:	f000 fc57 	bl	10f58 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   106aa:	2000      	movs	r0, #0
   106ac:	f000 fc22 	bl	10ef4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   106b0:	480f      	ldr	r0, [pc, #60]	; (106f0 <clk_init+0x54>)
   106b2:	f007 fa05 	bl	17ac0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   106b6:	4b0f      	ldr	r3, [pc, #60]	; (106f4 <clk_init+0x58>)
   106b8:	4298      	cmp	r0, r3
   106ba:	d115      	bne.n	106e8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   106bc:	f00d fb5d 	bl	1dd7a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   106c0:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   106c2:	490d      	ldr	r1, [pc, #52]	; (106f8 <clk_init+0x5c>)
   106c4:	4630      	mov	r0, r6
   106c6:	f008 ff6b 	bl	195a0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   106ca:	2800      	cmp	r0, #0
   106cc:	db0b      	blt.n	106e6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   106ce:	2501      	movs	r5, #1
   106d0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   106d2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   106d4:	4908      	ldr	r1, [pc, #32]	; (106f8 <clk_init+0x5c>)
   106d6:	f104 001c 	add.w	r0, r4, #28
   106da:	f008 ff61 	bl	195a0 <onoff_manager_init>
		if (err < 0) {
   106de:	2800      	cmp	r0, #0
   106e0:	db01      	blt.n	106e6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   106e2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   106e4:	2000      	movs	r0, #0
}
   106e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   106e8:	f06f 0004 	mvn.w	r0, #4
   106ec:	e7fb      	b.n	106e6 <clk_init+0x4a>
   106ee:	bf00      	nop
   106f0:	00010731 	.word	0x00010731
   106f4:	0bad0000 	.word	0x0bad0000
   106f8:	0001ec58 	.word	0x0001ec58

000106fc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   106fc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   106fe:	230c      	movs	r3, #12
   10700:	4809      	ldr	r0, [pc, #36]	; (10728 <clkstarted_handle.constprop.0+0x2c>)
   10702:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   10704:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   10706:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   10708:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1070c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1070e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   10710:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10712:	4418      	add	r0, r3
   10714:	f009 fb1f 	bl	19d56 <set_on_state>
	if (callback) {
   10718:	b12d      	cbz	r5, 10726 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1071a:	4632      	mov	r2, r6
   1071c:	462b      	mov	r3, r5
   1071e:	4803      	ldr	r0, [pc, #12]	; (1072c <clkstarted_handle.constprop.0+0x30>)
}
   10720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   10724:	4718      	bx	r3
}
   10726:	bd70      	pop	{r4, r5, r6, pc}
   10728:	20001e54 	.word	0x20001e54
   1072c:	20000704 	.word	0x20000704

00010730 <clock_event_handler>:
	switch (event) {
   10730:	b110      	cbz	r0, 10738 <clock_event_handler+0x8>
   10732:	2801      	cmp	r0, #1
   10734:	d004      	beq.n	10740 <clock_event_handler+0x10>
   10736:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10738:	4b03      	ldr	r3, [pc, #12]	; (10748 <clock_event_handler+0x18>)
   1073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1073c:	075b      	lsls	r3, r3, #29
   1073e:	d101      	bne.n	10744 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10740:	f7ff bfdc 	b.w	106fc <clkstarted_handle.constprop.0>
}
   10744:	4770      	bx	lr
   10746:	bf00      	nop
   10748:	20001e54 	.word	0x20001e54

0001074c <generic_hfclk_start>:
{
   1074c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1074e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10752:	f3ef 8111 	mrs	r1, BASEPRI
   10756:	f383 8811 	msr	BASEPRI, r3
   1075a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1075e:	4a12      	ldr	r2, [pc, #72]	; (107a8 <generic_hfclk_start+0x5c>)
   10760:	6813      	ldr	r3, [r2, #0]
   10762:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   10766:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1076a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1076c:	d00c      	beq.n	10788 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10772:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10776:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1077a:	f013 0301 	ands.w	r3, r3, #1
   1077e:	d003      	beq.n	10788 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   10780:	480a      	ldr	r0, [pc, #40]	; (107ac <generic_hfclk_start+0x60>)
   10782:	f009 fae8 	bl	19d56 <set_on_state>
			already_started = true;
   10786:	2301      	movs	r3, #1
	__asm__ volatile(
   10788:	f381 8811 	msr	BASEPRI, r1
   1078c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   10790:	b123      	cbz	r3, 1079c <generic_hfclk_start+0x50>
}
   10792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   10796:	2000      	movs	r0, #0
   10798:	f7ff bfb0 	b.w	106fc <clkstarted_handle.constprop.0>
}
   1079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   107a0:	2001      	movs	r0, #1
   107a2:	f007 b97d 	b.w	17aa0 <nrfx_clock_start>
   107a6:	bf00      	nop
   107a8:	20001ea4 	.word	0x20001ea4
   107ac:	20001e94 	.word	0x20001e94

000107b0 <lfclk_start>:
{
   107b0:	b510      	push	{r4, lr}
	if (!once) {
   107b2:	4c07      	ldr	r4, [pc, #28]	; (107d0 <lfclk_start+0x20>)
   107b4:	7823      	ldrb	r3, [r4, #0]
   107b6:	b92b      	cbnz	r3, 107c4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   107b8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   107bc:	f00d fd6f 	bl	1e29e <z_impl_k_busy_wait>
		once = true;
   107c0:	2301      	movs	r3, #1
   107c2:	7023      	strb	r3, [r4, #0]
}
   107c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   107c8:	2000      	movs	r0, #0
   107ca:	f007 b969 	b.w	17aa0 <nrfx_clock_start>
   107ce:	bf00      	nop
   107d0:	20002128 	.word	0x20002128

000107d4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   107d4:	4b09      	ldr	r3, [pc, #36]	; (107fc <generic_hfclk_stop+0x28>)
   107d6:	f3bf 8f5b 	dmb	ish
   107da:	e853 2f00 	ldrex	r2, [r3]
   107de:	f022 0102 	bic.w	r1, r2, #2
   107e2:	e843 1000 	strex	r0, r1, [r3]
   107e6:	2800      	cmp	r0, #0
   107e8:	d1f7      	bne.n	107da <generic_hfclk_stop+0x6>
   107ea:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   107ee:	07d3      	lsls	r3, r2, #31
   107f0:	d402      	bmi.n	107f8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   107f2:	2001      	movs	r0, #1
   107f4:	f00d babc 	b.w	1dd70 <nrfx_clock_stop>
}
   107f8:	4770      	bx	lr
   107fa:	bf00      	nop
   107fc:	20001ea4 	.word	0x20001ea4

00010800 <api_blocking_start>:
{
   10800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10802:	2200      	movs	r2, #0
   10804:	2301      	movs	r3, #1
   10806:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1080a:	ab04      	add	r3, sp, #16
   1080c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10810:	4a09      	ldr	r2, [pc, #36]	; (10838 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10812:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10816:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10818:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1081c:	f009 fad1 	bl	19dc2 <api_start>
	if (err < 0) {
   10820:	2800      	cmp	r0, #0
   10822:	db05      	blt.n	10830 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10828:	2300      	movs	r3, #0
   1082a:	4668      	mov	r0, sp
   1082c:	f008 f834 	bl	18898 <z_impl_k_sem_take>
}
   10830:	b007      	add	sp, #28
   10832:	f85d fb04 	ldr.w	pc, [sp], #4
   10836:	bf00      	nop
   10838:	00019d95 	.word	0x00019d95

0001083c <z_nrf_clock_control_lf_on>:
{
   1083c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10840:	493a      	ldr	r1, [pc, #232]	; (1092c <z_nrf_clock_control_lf_on+0xf0>)
   10842:	f3bf 8f5b 	dmb	ish
   10846:	4606      	mov	r6, r0
   10848:	2201      	movs	r2, #1
   1084a:	e851 3f00 	ldrex	r3, [r1]
   1084e:	e841 2000 	strex	r0, r2, [r1]
   10852:	2800      	cmp	r0, #0
   10854:	d1f9      	bne.n	1084a <z_nrf_clock_control_lf_on+0xe>
   10856:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1085a:	b933      	cbnz	r3, 1086a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1085c:	4934      	ldr	r1, [pc, #208]	; (10930 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1085e:	4835      	ldr	r0, [pc, #212]	; (10934 <z_nrf_clock_control_lf_on+0xf8>)
   10860:	604b      	str	r3, [r1, #4]
   10862:	60cb      	str	r3, [r1, #12]
   10864:	608a      	str	r2, [r1, #8]
   10866:	f008 feae 	bl	195c6 <onoff_request>
	switch (start_mode) {
   1086a:	1e73      	subs	r3, r6, #1
   1086c:	2b01      	cmp	r3, #1
   1086e:	d832      	bhi.n	108d6 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   10870:	2e01      	cmp	r6, #1
   10872:	d107      	bne.n	10884 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10878:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1087c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   10880:	2b01      	cmp	r3, #1
   10882:	d028      	beq.n	108d6 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10884:	f00d fd05 	bl	1e292 <k_is_in_isr>
   10888:	4604      	mov	r4, r0
   1088a:	b918      	cbnz	r0, 10894 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1088c:	4b2a      	ldr	r3, [pc, #168]	; (10938 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1088e:	781b      	ldrb	r3, [r3, #0]
   10890:	2b00      	cmp	r3, #0
   10892:	d144      	bne.n	1091e <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   10894:	f04f 0340 	mov.w	r3, #64	; 0x40
   10898:	f3ef 8511 	mrs	r5, BASEPRI
   1089c:	f383 8811 	msr	BASEPRI, r3
   108a0:	f3bf 8f6f 	isb	sy
   108a4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   108a6:	4f25      	ldr	r7, [pc, #148]	; (1093c <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   108a8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 10940 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   108ac:	f8df 9094 	ldr.w	r9, [pc, #148]	; 10944 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   108b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   108b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   108b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   108bc:	03d2      	lsls	r2, r2, #15
   108be:	d50c      	bpl.n	108da <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   108c0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   108c4:	2b01      	cmp	r3, #1
   108c6:	d001      	beq.n	108cc <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   108c8:	2e01      	cmp	r6, #1
   108ca:	d106      	bne.n	108da <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   108cc:	b30c      	cbz	r4, 10912 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   108ce:	f385 8811 	msr	BASEPRI, r5
   108d2:	f3bf 8f6f 	isb	sy
}
   108d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   108da:	b1ac      	cbz	r4, 10908 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   108dc:	4628      	mov	r0, r5
   108de:	f000 fbab 	bl	11038 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   108e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   108e6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   108ea:	2b00      	cmp	r3, #0
   108ec:	d1e0      	bne.n	108b0 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   108ee:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   108f0:	2900      	cmp	r1, #0
   108f2:	d0dd      	beq.n	108b0 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   108f4:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   108f6:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   108f8:	2301      	movs	r3, #1
   108fa:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   108fe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10902:	f8c9 3000 	str.w	r3, [r9]
}
   10906:	e7d3      	b.n	108b0 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   10908:	2100      	movs	r1, #0
   1090a:	2021      	movs	r0, #33	; 0x21
   1090c:	f007 ff02 	bl	18714 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10910:	e7e7      	b.n	108e2 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   10912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10916:	2202      	movs	r2, #2
   10918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1091c:	e7db      	b.n	108d6 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   1091e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10922:	2202      	movs	r2, #2
   10924:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   10928:	4605      	mov	r5, r0
}
   1092a:	e7bc      	b.n	108a6 <z_nrf_clock_control_lf_on+0x6a>
   1092c:	20001ea8 	.word	0x20001ea8
   10930:	20001e44 	.word	0x20001e44
   10934:	20001e70 	.word	0x20001e70
   10938:	20002630 	.word	0x20002630
   1093c:	40000104 	.word	0x40000104
   10940:	e000e100 	.word	0xe000e100
   10944:	40000008 	.word	0x40000008

00010948 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   10948:	4a04      	ldr	r2, [pc, #16]	; (1095c <sys_clock_timeout_handler+0x14>)
   1094a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1094c:	1ac8      	subs	r0, r1, r3
   1094e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10952:	4403      	add	r3, r0
   10954:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   10956:	f008 bb23 	b.w	18fa0 <z_clock_announce>
   1095a:	bf00      	nop
   1095c:	20001ebc 	.word	0x20001ebc

00010960 <set_absolute_alarm>:
{
   10960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10964:	0086      	lsls	r6, r0, #2
   10966:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1096a:	f100 0450 	add.w	r4, r0, #80	; 0x50
   1096e:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   10972:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10974:	f8df 807c 	ldr.w	r8, [pc, #124]	; 109f4 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   10978:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1097c:	b2a4      	uxth	r4, r4
   1097e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10982:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   10986:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   1098a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1098e:	4087      	lsls	r7, r0
   10990:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   10992:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10996:	eba3 030a 	sub.w	r3, r3, sl
   1099a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1099e:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   109a2:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   109a4:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   109a8:	d102      	bne.n	109b0 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   109aa:	2013      	movs	r0, #19
   109ac:	f00d fc77 	bl	1e29e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   109b0:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   109b4:	1aab      	subs	r3, r5, r2
   109b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   109ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   109be:	bf88      	it	hi
   109c0:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   109c2:	2300      	movs	r3, #0
   109c4:	6023      	str	r3, [r4, #0]
   109c6:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   109c8:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   109cc:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   109d0:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   109d4:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   109d8:	459a      	cmp	sl, r3
   109da:	d006      	beq.n	109ea <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   109dc:	1aeb      	subs	r3, r5, r3
   109de:	3b02      	subs	r3, #2
   109e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   109e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   109e8:	d801      	bhi.n	109ee <set_absolute_alarm+0x8e>
}
   109ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   109ee:	462b      	mov	r3, r5
   109f0:	e7cf      	b.n	10992 <set_absolute_alarm+0x32>
   109f2:	bf00      	nop
   109f4:	40011000 	.word	0x40011000

000109f8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   109f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   109fa:	4e10      	ldr	r6, [pc, #64]	; (10a3c <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   109fc:	4f10      	ldr	r7, [pc, #64]	; (10a40 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   109fe:	2500      	movs	r5, #0
   10a00:	4b10      	ldr	r3, [pc, #64]	; (10a44 <rtc_nrf_isr+0x4c>)
   10a02:	2000      	movs	r0, #0
   10a04:	681c      	ldr	r4, [r3, #0]
   10a06:	461a      	mov	r2, r3
   10a08:	b105      	cbz	r5, 10a0c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   10a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   10a0c:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   10a10:	03c9      	lsls	r1, r1, #15
   10a12:	d5fa      	bpl.n	10a0a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10a14:	6839      	ldr	r1, [r7, #0]
   10a16:	2900      	cmp	r1, #0
   10a18:	d0f7      	beq.n	10a0a <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10a1a:	603d      	str	r5, [r7, #0]
   10a1c:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   10a1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10a22:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
   10a26:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10a2a:	2501      	movs	r5, #1
			if (handler) {
   10a2c:	b11c      	cbz	r4, 10a36 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
   10a2e:	685a      	ldr	r2, [r3, #4]
   10a30:	6018      	str	r0, [r3, #0]
   10a32:	47a0      	blx	r4
   10a34:	e7e4      	b.n	10a00 <rtc_nrf_isr+0x8>
   10a36:	6014      	str	r4, [r2, #0]
}
   10a38:	e7e7      	b.n	10a0a <rtc_nrf_isr+0x12>
   10a3a:	bf00      	nop
   10a3c:	40011000 	.word	0x40011000
   10a40:	40011140 	.word	0x40011140
   10a44:	20001eb0 	.word	0x20001eb0

00010a48 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
   10a48:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   10a4a:	4d10      	ldr	r5, [pc, #64]	; (10a8c <z_clock_driver_init+0x44>)
   10a4c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   10a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   10a52:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   10a56:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   10a5a:	4b0d      	ldr	r3, [pc, #52]	; (10a90 <z_clock_driver_init+0x48>)
   10a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10a60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   10a64:	2101      	movs	r1, #1
   10a66:	4622      	mov	r2, r4
   10a68:	2011      	movs	r0, #17
   10a6a:	f000 fa75 	bl	10f58 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   10a6e:	2011      	movs	r0, #17
   10a70:	f000 fa40 	bl	10ef4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   10a74:	4a07      	ldr	r2, [pc, #28]	; (10a94 <z_clock_driver_init+0x4c>)
   10a76:	2301      	movs	r3, #1
   10a78:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   10a7a:	4a07      	ldr	r2, [pc, #28]	; (10a98 <z_clock_driver_init+0x50>)
   10a7c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   10a7e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   10a80:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   10a82:	f7ff fedb 	bl	1083c <z_nrf_clock_control_lf_on>

	return 0;
}
   10a86:	4620      	mov	r0, r4
   10a88:	bd38      	pop	{r3, r4, r5, pc}
   10a8a:	bf00      	nop
   10a8c:	40011000 	.word	0x40011000
   10a90:	e000e100 	.word	0xe000e100
   10a94:	40011008 	.word	0x40011008
   10a98:	20001eb8 	.word	0x20001eb8

00010a9c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   10a9c:	4b13      	ldr	r3, [pc, #76]	; (10aec <z_clock_set_timeout+0x50>)
   10a9e:	f1b0 3fff 	cmp.w	r0, #4294967295
   10aa2:	bf08      	it	eq
   10aa4:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   10aa6:	3801      	subs	r0, #1
   10aa8:	2800      	cmp	r0, #0
   10aaa:	dd1c      	ble.n	10ae6 <z_clock_set_timeout+0x4a>
   10aac:	4298      	cmp	r0, r3
   10aae:	bfa8      	it	ge
   10ab0:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   10ab2:	4b0f      	ldr	r3, [pc, #60]	; (10af0 <z_clock_set_timeout+0x54>)
   10ab4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   10ab8:	4b0e      	ldr	r3, [pc, #56]	; (10af4 <z_clock_set_timeout+0x58>)
   10aba:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   10abc:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   10abe:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   10ac2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   10ac6:	bf18      	it	ne
   10ac8:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   10aca:	4a0b      	ldr	r2, [pc, #44]	; (10af8 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   10acc:	3301      	adds	r3, #1
   10ace:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   10ad0:	480a      	ldr	r0, [pc, #40]	; (10afc <z_clock_set_timeout+0x60>)
   10ad2:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   10ad4:	2000      	movs	r0, #0
   10ad6:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   10ad8:	4a04      	ldr	r2, [pc, #16]	; (10aec <z_clock_set_timeout+0x50>)
   10ada:	4293      	cmp	r3, r2
   10adc:	bf94      	ite	ls
   10ade:	18c9      	addls	r1, r1, r3
   10ae0:	1889      	addhi	r1, r1, r2
   10ae2:	f7ff bf3d 	b.w	10960 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   10ae6:	2000      	movs	r0, #0
   10ae8:	e7e3      	b.n	10ab2 <z_clock_set_timeout+0x16>
   10aea:	bf00      	nop
   10aec:	007fffff 	.word	0x007fffff
   10af0:	40011000 	.word	0x40011000
   10af4:	20001ebc 	.word	0x20001ebc
   10af8:	20001eb0 	.word	0x20001eb0
   10afc:	00010949 	.word	0x00010949

00010b00 <z_clock_elapsed>:
	__asm__ volatile(
   10b00:	f04f 0240 	mov.w	r2, #64	; 0x40
   10b04:	f3ef 8311 	mrs	r3, BASEPRI
   10b08:	f382 8811 	msr	BASEPRI, r2
   10b0c:	f3bf 8f6f 	isb	sy
   10b10:	4a06      	ldr	r2, [pc, #24]	; (10b2c <z_clock_elapsed+0x2c>)
   10b12:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10b16:	4a06      	ldr	r2, [pc, #24]	; (10b30 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   10b18:	6812      	ldr	r2, [r2, #0]
   10b1a:	1a80      	subs	r0, r0, r2
   10b1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   10b20:	f383 8811 	msr	BASEPRI, r3
   10b24:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10b28:	4770      	bx	lr
   10b2a:	bf00      	nop
   10b2c:	40011000 	.word	0x40011000
   10b30:	20001ebc 	.word	0x20001ebc

00010b34 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   10b34:	4b01      	ldr	r3, [pc, #4]	; (10b3c <uECC_get_rng+0x8>)
   10b36:	6818      	ldr	r0, [r3, #0]
   10b38:	4770      	bx	lr
   10b3a:	bf00      	nop
   10b3c:	20000550 	.word	0x20000550

00010b40 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   10b40:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   10b42:	2208      	movs	r2, #8
{
   10b44:	b089      	sub	sp, #36	; 0x24
   10b46:	460c      	mov	r4, r1
   10b48:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   10b4a:	f009 fb19 	bl	1a180 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   10b4e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   10b50:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   10b52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   10b54:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   10b56:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   10b58:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   10b5a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   10b5c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   10b5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   10b60:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   10b62:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10b64:	2308      	movs	r3, #8
   10b66:	466a      	mov	r2, sp
   10b68:	4669      	mov	r1, sp
   10b6a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   10b6c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   10b70:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10b72:	f009 fa07 	bl	19f84 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10b76:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10b78:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10b7a:	466a      	mov	r2, sp
   10b7c:	4631      	mov	r1, r6
   10b7e:	4630      	mov	r0, r6
   10b80:	f009 fa00 	bl	19f84 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   10b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10b86:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   10b88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10b8a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   10b8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10b8e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   10b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10b92:	4405      	add	r5, r0
	tmp[7] = 0;
   10b94:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10b98:	466a      	mov	r2, sp
   10b9a:	2308      	movs	r3, #8
   10b9c:	4669      	mov	r1, sp
   10b9e:	4668      	mov	r0, sp
   10ba0:	f009 f9f0 	bl	19f84 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10ba4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   10ba6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10ba8:	2308      	movs	r3, #8
   10baa:	466a      	mov	r2, sp
   10bac:	4630      	mov	r0, r6
   10bae:	f009 f9e9 	bl	19f84 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   10bb2:	6a23      	ldr	r3, [r4, #32]
   10bb4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   10bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10bb8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   10bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10bbc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   10bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10bc0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   10bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10bc4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10bc6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10bc8:	2308      	movs	r3, #8
   10bca:	466a      	mov	r2, sp
   10bcc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   10bce:	e9cd 7704 	strd	r7, r7, [sp, #16]
   10bd2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10bd4:	f009 f9d6 	bl	19f84 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   10bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10bda:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   10bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   10bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   10be0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   10be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10be4:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   10be6:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   10be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   10bea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   10bec:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   10bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   10bf2:	6a23      	ldr	r3, [r4, #32]
   10bf4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10bf6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10bf8:	2308      	movs	r3, #8
   10bfa:	466a      	mov	r2, sp
   10bfc:	4630      	mov	r0, r6
   10bfe:	f009 f9c1 	bl	19f84 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   10c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10c04:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   10c06:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10c08:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   10c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c0c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   10c0e:	6a23      	ldr	r3, [r4, #32]
   10c10:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   10c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10c14:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   10c16:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c18:	2308      	movs	r3, #8
   10c1a:	466a      	mov	r2, sp
   10c1c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   10c1e:	e9cd 7704 	strd	r7, r7, [sp, #16]
   10c22:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c24:	f009 fae2 	bl	1a1ec <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   10c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10c2a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   10c2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c2e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   10c30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10c32:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   10c34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10c36:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   10c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c3a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   10c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10c3e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c40:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c42:	2308      	movs	r3, #8
   10c44:	466a      	mov	r2, sp
   10c46:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   10c48:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c4c:	f009 face 	bl	1a1ec <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   10c50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c52:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   10c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10c56:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   10c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10c5a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   10c5c:	6a23      	ldr	r3, [r4, #32]
   10c5e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   10c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c62:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   10c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   10c66:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   10c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10c6c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c6e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c70:	2308      	movs	r3, #8
   10c72:	466a      	mov	r2, sp
   10c74:	4630      	mov	r0, r6
   10c76:	f009 fab9 	bl	1a1ec <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   10c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10c7c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   10c7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   10c80:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   10c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c86:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   10c88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10c8a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   10c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   10c8e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   10c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c94:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c96:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   10c98:	2308      	movs	r3, #8
   10c9a:	466a      	mov	r2, sp
   10c9c:	4630      	mov	r0, r6
   10c9e:	f009 faa5 	bl	1a1ec <uECC_vli_sub>

	if (carry < 0) {
   10ca2:	1a2d      	subs	r5, r5, r0
   10ca4:	d410      	bmi.n	10cc8 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   10ca6:	4c0d      	ldr	r4, [pc, #52]	; (10cdc <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   10ca8:	b935      	cbnz	r5, 10cb8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   10caa:	2208      	movs	r2, #8
   10cac:	4631      	mov	r1, r6
   10cae:	4620      	mov	r0, r4
   10cb0:	f009 fa72 	bl	1a198 <uECC_vli_cmp_unsafe>
		while (carry || 
   10cb4:	2801      	cmp	r0, #1
   10cb6:	d00f      	beq.n	10cd8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   10cb8:	2308      	movs	r3, #8
   10cba:	4622      	mov	r2, r4
   10cbc:	4631      	mov	r1, r6
   10cbe:	4630      	mov	r0, r6
   10cc0:	f009 fa94 	bl	1a1ec <uECC_vli_sub>
   10cc4:	1a2d      	subs	r5, r5, r0
   10cc6:	e7ef      	b.n	10ca8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   10cc8:	4a04      	ldr	r2, [pc, #16]	; (10cdc <vli_mmod_fast_secp256r1+0x19c>)
   10cca:	2308      	movs	r3, #8
   10ccc:	4631      	mov	r1, r6
   10cce:	4630      	mov	r0, r6
   10cd0:	f009 f958 	bl	19f84 <uECC_vli_add>
		while (carry < 0);
   10cd4:	182d      	adds	r5, r5, r0
   10cd6:	d4f8      	bmi.n	10cca <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   10cd8:	b009      	add	sp, #36	; 0x24
   10cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cdc:	0001ec68 	.word	0x0001ec68

00010ce0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   10ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   10ce2:	4e26      	ldr	r6, [pc, #152]	; (10d7c <tc_aes128_set_encrypt_key+0x9c>)
{
   10ce4:	4607      	mov	r7, r0
   10ce6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10ce8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   10cea:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10cec:	ad01      	add	r5, sp, #4
   10cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10cf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10cf4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10cf8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   10cfc:	4638      	mov	r0, r7
   10cfe:	2f00      	cmp	r7, #0
   10d00:	d038      	beq.n	10d74 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   10d02:	2c00      	cmp	r4, #0
   10d04:	d038      	beq.n	10d78 <tc_aes128_set_encrypt_key+0x98>
   10d06:	1f38      	subs	r0, r7, #4
   10d08:	4621      	mov	r1, r4
   10d0a:	4602      	mov	r2, r0
   10d0c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d0e:	784b      	ldrb	r3, [r1, #1]
   10d10:	780d      	ldrb	r5, [r1, #0]
   10d12:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d14:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10d18:	78cd      	ldrb	r5, [r1, #3]
   10d1a:	432b      	orrs	r3, r5
   10d1c:	788d      	ldrb	r5, [r1, #2]
   10d1e:	3104      	adds	r1, #4
   10d20:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   10d24:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d26:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10d2a:	d1f0      	bne.n	10d0e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d2c:	4c14      	ldr	r4, [pc, #80]	; (10d80 <tc_aes128_set_encrypt_key+0xa0>)
   10d2e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   10d30:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10d32:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10d34:	d116      	bne.n	10d64 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d36:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10d3a:	5ca5      	ldrb	r5, [r4, r2]
   10d3c:	0e1a      	lsrs	r2, r3, #24
   10d3e:	5ca2      	ldrb	r2, [r4, r2]
   10d40:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10d44:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10d48:	b2db      	uxtb	r3, r3
   10d4a:	5d65      	ldrb	r5, [r4, r5]
   10d4c:	5ce3      	ldrb	r3, [r4, r3]
   10d4e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10d52:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10d56:	ad0c      	add	r5, sp, #48	; 0x30
   10d58:	f021 0303 	bic.w	r3, r1, #3
   10d5c:	442b      	add	r3, r5
   10d5e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10d62:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   10d64:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10d68:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10d6a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10d6c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10d6e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10d70:	d1de      	bne.n	10d30 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   10d72:	2001      	movs	r0, #1
}
   10d74:	b00d      	add	sp, #52	; 0x34
   10d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10d78:	4620      	mov	r0, r4
   10d7a:	e7fb      	b.n	10d74 <tc_aes128_set_encrypt_key+0x94>
   10d7c:	0001ea34 	.word	0x0001ea34
   10d80:	0001f51b 	.word	0x0001f51b

00010d84 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   10d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10d88:	4615      	mov	r5, r2
   10d8a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   10d8c:	4606      	mov	r6, r0
   10d8e:	2800      	cmp	r0, #0
   10d90:	d058      	beq.n	10e44 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   10d92:	2900      	cmp	r1, #0
   10d94:	d059      	beq.n	10e4a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   10d96:	2a00      	cmp	r2, #0
   10d98:	d059      	beq.n	10e4e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   10d9a:	2310      	movs	r3, #16
   10d9c:	460a      	mov	r2, r1
   10d9e:	4668      	mov	r0, sp
   10da0:	4619      	mov	r1, r3
   10da2:	f009 f82b 	bl	19dfc <_copy>
	add_round_key(state, s->words);
   10da6:	4629      	mov	r1, r5
   10da8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   10daa:	4c2a      	ldr	r4, [pc, #168]	; (10e54 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   10dac:	f009 ff30 	bl	1ac10 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   10db0:	f105 0710 	add.w	r7, r5, #16
   10db4:	46a1      	mov	r9, r4
   10db6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   10db8:	46e8      	mov	r8, sp
{
   10dba:	466a      	mov	r2, sp
   10dbc:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   10dbe:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10dc0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   10dc2:	5c61      	ldrb	r1, [r4, r1]
   10dc4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   10dc8:	d1f9      	bne.n	10dbe <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   10dca:	4668      	mov	r0, sp
   10dcc:	f009 ff65 	bl	1ac9a <shift_rows>
	mult_row_column(t, s);
   10dd0:	4669      	mov	r1, sp
   10dd2:	a804      	add	r0, sp, #16
   10dd4:	f009 ff9a 	bl	1ad0c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   10dd8:	a901      	add	r1, sp, #4
   10dda:	a805      	add	r0, sp, #20
   10ddc:	f009 ff96 	bl	1ad0c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   10de0:	a902      	add	r1, sp, #8
   10de2:	a806      	add	r0, sp, #24
   10de4:	f009 ff92 	bl	1ad0c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   10de8:	a903      	add	r1, sp, #12
   10dea:	a807      	add	r0, sp, #28
   10dec:	f009 ff8e 	bl	1ad0c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   10df0:	2310      	movs	r3, #16
   10df2:	4619      	mov	r1, r3
   10df4:	eb0d 0203 	add.w	r2, sp, r3
   10df8:	4668      	mov	r0, sp
   10dfa:	f008 ffff 	bl	19dfc <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   10dfe:	4639      	mov	r1, r7
   10e00:	4668      	mov	r0, sp
   10e02:	3710      	adds	r7, #16
   10e04:	f009 ff04 	bl	1ac10 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   10e08:	42af      	cmp	r7, r5
   10e0a:	d1d5      	bne.n	10db8 <tc_aes_encrypt+0x34>
   10e0c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   10e0e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   10e12:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   10e14:	f819 3003 	ldrb.w	r3, [r9, r3]
   10e18:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   10e1c:	d1f7      	bne.n	10e0e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   10e1e:	4668      	mov	r0, sp
   10e20:	f009 ff3b 	bl	1ac9a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   10e24:	4629      	mov	r1, r5
   10e26:	4668      	mov	r0, sp
   10e28:	f009 fef2 	bl	1ac10 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   10e2c:	2310      	movs	r3, #16
   10e2e:	4619      	mov	r1, r3
   10e30:	466a      	mov	r2, sp
   10e32:	4630      	mov	r0, r6
   10e34:	f008 ffe2 	bl	19dfc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   10e38:	4668      	mov	r0, sp
   10e3a:	2210      	movs	r2, #16
   10e3c:	4621      	mov	r1, r4
   10e3e:	f008 ffea 	bl	19e16 <_set>

	return TC_CRYPTO_SUCCESS;
   10e42:	2001      	movs	r0, #1
}
   10e44:	b009      	add	sp, #36	; 0x24
   10e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   10e4a:	4608      	mov	r0, r1
   10e4c:	e7fa      	b.n	10e44 <tc_aes_encrypt+0xc0>
   10e4e:	4610      	mov	r0, r2
   10e50:	e7f8      	b.n	10e44 <tc_aes_encrypt+0xc0>
   10e52:	bf00      	nop
   10e54:	0001f51b 	.word	0x0001f51b

00010e58 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10e58:	4a09      	ldr	r2, [pc, #36]	; (10e80 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10e5a:	490a      	ldr	r1, [pc, #40]	; (10e84 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10e5c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10e5e:	6809      	ldr	r1, [r1, #0]
   10e60:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10e62:	4909      	ldr	r1, [pc, #36]	; (10e88 <arch_swap+0x30>)
	_current->arch.basepri = key;
   10e64:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10e66:	684b      	ldr	r3, [r1, #4]
   10e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10e6c:	604b      	str	r3, [r1, #4]
   10e6e:	2300      	movs	r3, #0
   10e70:	f383 8811 	msr	BASEPRI, r3
   10e74:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10e78:	6893      	ldr	r3, [r2, #8]
}
   10e7a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10e7c:	4770      	bx	lr
   10e7e:	bf00      	nop
   10e80:	200020bc 	.word	0x200020bc
   10e84:	0001f1e4 	.word	0x0001f1e4
   10e88:	e000ed00 	.word	0xe000ed00

00010e8c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10e8c:	490f      	ldr	r1, [pc, #60]	; (10ecc <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10e8e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10e90:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10e94:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10e96:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10e9a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10e9e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   10ea0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10ea4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10ea8:	4f09      	ldr	r7, [pc, #36]	; (10ed0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10eaa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10eae:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   10eb0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10eb2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10eb4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10eb6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10eb8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10eba:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10ebe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10ec2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10ec6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10eca:	4770      	bx	lr
    ldr r1, =_kernel
   10ecc:	200020bc 	.word	0x200020bc
    ldr v4, =_SCS_ICSR
   10ed0:	e000ed04 	.word	0xe000ed04

00010ed4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   10ed4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10ed8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10eda:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10ede:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10ee2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10ee4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10ee8:	2902      	cmp	r1, #2
    beq _oops
   10eea:	d0ff      	beq.n	10eec <_oops>

00010eec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10eec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   10eee:	f00a f852 	bl	1af96 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   10ef2:	bd01      	pop	{r0, pc}

00010ef4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10ef4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	db08      	blt.n	10f0c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10efa:	2201      	movs	r2, #1
   10efc:	f000 001f 	and.w	r0, r0, #31
   10f00:	fa02 f000 	lsl.w	r0, r2, r0
   10f04:	095b      	lsrs	r3, r3, #5
   10f06:	4a02      	ldr	r2, [pc, #8]	; (10f10 <arch_irq_enable+0x1c>)
   10f08:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   10f0c:	4770      	bx	lr
   10f0e:	bf00      	nop
   10f10:	e000e100 	.word	0xe000e100

00010f14 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10f14:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   10f16:	2b00      	cmp	r3, #0
   10f18:	db0d      	blt.n	10f36 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10f1a:	2201      	movs	r2, #1
   10f1c:	095b      	lsrs	r3, r3, #5
   10f1e:	f000 001f 	and.w	r0, r0, #31
   10f22:	fa02 f000 	lsl.w	r0, r2, r0
   10f26:	3320      	adds	r3, #32
   10f28:	4a03      	ldr	r2, [pc, #12]	; (10f38 <arch_irq_disable+0x24>)
   10f2a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10f32:	f3bf 8f6f 	isb	sy
}
   10f36:	4770      	bx	lr
   10f38:	e000e100 	.word	0xe000e100

00010f3c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10f3c:	4b05      	ldr	r3, [pc, #20]	; (10f54 <arch_irq_is_enabled+0x18>)
   10f3e:	0942      	lsrs	r2, r0, #5
   10f40:	f000 001f 	and.w	r0, r0, #31
   10f44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10f48:	2301      	movs	r3, #1
   10f4a:	fa03 f000 	lsl.w	r0, r3, r0
}
   10f4e:	4010      	ands	r0, r2
   10f50:	4770      	bx	lr
   10f52:	bf00      	nop
   10f54:	e000e100 	.word	0xe000e100

00010f58 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   10f58:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10f5a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   10f5c:	bf54      	ite	pl
   10f5e:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   10f60:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10f62:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f64:	bfac      	ite	ge
   10f66:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f6a:	4a07      	ldrlt	r2, [pc, #28]	; (10f88 <z_arm_irq_priority_set+0x30>)
   10f6c:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f70:	bfac      	ite	ge
   10f72:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f76:	f000 000f 	andlt.w	r0, r0, #15
   10f7a:	b2db      	uxtb	r3, r3
   10f7c:	bfb4      	ite	lt
   10f7e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f80:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   10f84:	4770      	bx	lr
   10f86:	bf00      	nop
   10f88:	e000ed14 	.word	0xe000ed14

00010f8c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   10f8c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   10f8e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   10f90:	4b04      	ldr	r3, [pc, #16]	; (10fa4 <_arch_isr_direct_pm+0x18>)
   10f92:	6a18      	ldr	r0, [r3, #32]
   10f94:	b118      	cbz	r0, 10f9e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   10f96:	2200      	movs	r2, #0
   10f98:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   10f9a:	f006 ff8d 	bl	17eb8 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   10f9e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   10fa0:	bd08      	pop	{r3, pc}
   10fa2:	bf00      	nop
   10fa4:	200020bc 	.word	0x200020bc

00010fa8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   10fa8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10fac:	9b00      	ldr	r3, [sp, #0]
   10fae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   10fb2:	490a      	ldr	r1, [pc, #40]	; (10fdc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   10fb4:	9b01      	ldr	r3, [sp, #4]
   10fb6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10fba:	9b02      	ldr	r3, [sp, #8]
   10fbc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   10fc0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10fc8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   10fcc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10fd0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10fd2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   10fd4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   10fd6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10fd8:	4770      	bx	lr
   10fda:	bf00      	nop
   10fdc:	00019659 	.word	0x00019659

00010fe0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   10fe0:	b508      	push	{r3, lr}
   10fe2:	4606      	mov	r6, r0
   10fe4:	460d      	mov	r5, r1
   10fe6:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
   10fe8:	f000 f990 	bl	1130c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10fec:	4b07      	ldr	r3, [pc, #28]	; (1100c <arch_switch_to_main_thread+0x2c>)
   10fee:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10ff0:	4620      	mov	r0, r4
   10ff2:	f385 8809 	msr	PSP, r5
   10ff6:	2100      	movs	r1, #0
   10ff8:	b663      	cpsie	if
   10ffa:	f381 8811 	msr	BASEPRI, r1
   10ffe:	f3bf 8f6f 	isb	sy
   11002:	2200      	movs	r2, #0
   11004:	2300      	movs	r3, #0
   11006:	f008 fb27 	bl	19658 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1100a:	bf00      	nop
   1100c:	200020bc 	.word	0x200020bc

00011010 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11010:	4901      	ldr	r1, [pc, #4]	; (11018 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11012:	2210      	movs	r2, #16
	str	r2, [r1]
   11014:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11016:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11018:	e000ed10 	.word	0xe000ed10

0001101c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1101c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1101e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11020:	f380 8811 	msr	BASEPRI, r0
	isb
   11024:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11028:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1102c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1102e:	b662      	cpsie	i
	isb
   11030:	f3bf 8f6f 	isb	sy

	bx	lr
   11034:	4770      	bx	lr
   11036:	bf00      	nop

00011038 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11038:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1103a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1103c:	f381 8811 	msr	BASEPRI, r1

	wfe
   11040:	bf20      	wfe

	msr	BASEPRI, r0
   11042:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   11046:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11048:	4770      	bx	lr
   1104a:	bf00      	nop

0001104c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1104c:	bf30      	wfi
    b z_SysNmiOnReset
   1104e:	f7ff bffd 	b.w	1104c <z_SysNmiOnReset>
   11052:	bf00      	nop

00011054 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11054:	4a0e      	ldr	r2, [pc, #56]	; (11090 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   11056:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11058:	4b0e      	ldr	r3, [pc, #56]	; (11094 <z_arm_prep_c+0x40>)
   1105a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1105e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11064:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11068:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1106c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   11074:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   11078:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1107c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11080:	f006 ff42 	bl	17f08 <z_bss_zero>
	z_data_copy();
   11084:	f007 fe92 	bl	18dac <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11088:	f000 f922 	bl	112d0 <z_arm_interrupt_init>
	z_cstart();
   1108c:	f006 ff60 	bl	17f50 <z_cstart>
   11090:	00000000 	.word	0x00000000
   11094:	e000ed00 	.word	0xe000ed00

00011098 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11098:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1109a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1109c:	4a0b      	ldr	r2, [pc, #44]	; (110cc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1109e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   110a0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   110a2:	bf1e      	ittt	ne
	movne	r1, #0
   110a4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   110a6:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   110a8:	f006 ff06 	blne	17eb8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   110ac:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   110ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   110b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   110b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   110ba:	4905      	ldr	r1, [pc, #20]	; (110d0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   110bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   110be:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   110c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   110c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   110c6:	4903      	ldr	r1, [pc, #12]	; (110d4 <_isr_wrapper+0x3c>)
	bx r1
   110c8:	4708      	bx	r1
   110ca:	0000      	.short	0x0000
	ldr r2, =_kernel
   110cc:	200020bc 	.word	0x200020bc
	ldr r1, =_sw_isr_table
   110d0:	0001e85c 	.word	0x0001e85c
	ldr r1, =z_arm_int_exit
   110d4:	000112b5 	.word	0x000112b5

000110d8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   110d8:	f009 ffef 	bl	1b0ba <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   110dc:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   110de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   110e2:	4808      	ldr	r0, [pc, #32]	; (11104 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   110e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   110e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   110ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   110ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   110f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   110f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   110f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   110fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   110fe:	f7ff ffa9 	bl	11054 <z_arm_prep_c>
   11102:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   11104:	200042e8 	.word	0x200042e8

00011108 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11108:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1110c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11110:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11112:	4672      	mov	r2, lr
	bl z_arm_fault
   11114:	f000 f852 	bl	111bc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11118:	bd01      	pop	{r0, pc}
   1111a:	bf00      	nop

0001111c <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1111c:	4b0e      	ldr	r3, [pc, #56]	; (11158 <mem_manage_fault.isra.0+0x3c>)
   1111e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11124:	0792      	lsls	r2, r2, #30
   11126:	d508      	bpl.n	1113a <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   11128:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1112a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1112c:	0612      	lsls	r2, r2, #24
   1112e:	d504      	bpl.n	1113a <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   11130:	b118      	cbz	r0, 1113a <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11138:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1113a:	4b07      	ldr	r3, [pc, #28]	; (11158 <mem_manage_fault.isra.0+0x3c>)
   1113c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1113e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11142:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11144:	bf58      	it	pl
   11146:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11148:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1114a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1114c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11150:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11152:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11154:	4770      	bx	lr
   11156:	bf00      	nop
   11158:	e000ed00 	.word	0xe000ed00

0001115c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1115c:	4b0d      	ldr	r3, [pc, #52]	; (11194 <bus_fault.isra.0+0x38>)
   1115e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11164:	0592      	lsls	r2, r2, #22
   11166:	d508      	bpl.n	1117a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11168:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1116a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1116c:	0412      	lsls	r2, r2, #16
   1116e:	d504      	bpl.n	1117a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   11170:	b118      	cbz	r0, 1117a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11178:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1117a:	4b06      	ldr	r3, [pc, #24]	; (11194 <bus_fault.isra.0+0x38>)
   1117c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1117e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11180:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11182:	bf58      	it	pl
   11184:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11186:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11188:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1118a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1118e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11190:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11192:	4770      	bx	lr
   11194:	e000ed00 	.word	0xe000ed00

00011198 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11198:	4b07      	ldr	r3, [pc, #28]	; (111b8 <usage_fault.isra.0+0x20>)
   1119a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1119c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1119e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   111a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   111a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   111a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   111a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   111a8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   111ac:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   111b0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   111b2:	2000      	movs	r0, #0
   111b4:	4770      	bx	lr
   111b6:	bf00      	nop
   111b8:	e000ed00 	.word	0xe000ed00

000111bc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   111bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   111be:	4b36      	ldr	r3, [pc, #216]	; (11298 <z_arm_fault+0xdc>)
   111c0:	685b      	ldr	r3, [r3, #4]
{
   111c2:	b08a      	sub	sp, #40	; 0x28
   111c4:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   111c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   111ca:	2500      	movs	r5, #0
   111cc:	f385 8811 	msr	BASEPRI, r5
   111d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   111d4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   111d8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   111dc:	d111      	bne.n	11202 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   111de:	f002 010c 	and.w	r1, r2, #12
   111e2:	2908      	cmp	r1, #8
   111e4:	d00d      	beq.n	11202 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   111e6:	0711      	lsls	r1, r2, #28
   111e8:	d401      	bmi.n	111ee <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   111ea:	4606      	mov	r6, r0
			*nested_exc = true;
   111ec:	2501      	movs	r5, #1
	*recoverable = false;
   111ee:	2200      	movs	r2, #0
   111f0:	3b03      	subs	r3, #3
   111f2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   111f6:	2b03      	cmp	r3, #3
   111f8:	d847      	bhi.n	1128a <z_arm_fault+0xce>
   111fa:	e8df f003 	tbb	[pc, r3]
   111fe:	3e04      	.short	0x3e04
   11200:	3b42      	.short	0x3b42
		return NULL;
   11202:	462e      	mov	r6, r5
   11204:	e7f3      	b.n	111ee <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11206:	4b24      	ldr	r3, [pc, #144]	; (11298 <z_arm_fault+0xdc>)
   11208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1120a:	0792      	lsls	r2, r2, #30
   1120c:	d43d      	bmi.n	1128a <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1120e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11210:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   11214:	d008      	beq.n	11228 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
   11216:	3328      	adds	r3, #40	; 0x28
   11218:	781b      	ldrb	r3, [r3, #0]
   1121a:	b1eb      	cbz	r3, 11258 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
   1121c:	f10d 0107 	add.w	r1, sp, #7
   11220:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   11222:	f7ff ff7b 	bl	1111c <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
   11226:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11228:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1122c:	b993      	cbnz	r3, 11254 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1122e:	2220      	movs	r2, #32
   11230:	4631      	mov	r1, r6
   11232:	a802      	add	r0, sp, #8
   11234:	f009 fef0 	bl	1b018 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11238:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1123a:	b345      	cbz	r5, 1128e <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1123c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11240:	b922      	cbnz	r2, 1124c <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11242:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11246:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1124a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1124c:	a902      	add	r1, sp, #8
   1124e:	4620      	mov	r0, r4
   11250:	f009 fe9f 	bl	1af92 <z_arm_fatal_error>
}
   11254:	b00a      	add	sp, #40	; 0x28
   11256:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   11258:	4b10      	ldr	r3, [pc, #64]	; (1129c <z_arm_fault+0xe0>)
   1125a:	781b      	ldrb	r3, [r3, #0]
   1125c:	b12b      	cbz	r3, 1126a <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
   1125e:	f10d 0107 	add.w	r1, sp, #7
   11262:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11264:	f7ff ff7a 	bl	1115c <bus_fault.isra.0>
   11268:	e7dd      	b.n	11226 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
   1126a:	4b0d      	ldr	r3, [pc, #52]	; (112a0 <z_arm_fault+0xe4>)
   1126c:	8818      	ldrh	r0, [r3, #0]
   1126e:	b284      	uxth	r4, r0
   11270:	2c00      	cmp	r4, #0
   11272:	d0d9      	beq.n	11228 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
   11274:	f7ff ff90 	bl	11198 <usage_fault.isra.0>
   11278:	e7d5      	b.n	11226 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
   1127a:	f10d 0107 	add.w	r1, sp, #7
   1127e:	2000      	movs	r0, #0
   11280:	e7cf      	b.n	11222 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   11282:	f10d 0107 	add.w	r1, sp, #7
   11286:	2000      	movs	r0, #0
   11288:	e7ec      	b.n	11264 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1128a:	2400      	movs	r4, #0
   1128c:	e7cc      	b.n	11228 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1128e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11292:	f023 0301 	bic.w	r3, r3, #1
   11296:	e7d8      	b.n	1124a <z_arm_fault+0x8e>
   11298:	e000ed00 	.word	0xe000ed00
   1129c:	e000ed29 	.word	0xe000ed29
   112a0:	e000ed2a 	.word	0xe000ed2a

000112a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   112a4:	4a02      	ldr	r2, [pc, #8]	; (112b0 <z_arm_fault_init+0xc>)
   112a6:	6953      	ldr	r3, [r2, #20]
   112a8:	f043 0310 	orr.w	r3, r3, #16
   112ac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   112ae:	4770      	bx	lr
   112b0:	e000ed00 	.word	0xe000ed00

000112b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   112b4:	4b04      	ldr	r3, [pc, #16]	; (112c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   112b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   112b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   112ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   112bc:	d003      	beq.n	112c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   112be:	4903      	ldr	r1, [pc, #12]	; (112cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   112c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   112c4:	600a      	str	r2, [r1, #0]

000112c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   112c6:	4770      	bx	lr
	ldr r3, =_kernel
   112c8:	200020bc 	.word	0x200020bc
	ldr r1, =_SCS_ICSR
   112cc:	e000ed04 	.word	0xe000ed04

000112d0 <z_arm_interrupt_init>:
   112d0:	4804      	ldr	r0, [pc, #16]	; (112e4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   112d2:	2300      	movs	r3, #0
   112d4:	2140      	movs	r1, #64	; 0x40
   112d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   112d8:	3301      	adds	r3, #1
   112da:	2b27      	cmp	r3, #39	; 0x27
   112dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   112e0:	d1f9      	bne.n	112d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   112e2:	4770      	bx	lr
   112e4:	e000e100 	.word	0xe000e100

000112e8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   112e8:	4b06      	ldr	r3, [pc, #24]	; (11304 <z_impl_k_thread_abort+0x1c>)
   112ea:	689b      	ldr	r3, [r3, #8]
   112ec:	4283      	cmp	r3, r0
   112ee:	d107      	bne.n	11300 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   112f0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   112f4:	b123      	cbz	r3, 11300 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   112f6:	4a04      	ldr	r2, [pc, #16]	; (11308 <z_impl_k_thread_abort+0x20>)
   112f8:	6853      	ldr	r3, [r2, #4]
   112fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   112fe:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   11300:	f007 ba40 	b.w	18784 <z_thread_abort>
   11304:	200020bc 	.word	0x200020bc
   11308:	e000ed00 	.word	0xe000ed00

0001130c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1130c:	4b02      	ldr	r3, [pc, #8]	; (11318 <z_arm_configure_static_mpu_regions+0xc>)
   1130e:	4a03      	ldr	r2, [pc, #12]	; (1131c <z_arm_configure_static_mpu_regions+0x10>)
   11310:	4803      	ldr	r0, [pc, #12]	; (11320 <z_arm_configure_static_mpu_regions+0x14>)
   11312:	2101      	movs	r1, #1
   11314:	f000 b886 	b.w	11424 <arm_core_mpu_configure_static_mpu_regions>
   11318:	20010000 	.word	0x20010000
   1131c:	20000000 	.word	0x20000000
   11320:	0001ed14 	.word	0x0001ed14

00011324 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11324:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   11326:	4f1e      	ldr	r7, [pc, #120]	; (113a0 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11328:	2600      	movs	r6, #0
   1132a:	428e      	cmp	r6, r1
   1132c:	db01      	blt.n	11332 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1132e:	4610      	mov	r0, r2
   11330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   11332:	6844      	ldr	r4, [r0, #4]
   11334:	b384      	cbz	r4, 11398 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   11336:	b153      	cbz	r3, 1134e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   11338:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1133c:	ea14 0f0c 	tst.w	r4, ip
   11340:	d118      	bne.n	11374 <mpu_configure_regions+0x50>
		&&
   11342:	2c1f      	cmp	r4, #31
   11344:	d916      	bls.n	11374 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   11346:	6805      	ldr	r5, [r0, #0]
		&&
   11348:	ea1c 0f05 	tst.w	ip, r5
   1134c:	d112      	bne.n	11374 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   1134e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   11350:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   11352:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11356:	b2d2      	uxtb	r2, r2
   11358:	d90f      	bls.n	1137a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   1135a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1135e:	d80e      	bhi.n	1137e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11360:	3c01      	subs	r4, #1
   11362:	fab4 f484 	clz	r4, r4
   11366:	f1c4 041f 	rsb	r4, r4, #31
   1136a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1136c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1136e:	ea4c 0404 	orr.w	r4, ip, r4
   11372:	d906      	bls.n	11382 <mpu_configure_regions+0x5e>
			return -EINVAL;
   11374:	f06f 0215 	mvn.w	r2, #21
   11378:	e7d9      	b.n	1132e <mpu_configure_regions+0xa>
		return REGION_32B;
   1137a:	2408      	movs	r4, #8
   1137c:	e7f6      	b.n	1136c <mpu_configure_regions+0x48>
		return REGION_4G;
   1137e:	243e      	movs	r4, #62	; 0x3e
   11380:	e7f4      	b.n	1136c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11382:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   11386:	4315      	orrs	r5, r2
   11388:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1138c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   11390:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11392:	60fd      	str	r5, [r7, #12]
		reg_index++;
   11394:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11396:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   11398:	3601      	adds	r6, #1
   1139a:	300c      	adds	r0, #12
   1139c:	e7c5      	b.n	1132a <mpu_configure_regions+0x6>
   1139e:	bf00      	nop
   113a0:	e000ed90 	.word	0xe000ed90

000113a4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   113a4:	4b03      	ldr	r3, [pc, #12]	; (113b4 <arm_core_mpu_enable+0x10>)
   113a6:	2205      	movs	r2, #5
   113a8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   113aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113ae:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   113b2:	4770      	bx	lr
   113b4:	e000ed90 	.word	0xe000ed90

000113b8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   113b8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   113bc:	4b01      	ldr	r3, [pc, #4]	; (113c4 <arm_core_mpu_disable+0xc>)
   113be:	2200      	movs	r2, #0
   113c0:	605a      	str	r2, [r3, #4]
}
   113c2:	4770      	bx	lr
   113c4:	e000ed90 	.word	0xe000ed90

000113c8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   113c8:	4913      	ldr	r1, [pc, #76]	; (11418 <arm_mpu_init+0x50>)
   113ca:	6808      	ldr	r0, [r1, #0]
   113cc:	2808      	cmp	r0, #8
{
   113ce:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   113d0:	d81e      	bhi.n	11410 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   113d2:	f7ff fff1 	bl	113b8 <arm_core_mpu_disable>
	MPU->RNR = index;
   113d6:	4c11      	ldr	r4, [pc, #68]	; (1141c <arm_mpu_init+0x54>)
   113d8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   113da:	2200      	movs	r2, #0
   113dc:	4290      	cmp	r0, r2
   113de:	f101 010c 	add.w	r1, r1, #12
   113e2:	d105      	bne.n	113f0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   113e4:	4b0e      	ldr	r3, [pc, #56]	; (11420 <arm_mpu_init+0x58>)
   113e6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   113e8:	f7ff ffdc 	bl	113a4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   113ec:	2000      	movs	r0, #0
}
   113ee:	bd10      	pop	{r4, pc}
   113f0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   113f2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   113f6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   113fa:	4313      	orrs	r3, r2
   113fc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11400:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11402:	f851 3c04 	ldr.w	r3, [r1, #-4]
   11406:	f043 0301 	orr.w	r3, r3, #1
   1140a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1140c:	3201      	adds	r2, #1
   1140e:	e7e5      	b.n	113dc <arm_mpu_init+0x14>
		return -1;
   11410:	f04f 30ff 	mov.w	r0, #4294967295
   11414:	e7eb      	b.n	113ee <arm_mpu_init+0x26>
   11416:	bf00      	nop
   11418:	0001ed20 	.word	0x0001ed20
   1141c:	e000ed90 	.word	0xe000ed90
   11420:	20002129 	.word	0x20002129

00011424 <arm_core_mpu_configure_static_mpu_regions>:
{
   11424:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11426:	4c03      	ldr	r4, [pc, #12]	; (11434 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11428:	2301      	movs	r3, #1
   1142a:	7822      	ldrb	r2, [r4, #0]
   1142c:	f7ff ff7a 	bl	11324 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11430:	7020      	strb	r0, [r4, #0]
}
   11432:	bd10      	pop	{r4, pc}
   11434:	20002129 	.word	0x20002129

00011438 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11438:	4b01      	ldr	r3, [pc, #4]	; (11440 <__stdout_hook_install+0x8>)
   1143a:	6018      	str	r0, [r3, #0]
}
   1143c:	4770      	bx	lr
   1143e:	bf00      	nop
   11440:	20000554 	.word	0x20000554

00011444 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11444:	f04f 0340 	mov.w	r3, #64	; 0x40
   11448:	f3ef 8211 	mrs	r2, BASEPRI
   1144c:	f383 8811 	msr	BASEPRI, r3
   11450:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11454:	4906      	ldr	r1, [pc, #24]	; (11470 <nordicsemi_nrf52_init+0x2c>)
   11456:	2301      	movs	r3, #1
   11458:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1145c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11460:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   11464:	f382 8811 	msr	BASEPRI, r2
   11468:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1146c:	2000      	movs	r0, #0
   1146e:	4770      	bx	lr
   11470:	4001e000 	.word	0x4001e000

00011474 <sys_arch_reboot>:
    *p_gpregret = val;
   11474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11478:	b2c0      	uxtb	r0, r0
   1147a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1147e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11482:	4905      	ldr	r1, [pc, #20]	; (11498 <sys_arch_reboot+0x24>)
   11484:	4b05      	ldr	r3, [pc, #20]	; (1149c <sys_arch_reboot+0x28>)
   11486:	68ca      	ldr	r2, [r1, #12]
   11488:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1148c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1148e:	60cb      	str	r3, [r1, #12]
   11490:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11494:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11496:	e7fd      	b.n	11494 <sys_arch_reboot+0x20>
   11498:	e000ed00 	.word	0xe000ed00
   1149c:	05fa0004 	.word	0x05fa0004

000114a0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   114a0:	b120      	cbz	r0, 114ac <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   114a2:	4b03      	ldr	r3, [pc, #12]	; (114b0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   114a4:	0180      	lsls	r0, r0, #6
   114a6:	f043 0301 	orr.w	r3, r3, #1
   114aa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   114ac:	4770      	bx	lr
   114ae:	bf00      	nop
   114b0:	0001eac0 	.word	0x0001eac0

000114b4 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   114b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   114b8:	4f60      	ldr	r7, [pc, #384]	; (1163c <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
   114ba:	f8df 8198 	ldr.w	r8, [pc, #408]	; 11654 <ecc_thread+0x1a0>
   114be:	463e      	mov	r6, r7
   114c0:	f04f 32ff 	mov.w	r2, #4294967295
   114c4:	f04f 33ff 	mov.w	r3, #4294967295
   114c8:	4640      	mov	r0, r8
   114ca:	f007 f9e5 	bl	18898 <z_impl_k_sem_take>
   114ce:	f3bf 8f5b 	dmb	ish
   114d2:	683c      	ldr	r4, [r7, #0]
   114d4:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   114d8:	f014 0401 	ands.w	r4, r4, #1
   114dc:	d055      	beq.n	1158a <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   114de:	f8df 9170 	ldr.w	r9, [pc, #368]	; 11650 <ecc_thread+0x19c>
   114e2:	4c57      	ldr	r4, [pc, #348]	; (11640 <ecc_thread+0x18c>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   114e4:	4d57      	ldr	r5, [pc, #348]	; (11644 <ecc_thread+0x190>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   114e6:	4858      	ldr	r0, [pc, #352]	; (11648 <ecc_thread+0x194>)
   114e8:	464a      	mov	r2, r9
   114ea:	4621      	mov	r1, r4
   114ec:	f008 fc9e 	bl	19e2c <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   114f0:	2800      	cmp	r0, #0
   114f2:	d03e      	beq.n	11572 <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   114f4:	2220      	movs	r2, #32
   114f6:	4629      	mov	r1, r5
   114f8:	4620      	mov	r0, r4
   114fa:	f009 fd7d 	bl	1aff8 <memcmp>
   114fe:	2800      	cmp	r0, #0
   11500:	d0f1      	beq.n	114e6 <ecc_thread+0x32>
	return 0;
   11502:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11506:	f04f 32ff 	mov.w	r2, #4294967295
   1150a:	f04f 33ff 	mov.w	r3, #4294967295
   1150e:	2001      	movs	r0, #1
   11510:	f000 f9be 	bl	11890 <bt_buf_get_rx>
   11514:	f100 0508 	add.w	r5, r0, #8
   11518:	2102      	movs	r1, #2
   1151a:	4604      	mov	r4, r0
   1151c:	4628      	mov	r0, r5
   1151e:	f00c faef 	bl	1db00 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   11522:	233e      	movs	r3, #62	; 0x3e
   11524:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   11526:	2342      	movs	r3, #66	; 0x42
   11528:	7043      	strb	r3, [r0, #1]
   1152a:	2101      	movs	r1, #1
   1152c:	4628      	mov	r0, r5
   1152e:	f00c fae7 	bl	1db00 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   11532:	2308      	movs	r3, #8
   11534:	7003      	strb	r3, [r0, #0]
   11536:	2141      	movs	r1, #65	; 0x41
   11538:	4628      	mov	r0, r5
   1153a:	f00c fae1 	bl	1db00 <net_buf_simple_add>
   1153e:	4605      	mov	r5, r0
	evt->status = status;
   11540:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   11544:	f1b9 0f00 	cmp.w	r9, #0
   11548:	d016      	beq.n	11578 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1154a:	2240      	movs	r2, #64	; 0x40
   1154c:	2100      	movs	r1, #0
   1154e:	f009 fd8e 	bl	1b06e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11552:	f3bf 8f5b 	dmb	ish
   11556:	e856 3f00 	ldrex	r3, [r6]
   1155a:	f023 0301 	bic.w	r3, r3, #1
   1155e:	e846 3200 	strex	r2, r3, [r6]
   11562:	2a00      	cmp	r2, #0
   11564:	d1f7      	bne.n	11556 <ecc_thread+0xa2>
   11566:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1156a:	4620      	mov	r0, r4
	bt_recv(buf);
   1156c:	f001 f8e8 	bl	12740 <bt_recv>
	while (true) {
   11570:	e7a6      	b.n	114c0 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   11572:	f04f 091f 	mov.w	r9, #31
   11576:	e7c6      	b.n	11506 <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
   11578:	4933      	ldr	r1, [pc, #204]	; (11648 <ecc_thread+0x194>)
   1157a:	f009 fe12 	bl	1b1a2 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
   1157e:	4933      	ldr	r1, [pc, #204]	; (1164c <ecc_thread+0x198>)
   11580:	f105 0021 	add.w	r0, r5, #33	; 0x21
   11584:	f009 fe0d 	bl	1b1a2 <sys_memcpy_swap.constprop.0>
   11588:	e7e3      	b.n	11552 <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1158a:	f3bf 8f5b 	dmb	ish
   1158e:	683b      	ldr	r3, [r7, #0]
   11590:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   11594:	079b      	lsls	r3, r3, #30
   11596:	d593      	bpl.n	114c0 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   11598:	492d      	ldr	r1, [pc, #180]	; (11650 <ecc_thread+0x19c>)
   1159a:	482b      	ldr	r0, [pc, #172]	; (11648 <ecc_thread+0x194>)
   1159c:	f009 fb15 	bl	1abca <uECC_valid_public_key>
	if (ret < 0) {
   115a0:	2800      	cmp	r0, #0
   115a2:	db11      	blt.n	115c8 <ecc_thread+0x114>
   115a4:	f3bf 8f5b 	dmb	ish
   115a8:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
   115aa:	4925      	ldr	r1, [pc, #148]	; (11640 <ecc_thread+0x18c>)
   115ac:	4825      	ldr	r0, [pc, #148]	; (11644 <ecc_thread+0x190>)
   115ae:	f3bf 8f5b 	dmb	ish
   115b2:	f013 0f04 	tst.w	r3, #4
   115b6:	f101 0220 	add.w	r2, r1, #32
   115ba:	4b25      	ldr	r3, [pc, #148]	; (11650 <ecc_thread+0x19c>)
   115bc:	bf18      	it	ne
   115be:	4601      	movne	r1, r0
   115c0:	4610      	mov	r0, r2
   115c2:	f008 fc82 	bl	19eca <uECC_shared_secret>
   115c6:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   115c8:	f04f 32ff 	mov.w	r2, #4294967295
   115cc:	f04f 33ff 	mov.w	r3, #4294967295
   115d0:	2001      	movs	r0, #1
   115d2:	f000 f95d 	bl	11890 <bt_buf_get_rx>
   115d6:	f100 0908 	add.w	r9, r0, #8
   115da:	2102      	movs	r1, #2
   115dc:	4605      	mov	r5, r0
   115de:	4648      	mov	r0, r9
   115e0:	f00c fa8e 	bl	1db00 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   115e4:	233e      	movs	r3, #62	; 0x3e
   115e6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   115e8:	2322      	movs	r3, #34	; 0x22
   115ea:	7043      	strb	r3, [r0, #1]
   115ec:	2101      	movs	r1, #1
   115ee:	4648      	mov	r0, r9
   115f0:	f00c fa86 	bl	1db00 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   115f4:	2309      	movs	r3, #9
   115f6:	7003      	strb	r3, [r0, #0]
   115f8:	2121      	movs	r1, #33	; 0x21
   115fa:	4648      	mov	r0, r9
   115fc:	f00c fa80 	bl	1db00 <net_buf_simple_add>
   11600:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   11602:	3001      	adds	r0, #1
   11604:	b99c      	cbnz	r4, 1162e <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   11606:	221f      	movs	r2, #31
   11608:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1160a:	21ff      	movs	r1, #255	; 0xff
   1160c:	2220      	movs	r2, #32
   1160e:	f009 fd2e 	bl	1b06e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11612:	f3bf 8f5b 	dmb	ish
   11616:	e856 3f00 	ldrex	r3, [r6]
   1161a:	f023 0302 	bic.w	r3, r3, #2
   1161e:	e846 3200 	strex	r2, r3, [r6]
   11622:	2a00      	cmp	r2, #0
   11624:	d1f7      	bne.n	11616 <ecc_thread+0x162>
   11626:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1162a:	4628      	mov	r0, r5
   1162c:	e79e      	b.n	1156c <ecc_thread+0xb8>
		evt->status = 0U;
   1162e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   11630:	4905      	ldr	r1, [pc, #20]	; (11648 <ecc_thread+0x194>)
		evt->status = 0U;
   11632:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   11634:	f009 fdb5 	bl	1b1a2 <sys_memcpy_swap.constprop.0>
   11638:	e7eb      	b.n	11612 <ecc_thread+0x15e>
   1163a:	bf00      	nop
   1163c:	20001ec0 	.word	0x20001ec0
   11640:	2000212a 	.word	0x2000212a
   11644:	0001f631 	.word	0x0001f631
   11648:	2000214a 	.word	0x2000214a
   1164c:	2000216a 	.word	0x2000216a
   11650:	0001ed40 	.word	0x0001ed40
   11654:	200007e8 	.word	0x200007e8

00011658 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   11658:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1165a:	4c21      	ldr	r4, [pc, #132]	; (116e0 <le_gen_dhkey+0x88>)
   1165c:	f3bf 8f5b 	dmb	ish
   11660:	6823      	ldr	r3, [r4, #0]
   11662:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   11666:	07da      	lsls	r2, r3, #31
{
   11668:	4606      	mov	r6, r0
   1166a:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1166c:	d501      	bpl.n	11672 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1166e:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   11670:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   11672:	2901      	cmp	r1, #1
   11674:	d831      	bhi.n	116da <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11676:	f3bf 8f5b 	dmb	ish
   1167a:	e854 3f00 	ldrex	r3, [r4]
   1167e:	f043 0202 	orr.w	r2, r3, #2
   11682:	e844 2100 	strex	r1, r2, [r4]
   11686:	2900      	cmp	r1, #0
   11688:	d1f7      	bne.n	1167a <le_gen_dhkey+0x22>
   1168a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   1168e:	079b      	lsls	r3, r3, #30
   11690:	d4ed      	bmi.n	1166e <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
   11692:	4814      	ldr	r0, [pc, #80]	; (116e4 <le_gen_dhkey+0x8c>)
   11694:	4631      	mov	r1, r6
   11696:	f009 fd84 	bl	1b1a2 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
   1169a:	4813      	ldr	r0, [pc, #76]	; (116e8 <le_gen_dhkey+0x90>)
   1169c:	f106 0120 	add.w	r1, r6, #32
   116a0:	f009 fd7f 	bl	1b1a2 <sys_memcpy_swap.constprop.0>
   116a4:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   116a8:	b175      	cbz	r5, 116c8 <le_gen_dhkey+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   116aa:	e854 3f00 	ldrex	r3, [r4]
   116ae:	f043 0304 	orr.w	r3, r3, #4
   116b2:	e844 3200 	strex	r2, r3, [r4]
   116b6:	2a00      	cmp	r2, #0
   116b8:	d1f7      	bne.n	116aa <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   116ba:	f3bf 8f5b 	dmb	ish
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   116be:	480b      	ldr	r0, [pc, #44]	; (116ec <le_gen_dhkey+0x94>)
   116c0:	f007 f8c4 	bl	1884c <z_impl_k_sem_give>
   116c4:	2000      	movs	r0, #0
   116c6:	e7d3      	b.n	11670 <le_gen_dhkey+0x18>
   116c8:	e854 3f00 	ldrex	r3, [r4]
   116cc:	f023 0304 	bic.w	r3, r3, #4
   116d0:	e844 3200 	strex	r2, r3, [r4]
   116d4:	2a00      	cmp	r2, #0
   116d6:	d0f0      	beq.n	116ba <le_gen_dhkey+0x62>
   116d8:	e7f6      	b.n	116c8 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   116da:	2012      	movs	r0, #18
   116dc:	e7c8      	b.n	11670 <le_gen_dhkey+0x18>
   116de:	bf00      	nop
   116e0:	20001ec0 	.word	0x20001ec0
   116e4:	2000214a 	.word	0x2000214a
   116e8:	2000216a 	.word	0x2000216a
   116ec:	200007e8 	.word	0x200007e8

000116f0 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   116f0:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   116f2:	7d06      	ldrb	r6, [r0, #20]
   116f4:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   116f6:	b976      	cbnz	r6, 11716 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   116f8:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   116fa:	881d      	ldrh	r5, [r3, #0]
   116fc:	f242 0226 	movw	r2, #8230	; 0x2026
   11700:	4295      	cmp	r5, r2
   11702:	d045      	beq.n	11790 <bt_hci_ecc_send+0xa0>
   11704:	d80f      	bhi.n	11726 <bt_hci_ecc_send+0x36>
   11706:	f242 0201 	movw	r2, #8193	; 0x2001
   1170a:	4295      	cmp	r5, r2
   1170c:	d04f      	beq.n	117ae <bt_hci_ecc_send+0xbe>
   1170e:	f242 0325 	movw	r3, #8229	; 0x2025
   11712:	429d      	cmp	r5, r3
   11714:	d013      	beq.n	1173e <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   11716:	4b2a      	ldr	r3, [pc, #168]	; (117c0 <bt_hci_ecc_send+0xd0>)
   11718:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1171c:	4620      	mov	r0, r4
   1171e:	691b      	ldr	r3, [r3, #16]
}
   11720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   11724:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   11726:	f242 035e 	movw	r3, #8286	; 0x205e
   1172a:	429d      	cmp	r5, r3
   1172c:	d1f3      	bne.n	11716 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   1172e:	2103      	movs	r1, #3
   11730:	3008      	adds	r0, #8
   11732:	f00c fa04 	bl	1db3e <net_buf_simple_pull>
	cmd = (void *)buf->data;
   11736:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   11738:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   1173c:	e02e      	b.n	1179c <bt_hci_ecc_send+0xac>
   1173e:	2103      	movs	r1, #3
   11740:	3008      	adds	r0, #8
   11742:	f00c f9fc 	bl	1db3e <net_buf_simple_pull>
	net_buf_unref(buf);
   11746:	4620      	mov	r0, r4
   11748:	f004 fdfe 	bl	16348 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1174c:	f3bf 8f5b 	dmb	ish
   11750:	4b1c      	ldr	r3, [pc, #112]	; (117c4 <bt_hci_ecc_send+0xd4>)
   11752:	681a      	ldr	r2, [r3, #0]
   11754:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   11758:	0792      	lsls	r2, r2, #30
   1175a:	d507      	bpl.n	1176c <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1175c:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   1175e:	4631      	mov	r1, r6
   11760:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   11764:	f009 fcf9 	bl	1b15a <send_cmd_status>
}
   11768:	2000      	movs	r0, #0
   1176a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1176c:	f3bf 8f5b 	dmb	ish
   11770:	e853 2f00 	ldrex	r2, [r3]
   11774:	f042 0101 	orr.w	r1, r2, #1
   11778:	e843 1000 	strex	r0, r1, [r3]
   1177c:	2800      	cmp	r0, #0
   1177e:	d1f7      	bne.n	11770 <bt_hci_ecc_send+0x80>
   11780:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   11784:	07d3      	lsls	r3, r2, #31
   11786:	d4e9      	bmi.n	1175c <bt_hci_ecc_send+0x6c>
   11788:	480f      	ldr	r0, [pc, #60]	; (117c8 <bt_hci_ecc_send+0xd8>)
   1178a:	f007 f85f 	bl	1884c <z_impl_k_sem_give>
}
   1178e:	e7e6      	b.n	1175e <bt_hci_ecc_send+0x6e>
   11790:	2103      	movs	r1, #3
   11792:	3008      	adds	r0, #8
   11794:	f00c f9d3 	bl	1db3e <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   11798:	68a0      	ldr	r0, [r4, #8]
   1179a:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   1179c:	f7ff ff5c 	bl	11658 <le_gen_dhkey>
   117a0:	4606      	mov	r6, r0
	net_buf_unref(buf);
   117a2:	4620      	mov	r0, r4
   117a4:	f004 fdd0 	bl	16348 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   117a8:	4631      	mov	r1, r6
   117aa:	4628      	mov	r0, r5
   117ac:	e7da      	b.n	11764 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   117ae:	78da      	ldrb	r2, [r3, #3]
   117b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   117b4:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   117b6:	791a      	ldrb	r2, [r3, #4]
   117b8:	f022 0201 	bic.w	r2, r2, #1
   117bc:	711a      	strb	r2, [r3, #4]
}
   117be:	e7aa      	b.n	11716 <bt_hci_ecc_send+0x26>
   117c0:	20000298 	.word	0x20000298
   117c4:	20001ec0 	.word	0x20001ec0
   117c8:	200007e8 	.word	0x200007e8

000117cc <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   117cc:	b510      	push	{r4, lr}
   117ce:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   117d0:	4c0c      	ldr	r4, [pc, #48]	; (11804 <bt_hci_ecc_init+0x38>)
   117d2:	490d      	ldr	r1, [pc, #52]	; (11808 <bt_hci_ecc_init+0x3c>)
   117d4:	2200      	movs	r2, #0
   117d6:	2300      	movs	r3, #0
   117d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   117dc:	2300      	movs	r3, #0
   117de:	220a      	movs	r2, #10
   117e0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   117e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   117e8:	9300      	str	r3, [sp, #0]
   117ea:	f44f 628a 	mov.w	r2, #1104	; 0x450
   117ee:	4b07      	ldr	r3, [pc, #28]	; (1180c <bt_hci_ecc_init+0x40>)
   117f0:	4620      	mov	r0, r4
   117f2:	f007 f8c5 	bl	18980 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   117f6:	4906      	ldr	r1, [pc, #24]	; (11810 <bt_hci_ecc_init+0x44>)
   117f8:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   117fa:	b008      	add	sp, #32
   117fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11800:	f00c bd51 	b.w	1e2a6 <z_impl_k_thread_name_set>
   11804:	200015f0 	.word	0x200015f0
   11808:	20002638 	.word	0x20002638
   1180c:	000114b5 	.word	0x000114b5
   11810:	0001f62a 	.word	0x0001f62a

00011814 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   11814:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   11816:	7802      	ldrb	r2, [r0, #0]
   11818:	2a01      	cmp	r2, #1
{
   1181a:	4604      	mov	r4, r0
   1181c:	460b      	mov	r3, r1
	switch (src->type) {
   1181e:	d016      	beq.n	1184e <uuid_to_uuid128+0x3a>
   11820:	2a02      	cmp	r2, #2
   11822:	d02c      	beq.n	1187e <uuid_to_uuid128+0x6a>
   11824:	b98a      	cbnz	r2, 1184a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11826:	4a19      	ldr	r2, [pc, #100]	; (1188c <uuid_to_uuid128+0x78>)
   11828:	460d      	mov	r5, r1
   1182a:	f102 0710 	add.w	r7, r2, #16
   1182e:	6810      	ldr	r0, [r2, #0]
   11830:	6851      	ldr	r1, [r2, #4]
   11832:	462e      	mov	r6, r5
   11834:	c603      	stmia	r6!, {r0, r1}
   11836:	3208      	adds	r2, #8
   11838:	42ba      	cmp	r2, r7
   1183a:	4635      	mov	r5, r6
   1183c:	d1f7      	bne.n	1182e <uuid_to_uuid128+0x1a>
   1183e:	7812      	ldrb	r2, [r2, #0]
   11840:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11842:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   11844:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   11846:	0a12      	lsrs	r2, r2, #8
   11848:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1184a:	bcf0      	pop	{r4, r5, r6, r7}
   1184c:	4770      	bx	lr
		*dst = uuid128_base;
   1184e:	4a0f      	ldr	r2, [pc, #60]	; (1188c <uuid_to_uuid128+0x78>)
   11850:	460d      	mov	r5, r1
   11852:	f102 0710 	add.w	r7, r2, #16
   11856:	6810      	ldr	r0, [r2, #0]
   11858:	6851      	ldr	r1, [r2, #4]
   1185a:	462e      	mov	r6, r5
   1185c:	c603      	stmia	r6!, {r0, r1}
   1185e:	3208      	adds	r2, #8
   11860:	42ba      	cmp	r2, r7
   11862:	4635      	mov	r5, r6
   11864:	d1f7      	bne.n	11856 <uuid_to_uuid128+0x42>
   11866:	7812      	ldrb	r2, [r2, #0]
   11868:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1186a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   1186c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1186e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   11872:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   11874:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   11876:	0a12      	lsrs	r2, r2, #8
   11878:	7399      	strb	r1, [r3, #14]
   1187a:	741a      	strb	r2, [r3, #16]
}
   1187c:	e7e5      	b.n	1184a <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1187e:	4601      	mov	r1, r0
}
   11880:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   11882:	2211      	movs	r2, #17
   11884:	4618      	mov	r0, r3
   11886:	f009 bbc7 	b.w	1b018 <memcpy>
   1188a:	bf00      	nop
   1188c:	0001f651 	.word	0x0001f651

00011890 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11890:	b538      	push	{r3, r4, r5, lr}
   11892:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   11894:	4805      	ldr	r0, [pc, #20]	; (118ac <bt_buf_get_rx+0x1c>)
   11896:	f00c f8dd 	bl	1da54 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1189a:	4604      	mov	r4, r0
   1189c:	b120      	cbz	r0, 118a8 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   1189e:	2100      	movs	r1, #0
   118a0:	3008      	adds	r0, #8
   118a2:	f00c f8f6 	bl	1da92 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   118a6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   118a8:	4620      	mov	r0, r4
   118aa:	bd38      	pop	{r3, r4, r5, pc}
   118ac:	20000918 	.word	0x20000918

000118b0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   118b0:	b570      	push	{r4, r5, r6, lr}
   118b2:	4602      	mov	r2, r0
   118b4:	460b      	mov	r3, r1
	__asm__ volatile(
   118b6:	f04f 0140 	mov.w	r1, #64	; 0x40
   118ba:	f3ef 8511 	mrs	r5, BASEPRI
   118be:	f381 8811 	msr	BASEPRI, r1
   118c2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   118c6:	480c      	ldr	r0, [pc, #48]	; (118f8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   118c8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   118ca:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   118ce:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   118d2:	f385 8811 	msr	BASEPRI, r5
   118d6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   118da:	b924      	cbnz	r4, 118e6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   118dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   118e0:	2001      	movs	r0, #1
   118e2:	f7ff bfd5 	b.w	11890 <bt_buf_get_rx>
   118e6:	2301      	movs	r3, #1
   118e8:	f104 0008 	add.w	r0, r4, #8
   118ec:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   118ee:	81a1      	strh	r1, [r4, #12]
   118f0:	f00c f8cf 	bl	1da92 <net_buf_simple_reserve>
}
   118f4:	4620      	mov	r0, r4
   118f6:	bd70      	pop	{r4, r5, r6, pc}
   118f8:	20000298 	.word	0x20000298

000118fc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   118fc:	b570      	push	{r4, r5, r6, lr}
   118fe:	4604      	mov	r4, r0
	switch (evt) {
   11900:	2c0f      	cmp	r4, #15
{
   11902:	460d      	mov	r5, r1
   11904:	4610      	mov	r0, r2
   11906:	4619      	mov	r1, r3
	switch (evt) {
   11908:	d805      	bhi.n	11916 <bt_buf_get_evt+0x1a>
   1190a:	2c0d      	cmp	r4, #13
   1190c:	d912      	bls.n	11934 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1190e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11912:	f7ff bfcd 	b.w	118b0 <bt_buf_get_cmd_complete>
	switch (evt) {
   11916:	2c13      	cmp	r4, #19
   11918:	d10c      	bne.n	11934 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1191a:	480b      	ldr	r0, [pc, #44]	; (11948 <bt_buf_get_evt+0x4c>)
   1191c:	f00c f89a 	bl	1da54 <net_buf_alloc_fixed>
			if (buf) {
   11920:	4604      	mov	r4, r0
   11922:	b128      	cbz	r0, 11930 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   11924:	2100      	movs	r1, #0
   11926:	3008      	adds	r0, #8
   11928:	f00c f8b3 	bl	1da92 <net_buf_simple_reserve>
   1192c:	2301      	movs	r3, #1
   1192e:	7523      	strb	r3, [r4, #20]
}
   11930:	4620      	mov	r0, r4
   11932:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11934:	4602      	mov	r2, r0
   11936:	460b      	mov	r3, r1
		if (discardable) {
   11938:	b10d      	cbz	r5, 1193e <bt_buf_get_evt+0x42>
   1193a:	4804      	ldr	r0, [pc, #16]	; (1194c <bt_buf_get_evt+0x50>)
   1193c:	e7ee      	b.n	1191c <bt_buf_get_evt+0x20>
}
   1193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11942:	2001      	movs	r0, #1
   11944:	f7ff bfa4 	b.w	11890 <bt_buf_get_rx>
   11948:	20000940 	.word	0x20000940
   1194c:	200008a0 	.word	0x200008a0

00011950 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   11950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   11952:	4f0a      	ldr	r7, [pc, #40]	; (1197c <id_find+0x2c>)
{
   11954:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   11956:	2500      	movs	r5, #0
   11958:	79fb      	ldrb	r3, [r7, #7]
   1195a:	b2ec      	uxtb	r4, r5
   1195c:	42a3      	cmp	r3, r4
   1195e:	d802      	bhi.n	11966 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   11960:	f06f 0401 	mvn.w	r4, #1
   11964:	e008      	b.n	11978 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   11966:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1196a:	4439      	add	r1, r7
   1196c:	4630      	mov	r0, r6
   1196e:	f009 fced 	bl	1b34c <bt_addr_le_cmp>
   11972:	3501      	adds	r5, #1
   11974:	2800      	cmp	r0, #0
   11976:	d1ef      	bne.n	11958 <id_find+0x8>
}
   11978:	4620      	mov	r0, r4
   1197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1197c:	20000298 	.word	0x20000298

00011980 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   11980:	6843      	ldr	r3, [r0, #4]
{
   11982:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11984:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   11986:	0558      	lsls	r0, r3, #21
   11988:	d502      	bpl.n	11990 <valid_adv_param+0x10>
		return false;
   1198a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   1198c:	b003      	add	sp, #12
   1198e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   11990:	6922      	ldr	r2, [r4, #16]
   11992:	b10a      	cbz	r2, 11998 <valid_adv_param+0x18>
   11994:	07d9      	lsls	r1, r3, #31
   11996:	d5f8      	bpl.n	1198a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   11998:	4d1a      	ldr	r5, [pc, #104]	; (11a04 <valid_adv_param+0x84>)
   1199a:	7820      	ldrb	r0, [r4, #0]
   1199c:	79eb      	ldrb	r3, [r5, #7]
   1199e:	4283      	cmp	r3, r0
   119a0:	d9f3      	bls.n	1198a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   119a2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   119a6:	2300      	movs	r3, #0
   119a8:	4669      	mov	r1, sp
   119aa:	4428      	add	r0, r5
   119ac:	9300      	str	r3, [sp, #0]
   119ae:	f8cd 3003 	str.w	r3, [sp, #3]
   119b2:	f009 fccb 	bl	1b34c <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   119b6:	2800      	cmp	r0, #0
   119b8:	d0e7      	beq.n	1198a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   119ba:	6860      	ldr	r0, [r4, #4]
   119bc:	07c2      	lsls	r2, r0, #31
   119be:	d406      	bmi.n	119ce <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   119c0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   119c4:	2b08      	cmp	r3, #8
   119c6:	d802      	bhi.n	119ce <valid_adv_param+0x4e>
   119c8:	68a3      	ldr	r3, [r4, #8]
   119ca:	2b9f      	cmp	r3, #159	; 0x9f
   119cc:	d9dd      	bls.n	1198a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   119ce:	f010 0f30 	tst.w	r0, #48	; 0x30
   119d2:	d002      	beq.n	119da <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   119d4:	6923      	ldr	r3, [r4, #16]
   119d6:	2b00      	cmp	r3, #0
   119d8:	d0d7      	beq.n	1198a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   119da:	06c3      	lsls	r3, r0, #27
   119dc:	d401      	bmi.n	119e2 <valid_adv_param+0x62>
   119de:	6923      	ldr	r3, [r4, #16]
   119e0:	b943      	cbnz	r3, 119f4 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   119e2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   119e6:	429a      	cmp	r2, r3
   119e8:	d8cf      	bhi.n	1198a <valid_adv_param+0xa>
   119ea:	2a1f      	cmp	r2, #31
   119ec:	d9cd      	bls.n	1198a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   119ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   119f2:	d8ca      	bhi.n	1198a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   119f4:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   119f8:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   119fc:	bf18      	it	ne
   119fe:	2001      	movne	r0, #1
   11a00:	e7c4      	b.n	1198c <valid_adv_param+0xc>
   11a02:	bf00      	nop
   11a04:	20000298 	.word	0x20000298

00011a08 <hci_le_meta_event>:
{
   11a08:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11a0a:	2101      	movs	r1, #1
   11a0c:	4604      	mov	r4, r0
   11a0e:	3008      	adds	r0, #8
   11a10:	f00c f89d 	bl	1db4e <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11a14:	4621      	mov	r1, r4
   11a16:	4a03      	ldr	r2, [pc, #12]	; (11a24 <hci_le_meta_event+0x1c>)
   11a18:	7800      	ldrb	r0, [r0, #0]
}
   11a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11a1e:	230a      	movs	r3, #10
   11a20:	f009 bc4f 	b.w	1b2c2 <handle_event>
   11a24:	0001ee20 	.word	0x0001ee20

00011a28 <hci_encrypt_key_refresh_complete>:
{
   11a28:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   11a2a:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   11a2c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   11a30:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   11a32:	f001 fd2f 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   11a36:	4604      	mov	r4, r0
   11a38:	b328      	cbz	r0, 11a86 <hci_encrypt_key_refresh_complete+0x5e>
	if (status) {
   11a3a:	b165      	cbz	r5, 11a56 <hci_encrypt_key_refresh_complete+0x2e>
	switch (hci_err) {
   11a3c:	2d29      	cmp	r5, #41	; 0x29
   11a3e:	bf96      	itet	ls
   11a40:	4b11      	ldrls	r3, [pc, #68]	; (11a88 <hci_encrypt_key_refresh_complete+0x60>)
	if (status) {
   11a42:	2208      	movhi	r2, #8
   11a44:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   11a46:	4629      	mov	r1, r5
   11a48:	f001 fc38 	bl	132bc <bt_conn_security_changed>
	bt_conn_unref(conn);
   11a4c:	4620      	mov	r0, r4
}
   11a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11a52:	f00a b8e9 	b.w	1bc28 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   11a56:	7883      	ldrb	r3, [r0, #2]
   11a58:	2b01      	cmp	r3, #1
   11a5a:	d107      	bne.n	11a6c <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   11a5c:	f00b ff60 	bl	1d920 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   11a60:	4620      	mov	r0, r4
   11a62:	f009 fc43 	bl	1b2ec <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   11a66:	2800      	cmp	r0, #0
   11a68:	bf08      	it	eq
   11a6a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11a6c:	4b06      	ldr	r3, [pc, #24]	; (11a88 <hci_encrypt_key_refresh_complete+0x60>)
   11a6e:	4629      	mov	r1, r5
   11a70:	5d5a      	ldrb	r2, [r3, r5]
   11a72:	4620      	mov	r0, r4
   11a74:	f001 fc22 	bl	132bc <bt_conn_security_changed>
	if (status) {
   11a78:	2d00      	cmp	r5, #0
   11a7a:	d0e7      	beq.n	11a4c <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   11a7c:	4629      	mov	r1, r5
   11a7e:	4620      	mov	r0, r4
   11a80:	f00a f915 	bl	1bcae <bt_conn_disconnect>
   11a84:	e7e2      	b.n	11a4c <hci_encrypt_key_refresh_complete+0x24>
}
   11a86:	bd38      	pop	{r3, r4, r5, pc}
   11a88:	0001f75b 	.word	0x0001f75b

00011a8c <hci_encrypt_change>:
{
   11a8c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   11a8e:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   11a90:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   11a94:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   11a96:	f001 fcfd 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   11a9a:	4604      	mov	r4, r0
   11a9c:	b340      	cbz	r0, 11af0 <hci_encrypt_change+0x64>
	if (status) {
   11a9e:	b165      	cbz	r5, 11aba <hci_encrypt_change+0x2e>
	switch (hci_err) {
   11aa0:	2d29      	cmp	r5, #41	; 0x29
   11aa2:	bf96      	itet	ls
   11aa4:	4b13      	ldrls	r3, [pc, #76]	; (11af4 <hci_encrypt_change+0x68>)
	if (status) {
   11aa6:	2208      	movhi	r2, #8
   11aa8:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   11aaa:	4629      	mov	r1, r5
   11aac:	f001 fc06 	bl	132bc <bt_conn_security_changed>
	bt_conn_unref(conn);
   11ab0:	4620      	mov	r0, r4
}
   11ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   11ab6:	f00a b8b7 	b.w	1bc28 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   11aba:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   11abc:	78f3      	ldrb	r3, [r6, #3]
   11abe:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   11ac0:	2a01      	cmp	r2, #1
   11ac2:	d108      	bne.n	11ad6 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   11ac4:	b10b      	cbz	r3, 11aca <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   11ac6:	f00b ff2b 	bl	1d920 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   11aca:	4620      	mov	r0, r4
   11acc:	f009 fc0e 	bl	1b2ec <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   11ad0:	2800      	cmp	r0, #0
   11ad2:	bf08      	it	eq
   11ad4:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11ad6:	4b07      	ldr	r3, [pc, #28]	; (11af4 <hci_encrypt_change+0x68>)
   11ad8:	4629      	mov	r1, r5
   11ada:	5d5a      	ldrb	r2, [r3, r5]
   11adc:	4620      	mov	r0, r4
   11ade:	f001 fbed 	bl	132bc <bt_conn_security_changed>
	if (status) {
   11ae2:	2d00      	cmp	r5, #0
   11ae4:	d0e4      	beq.n	11ab0 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   11ae6:	4629      	mov	r1, r5
   11ae8:	4620      	mov	r0, r4
   11aea:	f00a f8e0 	bl	1bcae <bt_conn_disconnect>
   11aee:	e7df      	b.n	11ab0 <hci_encrypt_change+0x24>
}
   11af0:	bd70      	pop	{r4, r5, r6, pc}
   11af2:	bf00      	nop
   11af4:	0001f75b 	.word	0x0001f75b

00011af8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11af8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11afa:	4c0c      	ldr	r4, [pc, #48]	; (11b2c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11afc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11afe:	2205      	movs	r2, #5
   11b00:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   11b04:	f001 fda2 	bl	1364c <bt_conn_lookup_state_le>
		if (!conn) {
   11b08:	b970      	cbnz	r0, 11b28 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   11b0a:	4b09      	ldr	r3, [pc, #36]	; (11b30 <find_pending_connect.part.0+0x38>)
   11b0c:	6818      	ldr	r0, [r3, #0]
   11b0e:	889a      	ldrh	r2, [r3, #4]
   11b10:	9000      	str	r0, [sp, #0]
   11b12:	799b      	ldrb	r3, [r3, #6]
   11b14:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11b18:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   11b1c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11b20:	2204      	movs	r2, #4
   11b22:	4669      	mov	r1, sp
   11b24:	f001 fd92 	bl	1364c <bt_conn_lookup_state_le>
}
   11b28:	b002      	add	sp, #8
   11b2a:	bd10      	pop	{r4, pc}
   11b2c:	20000298 	.word	0x20000298
   11b30:	0001ea74 	.word	0x0001ea74

00011b34 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   11b34:	b530      	push	{r4, r5, lr}
   11b36:	4d13      	ldr	r5, [pc, #76]	; (11b84 <id_create.isra.0+0x50>)
   11b38:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   11b3c:	b085      	sub	sp, #20
   11b3e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   11b40:	460c      	mov	r4, r1
   11b42:	b171      	cbz	r1, 11b62 <id_create.isra.0+0x2e>
   11b44:	2300      	movs	r3, #0
   11b46:	4669      	mov	r1, sp
   11b48:	4620      	mov	r0, r4
   11b4a:	9300      	str	r3, [sp, #0]
   11b4c:	f8cd 3003 	str.w	r3, [sp, #3]
   11b50:	f009 fbfc 	bl	1b34c <bt_addr_le_cmp>
   11b54:	b128      	cbz	r0, 11b62 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   11b56:	4621      	mov	r1, r4
   11b58:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   11b5a:	f009 fbf4 	bl	1b346 <bt_addr_le_copy>
}
   11b5e:	b005      	add	sp, #20
   11b60:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   11b62:	a802      	add	r0, sp, #8
   11b64:	f009 fb8d 	bl	1b282 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   11b68:	a802      	add	r0, sp, #8
   11b6a:	f7ff fef1 	bl	11950 <id_find>
   11b6e:	2800      	cmp	r0, #0
   11b70:	daf7      	bge.n	11b62 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   11b72:	a902      	add	r1, sp, #8
   11b74:	4628      	mov	r0, r5
   11b76:	f009 fbe6 	bl	1b346 <bt_addr_le_copy>
		if (addr) {
   11b7a:	2c00      	cmp	r4, #0
   11b7c:	d0ef      	beq.n	11b5e <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   11b7e:	4629      	mov	r1, r5
   11b80:	4620      	mov	r0, r4
   11b82:	e7ea      	b.n	11b5a <id_create.isra.0+0x26>
   11b84:	20000298 	.word	0x20000298

00011b88 <hci_rx_thread>:
{
   11b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11b8c:	4f3b      	ldr	r7, [pc, #236]	; (11c7c <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   11b8e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11c90 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11b92:	4e3b      	ldr	r6, [pc, #236]	; (11c80 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11b94:	f04f 33ff 	mov.w	r3, #4294967295
   11b98:	f04f 32ff 	mov.w	r2, #4294967295
   11b9c:	4638      	mov	r0, r7
   11b9e:	f00b ff5e 	bl	1da5e <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11ba2:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   11ba4:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11ba6:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   11ba8:	d039      	beq.n	11c1e <hci_rx_thread+0x96>
   11baa:	2b03      	cmp	r3, #3
   11bac:	d120      	bne.n	11bf0 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11bae:	8983      	ldrh	r3, [r0, #12]
   11bb0:	2b03      	cmp	r3, #3
   11bb2:	d80c      	bhi.n	11bce <hci_rx_thread+0x46>
   11bb4:	4933      	ldr	r1, [pc, #204]	; (11c84 <hci_rx_thread+0xfc>)
   11bb6:	4834      	ldr	r0, [pc, #208]	; (11c88 <hci_rx_thread+0x100>)
   11bb8:	f240 43c9 	movw	r3, #1225	; 0x4c9
   11bbc:	4632      	mov	r2, r6
   11bbe:	f007 fc86 	bl	194ce <printk>
   11bc2:	4040      	eors	r0, r0
   11bc4:	f380 8811 	msr	BASEPRI, r0
   11bc8:	f04f 0003 	mov.w	r0, #3
   11bcc:	df02      	svc	2
   11bce:	2104      	movs	r1, #4
   11bd0:	f104 0008 	add.w	r0, r4, #8
   11bd4:	f00b ffbb 	bl	1db4e <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11bd8:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11bda:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   11bdc:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11be0:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   11be2:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   11be4:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   11be8:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   11bea:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   11bec:	d003      	beq.n	11bf6 <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   11bee:	4620      	mov	r0, r4
			net_buf_unref(buf);
   11bf0:	f004 fbaa 	bl	16348 <net_buf_unref>
			break;
   11bf4:	e010      	b.n	11c18 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   11bf6:	f001 fc4d 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   11bfa:	4605      	mov	r5, r0
   11bfc:	2800      	cmp	r0, #0
   11bfe:	d0f6      	beq.n	11bee <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   11c00:	f001 fe98 	bl	13934 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   11c04:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   11c08:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   11c0a:	4621      	mov	r1, r4
   11c0c:	4628      	mov	r0, r5
   11c0e:	f009 ff89 	bl	1bb24 <bt_conn_recv>
	bt_conn_unref(conn);
   11c12:	4628      	mov	r0, r5
   11c14:	f00a f808 	bl	1bc28 <bt_conn_unref>
	z_impl_k_yield();
   11c18:	f006 fd2a 	bl	18670 <z_impl_k_yield>
	while (1) {
   11c1c:	e7ba      	b.n	11b94 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11c1e:	8983      	ldrh	r3, [r0, #12]
   11c20:	2b01      	cmp	r3, #1
   11c22:	d80c      	bhi.n	11c3e <hci_rx_thread+0xb6>
   11c24:	4917      	ldr	r1, [pc, #92]	; (11c84 <hci_rx_thread+0xfc>)
   11c26:	4818      	ldr	r0, [pc, #96]	; (11c88 <hci_rx_thread+0x100>)
   11c28:	f241 33ff 	movw	r3, #5119	; 0x13ff
   11c2c:	4632      	mov	r2, r6
   11c2e:	f007 fc4e 	bl	194ce <printk>
   11c32:	4040      	eors	r0, r0
   11c34:	f380 8811 	msr	BASEPRI, r0
   11c38:	f04f 0003 	mov.w	r0, #3
   11c3c:	df02      	svc	2
   11c3e:	2102      	movs	r1, #2
   11c40:	f104 0008 	add.w	r0, r4, #8
   11c44:	f00b ff83 	bl	1db4e <net_buf_simple_pull_mem>
   11c48:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11c4a:	7800      	ldrb	r0, [r0, #0]
   11c4c:	f009 fb27 	bl	1b29e <bt_hci_evt_get_flags>
   11c50:	0783      	lsls	r3, r0, #30
   11c52:	d40c      	bmi.n	11c6e <hci_rx_thread+0xe6>
   11c54:	490d      	ldr	r1, [pc, #52]	; (11c8c <hci_rx_thread+0x104>)
   11c56:	480c      	ldr	r0, [pc, #48]	; (11c88 <hci_rx_thread+0x100>)
   11c58:	f241 4303 	movw	r3, #5123	; 0x1403
   11c5c:	4632      	mov	r2, r6
   11c5e:	f007 fc36 	bl	194ce <printk>
   11c62:	4040      	eors	r0, r0
   11c64:	f380 8811 	msr	BASEPRI, r0
   11c68:	f04f 0003 	mov.w	r0, #3
   11c6c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   11c6e:	7828      	ldrb	r0, [r5, #0]
   11c70:	2306      	movs	r3, #6
   11c72:	4642      	mov	r2, r8
   11c74:	4621      	mov	r1, r4
   11c76:	f009 fb24 	bl	1b2c2 <handle_event>
   11c7a:	e7b8      	b.n	11bee <hci_rx_thread+0x66>
   11c7c:	200003a4 	.word	0x200003a4
   11c80:	0001f662 	.word	0x0001f662
   11c84:	0001f696 	.word	0x0001f696
   11c88:	0001f6af 	.word	0x0001f6af
   11c8c:	0001f6cc 	.word	0x0001f6cc
   11c90:	0001ee80 	.word	0x0001ee80

00011c94 <hci_num_completed_packets>:
{
   11c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   11c98:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   11c9a:	6887      	ldr	r7, [r0, #8]
	return k_work_submit_to_queue(&k_sys_work_q, work);
   11c9c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 11d58 <hci_num_completed_packets+0xc4>
			tx->pending_no_cb = 0U;
   11ca0:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   11ca2:	783b      	ldrb	r3, [r7, #0]
   11ca4:	429d      	cmp	r5, r3
   11ca6:	db01      	blt.n	11cac <hci_num_completed_packets+0x18>
}
   11ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   11cac:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   11cb0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   11cb4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   11cb8:	f001 fbec 	bl	13494 <bt_conn_lookup_handle>
		if (!conn) {
   11cbc:	4604      	mov	r4, r0
   11cbe:	b350      	cbz	r0, 11d16 <hci_num_completed_packets+0x82>
			k_work_submit(&conn->tx_complete_work);
   11cc0:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   11cc4:	b326      	cbz	r6, 11d10 <hci_num_completed_packets+0x7c>
	__asm__ volatile(
   11cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   11cca:	f3ef 8211 	mrs	r2, BASEPRI
   11cce:	f383 8811 	msr	BASEPRI, r3
   11cd2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   11cd6:	69e3      	ldr	r3, [r4, #28]
   11cd8:	b16b      	cbz	r3, 11cf6 <hci_num_completed_packets+0x62>
				conn->pending_no_cb--;
   11cda:	3b01      	subs	r3, #1
   11cdc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11cde:	f382 8811 	msr	BASEPRI, r2
   11ce2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   11ce6:	4620      	mov	r0, r4
   11ce8:	f001 fa72 	bl	131d0 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   11cec:	3e01      	subs	r6, #1
   11cee:	f006 fdad 	bl	1884c <z_impl_k_sem_give>
   11cf2:	b2b6      	uxth	r6, r6
   11cf4:	e7e6      	b.n	11cc4 <hci_num_completed_packets+0x30>
Z_GENLIST_IS_EMPTY(slist)
   11cf6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   11cf8:	b12b      	cbz	r3, 11d06 <hci_num_completed_packets+0x72>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11cfa:	69a1      	ldr	r1, [r4, #24]
   11cfc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   11cfe:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11d00:	428b      	cmp	r3, r1
	list->tail = node;
   11d02:	bf08      	it	eq
   11d04:	61a0      	streq	r0, [r4, #24]
   11d06:	f382 8811 	msr	BASEPRI, r2
   11d0a:	f3bf 8f6f 	isb	sy
			if (!node) {
   11d0e:	b923      	cbnz	r3, 11d1a <hci_num_completed_packets+0x86>
		bt_conn_unref(conn);
   11d10:	4620      	mov	r0, r4
   11d12:	f009 ff89 	bl	1bc28 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   11d16:	3501      	adds	r5, #1
   11d18:	e7c3      	b.n	11ca2 <hci_num_completed_packets+0xe>
	__asm__ volatile(
   11d1a:	f04f 0240 	mov.w	r2, #64	; 0x40
   11d1e:	f3ef 8111 	mrs	r1, BASEPRI
   11d22:	f382 8811 	msr	BASEPRI, r2
   11d26:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   11d2a:	68da      	ldr	r2, [r3, #12]
   11d2c:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   11d2e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   11d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   11d34:	f8c3 800c 	str.w	r8, [r3, #12]
   11d38:	b952      	cbnz	r2, 11d50 <hci_num_completed_packets+0xbc>
	list->head = node;
   11d3a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   11d3e:	f381 8811 	msr	BASEPRI, r1
   11d42:	f3bf 8f6f 	isb	sy
   11d46:	4651      	mov	r1, sl
   11d48:	4648      	mov	r0, r9
   11d4a:	f00c fb21 	bl	1e390 <k_work_submit_to_queue>
   11d4e:	e7ca      	b.n	11ce6 <hci_num_completed_packets+0x52>
	parent->next = child;
   11d50:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11d52:	6263      	str	r3, [r4, #36]	; 0x24
}
   11d54:	e7f3      	b.n	11d3e <hci_num_completed_packets+0xaa>
   11d56:	bf00      	nop
   11d58:	20001d58 	.word	0x20001d58

00011d5c <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   11d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d5e:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11d60:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   11d62:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11d64:	f004 fa34 	bl	161d0 <net_buf_pool_get>
   11d68:	4b19      	ldr	r3, [pc, #100]	; (11dd0 <hci_cmd_done.isra.0+0x74>)
   11d6a:	4283      	cmp	r3, r0
   11d6c:	d12e      	bne.n	11dcc <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
   11d6e:	4620      	mov	r0, r4
   11d70:	f004 fa36 	bl	161e0 <net_buf_id>
	if (cmd(buf)->state && !status) {
   11d74:	4620      	mov	r0, r4
   11d76:	f004 fa33 	bl	161e0 <net_buf_id>
   11d7a:	4d16      	ldr	r5, [pc, #88]	; (11dd4 <hci_cmd_done.isra.0+0x78>)
   11d7c:	270c      	movs	r7, #12
   11d7e:	fb07 5300 	mla	r3, r7, r0, r5
   11d82:	685b      	ldr	r3, [r3, #4]
   11d84:	b15b      	cbz	r3, 11d9e <hci_cmd_done.isra.0+0x42>
   11d86:	b956      	cbnz	r6, 11d9e <hci_cmd_done.isra.0+0x42>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11d88:	4620      	mov	r0, r4
   11d8a:	f004 fa29 	bl	161e0 <net_buf_id>
   11d8e:	fb07 5000 	mla	r0, r7, r0, r5
   11d92:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   11d94:	e9d3 0100 	ldrd	r0, r1, [r3]
   11d98:	7a1a      	ldrb	r2, [r3, #8]
   11d9a:	f009 faf8 	bl	1b38e <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   11d9e:	4620      	mov	r0, r4
   11da0:	f004 fa1e 	bl	161e0 <net_buf_id>
   11da4:	270c      	movs	r7, #12
   11da6:	fb07 5000 	mla	r0, r7, r0, r5
   11daa:	6883      	ldr	r3, [r0, #8]
   11dac:	b173      	cbz	r3, 11dcc <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
   11dae:	4620      	mov	r0, r4
   11db0:	f004 fa16 	bl	161e0 <net_buf_id>
   11db4:	4378      	muls	r0, r7
   11db6:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   11db8:	4620      	mov	r0, r4
   11dba:	f004 fa11 	bl	161e0 <net_buf_id>
   11dbe:	fb07 5500 	mla	r5, r7, r0, r5
   11dc2:	68a8      	ldr	r0, [r5, #8]
}
   11dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11dc8:	f006 bd40 	b.w	1884c <z_impl_k_sem_give>
   11dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dce:	bf00      	nop
   11dd0:	200008f0 	.word	0x200008f0
   11dd4:	20001ec4 	.word	0x20001ec4

00011dd8 <hci_cmd_complete>:
{
   11dd8:	b538      	push	{r3, r4, r5, lr}
   11dda:	2103      	movs	r1, #3
   11ddc:	4604      	mov	r4, r0
   11dde:	3008      	adds	r0, #8
   11de0:	f00b feb5 	bl	1db4e <net_buf_simple_pull_mem>
	status = buf->data[0];
   11de4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   11de6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   11de8:	7818      	ldrb	r0, [r3, #0]
   11dea:	4621      	mov	r1, r4
   11dec:	f7ff ffb6 	bl	11d5c <hci_cmd_done.isra.0>
	if (ncmd) {
   11df0:	b125      	cbz	r5, 11dfc <hci_cmd_complete+0x24>
   11df2:	4803      	ldr	r0, [pc, #12]	; (11e00 <hci_cmd_complete+0x28>)
}
   11df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11df8:	f006 bd28 	b.w	1884c <z_impl_k_sem_give>
   11dfc:	bd38      	pop	{r3, r4, r5, pc}
   11dfe:	bf00      	nop
   11e00:	20000388 	.word	0x20000388

00011e04 <hci_tx_thread>:
{
   11e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   11e08:	f8df 8104 	ldr.w	r8, [pc, #260]	; 11f10 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   11e0c:	f8df a114 	ldr.w	sl, [pc, #276]	; 11f24 <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
   11e10:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   11e14:	483d      	ldr	r0, [pc, #244]	; (11f0c <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
   11e16:	f36f 3310 	bfc	r3, #12, #5
   11e1a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   11e1e:	f001 fad1 	bl	133c4 <bt_conn_prepare_events>
   11e22:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   11e24:	483a      	ldr	r0, [pc, #232]	; (11f10 <hci_tx_thread+0x10c>)
   11e26:	f04f 32ff 	mov.w	r2, #4294967295
   11e2a:	f04f 33ff 	mov.w	r3, #4294967295
   11e2e:	4629      	mov	r1, r5
   11e30:	f007 f9c0 	bl	191b4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   11e34:	b160      	cbz	r0, 11e50 <hci_tx_thread+0x4c>
   11e36:	4937      	ldr	r1, [pc, #220]	; (11f14 <hci_tx_thread+0x110>)
   11e38:	4837      	ldr	r0, [pc, #220]	; (11f18 <hci_tx_thread+0x114>)
   11e3a:	f241 4375 	movw	r3, #5237	; 0x1475
   11e3e:	4652      	mov	r2, sl
   11e40:	f007 fb45 	bl	194ce <printk>
   11e44:	4040      	eors	r0, r0
   11e46:	f380 8811 	msr	BASEPRI, r0
   11e4a:	f04f 0003 	mov.w	r0, #3
   11e4e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   11e50:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 11f28 <hci_tx_thread+0x124>
{
   11e54:	4e2e      	ldr	r6, [pc, #184]	; (11f10 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
   11e56:	f5a9 7792 	sub.w	r7, r9, #292	; 0x124
   11e5a:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   11e5e:	b915      	cbnz	r5, 11e66 <hci_tx_thread+0x62>
	z_impl_k_yield();
   11e60:	f006 fc06 	bl	18670 <z_impl_k_yield>
	while (1) {
   11e64:	e7d4      	b.n	11e10 <hci_tx_thread+0xc>
		switch (ev->state) {
   11e66:	68f3      	ldr	r3, [r6, #12]
   11e68:	f3c3 3304 	ubfx	r3, r3, #12, #5
   11e6c:	2b04      	cmp	r3, #4
   11e6e:	d142      	bne.n	11ef6 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   11e70:	7b33      	ldrb	r3, [r6, #12]
   11e72:	2b00      	cmp	r3, #0
   11e74:	d142      	bne.n	11efc <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   11e76:	2200      	movs	r2, #0
   11e78:	2300      	movs	r3, #0
   11e7a:	4648      	mov	r0, r9
   11e7c:	f00b fdef 	bl	1da5e <net_buf_get>
	BT_ASSERT(buf);
   11e80:	4604      	mov	r4, r0
   11e82:	b960      	cbnz	r0, 11e9e <hci_tx_thread+0x9a>
   11e84:	4925      	ldr	r1, [pc, #148]	; (11f1c <hci_tx_thread+0x118>)
   11e86:	4824      	ldr	r0, [pc, #144]	; (11f18 <hci_tx_thread+0x114>)
   11e88:	f241 4312 	movw	r3, #5138	; 0x1412
   11e8c:	4652      	mov	r2, sl
   11e8e:	f007 fb1e 	bl	194ce <printk>
   11e92:	4040      	eors	r0, r0
   11e94:	f380 8811 	msr	BASEPRI, r0
   11e98:	f04f 0003 	mov.w	r0, #3
   11e9c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   11e9e:	f04f 32ff 	mov.w	r2, #4294967295
   11ea2:	f04f 33ff 	mov.w	r3, #4294967295
   11ea6:	4658      	mov	r0, fp
   11ea8:	f006 fcf6 	bl	18898 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   11eac:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   11eb0:	b120      	cbz	r0, 11ebc <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   11eb2:	f004 fa49 	bl	16348 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11eb6:	2300      	movs	r3, #0
   11eb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   11ebc:	4620      	mov	r0, r4
   11ebe:	f00b fdf9 	bl	1dab4 <net_buf_ref>
   11ec2:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   11ec6:	4620      	mov	r0, r4
   11ec8:	f7ff fc12 	bl	116f0 <bt_hci_ecc_send>
	if (err) {
   11ecc:	b198      	cbz	r0, 11ef6 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   11ece:	4814      	ldr	r0, [pc, #80]	; (11f20 <hci_tx_thread+0x11c>)
   11ed0:	f006 fcbc 	bl	1884c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   11ed4:	4620      	mov	r0, r4
   11ed6:	f004 f983 	bl	161e0 <net_buf_id>
   11eda:	4621      	mov	r1, r4
   11edc:	201f      	movs	r0, #31
   11ede:	f7ff ff3d 	bl	11d5c <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
   11ee2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   11ee6:	f004 fa2f 	bl	16348 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11eea:	2300      	movs	r3, #0
		net_buf_unref(buf);
   11eec:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   11eee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		net_buf_unref(buf);
   11ef2:	f004 fa29 	bl	16348 <net_buf_unref>
	for (; count; ev++, count--) {
   11ef6:	3614      	adds	r6, #20
   11ef8:	3d01      	subs	r5, #1
   11efa:	e7b0      	b.n	11e5e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   11efc:	2b01      	cmp	r3, #1
   11efe:	d1fa      	bne.n	11ef6 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   11f00:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   11f02:	3838      	subs	r0, #56	; 0x38
   11f04:	f001 fc92 	bl	1382c <bt_conn_process_tx>
   11f08:	e7f5      	b.n	11ef6 <hci_tx_thread+0xf2>
   11f0a:	bf00      	nop
   11f0c:	2000056c 	.word	0x2000056c
   11f10:	20000558 	.word	0x20000558
   11f14:	0001f6fa 	.word	0x0001f6fa
   11f18:	0001f6af 	.word	0x0001f6af
   11f1c:	0001f703 	.word	0x0001f703
   11f20:	20000388 	.word	0x20000388
   11f24:	0001f662 	.word	0x0001f662
   11f28:	200003bc 	.word	0x200003bc

00011f2c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   11f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11f2e:	4b28      	ldr	r3, [pc, #160]	; (11fd0 <le_adv_start_add_conn+0xa4>)
   11f30:	b085      	sub	sp, #20
   11f32:	4605      	mov	r5, r0
   11f34:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   11f36:	7801      	ldrb	r1, [r0, #0]
   11f38:	f103 0028 	add.w	r0, r3, #40	; 0x28
   11f3c:	f009 f9fd 	bl	1b33a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   11f40:	f010 0f40 	tst.w	r0, #64	; 0x40
   11f44:	461a      	mov	r2, r3
   11f46:	d008      	beq.n	11f5a <le_adv_start_add_conn+0x2e>
   11f48:	f103 0028 	add.w	r0, r3, #40	; 0x28
   11f4c:	f009 f9f5 	bl	1b33a <atomic_get>
   11f50:	05c0      	lsls	r0, r0, #23
   11f52:	d502      	bpl.n	11f5a <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   11f54:	7e1b      	ldrb	r3, [r3, #24]
   11f56:	428b      	cmp	r3, r1
   11f58:	d131      	bne.n	11fbe <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   11f5a:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   11f5c:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   11f5e:	f816 3b09 	ldrb.w	r3, [r6], #9
   11f62:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   11f66:	4630      	mov	r0, r6
   11f68:	2300      	movs	r3, #0
   11f6a:	9300      	str	r3, [sp, #0]
   11f6c:	f8cd 3003 	str.w	r3, [sp, #3]
   11f70:	f009 f9ec 	bl	1b34c <bt_addr_le_cmp>
   11f74:	4604      	mov	r4, r0
   11f76:	7828      	ldrb	r0, [r5, #0]
   11f78:	b164      	cbz	r4, 11f94 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   11f7a:	4631      	mov	r1, r6
   11f7c:	f009 fe8d 	bl	1bc9a <bt_conn_exists_le>
   11f80:	4604      	mov	r4, r0
   11f82:	b9f8      	cbnz	r0, 11fc4 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   11f84:	7828      	ldrb	r0, [r5, #0]
   11f86:	4631      	mov	r1, r6
   11f88:	f001 fa5a 	bl	13440 <bt_conn_add_le>
	if (!conn) {
   11f8c:	4605      	mov	r5, r0
   11f8e:	b1e0      	cbz	r0, 11fca <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   11f90:	2105      	movs	r1, #5
   11f92:	e00e      	b.n	11fb2 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   11f94:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   11f98:	9302      	str	r3, [sp, #8]
   11f9a:	a902      	add	r1, sp, #8
   11f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11fa0:	f8ad 300c 	strh.w	r3, [sp, #12]
   11fa4:	f88d 300e 	strb.w	r3, [sp, #14]
   11fa8:	f001 fa4a 	bl	13440 <bt_conn_add_le>
		if (!conn) {
   11fac:	4605      	mov	r5, r0
   11fae:	b160      	cbz	r0, 11fca <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   11fb0:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   11fb2:	f001 fa7b 	bl	134ac <bt_conn_set_state>
	*out_conn = conn;
   11fb6:	603d      	str	r5, [r7, #0]
	return 0;
}
   11fb8:	4620      	mov	r0, r4
   11fba:	b005      	add	sp, #20
   11fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   11fbe:	f06f 0422 	mvn.w	r4, #34	; 0x22
   11fc2:	e7f9      	b.n	11fb8 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   11fc4:	f06f 0415 	mvn.w	r4, #21
   11fc8:	e7f6      	b.n	11fb8 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   11fca:	f06f 040b 	mvn.w	r4, #11
   11fce:	e7f3      	b.n	11fb8 <le_adv_start_add_conn+0x8c>
   11fd0:	20000298 	.word	0x20000298

00011fd4 <hci_cmd_status>:
{
   11fd4:	b538      	push	{r3, r4, r5, lr}
   11fd6:	2104      	movs	r1, #4
   11fd8:	4604      	mov	r4, r0
   11fda:	3008      	adds	r0, #8
   11fdc:	f00b fdb7 	bl	1db4e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   11fe0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   11fe2:	7800      	ldrb	r0, [r0, #0]
   11fe4:	4621      	mov	r1, r4
   11fe6:	f7ff feb9 	bl	11d5c <hci_cmd_done.isra.0>
	if (ncmd) {
   11fea:	b125      	cbz	r5, 11ff6 <hci_cmd_status+0x22>
   11fec:	4802      	ldr	r0, [pc, #8]	; (11ff8 <hci_cmd_status+0x24>)
}
   11fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11ff2:	f006 bc2b 	b.w	1884c <z_impl_k_sem_give>
   11ff6:	bd38      	pop	{r3, r4, r5, pc}
   11ff8:	20000388 	.word	0x20000388

00011ffc <bt_hci_cmd_create>:
{
   11ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12000:	f04f 32ff 	mov.w	r2, #4294967295
   12004:	f04f 33ff 	mov.w	r3, #4294967295
   12008:	4605      	mov	r5, r0
   1200a:	4816      	ldr	r0, [pc, #88]	; (12064 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   1200c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12068 <bt_hci_cmd_create+0x6c>
{
   12010:	460e      	mov	r6, r1
   12012:	f00b fd1f 	bl	1da54 <net_buf_alloc_fixed>
   12016:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   12018:	f100 0b08 	add.w	fp, r0, #8
   1201c:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1201e:	2700      	movs	r7, #0
   12020:	4658      	mov	r0, fp
   12022:	f00b fd36 	bl	1da92 <net_buf_simple_reserve>
   12026:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   12028:	4620      	mov	r0, r4
   1202a:	f004 f8d9 	bl	161e0 <net_buf_id>
   1202e:	f04f 0a0c 	mov.w	sl, #12
   12032:	fb0a 8000 	mla	r0, sl, r0, r8
   12036:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   12038:	4620      	mov	r0, r4
   1203a:	f004 f8d1 	bl	161e0 <net_buf_id>
   1203e:	fb0a 8000 	mla	r0, sl, r0, r8
   12042:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   12044:	4620      	mov	r0, r4
   12046:	f004 f8cb 	bl	161e0 <net_buf_id>
   1204a:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   1204e:	2103      	movs	r1, #3
   12050:	6047      	str	r7, [r0, #4]
   12052:	4658      	mov	r0, fp
   12054:	f00b fd54 	bl	1db00 <net_buf_simple_add>
	hdr->param_len = param_len;
   12058:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1205a:	8005      	strh	r5, [r0, #0]
}
   1205c:	4620      	mov	r0, r4
   1205e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12062:	bf00      	nop
   12064:	200008f0 	.word	0x200008f0
   12068:	20001ec4 	.word	0x20001ec4

0001206c <bt_hci_cmd_send>:
{
   1206c:	b538      	push	{r3, r4, r5, lr}
   1206e:	4605      	mov	r5, r0
	if (!buf) {
   12070:	460c      	mov	r4, r1
   12072:	b919      	cbnz	r1, 1207c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   12074:	f7ff ffc2 	bl	11ffc <bt_hci_cmd_create>
		if (!buf) {
   12078:	4604      	mov	r4, r0
   1207a:	b198      	cbz	r0, 120a4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1207c:	f640 4335 	movw	r3, #3125	; 0xc35
   12080:	429d      	cmp	r5, r3
   12082:	d109      	bne.n	12098 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   12084:	4620      	mov	r0, r4
   12086:	f7ff fb33 	bl	116f0 <bt_hci_ecc_send>
		if (err) {
   1208a:	4605      	mov	r5, r0
   1208c:	b110      	cbz	r0, 12094 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   1208e:	4620      	mov	r0, r4
   12090:	f004 f95a 	bl	16348 <net_buf_unref>
}
   12094:	4628      	mov	r0, r5
   12096:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12098:	4804      	ldr	r0, [pc, #16]	; (120ac <bt_hci_cmd_send+0x40>)
   1209a:	4621      	mov	r1, r4
   1209c:	f00b fcfd 	bl	1da9a <net_buf_put>
	return 0;
   120a0:	2500      	movs	r5, #0
   120a2:	e7f7      	b.n	12094 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   120a4:	f06f 0536 	mvn.w	r5, #54	; 0x36
   120a8:	e7f4      	b.n	12094 <bt_hci_cmd_send+0x28>
   120aa:	bf00      	nop
   120ac:	200003bc 	.word	0x200003bc

000120b0 <bt_hci_cmd_send_sync>:
{
   120b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   120b2:	4615      	mov	r5, r2
   120b4:	b087      	sub	sp, #28
	if (!buf) {
   120b6:	460c      	mov	r4, r1
   120b8:	b921      	cbnz	r1, 120c4 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   120ba:	f7ff ff9f 	bl	11ffc <bt_hci_cmd_create>
		if (!buf) {
   120be:	4604      	mov	r4, r0
   120c0:	2800      	cmp	r0, #0
   120c2:	d048      	beq.n	12156 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   120c4:	2201      	movs	r2, #1
   120c6:	2100      	movs	r1, #0
   120c8:	4668      	mov	r0, sp
   120ca:	f00c f8d2 	bl	1e272 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   120ce:	4620      	mov	r0, r4
   120d0:	f004 f886 	bl	161e0 <net_buf_id>
   120d4:	4e21      	ldr	r6, [pc, #132]	; (1215c <bt_hci_cmd_send_sync+0xac>)
   120d6:	230c      	movs	r3, #12
   120d8:	fb03 6000 	mla	r0, r3, r0, r6
   120dc:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   120e0:	4620      	mov	r0, r4
   120e2:	f00b fce7 	bl	1dab4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   120e6:	481e      	ldr	r0, [pc, #120]	; (12160 <bt_hci_cmd_send_sync+0xb0>)
   120e8:	4621      	mov	r1, r4
   120ea:	f00b fcd6 	bl	1da9a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   120ee:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   120f2:	2300      	movs	r3, #0
   120f4:	4668      	mov	r0, sp
   120f6:	f006 fbcf 	bl	18898 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   120fa:	4607      	mov	r7, r0
   120fc:	b180      	cbz	r0, 12120 <bt_hci_cmd_send_sync+0x70>
   120fe:	4a19      	ldr	r2, [pc, #100]	; (12164 <bt_hci_cmd_send_sync+0xb4>)
   12100:	4919      	ldr	r1, [pc, #100]	; (12168 <bt_hci_cmd_send_sync+0xb8>)
   12102:	481a      	ldr	r0, [pc, #104]	; (1216c <bt_hci_cmd_send_sync+0xbc>)
   12104:	f240 1347 	movw	r3, #327	; 0x147
   12108:	f007 f9e1 	bl	194ce <printk>
   1210c:	4818      	ldr	r0, [pc, #96]	; (12170 <bt_hci_cmd_send_sync+0xc0>)
   1210e:	4639      	mov	r1, r7
   12110:	f007 f9dd 	bl	194ce <printk>
   12114:	4040      	eors	r0, r0
   12116:	f380 8811 	msr	BASEPRI, r0
   1211a:	f04f 0003 	mov.w	r0, #3
   1211e:	df02      	svc	2
	status = cmd(buf)->status;
   12120:	4620      	mov	r0, r4
   12122:	f004 f85d 	bl	161e0 <net_buf_id>
   12126:	230c      	movs	r3, #12
   12128:	4343      	muls	r3, r0
   1212a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   1212c:	b156      	cbz	r6, 12144 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   1212e:	4620      	mov	r0, r4
   12130:	f004 f90a 	bl	16348 <net_buf_unref>
			return -EIO;
   12134:	2e09      	cmp	r6, #9
   12136:	bf0c      	ite	eq
   12138:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   1213c:	f06f 0004 	mvnne.w	r0, #4
}
   12140:	b007      	add	sp, #28
   12142:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   12144:	b115      	cbz	r5, 1214c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   12146:	602c      	str	r4, [r5, #0]
	return 0;
   12148:	4630      	mov	r0, r6
   1214a:	e7f9      	b.n	12140 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   1214c:	4620      	mov	r0, r4
   1214e:	f004 f8fb 	bl	16348 <net_buf_unref>
	return 0;
   12152:	4628      	mov	r0, r5
   12154:	e7f4      	b.n	12140 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   12156:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1215a:	e7f1      	b.n	12140 <bt_hci_cmd_send_sync+0x90>
   1215c:	20001ec4 	.word	0x20001ec4
   12160:	200003bc 	.word	0x200003bc
   12164:	0001f662 	.word	0x0001f662
   12168:	0001f6fa 	.word	0x0001f6fa
   1216c:	0001f6af 	.word	0x0001f6af
   12170:	0001f707 	.word	0x0001f707

00012174 <set_random_address>:
{
   12174:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
   12176:	4e15      	ldr	r6, [pc, #84]	; (121cc <set_random_address+0x58>)
   12178:	2206      	movs	r2, #6
   1217a:	f106 012d 	add.w	r1, r6, #45	; 0x2d
   1217e:	4605      	mov	r5, r0
   12180:	f008 ff3a 	bl	1aff8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12184:	4604      	mov	r4, r0
   12186:	b1e0      	cbz	r0, 121c2 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   12188:	2106      	movs	r1, #6
   1218a:	f242 0005 	movw	r0, #8197	; 0x2005
   1218e:	f7ff ff35 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   12192:	4604      	mov	r4, r0
   12194:	b1b8      	cbz	r0, 121c6 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12196:	2206      	movs	r2, #6
   12198:	4629      	mov	r1, r5
   1219a:	3008      	adds	r0, #8
   1219c:	f00b fcb6 	bl	1db0c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   121a0:	4621      	mov	r1, r4
   121a2:	2200      	movs	r2, #0
   121a4:	f242 0005 	movw	r0, #8197	; 0x2005
   121a8:	f7ff ff82 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   121ac:	4604      	mov	r4, r0
   121ae:	b940      	cbnz	r0, 121c2 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
   121b0:	2206      	movs	r2, #6
   121b2:	4629      	mov	r1, r5
   121b4:	f106 002d 	add.w	r0, r6, #45	; 0x2d
   121b8:	f008 ff2e 	bl	1b018 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   121bc:	2301      	movs	r3, #1
   121be:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
   121c2:	4620      	mov	r0, r4
   121c4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   121c6:	f06f 0436 	mvn.w	r4, #54	; 0x36
   121ca:	e7fa      	b.n	121c2 <set_random_address+0x4e>
   121cc:	20000298 	.word	0x20000298

000121d0 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   121d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   121d4:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   121d6:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   121da:	460e      	mov	r6, r1
   121dc:	4690      	mov	r8, r2
   121de:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   121e0:	d027      	beq.n	12232 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   121e2:	4f27      	ldr	r7, [pc, #156]	; (12280 <le_adv_set_random_addr.isra.0+0xb0>)
   121e4:	b12a      	cbz	r2, 121f2 <le_adv_set_random_addr.isra.0+0x22>
   121e6:	0688      	lsls	r0, r1, #26
   121e8:	d503      	bpl.n	121f2 <le_adv_set_random_addr.isra.0+0x22>
   121ea:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   121ee:	0659      	lsls	r1, r3, #25
   121f0:	d542      	bpl.n	12278 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   121f2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   121f6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   121fa:	5cfb      	ldrb	r3, [r7, r3]
   121fc:	2b01      	cmp	r3, #1
   121fe:	d008      	beq.n	12212 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   12200:	eba9 0404 	sub.w	r4, r9, r4
   12204:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   12206:	f1b8 0f00 	cmp.w	r8, #0
   1220a:	d10d      	bne.n	12228 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1220c:	702b      	strb	r3, [r5, #0]
	return 0;
   1220e:	2000      	movs	r0, #0
   12210:	e007      	b.n	12222 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   12212:	2007      	movs	r0, #7
   12214:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   12218:	4438      	add	r0, r7
   1221a:	f7ff ffab 	bl	12174 <set_random_address>
				if (err) {
   1221e:	2800      	cmp	r0, #0
   12220:	d0ee      	beq.n	12200 <le_adv_set_random_addr.isra.0+0x30>
}
   12222:	b003      	add	sp, #12
   12224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   12228:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1222a:	bf48      	it	mi
   1222c:	f043 0302 	orrmi.w	r3, r3, #2
   12230:	e7ec      	b.n	1220c <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   12232:	074b      	lsls	r3, r1, #29
   12234:	d510      	bpl.n	12258 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   12236:	4e12      	ldr	r6, [pc, #72]	; (12280 <le_adv_set_random_addr.isra.0+0xb0>)
   12238:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1223c:	00e7      	lsls	r7, r4, #3
   1223e:	5cf3      	ldrb	r3, [r6, r3]
   12240:	2b01      	cmp	r3, #1
   12242:	d105      	bne.n	12250 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   12244:	2007      	movs	r0, #7
   12246:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   1224a:	4430      	add	r0, r6
   1224c:	f7ff ff92 	bl	12174 <set_random_address>
			*own_addr_type = id_addr->type;
   12250:	1b3c      	subs	r4, r7, r4
   12252:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   12254:	702b      	strb	r3, [r5, #0]
		if (err) {
   12256:	e7e4      	b.n	12222 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   12258:	2106      	movs	r1, #6
   1225a:	4668      	mov	r0, sp
   1225c:	f005 fb8e 	bl	1797c <bt_rand>
	if (err) {
   12260:	b940      	cbnz	r0, 12274 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
   12262:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   12266:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   12268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1226c:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   12270:	f7ff ff80 	bl	12174 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   12274:	2301      	movs	r3, #1
   12276:	e7ed      	b.n	12254 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   12278:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1227c:	e7d1      	b.n	12222 <le_adv_set_random_addr.isra.0+0x52>
   1227e:	bf00      	nop
   12280:	20000298 	.word	0x20000298

00012284 <set_le_adv_enable_legacy>:
{
   12284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12286:	4606      	mov	r6, r0
   12288:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1228a:	f242 000a 	movw	r0, #8202	; 0x200a
   1228e:	2101      	movs	r1, #1
   12290:	f7ff feb4 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   12294:	4604      	mov	r4, r0
   12296:	b1e8      	cbz	r0, 122d4 <set_le_adv_enable_legacy+0x50>
	if (enable) {
   12298:	3008      	adds	r0, #8
   1229a:	b1cd      	cbz	r5, 122d0 <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
   1229c:	2101      	movs	r1, #1
   1229e:	f00b fc3e 	bl	1db1e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   122a2:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
   122a4:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   122a6:	4620      	mov	r0, r4
   122a8:	9302      	str	r3, [sp, #8]
	state->target = target;
   122aa:	9601      	str	r6, [sp, #4]
	state->val = val;
   122ac:	f88d 500c 	strb.w	r5, [sp, #12]
   122b0:	f003 ff96 	bl	161e0 <net_buf_id>
   122b4:	4b09      	ldr	r3, [pc, #36]	; (122dc <set_le_adv_enable_legacy+0x58>)
   122b6:	220c      	movs	r2, #12
   122b8:	fb02 3000 	mla	r0, r2, r0, r3
   122bc:	ab01      	add	r3, sp, #4
   122be:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   122c0:	2200      	movs	r2, #0
   122c2:	4621      	mov	r1, r4
   122c4:	f242 000a 	movw	r0, #8202	; 0x200a
   122c8:	f7ff fef2 	bl	120b0 <bt_hci_cmd_send_sync>
}
   122cc:	b004      	add	sp, #16
   122ce:	bd70      	pop	{r4, r5, r6, pc}
   122d0:	4629      	mov	r1, r5
   122d2:	e7e4      	b.n	1229e <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   122d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   122d8:	e7f8      	b.n	122cc <set_le_adv_enable_legacy+0x48>
   122da:	bf00      	nop
   122dc:	20001ec4 	.word	0x20001ec4

000122e0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e4:	b087      	sub	sp, #28
   122e6:	4606      	mov	r6, r0
   122e8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   122ec:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   122f0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   122f4:	460c      	mov	r4, r1
   122f6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   122f8:	2100      	movs	r1, #0
   122fa:	2210      	movs	r2, #16
   122fc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   122fe:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   12300:	f008 feb5 	bl	1b06e <memset>
	if (use_name) {
   12304:	f1b8 0f00 	cmp.w	r8, #0
   12308:	d00e      	beq.n	12328 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   1230a:	bbb4      	cbnz	r4, 1237a <le_adv_update.constprop.0+0x9a>
   1230c:	2d00      	cmp	r5, #0
   1230e:	d13f      	bne.n	12390 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   12310:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 123c4 <le_adv_update.constprop.0+0xe4>
   12314:	4658      	mov	r0, fp
   12316:	f008 fe53 	bl	1afc0 <strlen>
   1231a:	2309      	movs	r3, #9
   1231c:	f88d 3000 	strb.w	r3, [sp]
   12320:	f88d 0001 	strb.w	r0, [sp, #1]
   12324:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   12328:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   1232c:	f1b8 0f00 	cmp.w	r8, #0
   12330:	d030      	beq.n	12394 <le_adv_update.constprop.0+0xb4>
   12332:	f1ba 0f00 	cmp.w	sl, #0
   12336:	d12d      	bne.n	12394 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   12338:	2301      	movs	r3, #1
			d[1].data = &data;
   1233a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1233e:	9305      	str	r3, [sp, #20]
			d_len = 2;
   12340:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   12342:	a902      	add	r1, sp, #8
   12344:	f242 0008 	movw	r0, #8200	; 0x2008
   12348:	f009 f9ea 	bl	1b720 <hci_set_ad>
		if (err) {
   1234c:	4604      	mov	r4, r0
   1234e:	b938      	cbnz	r0, 12360 <le_adv_update.constprop.0+0x80>
	if (scannable) {
   12350:	f1ba 0f00 	cmp.w	sl, #0
   12354:	d120      	bne.n	12398 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12356:	2104      	movs	r1, #4
   12358:	f106 0010 	add.w	r0, r6, #16
   1235c:	f009 f808 	bl	1b370 <atomic_or>
}
   12360:	4620      	mov	r0, r4
   12362:	b007      	add	sp, #28
   12364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   12368:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1236c:	3a08      	subs	r2, #8
   1236e:	2a01      	cmp	r2, #1
   12370:	d925      	bls.n	123be <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   12372:	3301      	adds	r3, #1
   12374:	429f      	cmp	r7, r3
   12376:	d1f7      	bne.n	12368 <le_adv_update.constprop.0+0x88>
   12378:	e7c8      	b.n	1230c <le_adv_update.constprop.0+0x2c>
   1237a:	2300      	movs	r3, #0
   1237c:	e7fa      	b.n	12374 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1237e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   12382:	3a08      	subs	r2, #8
   12384:	2a01      	cmp	r2, #1
   12386:	d91a      	bls.n	123be <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   12388:	3301      	adds	r3, #1
   1238a:	4599      	cmp	r9, r3
   1238c:	d1f7      	bne.n	1237e <le_adv_update.constprop.0+0x9e>
   1238e:	e7bf      	b.n	12310 <le_adv_update.constprop.0+0x30>
   12390:	2300      	movs	r3, #0
   12392:	e7fa      	b.n	1238a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   12394:	2201      	movs	r2, #1
   12396:	e7d4      	b.n	12342 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   12398:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   1239c:	2201      	movs	r2, #1
   1239e:	f1b8 0f00 	cmp.w	r8, #0
   123a2:	d003      	beq.n	123ac <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   123a4:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   123a6:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   123aa:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   123ac:	a902      	add	r1, sp, #8
   123ae:	f242 0009 	movw	r0, #8201	; 0x2009
   123b2:	f009 f9b5 	bl	1b720 <hci_set_ad>
		if (err) {
   123b6:	2800      	cmp	r0, #0
   123b8:	d0cd      	beq.n	12356 <le_adv_update.constprop.0+0x76>
   123ba:	4604      	mov	r4, r0
   123bc:	e7d0      	b.n	12360 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   123be:	f06f 0415 	mvn.w	r4, #21
   123c2:	e7cd      	b.n	12360 <le_adv_update.constprop.0+0x80>
   123c4:	0001f727 	.word	0x0001f727

000123c8 <conn_auto_initiate>:
{
   123c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   123ca:	7b43      	ldrb	r3, [r0, #13]
   123cc:	2b07      	cmp	r3, #7
{
   123ce:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   123d0:	d11e      	bne.n	12410 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   123d2:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   123d4:	4630      	mov	r0, r6
   123d6:	f008 ffb0 	bl	1b33a <atomic_get>
   123da:	0483      	lsls	r3, r0, #18
   123dc:	d41a      	bmi.n	12414 <conn_auto_initiate+0x4c>
   123de:	78e3      	ldrb	r3, [r4, #3]
   123e0:	b123      	cbz	r3, 123ec <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   123e2:	4b25      	ldr	r3, [pc, #148]	; (12478 <conn_auto_initiate+0xb0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   123e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   123e8:	071d      	lsls	r5, r3, #28
   123ea:	d513      	bpl.n	12414 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   123ec:	2102      	movs	r1, #2
   123ee:	f242 0016 	movw	r0, #8214	; 0x2016
   123f2:	f7ff fe03 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   123f6:	4605      	mov	r5, r0
   123f8:	b160      	cbz	r0, 12414 <conn_auto_initiate+0x4c>
	return net_buf_simple_add(&buf->b, len);
   123fa:	2102      	movs	r1, #2
   123fc:	3008      	adds	r0, #8
   123fe:	f00b fb7f 	bl	1db00 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12402:	8823      	ldrh	r3, [r4, #0]
   12404:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   12406:	4629      	mov	r1, r5
   12408:	f242 0016 	movw	r0, #8214	; 0x2016
   1240c:	f7ff fe2e 	bl	1206c <bt_hci_cmd_send>
}
   12410:	b004      	add	sp, #16
   12412:	bd70      	pop	{r4, r5, r6, pc}
   12414:	4630      	mov	r0, r6
   12416:	f008 ff90 	bl	1b33a <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1241a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1241e:	4d16      	ldr	r5, [pc, #88]	; (12478 <conn_auto_initiate+0xb0>)
   12420:	f3c0 3100 	ubfx	r1, r0, #12, #1
   12424:	d10f      	bne.n	12446 <conn_auto_initiate+0x7e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   12426:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   1242a:	07d8      	lsls	r0, r3, #31
   1242c:	d50b      	bpl.n	12446 <conn_auto_initiate+0x7e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1242e:	2302      	movs	r3, #2
   12430:	9100      	str	r1, [sp, #0]
   12432:	461a      	mov	r2, r3
   12434:	4620      	mov	r0, r4
   12436:	f009 fa14 	bl	1b862 <bt_le_set_phy>
		if (!err) {
   1243a:	b920      	cbnz	r0, 12446 <conn_auto_initiate+0x7e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1243c:	2180      	movs	r1, #128	; 0x80
   1243e:	4630      	mov	r0, r6
   12440:	f008 ff96 	bl	1b370 <atomic_or>
			return;
   12444:	e7e4      	b.n	12410 <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12446:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1244a:	069a      	lsls	r2, r3, #26
   1244c:	d5e0      	bpl.n	12410 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1244e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   12452:	689b      	ldr	r3, [r3, #8]
   12454:	079b      	lsls	r3, r3, #30
   12456:	d5db      	bpl.n	12410 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12458:	f10d 010e 	add.w	r1, sp, #14
   1245c:	a803      	add	r0, sp, #12
   1245e:	f009 f8d9 	bl	1b614 <hci_le_read_max_data_len>
			if (!err) {
   12462:	2800      	cmp	r0, #0
   12464:	d1d4      	bne.n	12410 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
   12466:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1246a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1246e:	4620      	mov	r0, r4
   12470:	f009 f9da 	bl	1b828 <bt_le_set_data_len>
		}
   12474:	e7cc      	b.n	12410 <conn_auto_initiate+0x48>
   12476:	bf00      	nop
   12478:	20000298 	.word	0x20000298

0001247c <bt_security_err_get>:
	switch (hci_err) {
   1247c:	2829      	cmp	r0, #41	; 0x29
   1247e:	bf9a      	itte	ls
   12480:	4b01      	ldrls	r3, [pc, #4]	; (12488 <bt_security_err_get+0xc>)
   12482:	5c18      	ldrbls	r0, [r3, r0]
{
   12484:	2008      	movhi	r0, #8
}
   12486:	4770      	bx	lr
   12488:	0001f75b 	.word	0x0001f75b

0001248c <bt_id_add>:
{
   1248c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1248e:	4f42      	ldr	r7, [pc, #264]	; (12598 <bt_id_add+0x10c>)
   12490:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   12494:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   12498:	4604      	mov	r4, r0
   1249a:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1249c:	b10a      	cbz	r2, 124a2 <bt_id_add+0x16>
   1249e:	429a      	cmp	r2, r3
   124a0:	d208      	bcs.n	124b4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   124a2:	3301      	adds	r3, #1
   124a4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   124a8:	7a23      	ldrb	r3, [r4, #8]
   124aa:	f043 0304 	orr.w	r3, r3, #4
   124ae:	7223      	strb	r3, [r4, #8]
}
   124b0:	b003      	add	sp, #12
   124b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   124b4:	2100      	movs	r1, #0
   124b6:	2206      	movs	r2, #6
   124b8:	4608      	mov	r0, r1
   124ba:	f001 f8c7 	bl	1364c <bt_conn_lookup_state_le>
	if (conn) {
   124be:	4606      	mov	r6, r0
   124c0:	b168      	cbz	r0, 124de <bt_id_add+0x52>
   124c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   124c6:	f107 0098 	add.w	r0, r7, #152	; 0x98
   124ca:	f008 ff51 	bl	1b370 <atomic_or>
	keys->state |= flag;
   124ce:	7a23      	ldrb	r3, [r4, #8]
   124d0:	f043 0301 	orr.w	r3, r3, #1
   124d4:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   124d6:	4630      	mov	r0, r6
   124d8:	f009 fba6 	bl	1bc28 <bt_conn_unref>
		return;
   124dc:	e7e8      	b.n	124b0 <bt_id_add+0x24>
	func(&bt_dev.adv, data);
   124de:	4601      	mov	r1, r0
   124e0:	f107 0018 	add.w	r0, r7, #24
   124e4:	f009 f8ae 	bl	1b644 <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
   124e8:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   124ec:	b9b3      	cbnz	r3, 1251c <bt_id_add+0x90>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   124ee:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   124f2:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   124f6:	429a      	cmp	r2, r3
   124f8:	d11d      	bne.n	12536 <bt_id_add+0xaa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   124fa:	2200      	movs	r2, #0
   124fc:	4611      	mov	r1, r2
   124fe:	f242 0029 	movw	r0, #8233	; 0x2029
   12502:	f7ff fdd5 	bl	120b0 <bt_hci_cmd_send_sync>
		if (err) {
   12506:	b970      	cbnz	r0, 12526 <bt_id_add+0x9a>
		bt_dev.le.rl_entries++;
   12508:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1250c:	3301      	adds	r3, #1
   1250e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   12512:	7a23      	ldrb	r3, [r4, #8]
   12514:	f043 0304 	orr.w	r3, r3, #4
   12518:	7223      	strb	r3, [r4, #8]
		goto done;
   1251a:	e004      	b.n	12526 <bt_id_add+0x9a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1251c:	4630      	mov	r0, r6
   1251e:	f009 f8e7 	bl	1b6f0 <addr_res_enable>
		if (err) {
   12522:	2800      	cmp	r0, #0
   12524:	d0e3      	beq.n	124ee <bt_id_add+0x62>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12526:	2001      	movs	r0, #1
   12528:	f009 f8e2 	bl	1b6f0 <addr_res_enable>
	func(&bt_dev.adv, data);
   1252c:	481b      	ldr	r0, [pc, #108]	; (1259c <bt_id_add+0x110>)
   1252e:	2100      	movs	r1, #0
   12530:	f009 f89d 	bl	1b66e <adv_unpause_enabled>
}
   12534:	e7bc      	b.n	124b0 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   12536:	1c67      	adds	r7, r4, #1
   12538:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   1253c:	4638      	mov	r0, r7
   1253e:	f009 f8a6 	bl	1b68e <hci_id_add.isra.0>
	if (err) {
   12542:	4606      	mov	r6, r0
   12544:	2800      	cmp	r0, #0
   12546:	d1ee      	bne.n	12526 <bt_id_add+0x9a>
	bt_dev.le.rl_entries++;
   12548:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1254c:	3301      	adds	r3, #1
   1254e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   12552:	7a23      	ldrb	r3, [r4, #8]
   12554:	f043 0304 	orr.w	r3, r3, #4
   12558:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1255a:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
   1255e:	075b      	lsls	r3, r3, #29
   12560:	d5e1      	bpl.n	12526 <bt_id_add+0x9a>
	bt_addr_le_copy(&cp.id_addr, addr);
   12562:	4639      	mov	r1, r7
   12564:	4668      	mov	r0, sp
   12566:	f008 feee 	bl	1b346 <bt_addr_le_copy>
	cp.mode = mode;
   1256a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1256c:	2108      	movs	r1, #8
   1256e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   12572:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   12576:	f7ff fd41 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1257a:	4604      	mov	r4, r0
   1257c:	2800      	cmp	r0, #0
   1257e:	d0d2      	beq.n	12526 <bt_id_add+0x9a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12580:	2208      	movs	r2, #8
   12582:	4669      	mov	r1, sp
   12584:	4410      	add	r0, r2
   12586:	f00b fac1 	bl	1db0c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1258a:	4632      	mov	r2, r6
   1258c:	4621      	mov	r1, r4
   1258e:	f242 004e 	movw	r0, #8270	; 0x204e
   12592:	f7ff fd8d 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   12596:	e7c6      	b.n	12526 <bt_id_add+0x9a>
   12598:	20000298 	.word	0x20000298
   1259c:	200002b0 	.word	0x200002b0

000125a0 <bt_id_del>:
{
   125a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   125a4:	4f3a      	ldr	r7, [pc, #232]	; (12690 <bt_id_del+0xf0>)
   125a6:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   125aa:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   125ae:	4604      	mov	r4, r0
   125b0:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
   125b2:	b112      	cbz	r2, 125ba <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   125b4:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   125b6:	4293      	cmp	r3, r2
   125b8:	dd08      	ble.n	125cc <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   125ba:	3b01      	subs	r3, #1
   125bc:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   125c0:	7a23      	ldrb	r3, [r4, #8]
   125c2:	f023 0304 	bic.w	r3, r3, #4
   125c6:	7223      	strb	r3, [r4, #8]
}
   125c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   125cc:	2100      	movs	r1, #0
   125ce:	2206      	movs	r2, #6
   125d0:	4608      	mov	r0, r1
   125d2:	f001 f83b 	bl	1364c <bt_conn_lookup_state_le>
	if (conn) {
   125d6:	4606      	mov	r6, r0
   125d8:	b170      	cbz	r0, 125f8 <bt_id_del+0x58>
   125da:	f107 0098 	add.w	r0, r7, #152	; 0x98
   125de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   125e2:	f008 fec5 	bl	1b370 <atomic_or>
	keys->state |= flag;
   125e6:	7a23      	ldrb	r3, [r4, #8]
   125e8:	f043 0302 	orr.w	r3, r3, #2
   125ec:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   125ee:	4630      	mov	r0, r6
}
   125f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   125f4:	f009 bb18 	b.w	1bc28 <bt_conn_unref>
	func(&bt_dev.adv, data);
   125f8:	4601      	mov	r1, r0
   125fa:	f107 0018 	add.w	r0, r7, #24
   125fe:	f009 f821 	bl	1b644 <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   12602:	4630      	mov	r0, r6
   12604:	f009 f874 	bl	1b6f0 <addr_res_enable>
	if (err) {
   12608:	4607      	mov	r7, r0
   1260a:	b988      	cbnz	r0, 12630 <bt_id_del+0x90>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1260c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12610:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   12614:	429a      	cmp	r2, r3
   12616:	d217      	bcs.n	12648 <bt_id_del+0xa8>
		bt_dev.le.rl_entries--;
   12618:	3b01      	subs	r3, #1
   1261a:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   1261e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   12620:	491c      	ldr	r1, [pc, #112]	; (12694 <bt_id_del+0xf4>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   12622:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   12626:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   12628:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1262a:	2002      	movs	r0, #2
   1262c:	f003 fd62 	bl	160f4 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   12630:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   12634:	b113      	cbz	r3, 1263c <bt_id_del+0x9c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12636:	2001      	movs	r0, #1
   12638:	f009 f85a 	bl	1b6f0 <addr_res_enable>
}
   1263c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
   12640:	4815      	ldr	r0, [pc, #84]	; (12698 <bt_id_del+0xf8>)
   12642:	2100      	movs	r1, #0
   12644:	f009 b813 	b.w	1b66e <adv_unpause_enabled>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   12648:	2107      	movs	r1, #7
   1264a:	f242 0028 	movw	r0, #8232	; 0x2028
   1264e:	f7ff fcd5 	bl	11ffc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   12652:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   12656:	4606      	mov	r6, r0
   12658:	2800      	cmp	r0, #0
   1265a:	d0e9      	beq.n	12630 <bt_id_del+0x90>
	return net_buf_simple_add(&buf->b, len);
   1265c:	2107      	movs	r1, #7
   1265e:	3008      	adds	r0, #8
   12660:	f00b fa4e 	bl	1db00 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   12664:	4641      	mov	r1, r8
   12666:	f008 fe6e 	bl	1b346 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1266a:	463a      	mov	r2, r7
   1266c:	4631      	mov	r1, r6
   1266e:	f242 0028 	movw	r0, #8232	; 0x2028
   12672:	f7ff fd1d 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   12676:	2800      	cmp	r0, #0
   12678:	d1da      	bne.n	12630 <bt_id_del+0x90>
	bt_dev.le.rl_entries--;
   1267a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1267e:	3b01      	subs	r3, #1
   12680:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   12684:	7a23      	ldrb	r3, [r4, #8]
   12686:	f023 0304 	bic.w	r3, r3, #4
   1268a:	7223      	strb	r3, [r4, #8]
   1268c:	e7d0      	b.n	12630 <bt_id_del+0x90>
   1268e:	bf00      	nop
   12690:	20000298 	.word	0x20000298
   12694:	0001b6df 	.word	0x0001b6df
   12698:	200002b0 	.word	0x200002b0

0001269c <hci_event_prio>:
{
   1269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126a0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   126a2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   126a6:	4630      	mov	r0, r6
   126a8:	f00b fa61 	bl	1db6e <net_buf_simple_headroom>
	state->len = buf->len;
   126ac:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   126b0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   126b4:	4605      	mov	r5, r0
   126b6:	d80c      	bhi.n	126d2 <hci_event_prio+0x36>
   126b8:	4a1c      	ldr	r2, [pc, #112]	; (1272c <hci_event_prio+0x90>)
   126ba:	491d      	ldr	r1, [pc, #116]	; (12730 <hci_event_prio+0x94>)
   126bc:	481d      	ldr	r0, [pc, #116]	; (12734 <hci_event_prio+0x98>)
   126be:	f641 03c7 	movw	r3, #6343	; 0x18c7
   126c2:	f006 ff04 	bl	194ce <printk>
   126c6:	4040      	eors	r0, r0
   126c8:	f380 8811 	msr	BASEPRI, r0
   126cc:	f04f 0003 	mov.w	r0, #3
   126d0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   126d2:	2102      	movs	r1, #2
   126d4:	4630      	mov	r0, r6
   126d6:	f00b fa3a 	bl	1db4e <net_buf_simple_pull_mem>
   126da:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   126dc:	7800      	ldrb	r0, [r0, #0]
   126de:	f008 fdde 	bl	1b29e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   126e2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   126e4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   126e6:	d40c      	bmi.n	12702 <hci_event_prio+0x66>
   126e8:	4a10      	ldr	r2, [pc, #64]	; (1272c <hci_event_prio+0x90>)
   126ea:	4913      	ldr	r1, [pc, #76]	; (12738 <hci_event_prio+0x9c>)
   126ec:	4811      	ldr	r0, [pc, #68]	; (12734 <hci_event_prio+0x98>)
   126ee:	f641 03cb 	movw	r3, #6347	; 0x18cb
   126f2:	f006 feec 	bl	194ce <printk>
   126f6:	4040      	eors	r0, r0
   126f8:	f380 8811 	msr	BASEPRI, r0
   126fc:	f04f 0003 	mov.w	r0, #3
   12700:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12702:	2305      	movs	r3, #5
   12704:	4a0d      	ldr	r2, [pc, #52]	; (1273c <hci_event_prio+0xa0>)
   12706:	7838      	ldrb	r0, [r7, #0]
   12708:	4621      	mov	r1, r4
   1270a:	f008 fdda 	bl	1b2c2 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1270e:	07b3      	lsls	r3, r6, #30
   12710:	d507      	bpl.n	12722 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12712:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12714:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12718:	fa10 f585 	uxtah	r5, r0, r5
   1271c:	60a5      	str	r5, [r4, #8]
}
   1271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12722:	4620      	mov	r0, r4
}
   12724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12728:	f003 be0e 	b.w	16348 <net_buf_unref>
   1272c:	0001f662 	.word	0x0001f662
   12730:	0001f696 	.word	0x0001f696
   12734:	0001f6af 	.word	0x0001f6af
   12738:	0001f736 	.word	0x0001f736
   1273c:	0001eeb0 	.word	0x0001eeb0

00012740 <bt_recv>:
{
   12740:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12742:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   12744:	2b01      	cmp	r3, #1
{
   12746:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   12748:	d007      	beq.n	1275a <bt_recv+0x1a>
   1274a:	2b03      	cmp	r3, #3
   1274c:	d113      	bne.n	12776 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1274e:	480c      	ldr	r0, [pc, #48]	; (12780 <bt_recv+0x40>)
   12750:	4629      	mov	r1, r5
   12752:	f00b f9a2 	bl	1da9a <net_buf_put>
		return 0;
   12756:	2000      	movs	r0, #0
   12758:	e00c      	b.n	12774 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1275a:	6883      	ldr	r3, [r0, #8]
   1275c:	7818      	ldrb	r0, [r3, #0]
   1275e:	f008 fd9e 	bl	1b29e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12762:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12764:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12766:	d502      	bpl.n	1276e <bt_recv+0x2e>
			hci_event_prio(buf);
   12768:	4628      	mov	r0, r5
   1276a:	f7ff ff97 	bl	1269c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1276e:	f014 0002 	ands.w	r0, r4, #2
   12772:	d1ec      	bne.n	1274e <bt_recv+0xe>
}
   12774:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   12776:	f003 fde7 	bl	16348 <net_buf_unref>
		return -EINVAL;
   1277a:	f06f 0015 	mvn.w	r0, #21
   1277e:	e7f9      	b.n	12774 <bt_recv+0x34>
   12780:	200003a4 	.word	0x200003a4

00012784 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   12784:	4a08      	ldr	r2, [pc, #32]	; (127a8 <bt_hci_driver_register+0x24>)
{
   12786:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12788:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   1278c:	b930      	cbnz	r0, 1279c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1278e:	68d9      	ldr	r1, [r3, #12]
   12790:	b139      	cbz	r1, 127a2 <bt_hci_driver_register+0x1e>
   12792:	6919      	ldr	r1, [r3, #16]
   12794:	b129      	cbz	r1, 127a2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   12796:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   1279a:	4770      	bx	lr
		return -EALREADY;
   1279c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   127a0:	4770      	bx	lr
		return -EINVAL;
   127a2:	f06f 0015 	mvn.w	r0, #21
}
   127a6:	4770      	bx	lr
   127a8:	20000298 	.word	0x20000298

000127ac <bt_finalize_init>:
   127ac:	4801      	ldr	r0, [pc, #4]	; (127b4 <bt_finalize_init+0x8>)
   127ae:	2102      	movs	r1, #2
   127b0:	f008 bdde 	b.w	1b370 <atomic_or>
   127b4:	20000330 	.word	0x20000330

000127b8 <bt_get_name>:
}
   127b8:	4800      	ldr	r0, [pc, #0]	; (127bc <bt_get_name+0x4>)
   127ba:	4770      	bx	lr
   127bc:	0001f727 	.word	0x0001f727

000127c0 <bt_id_create>:
{
   127c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   127c2:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   127c4:	4605      	mov	r5, r0
   127c6:	b918      	cbnz	r0, 127d0 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   127c8:	b1ec      	cbz	r4, 12806 <bt_id_create+0x46>
		return -EINVAL;
   127ca:	f06f 0415 	mvn.w	r4, #21
   127ce:	e017      	b.n	12800 <bt_id_create+0x40>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   127d0:	2300      	movs	r3, #0
   127d2:	4669      	mov	r1, sp
   127d4:	9300      	str	r3, [sp, #0]
   127d6:	f8cd 3003 	str.w	r3, [sp, #3]
   127da:	f008 fdb7 	bl	1b34c <bt_addr_le_cmp>
   127de:	2800      	cmp	r0, #0
   127e0:	d0f2      	beq.n	127c8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   127e2:	782b      	ldrb	r3, [r5, #0]
   127e4:	2b01      	cmp	r3, #1
   127e6:	d1f0      	bne.n	127ca <bt_id_create+0xa>
   127e8:	79ab      	ldrb	r3, [r5, #6]
   127ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   127ee:	2bc0      	cmp	r3, #192	; 0xc0
   127f0:	d1eb      	bne.n	127ca <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   127f2:	4628      	mov	r0, r5
   127f4:	f7ff f8ac 	bl	11950 <id_find>
   127f8:	2800      	cmp	r0, #0
   127fa:	dbe5      	blt.n	127c8 <bt_id_create+0x8>
			return -EALREADY;
   127fc:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   12800:	4620      	mov	r0, r4
   12802:	b002      	add	sp, #8
   12804:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12806:	4e10      	ldr	r6, [pc, #64]	; (12848 <bt_id_create+0x88>)
   12808:	79f3      	ldrb	r3, [r6, #7]
   1280a:	2b01      	cmp	r3, #1
   1280c:	d018      	beq.n	12840 <bt_id_create+0x80>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1280e:	f106 0098 	add.w	r0, r6, #152	; 0x98
   12812:	f008 fd92 	bl	1b33a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12816:	07c3      	lsls	r3, r0, #31
   12818:	d40a      	bmi.n	12830 <bt_id_create+0x70>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1281a:	2d00      	cmp	r5, #0
   1281c:	d0d5      	beq.n	127ca <bt_id_create+0xa>
   1281e:	4669      	mov	r1, sp
   12820:	4628      	mov	r0, r5
   12822:	9400      	str	r4, [sp, #0]
   12824:	f8cd 4003 	str.w	r4, [sp, #3]
   12828:	f008 fd90 	bl	1b34c <bt_addr_le_cmp>
   1282c:	2800      	cmp	r0, #0
   1282e:	d0cc      	beq.n	127ca <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   12830:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   12832:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   12834:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   12836:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   12838:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   1283a:	f7ff f97b 	bl	11b34 <id_create.isra.0>
	return new_id;
   1283e:	e7df      	b.n	12800 <bt_id_create+0x40>
		return -ENOMEM;
   12840:	f06f 040b 	mvn.w	r4, #11
   12844:	e7dc      	b.n	12800 <bt_id_create+0x40>
   12846:	bf00      	nop
   12848:	20000298 	.word	0x20000298

0001284c <bt_setup_public_id_addr>:
{
   1284c:	b570      	push	{r4, r5, r6, lr}
   1284e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   12850:	aa01      	add	r2, sp, #4
   12852:	2100      	movs	r1, #0
   12854:	f241 0009 	movw	r0, #4105	; 0x1009
   12858:	f7ff fc2a 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   1285c:	4e1a      	ldr	r6, [pc, #104]	; (128c8 <bt_setup_public_id_addr+0x7c>)
   1285e:	4604      	mov	r4, r0
   12860:	b118      	cbz	r0, 1286a <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
   12862:	2300      	movs	r3, #0
   12864:	71f3      	strb	r3, [r6, #7]
}
   12866:	b006      	add	sp, #24
   12868:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1286a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1286c:	689d      	ldr	r5, [r3, #8]
   1286e:	9004      	str	r0, [sp, #16]
   12870:	3501      	adds	r5, #1
   12872:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   12876:	2206      	movs	r2, #6
   12878:	a904      	add	r1, sp, #16
   1287a:	4628      	mov	r0, r5
   1287c:	f008 fbbc 	bl	1aff8 <memcmp>
   12880:	b918      	cbnz	r0, 1288a <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
   12882:	9801      	ldr	r0, [sp, #4]
   12884:	f003 fd60 	bl	16348 <net_buf_unref>
   12888:	e7eb      	b.n	12862 <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1288a:	4b10      	ldr	r3, [pc, #64]	; (128cc <bt_setup_public_id_addr+0x80>)
   1288c:	6818      	ldr	r0, [r3, #0]
   1288e:	9002      	str	r0, [sp, #8]
   12890:	889b      	ldrh	r3, [r3, #4]
   12892:	f8ad 300c 	strh.w	r3, [sp, #12]
   12896:	2206      	movs	r2, #6
   12898:	a902      	add	r1, sp, #8
   1289a:	4628      	mov	r0, r5
   1289c:	f008 fbac 	bl	1aff8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   128a0:	2800      	cmp	r0, #0
   128a2:	d0ee      	beq.n	12882 <bt_setup_public_id_addr+0x36>
	memcpy(dst, src, sizeof(*dst));
   128a4:	4629      	mov	r1, r5
   128a6:	2206      	movs	r2, #6
   128a8:	f10d 0011 	add.w	r0, sp, #17
   128ac:	f008 fbb4 	bl	1b018 <memcpy>
	net_buf_unref(rsp);
   128b0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   128b2:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   128b6:	f003 fd47 	bl	16348 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   128ba:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   128bc:	a904      	add	r1, sp, #16
   128be:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   128c0:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   128c2:	f7ff f937 	bl	11b34 <id_create.isra.0>
   128c6:	e7ce      	b.n	12866 <bt_setup_public_id_addr+0x1a>
   128c8:	20000298 	.word	0x20000298
   128cc:	0001ea7b 	.word	0x0001ea7b

000128d0 <bt_read_static_addr>:
{
   128d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   128d4:	4b15      	ldr	r3, [pc, #84]	; (1292c <bt_read_static_addr+0x5c>)
   128d6:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   128da:	f014 0401 	ands.w	r4, r4, #1
{
   128de:	4607      	mov	r7, r0
   128e0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   128e2:	d015      	beq.n	12910 <bt_read_static_addr+0x40>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   128e4:	aa01      	add	r2, sp, #4
   128e6:	2100      	movs	r1, #0
   128e8:	f64f 4009 	movw	r0, #64521	; 0xfc09
   128ec:	f7ff fbe0 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   128f0:	4605      	mov	r5, r0
   128f2:	b9c8      	cbnz	r0, 12928 <bt_read_static_addr+0x58>
	rp = (void *)rsp->data;
   128f4:	9b01      	ldr	r3, [sp, #4]
   128f6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   128f8:	785c      	ldrb	r4, [r3, #1]
   128fa:	42b4      	cmp	r4, r6
   128fc:	bf28      	it	cs
   128fe:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   12900:	f04f 0816 	mov.w	r8, #22
   12904:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   12906:	42a5      	cmp	r5, r4
   12908:	db06      	blt.n	12918 <bt_read_static_addr+0x48>
	net_buf_unref(rsp);
   1290a:	9801      	ldr	r0, [sp, #4]
   1290c:	f003 fd1c 	bl	16348 <net_buf_unref>
}
   12910:	4620      	mov	r0, r4
   12912:	b002      	add	sp, #8
   12914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   12918:	fb08 7005 	mla	r0, r8, r5, r7
   1291c:	2216      	movs	r2, #22
   1291e:	4631      	mov	r1, r6
   12920:	f008 fb7a 	bl	1b018 <memcpy>
	for (i = 0; i < cnt; i++) {
   12924:	3501      	adds	r5, #1
   12926:	e7ee      	b.n	12906 <bt_read_static_addr+0x36>
		return 0;
   12928:	2400      	movs	r4, #0
   1292a:	e7f1      	b.n	12910 <bt_read_static_addr+0x40>
   1292c:	20000298 	.word	0x20000298

00012930 <bt_setup_random_id_addr>:
{
   12930:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   12932:	4d14      	ldr	r5, [pc, #80]	; (12984 <bt_setup_random_id_addr+0x54>)
   12934:	79ec      	ldrb	r4, [r5, #7]
{
   12936:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   12938:	b9f4      	cbnz	r4, 12978 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1293a:	2101      	movs	r1, #1
   1293c:	a802      	add	r0, sp, #8
   1293e:	f7ff ffc7 	bl	128d0 <bt_read_static_addr>
   12942:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   12944:	b1c0      	cbz	r0, 12978 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12946:	2716      	movs	r7, #22
   12948:	e00f      	b.n	1296a <bt_setup_random_id_addr+0x3a>
   1294a:	ab02      	add	r3, sp, #8
   1294c:	fb07 3106 	mla	r1, r7, r6, r3
   12950:	2206      	movs	r2, #6
   12952:	f10d 0001 	add.w	r0, sp, #1
   12956:	f008 fb5f 	bl	1b018 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1295a:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   1295c:	4669      	mov	r1, sp
   1295e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   12960:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   12964:	f7ff f8e6 	bl	11b34 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12968:	3401      	adds	r4, #1
   1296a:	79eb      	ldrb	r3, [r5, #7]
   1296c:	b2e6      	uxtb	r6, r4
   1296e:	42b3      	cmp	r3, r6
   12970:	d8eb      	bhi.n	1294a <bt_setup_random_id_addr+0x1a>
			return 0;
   12972:	2000      	movs	r0, #0
}
   12974:	b009      	add	sp, #36	; 0x24
   12976:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   12978:	2100      	movs	r1, #0
   1297a:	4608      	mov	r0, r1
   1297c:	f7ff ff20 	bl	127c0 <bt_id_create>
   12980:	e7f8      	b.n	12974 <bt_setup_random_id_addr+0x44>
   12982:	bf00      	nop
   12984:	20000298 	.word	0x20000298

00012988 <bt_enable>:
{
   12988:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   1298c:	4d2f      	ldr	r5, [pc, #188]	; (12a4c <bt_enable+0xc4>)
   1298e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   12992:	b088      	sub	sp, #32
   12994:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   12996:	2b00      	cmp	r3, #0
   12998:	d052      	beq.n	12a40 <bt_enable+0xb8>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1299a:	2101      	movs	r1, #1
   1299c:	f105 0098 	add.w	r0, r5, #152	; 0x98
   129a0:	f008 fce6 	bl	1b370 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   129a4:	f010 0401 	ands.w	r4, r0, #1
   129a8:	d14d      	bne.n	12a46 <bt_enable+0xbe>
	ready_cb = cb;
   129aa:	4b29      	ldr	r3, [pc, #164]	; (12a50 <bt_enable+0xc8>)
   129ac:	f04f 0800 	mov.w	r8, #0
   129b0:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   129b2:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   129b6:	f06f 0308 	mvn.w	r3, #8
   129ba:	e9cd 4302 	strd	r4, r3, [sp, #8]
   129be:	e9cd 8906 	strd	r8, r9, [sp, #24]
   129c2:	e9cd 4400 	strd	r4, r4, [sp]
   129c6:	4b23      	ldr	r3, [pc, #140]	; (12a54 <bt_enable+0xcc>)
   129c8:	4923      	ldr	r1, [pc, #140]	; (12a58 <bt_enable+0xd0>)
   129ca:	9404      	str	r4, [sp, #16]
   129cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   129d0:	4822      	ldr	r0, [pc, #136]	; (12a5c <bt_enable+0xd4>)
   129d2:	f005 ffd5 	bl	18980 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   129d6:	4922      	ldr	r1, [pc, #136]	; (12a60 <bt_enable+0xd8>)
   129d8:	4820      	ldr	r0, [pc, #128]	; (12a5c <bt_enable+0xd4>)
   129da:	f00b fc64 	bl	1e2a6 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   129de:	f06f 0307 	mvn.w	r3, #7
   129e2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   129e6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   129ea:	e9cd 4400 	strd	r4, r4, [sp]
   129ee:	4b1d      	ldr	r3, [pc, #116]	; (12a64 <bt_enable+0xdc>)
   129f0:	491d      	ldr	r1, [pc, #116]	; (12a68 <bt_enable+0xe0>)
   129f2:	9404      	str	r4, [sp, #16]
   129f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   129f8:	481c      	ldr	r0, [pc, #112]	; (12a6c <bt_enable+0xe4>)
   129fa:	f005 ffc1 	bl	18980 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   129fe:	491c      	ldr	r1, [pc, #112]	; (12a70 <bt_enable+0xe8>)
   12a00:	481a      	ldr	r0, [pc, #104]	; (12a6c <bt_enable+0xe4>)
   12a02:	f00b fc50 	bl	1e2a6 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   12a06:	f7fe fee1 	bl	117cc <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   12a0a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   12a0e:	68db      	ldr	r3, [r3, #12]
   12a10:	4798      	blx	r3
	if (err) {
   12a12:	4604      	mov	r4, r0
   12a14:	b950      	cbnz	r0, 12a2c <bt_enable+0xa4>
	if (!cb) {
   12a16:	b96e      	cbnz	r6, 12a34 <bt_enable+0xac>
	err = hci_init();
   12a18:	f7fc fbb6 	bl	f188 <hci_init>
	if (err) {
   12a1c:	4604      	mov	r4, r0
   12a1e:	b928      	cbnz	r0, 12a2c <bt_enable+0xa4>
		err = bt_conn_init();
   12a20:	f000 ff94 	bl	1394c <bt_conn_init>
		if (err) {
   12a24:	4604      	mov	r4, r0
   12a26:	b908      	cbnz	r0, 12a2c <bt_enable+0xa4>
	bt_finalize_init();
   12a28:	f7ff fec0 	bl	127ac <bt_finalize_init>
}
   12a2c:	4620      	mov	r0, r4
   12a2e:	b008      	add	sp, #32
   12a30:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   12a34:	f105 0188 	add.w	r1, r5, #136	; 0x88
   12a38:	480e      	ldr	r0, [pc, #56]	; (12a74 <bt_enable+0xec>)
   12a3a:	f00b fca9 	bl	1e390 <k_work_submit_to_queue>
   12a3e:	e7f5      	b.n	12a2c <bt_enable+0xa4>
		return -ENODEV;
   12a40:	f06f 0412 	mvn.w	r4, #18
   12a44:	e7f2      	b.n	12a2c <bt_enable+0xa4>
		return -EALREADY;
   12a46:	f06f 0444 	mvn.w	r4, #68	; 0x44
   12a4a:	e7ef      	b.n	12a2c <bt_enable+0xa4>
   12a4c:	20000298 	.word	0x20000298
   12a50:	20001edc 	.word	0x20001edc
   12a54:	00011e05 	.word	0x00011e05
   12a58:	20002e88 	.word	0x20002e88
   12a5c:	200016f0 	.word	0x200016f0
   12a60:	0001f74f 	.word	0x0001f74f
   12a64:	00011b89 	.word	0x00011b89
   12a68:	20002a88 	.word	0x20002a88
   12a6c:	20001670 	.word	0x20001670
   12a70:	0001f755 	.word	0x0001f755
   12a74:	20001d58 	.word	0x20001d58

00012a78 <init_work>:
{
   12a78:	b510      	push	{r4, lr}
	err = hci_init();
   12a7a:	f7fc fb85 	bl	f188 <hci_init>
	if (err) {
   12a7e:	4604      	mov	r4, r0
   12a80:	b928      	cbnz	r0, 12a8e <init_work+0x16>
		err = bt_conn_init();
   12a82:	f000 ff63 	bl	1394c <bt_conn_init>
		if (err) {
   12a86:	4604      	mov	r4, r0
   12a88:	b908      	cbnz	r0, 12a8e <init_work+0x16>
	bt_finalize_init();
   12a8a:	f7ff fe8f 	bl	127ac <bt_finalize_init>
	if (ready_cb) {
   12a8e:	4b04      	ldr	r3, [pc, #16]	; (12aa0 <init_work+0x28>)
   12a90:	681b      	ldr	r3, [r3, #0]
   12a92:	b11b      	cbz	r3, 12a9c <init_work+0x24>
		ready_cb(err);
   12a94:	4620      	mov	r0, r4
}
   12a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   12a9a:	4718      	bx	r3
}
   12a9c:	bd10      	pop	{r4, pc}
   12a9e:	bf00      	nop
   12aa0:	20001edc 	.word	0x20001edc

00012aa4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   12aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   12aa8:	690d      	ldr	r5, [r1, #16]
{
   12aaa:	b08f      	sub	sp, #60	; 0x3c
   12aac:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   12aae:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   12ab0:	ebb5 0b03 	subs.w	fp, r5, r3
{
   12ab4:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12ab6:	487e      	ldr	r0, [pc, #504]	; (12cb0 <bt_le_adv_start_legacy+0x20c>)
	struct bt_conn *conn = NULL;
   12ab8:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   12aba:	bf18      	it	ne
   12abc:	f04f 0b01 	movne.w	fp, #1
{
   12ac0:	460c      	mov	r4, r1
   12ac2:	4691      	mov	r9, r2
   12ac4:	f008 fc39 	bl	1b33a <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   12ac8:	0787      	lsls	r7, r0, #30
   12aca:	f140 80e3 	bpl.w	12c94 <bt_le_adv_start_legacy+0x1f0>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   12ace:	4608      	mov	r0, r1
   12ad0:	f7fe ff56 	bl	11980 <valid_adv_param>
   12ad4:	4607      	mov	r7, r0
   12ad6:	2800      	cmp	r0, #0
   12ad8:	f000 80df 	beq.w	12c9a <bt_le_adv_start_legacy+0x1f6>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   12adc:	f106 0810 	add.w	r8, r6, #16
   12ae0:	4640      	mov	r0, r8
   12ae2:	f008 fc2a 	bl	1b33a <atomic_get>
   12ae6:	f3c0 1180 	ubfx	r1, r0, #6, #1
   12aea:	0640      	lsls	r0, r0, #25
   12aec:	f100 80d8 	bmi.w	12ca0 <bt_le_adv_start_legacy+0x1fc>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   12af0:	220f      	movs	r2, #15
   12af2:	a80a      	add	r0, sp, #40	; 0x28
   12af4:	9105      	str	r1, [sp, #20]
   12af6:	f008 faba 	bl	1b06e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   12afa:	68a3      	ldr	r3, [r4, #8]
   12afc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   12b00:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   12b02:	68e3      	ldr	r3, [r4, #12]
   12b04:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   12b08:	f008 fc08 	bl	1b31c <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   12b0c:	7832      	ldrb	r2, [r6, #0]
   12b0e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   12b10:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   12b12:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   12b16:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   12b18:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   12b1c:	d004      	beq.n	12b28 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12b1e:	4864      	ldr	r0, [pc, #400]	; (12cb0 <bt_le_adv_start_legacy+0x20c>)
   12b20:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   12b24:	f008 fc15 	bl	1b352 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   12b28:	4b62      	ldr	r3, [pc, #392]	; (12cb4 <bt_le_adv_start_legacy+0x210>)
	adv->id = param->id;
   12b2a:	7820      	ldrb	r0, [r4, #0]
   12b2c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   12b2e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   12b32:	465a      	mov	r2, fp
   12b34:	6861      	ldr	r1, [r4, #4]
   12b36:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   12b3a:	f7ff fb49 	bl	121d0 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   12b3e:	4683      	mov	fp, r0
   12b40:	2800      	cmp	r0, #0
   12b42:	d166      	bne.n	12c12 <bt_le_adv_start_legacy+0x16e>
		return err;
	}

	if (dir_adv) {
   12b44:	f106 0009 	add.w	r0, r6, #9
   12b48:	2d00      	cmp	r5, #0
   12b4a:	d03f      	beq.n	12bcc <bt_le_adv_start_legacy+0x128>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   12b4c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   12b4e:	f008 fbfa 	bl	1b346 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12b52:	6860      	ldr	r0, [r4, #4]
   12b54:	07c1      	lsls	r1, r0, #31
   12b56:	d541      	bpl.n	12bdc <bt_le_adv_start_legacy+0x138>
		scannable = true;

		if (dir_adv) {
   12b58:	2d00      	cmp	r5, #0
   12b5a:	d03c      	beq.n	12bd6 <bt_le_adv_start_legacy+0x132>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   12b5c:	f010 0f10 	tst.w	r0, #16
   12b60:	bf14      	ite	ne
   12b62:	2304      	movne	r3, #4
   12b64:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   12b66:	6921      	ldr	r1, [r4, #16]
   12b68:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   12b6c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   12b70:	f008 fbe9 	bl	1b346 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   12b74:	210f      	movs	r1, #15
   12b76:	f242 0006 	movw	r0, #8198	; 0x2006
   12b7a:	f7ff fa3f 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   12b7e:	4683      	mov	fp, r0
   12b80:	2800      	cmp	r0, #0
   12b82:	f000 8090 	beq.w	12ca6 <bt_le_adv_start_legacy+0x202>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12b86:	220f      	movs	r2, #15
   12b88:	a90a      	add	r1, sp, #40	; 0x28
   12b8a:	3008      	adds	r0, #8
   12b8c:	f00a ffbe 	bl	1db0c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   12b90:	2200      	movs	r2, #0
   12b92:	4659      	mov	r1, fp
   12b94:	f242 0006 	movw	r0, #8198	; 0x2006
   12b98:	f7ff fa8a 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   12b9c:	2800      	cmp	r0, #0
   12b9e:	f040 8085 	bne.w	12cac <bt_le_adv_start_legacy+0x208>
		return err;
	}

	if (!dir_adv) {
   12ba2:	b335      	cbz	r5, 12bf2 <bt_le_adv_start_legacy+0x14e>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   12ba4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12ba6:	07da      	lsls	r2, r3, #31
   12ba8:	d437      	bmi.n	12c1a <bt_le_adv_start_legacy+0x176>
	return set_le_adv_enable_legacy(adv, enable);
   12baa:	2101      	movs	r1, #1
   12bac:	4630      	mov	r0, r6
   12bae:	f7ff fb69 	bl	12284 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   12bb2:	4683      	mov	fp, r0
   12bb4:	9807      	ldr	r0, [sp, #28]
   12bb6:	f1bb 0f00 	cmp.w	fp, #0
   12bba:	d065      	beq.n	12c88 <bt_le_adv_start_legacy+0x1e4>
		BT_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   12bbc:	b348      	cbz	r0, 12c12 <bt_le_adv_start_legacy+0x16e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12bbe:	2100      	movs	r1, #0
   12bc0:	f000 fc74 	bl	134ac <bt_conn_set_state>
			bt_conn_unref(conn);
   12bc4:	9807      	ldr	r0, [sp, #28]
   12bc6:	f009 f82f 	bl	1bc28 <bt_conn_unref>
   12bca:	e022      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   12bcc:	9508      	str	r5, [sp, #32]
   12bce:	a908      	add	r1, sp, #32
   12bd0:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   12bd4:	e7bb      	b.n	12b4e <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   12bd6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   12bda:	e7cb      	b.n	12b74 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   12bdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12bde:	b933      	cbnz	r3, 12bee <bt_le_adv_start_legacy+0x14a>
   12be0:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   12be4:	f1c7 0303 	rsb	r3, r7, #3
   12be8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   12bec:	e7c2      	b.n	12b74 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   12bee:	2701      	movs	r7, #1
   12bf0:	e7f8      	b.n	12be4 <bt_le_adv_start_legacy+0x140>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   12bf2:	6863      	ldr	r3, [r4, #4]
   12bf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12bf8:	e9cd 7301 	strd	r7, r3, [sp, #4]
   12bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12bfe:	9300      	str	r3, [sp, #0]
   12c00:	4652      	mov	r2, sl
   12c02:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12c04:	4649      	mov	r1, r9
   12c06:	4630      	mov	r0, r6
   12c08:	f7ff fb6a 	bl	122e0 <le_adv_update.constprop.0>
		if (err) {
   12c0c:	4683      	mov	fp, r0
   12c0e:	2800      	cmp	r0, #0
   12c10:	d0c8      	beq.n	12ba4 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   12c12:	4658      	mov	r0, fp
   12c14:	b00f      	add	sp, #60	; 0x3c
   12c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   12c1a:	a907      	add	r1, sp, #28
   12c1c:	4630      	mov	r0, r6
   12c1e:	f7ff f985 	bl	11f2c <le_adv_start_add_conn>
		if (err) {
   12c22:	4683      	mov	fp, r0
   12c24:	2800      	cmp	r0, #0
   12c26:	d0c0      	beq.n	12baa <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   12c28:	f110 0f0c 	cmn.w	r0, #12
   12c2c:	d1f1      	bne.n	12c12 <bt_le_adv_start_legacy+0x16e>
   12c2e:	2d00      	cmp	r5, #0
   12c30:	d1ef      	bne.n	12c12 <bt_le_adv_start_legacy+0x16e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   12c32:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   12c34:	079b      	lsls	r3, r3, #30
   12c36:	d4ec      	bmi.n	12c12 <bt_le_adv_start_legacy+0x16e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   12c38:	6860      	ldr	r0, [r4, #4]
   12c3a:	f080 0002 	eor.w	r0, r0, #2
   12c3e:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   12c42:	f00b 0201 	and.w	r2, fp, #1
   12c46:	210c      	movs	r1, #12
   12c48:	4640      	mov	r0, r8
   12c4a:	f008 fba0 	bl	1b38e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   12c4e:	6862      	ldr	r2, [r4, #4]
   12c50:	2107      	movs	r1, #7
   12c52:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   12c56:	4640      	mov	r0, r8
   12c58:	f008 fb99 	bl	1b38e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   12c5c:	6862      	ldr	r2, [r4, #4]
   12c5e:	2108      	movs	r1, #8
   12c60:	f002 0201 	and.w	r2, r2, #1
   12c64:	4640      	mov	r0, r8
   12c66:	f008 fb92 	bl	1b38e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   12c6a:	463a      	mov	r2, r7
   12c6c:	2109      	movs	r1, #9
   12c6e:	4640      	mov	r0, r8
   12c70:	f008 fb8d 	bl	1b38e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   12c74:	6862      	ldr	r2, [r4, #4]
   12c76:	210b      	movs	r1, #11
   12c78:	f3c2 0280 	ubfx	r2, r2, #2, #1
   12c7c:	4640      	mov	r0, r8
   12c7e:	f008 fb86 	bl	1b38e <atomic_set_bit_to>
	return 0;
   12c82:	f04f 0b00 	mov.w	fp, #0
   12c86:	e7c4      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   12c88:	b108      	cbz	r0, 12c8e <bt_le_adv_start_legacy+0x1ea>
		bt_conn_unref(conn);
   12c8a:	f008 ffcd 	bl	1bc28 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   12c8e:	2d00      	cmp	r5, #0
   12c90:	d1d7      	bne.n	12c42 <bt_le_adv_start_legacy+0x19e>
   12c92:	e7d1      	b.n	12c38 <bt_le_adv_start_legacy+0x194>
		return -EAGAIN;
   12c94:	f06f 0b0a 	mvn.w	fp, #10
   12c98:	e7bb      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
		return -EINVAL;
   12c9a:	f06f 0b15 	mvn.w	fp, #21
   12c9e:	e7b8      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
		return -EALREADY;
   12ca0:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   12ca4:	e7b5      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
		return -ENOBUFS;
   12ca6:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   12caa:	e7b2      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
   12cac:	4683      	mov	fp, r0
   12cae:	e7b0      	b.n	12c12 <bt_le_adv_start_legacy+0x16e>
   12cb0:	20000330 	.word	0x20000330
   12cb4:	20000298 	.word	0x20000298

00012cb8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   12cb8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   12cba:	9c04      	ldr	r4, [sp, #16]
   12cbc:	e9cd 3400 	strd	r3, r4, [sp]
   12cc0:	4613      	mov	r3, r2
   12cc2:	460a      	mov	r2, r1
   12cc4:	4601      	mov	r1, r0
   12cc6:	4802      	ldr	r0, [pc, #8]	; (12cd0 <bt_le_adv_start+0x18>)
   12cc8:	f7ff feec 	bl	12aa4 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   12ccc:	b002      	add	sp, #8
   12cce:	bd10      	pop	{r4, pc}
   12cd0:	200002b0 	.word	0x200002b0

00012cd4 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   12cd4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12cd6:	4818      	ldr	r0, [pc, #96]	; (12d38 <bt_le_adv_resume+0x64>)
   12cd8:	f008 fb2f 	bl	1b33a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   12cdc:	04c1      	lsls	r1, r0, #19
   12cde:	d529      	bpl.n	12d34 <bt_le_adv_resume+0x60>
   12ce0:	4815      	ldr	r0, [pc, #84]	; (12d38 <bt_le_adv_resume+0x64>)
   12ce2:	f008 fb2a 	bl	1b33a <atomic_get>
   12ce6:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12ce8:	f3c0 1480 	ubfx	r4, r0, #6, #1
   12cec:	d422      	bmi.n	12d34 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12cee:	4812      	ldr	r0, [pc, #72]	; (12d38 <bt_le_adv_resume+0x64>)
   12cf0:	f008 fb23 	bl	1b33a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   12cf4:	05c3      	lsls	r3, r0, #23
   12cf6:	d51d      	bpl.n	12d34 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   12cf8:	4810      	ldr	r0, [pc, #64]	; (12d3c <bt_le_adv_resume+0x68>)
   12cfa:	a901      	add	r1, sp, #4
   12cfc:	f7ff f916 	bl	11f2c <le_adv_start_add_conn>
	if (err) {
   12d00:	b9c0      	cbnz	r0, 12d34 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   12d02:	480e      	ldr	r0, [pc, #56]	; (12d3c <bt_le_adv_resume+0x68>)
   12d04:	2101      	movs	r1, #1
   12d06:	f7ff fabd 	bl	12284 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   12d0a:	b150      	cbz	r0, 12d22 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12d0c:	4621      	mov	r1, r4
   12d0e:	9801      	ldr	r0, [sp, #4]
   12d10:	f000 fbcc 	bl	134ac <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12d14:	4808      	ldr	r0, [pc, #32]	; (12d38 <bt_le_adv_resume+0x64>)
   12d16:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   12d1a:	f008 fb1a 	bl	1b352 <atomic_and>
	return (old & mask) != 0;
   12d1e:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   12d22:	9801      	ldr	r0, [sp, #4]
   12d24:	f008 ff80 	bl	1bc28 <bt_conn_unref>
	if (persist_paused) {
   12d28:	b124      	cbz	r4, 12d34 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12d2a:	4803      	ldr	r0, [pc, #12]	; (12d38 <bt_le_adv_resume+0x64>)
   12d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12d30:	f008 fb1e 	bl	1b370 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   12d34:	b002      	add	sp, #8
   12d36:	bd10      	pop	{r4, pc}
   12d38:	200002c0 	.word	0x200002c0
   12d3c:	200002b0 	.word	0x200002b0

00012d40 <enh_conn_complete>:
{
   12d40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12d44:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
   12d48:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12d4a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   12d4e:	4851      	ldr	r0, [pc, #324]	; (12e94 <enh_conn_complete+0x154>)
   12d50:	f008 faff 	bl	1b352 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   12d54:	0443      	lsls	r3, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12d56:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   12d5a:	d504      	bpl.n	12d66 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   12d5c:	494e      	ldr	r1, [pc, #312]	; (12e98 <enh_conn_complete+0x158>)
   12d5e:	2200      	movs	r2, #0
   12d60:	2002      	movs	r0, #2
   12d62:	f003 f9c7 	bl	160f4 <bt_keys_foreach>
	if (evt->status) {
   12d66:	7825      	ldrb	r5, [r4, #0]
   12d68:	b19d      	cbz	r5, 12d92 <enh_conn_complete+0x52>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12d6a:	2d3c      	cmp	r5, #60	; 0x3c
   12d6c:	d13e      	bne.n	12dec <enh_conn_complete+0xac>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12d6e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   12d72:	484a      	ldr	r0, [pc, #296]	; (12e9c <enh_conn_complete+0x15c>)
   12d74:	f008 faed 	bl	1b352 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   12d78:	2000      	movs	r0, #0
   12d7a:	f7fe febd 	bl	11af8 <find_pending_connect.part.0>
		if (!conn) {
   12d7e:	4604      	mov	r4, r0
   12d80:	b3a0      	cbz	r0, 12dec <enh_conn_complete+0xac>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12d82:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12d84:	2100      	movs	r1, #0
   12d86:	f000 fb91 	bl	134ac <bt_conn_set_state>
		bt_conn_unref(conn);
   12d8a:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   12d8c:	f008 ff4c 	bl	1bc28 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12d90:	e02c      	b.n	12dec <enh_conn_complete+0xac>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12d92:	7923      	ldrb	r3, [r4, #4]
   12d94:	3b02      	subs	r3, #2
   12d96:	2b01      	cmp	r3, #1
   12d98:	f104 0604 	add.w	r6, r4, #4
   12d9c:	d829      	bhi.n	12df2 <enh_conn_complete+0xb2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12d9e:	4631      	mov	r1, r6
   12da0:	a802      	add	r0, sp, #8
   12da2:	f008 fad0 	bl	1b346 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12da6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   12daa:	2206      	movs	r2, #6
   12dac:	3b02      	subs	r3, #2
   12dae:	f104 0111 	add.w	r1, r4, #17
   12db2:	f10d 0001 	add.w	r0, sp, #1
   12db6:	f88d 3008 	strb.w	r3, [sp, #8]
   12dba:	f008 f92d 	bl	1b018 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12dbe:	2301      	movs	r3, #1
   12dc0:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   12dc4:	78e3      	ldrb	r3, [r4, #3]
   12dc6:	2b01      	cmp	r3, #1
   12dc8:	d10c      	bne.n	12de4 <enh_conn_complete+0xa4>
   12dca:	a802      	add	r0, sp, #8
   12dcc:	f7fe fe94 	bl	11af8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12dd0:	78e3      	ldrb	r3, [r4, #3]
   12dd2:	2b01      	cmp	r3, #1
   12dd4:	4605      	mov	r5, r0
   12dd6:	d104      	bne.n	12de2 <enh_conn_complete+0xa2>
   12dd8:	4830      	ldr	r0, [pc, #192]	; (12e9c <enh_conn_complete+0x15c>)
   12dda:	f06f 0140 	mvn.w	r1, #64	; 0x40
   12dde:	f008 fab8 	bl	1b352 <atomic_and>
	if (!conn) {
   12de2:	b9cd      	cbnz	r5, 12e18 <enh_conn_complete+0xd8>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12de4:	211f      	movs	r1, #31
   12de6:	4640      	mov	r0, r8
   12de8:	f008 fd03 	bl	1b7f2 <bt_hci_disconnect>
}
   12dec:	b004      	add	sp, #16
   12dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   12df2:	78e3      	ldrb	r3, [r4, #3]
   12df4:	2b01      	cmp	r3, #1
   12df6:	bf04      	itt	eq
   12df8:	4b29      	ldreq	r3, [pc, #164]	; (12ea0 <enh_conn_complete+0x160>)
   12dfa:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   12dfe:	4631      	mov	r1, r6
   12e00:	4628      	mov	r0, r5
   12e02:	f008 fcee 	bl	1b7e2 <bt_lookup_id_addr>
   12e06:	4601      	mov	r1, r0
   12e08:	a802      	add	r0, sp, #8
   12e0a:	f008 fa9c 	bl	1b346 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12e0e:	4631      	mov	r1, r6
   12e10:	4668      	mov	r0, sp
   12e12:	f008 fa98 	bl	1b346 <bt_addr_le_copy>
   12e16:	e7d5      	b.n	12dc4 <enh_conn_complete+0x84>
	conn->handle = handle;
   12e18:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12e1a:	a902      	add	r1, sp, #8
	conn->handle = handle;
   12e1c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12e20:	f008 fa91 	bl	1b346 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12e24:	7e22      	ldrb	r2, [r4, #24]
   12e26:	7de3      	ldrb	r3, [r4, #23]
   12e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12e2c:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12e30:	7ea2      	ldrb	r2, [r4, #26]
   12e32:	7e63      	ldrb	r3, [r4, #25]
   12e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12e38:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12e3c:	7ee3      	ldrb	r3, [r4, #27]
   12e3e:	7f22      	ldrb	r2, [r4, #28]
   12e40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12e44:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   12e48:	78e3      	ldrb	r3, [r4, #3]
   12e4a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   12e4c:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12e4e:	2b01      	cmp	r3, #1
	conn->err = 0U;
   12e50:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12e52:	d116      	bne.n	12e82 <enh_conn_complete+0x142>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12e54:	4669      	mov	r1, sp
   12e56:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   12e5a:	f008 fa74 	bl	1b346 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   12e5e:	7a29      	ldrb	r1, [r5, #8]
   12e60:	4e0f      	ldr	r6, [pc, #60]	; (12ea0 <enh_conn_complete+0x160>)
   12e62:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12e66:	4431      	add	r1, r6
   12e68:	f105 0096 	add.w	r0, r5, #150	; 0x96
   12e6c:	f008 fa6b 	bl	1b346 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   12e70:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   12e74:	4622      	mov	r2, r4
   12e76:	f001 0340 	and.w	r3, r1, #64	; 0x40
   12e7a:	4313      	orrs	r3, r2
   12e7c:	d001      	beq.n	12e82 <enh_conn_complete+0x142>
			bt_le_adv_resume();
   12e7e:	f7ff ff29 	bl	12cd4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12e82:	2107      	movs	r1, #7
   12e84:	4628      	mov	r0, r5
   12e86:	f000 fb11 	bl	134ac <bt_conn_set_state>
	conn_auto_initiate(conn);
   12e8a:	4628      	mov	r0, r5
   12e8c:	f7ff fa9c 	bl	123c8 <conn_auto_initiate>
	bt_conn_unref(conn);
   12e90:	4628      	mov	r0, r5
   12e92:	e77b      	b.n	12d8c <enh_conn_complete+0x4c>
   12e94:	20000330 	.word	0x20000330
   12e98:	0001b965 	.word	0x0001b965
   12e9c:	200002c0 	.word	0x200002c0
   12ea0:	20000298 	.word	0x20000298

00012ea4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   12ea4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
   12ea6:	4904      	ldr	r1, [pc, #16]	; (12eb8 <bt_pub_key_is_debug+0x14>)
   12ea8:	2240      	movs	r2, #64	; 0x40
   12eaa:	f008 f8a5 	bl	1aff8 <memcmp>
}
   12eae:	fab0 f080 	clz	r0, r0
   12eb2:	0940      	lsrs	r0, r0, #5
   12eb4:	bd08      	pop	{r3, pc}
   12eb6:	bf00      	nop
   12eb8:	0001f785 	.word	0x0001f785

00012ebc <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   12ebc:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   12ebe:	4c20      	ldr	r4, [pc, #128]	; (12f40 <bt_pub_key_gen+0x84>)
   12ec0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   12ec4:	f003 0306 	and.w	r3, r3, #6
   12ec8:	2b06      	cmp	r3, #6
   12eca:	d134      	bne.n	12f36 <bt_pub_key_gen+0x7a>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	new_cb->_next = pub_key_cb;
   12ecc:	4e1d      	ldr	r6, [pc, #116]	; (12f44 <bt_pub_key_gen+0x88>)
   12ece:	6833      	ldr	r3, [r6, #0]
   12ed0:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
   12ed2:	6030      	str	r0, [r6, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12ed4:	3498      	adds	r4, #152	; 0x98
   12ed6:	f3bf 8f5b 	dmb	ish
   12eda:	e854 5f00 	ldrex	r5, [r4]
   12ede:	f045 0310 	orr.w	r3, r5, #16
   12ee2:	e844 3200 	strex	r2, r3, [r4]
   12ee6:	2a00      	cmp	r2, #0
   12ee8:	d1f7      	bne.n	12eda <bt_pub_key_gen+0x1e>
   12eea:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   12eee:	f015 0510 	ands.w	r5, r5, #16
   12ef2:	d123      	bne.n	12f3c <bt_pub_key_gen+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12ef4:	f3bf 8f5b 	dmb	ish
   12ef8:	e854 3f00 	ldrex	r3, [r4]
   12efc:	f023 0308 	bic.w	r3, r3, #8
   12f00:	e844 3200 	strex	r2, r3, [r4]
   12f04:	2a00      	cmp	r2, #0
   12f06:	d1f7      	bne.n	12ef8 <bt_pub_key_gen+0x3c>
   12f08:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   12f0c:	462a      	mov	r2, r5
   12f0e:	4629      	mov	r1, r5
   12f10:	f242 0025 	movw	r0, #8229	; 0x2025
   12f14:	f7ff f8cc 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   12f18:	b160      	cbz	r0, 12f34 <bt_pub_key_gen+0x78>
   12f1a:	f3bf 8f5b 	dmb	ish
   12f1e:	e854 3f00 	ldrex	r3, [r4]
   12f22:	f023 0310 	bic.w	r3, r3, #16
   12f26:	e844 3200 	strex	r2, r3, [r4]
   12f2a:	2a00      	cmp	r2, #0
   12f2c:	d1f7      	bne.n	12f1e <bt_pub_key_gen+0x62>
   12f2e:	f3bf 8f5b 	dmb	ish
		BT_ERR("Sending LE P256 Public Key command failed");
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
   12f32:	6035      	str	r5, [r6, #0]
		return err;
	}

	return 0;
}
   12f34:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12f36:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12f3a:	e7fb      	b.n	12f34 <bt_pub_key_gen+0x78>
		return 0;
   12f3c:	2000      	movs	r0, #0
   12f3e:	e7f9      	b.n	12f34 <bt_pub_key_gen+0x78>
   12f40:	20000298 	.word	0x20000298
   12f44:	20001ee4 	.word	0x20001ee4

00012f48 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f48:	4b05      	ldr	r3, [pc, #20]	; (12f60 <bt_pub_key_get+0x18>)
   12f4a:	f3bf 8f5b 	dmb	ish
   12f4e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   12f50:	4804      	ldr	r0, [pc, #16]	; (12f64 <bt_pub_key_get+0x1c>)
   12f52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   12f56:	f013 0f08 	tst.w	r3, #8
}
   12f5a:	bf08      	it	eq
   12f5c:	2000      	moveq	r0, #0
   12f5e:	4770      	bx	lr
   12f60:	20000330 	.word	0x20000330
   12f64:	2000218a 	.word	0x2000218a

00012f68 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   12f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   12f6a:	4c1f      	ldr	r4, [pc, #124]	; (12fe8 <bt_dh_key_gen+0x80>)
   12f6c:	6823      	ldr	r3, [r4, #0]
   12f6e:	428b      	cmp	r3, r1
{
   12f70:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   12f72:	d032      	beq.n	12fda <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   12f74:	b113      	cbz	r3, 12f7c <bt_dh_key_gen+0x14>
		return -EBUSY;
   12f76:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   12f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f7c:	4b1b      	ldr	r3, [pc, #108]	; (12fec <bt_dh_key_gen+0x84>)
   12f7e:	f3bf 8f5b 	dmb	ish
   12f82:	681a      	ldr	r2, [r3, #0]
   12f84:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   12f88:	f3c2 1700 	ubfx	r7, r2, #4, #1
   12f8c:	06d2      	lsls	r2, r2, #27
   12f8e:	d4f2      	bmi.n	12f76 <bt_dh_key_gen+0xe>
   12f90:	f3bf 8f5b 	dmb	ish
   12f94:	681b      	ldr	r3, [r3, #0]
   12f96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   12f9a:	071b      	lsls	r3, r3, #28
   12f9c:	d520      	bpl.n	12fe0 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   12f9e:	6021      	str	r1, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   12fa0:	f242 0026 	movw	r0, #8230	; 0x2026
   12fa4:	2140      	movs	r1, #64	; 0x40
   12fa6:	f7ff f829 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   12faa:	4605      	mov	r5, r0
   12fac:	b190      	cbz	r0, 12fd4 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   12fae:	2140      	movs	r1, #64	; 0x40
   12fb0:	3008      	adds	r0, #8
   12fb2:	f00a fda5 	bl	1db00 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   12fb6:	2240      	movs	r2, #64	; 0x40
   12fb8:	4631      	mov	r1, r6
   12fba:	f008 f82d 	bl	1b018 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   12fbe:	463a      	mov	r2, r7
   12fc0:	4629      	mov	r1, r5
   12fc2:	f242 0026 	movw	r0, #8230	; 0x2026
   12fc6:	f7ff f873 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   12fca:	2800      	cmp	r0, #0
   12fcc:	d0d5      	beq.n	12f7a <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   12fce:	2300      	movs	r3, #0
   12fd0:	6023      	str	r3, [r4, #0]
		return err;
   12fd2:	e7d2      	b.n	12f7a <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   12fd4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12fd8:	e7f9      	b.n	12fce <bt_dh_key_gen+0x66>
		return -EALREADY;
   12fda:	f06f 0044 	mvn.w	r0, #68	; 0x44
   12fde:	e7cc      	b.n	12f7a <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   12fe0:	f06f 0030 	mvn.w	r0, #48	; 0x30
   12fe4:	e7c9      	b.n	12f7a <bt_dh_key_gen+0x12>
   12fe6:	bf00      	nop
   12fe8:	20001ee0 	.word	0x20001ee0
   12fec:	20000330 	.word	0x20000330

00012ff0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   12ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12ff2:	4c18      	ldr	r4, [pc, #96]	; (13054 <bt_hci_evt_le_pkey_complete+0x64>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   12ff4:	6886      	ldr	r6, [r0, #8]
   12ff6:	f3bf 8f5b 	dmb	ish
   12ffa:	e854 3f00 	ldrex	r3, [r4]
   12ffe:	f023 0310 	bic.w	r3, r3, #16
   13002:	e844 3200 	strex	r2, r3, [r4]
   13006:	2a00      	cmp	r2, #0
   13008:	d1f7      	bne.n	12ffa <bt_hci_evt_le_pkey_complete+0xa>
   1300a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1300e:	7833      	ldrb	r3, [r6, #0]
   13010:	b983      	cbnz	r3, 13034 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
   13012:	4811      	ldr	r0, [pc, #68]	; (13058 <bt_hci_evt_le_pkey_complete+0x68>)
   13014:	2240      	movs	r2, #64	; 0x40
   13016:	1c71      	adds	r1, r6, #1
   13018:	f007 fffe 	bl	1b018 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1301c:	f3bf 8f5b 	dmb	ish
   13020:	e854 3f00 	ldrex	r3, [r4]
   13024:	f043 0308 	orr.w	r3, r3, #8
   13028:	e844 3200 	strex	r2, r3, [r4]
   1302c:	2a00      	cmp	r2, #0
   1302e:	d1f7      	bne.n	13020 <bt_hci_evt_le_pkey_complete+0x30>
   13030:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
   13034:	4d09      	ldr	r5, [pc, #36]	; (1305c <bt_hci_evt_le_pkey_complete+0x6c>)
		cb->func(evt->status ? NULL : pub_key);
   13036:	4f08      	ldr	r7, [pc, #32]	; (13058 <bt_hci_evt_le_pkey_complete+0x68>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   13038:	682c      	ldr	r4, [r5, #0]
   1303a:	b90c      	cbnz	r4, 13040 <bt_hci_evt_le_pkey_complete+0x50>
	}

	pub_key_cb = NULL;
   1303c:	602c      	str	r4, [r5, #0]
}
   1303e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
   13040:	7832      	ldrb	r2, [r6, #0]
   13042:	6823      	ldr	r3, [r4, #0]
   13044:	2a00      	cmp	r2, #0
   13046:	bf0c      	ite	eq
   13048:	4638      	moveq	r0, r7
   1304a:	2000      	movne	r0, #0
   1304c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   1304e:	6864      	ldr	r4, [r4, #4]
   13050:	e7f3      	b.n	1303a <bt_hci_evt_le_pkey_complete+0x4a>
   13052:	bf00      	nop
   13054:	20000330 	.word	0x20000330
   13058:	2000218a 	.word	0x2000218a
   1305c:	20001ee4 	.word	0x20001ee4

00013060 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   13060:	4905      	ldr	r1, [pc, #20]	; (13078 <bt_hci_evt_le_dhkey_complete+0x18>)
   13062:	680b      	ldr	r3, [r1, #0]
   13064:	b133      	cbz	r3, 13074 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   13066:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   13068:	2000      	movs	r0, #0
   1306a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1306c:	7811      	ldrb	r1, [r2, #0]
   1306e:	b901      	cbnz	r1, 13072 <bt_hci_evt_le_dhkey_complete+0x12>
   13070:	1c50      	adds	r0, r2, #1
   13072:	4718      	bx	r3
	}
}
   13074:	4770      	bx	lr
   13076:	bf00      	nop
   13078:	20001ee0 	.word	0x20001ee0

0001307c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   1307c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1307e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   13082:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   13084:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   13086:	4801      	ldr	r0, [pc, #4]	; (1308c <tx_free+0x10>)
   13088:	f00a bf8a 	b.w	1dfa0 <k_queue_append>
   1308c:	20000860 	.word	0x20000860

00013090 <notify_connected>:
{
   13090:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   13092:	4b09      	ldr	r3, [pc, #36]	; (130b8 <notify_connected+0x28>)
   13094:	681d      	ldr	r5, [r3, #0]
{
   13096:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   13098:	7b21      	ldrb	r1, [r4, #12]
   1309a:	b92d      	cbnz	r5, 130a8 <notify_connected+0x18>
	if (!conn->err) {
   1309c:	b951      	cbnz	r1, 130b4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1309e:	4620      	mov	r0, r4
}
   130a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   130a4:	f001 bf2a 	b.w	14efc <bt_gatt_connected>
		if (cb->connected) {
   130a8:	682b      	ldr	r3, [r5, #0]
   130aa:	b10b      	cbz	r3, 130b0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   130ac:	4620      	mov	r0, r4
   130ae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   130b0:	69ad      	ldr	r5, [r5, #24]
   130b2:	e7f1      	b.n	13098 <notify_connected+0x8>
}
   130b4:	bd38      	pop	{r3, r4, r5, pc}
   130b6:	bf00      	nop
   130b8:	20001eec 	.word	0x20001eec

000130bc <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   130bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   130c0:	694d      	ldr	r5, [r1, #20]
{
   130c2:	4604      	mov	r4, r0
   130c4:	460e      	mov	r6, r1
   130c6:	4690      	mov	r8, r2
   130c8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   130ca:	f04f 33ff 	mov.w	r3, #4294967295
   130ce:	483f      	ldr	r0, [pc, #252]	; (131cc <send_frag+0x110>)
   130d0:	f04f 32ff 	mov.w	r2, #4294967295
   130d4:	f005 fbe0 	bl	18898 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   130d8:	7b63      	ldrb	r3, [r4, #13]
   130da:	2b07      	cmp	r3, #7
   130dc:	d146      	bne.n	1316c <send_frag+0xb0>
	__asm__ volatile(
   130de:	f04f 0340 	mov.w	r3, #64	; 0x40
   130e2:	f3ef 8211 	mrs	r2, BASEPRI
   130e6:	f383 8811 	msr	BASEPRI, r3
   130ea:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   130ee:	2d00      	cmp	r5, #0
   130f0:	d04e      	beq.n	13190 <send_frag+0xd4>
	parent->next = child;
   130f2:	2300      	movs	r3, #0
   130f4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   130f6:	69a3      	ldr	r3, [r4, #24]
   130f8:	2b00      	cmp	r3, #0
   130fa:	d146      	bne.n	1318a <send_frag+0xce>
	list->head = node;
   130fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   13100:	f382 8811 	msr	BASEPRI, r2
   13104:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   13108:	2104      	movs	r1, #4
   1310a:	f106 0008 	add.w	r0, r6, #8
   1310e:	f00a fd0e 	bl	1db2e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13112:	8823      	ldrh	r3, [r4, #0]
   13114:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   13118:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1311c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1311e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13122:	3b04      	subs	r3, #4
   13124:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13126:	2302      	movs	r3, #2
   13128:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1312a:	4630      	mov	r0, r6
   1312c:	f008 fc2a 	bl	1b984 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   13130:	2800      	cmp	r0, #0
   13132:	d049      	beq.n	131c8 <send_frag+0x10c>
	__asm__ volatile(
   13134:	f04f 0340 	mov.w	r3, #64	; 0x40
   13138:	f3ef 8111 	mrs	r1, BASEPRI
   1313c:	f383 8811 	msr	BASEPRI, r3
   13140:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   13144:	2d00      	cmp	r5, #0
   13146:	d039      	beq.n	131bc <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13148:	6963      	ldr	r3, [r4, #20]
   1314a:	2200      	movs	r2, #0
   1314c:	b153      	cbz	r3, 13164 <send_frag+0xa8>
   1314e:	429d      	cmp	r5, r3
   13150:	d131      	bne.n	131b6 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   13152:	682b      	ldr	r3, [r5, #0]
   13154:	bb4a      	cbnz	r2, 131aa <send_frag+0xee>
   13156:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   13158:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1315a:	4295      	cmp	r5, r2
   1315c:	d100      	bne.n	13160 <send_frag+0xa4>
	list->tail = node;
   1315e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   13160:	2300      	movs	r3, #0
   13162:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   13164:	f381 8811 	msr	BASEPRI, r1
   13168:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1316c:	4817      	ldr	r0, [pc, #92]	; (131cc <send_frag+0x110>)
   1316e:	f005 fb6d 	bl	1884c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   13172:	b115      	cbz	r5, 1317a <send_frag+0xbe>
		tx_free(tx);
   13174:	4628      	mov	r0, r5
   13176:	f7ff ff81 	bl	1307c <tx_free>
	}

	if (always_consume) {
   1317a:	b11f      	cbz	r7, 13184 <send_frag+0xc8>
		net_buf_unref(buf);
   1317c:	4630      	mov	r0, r6
   1317e:	f003 f8e3 	bl	16348 <net_buf_unref>
	}
	return false;
   13182:	2700      	movs	r7, #0
}
   13184:	4638      	mov	r0, r7
   13186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1318a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1318c:	61a5      	str	r5, [r4, #24]
}
   1318e:	e7b7      	b.n	13100 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   13190:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   13192:	b133      	cbz	r3, 131a2 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   13194:	f103 090c 	add.w	r9, r3, #12
   13198:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1319a:	3301      	adds	r3, #1
   1319c:	f8c9 3000 	str.w	r3, [r9]
   131a0:	e7ae      	b.n	13100 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   131a2:	69e3      	ldr	r3, [r4, #28]
   131a4:	f104 091c 	add.w	r9, r4, #28
   131a8:	e7f7      	b.n	1319a <send_frag+0xde>
	parent->next = child;
   131aa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   131ac:	69a3      	ldr	r3, [r4, #24]
   131ae:	429d      	cmp	r5, r3
	list->tail = node;
   131b0:	bf08      	it	eq
   131b2:	61a2      	streq	r2, [r4, #24]
}
   131b4:	e7d4      	b.n	13160 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   131b6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   131b8:	681b      	ldr	r3, [r3, #0]
   131ba:	e7c7      	b.n	1314c <send_frag+0x90>
			(*pending_no_cb)--;
   131bc:	f8d9 3000 	ldr.w	r3, [r9]
   131c0:	3b01      	subs	r3, #1
   131c2:	f8c9 3000 	str.w	r3, [r9]
   131c6:	e7cd      	b.n	13164 <send_frag+0xa8>
	return true;
   131c8:	2701      	movs	r7, #1
   131ca:	e7db      	b.n	13184 <send_frag+0xc8>
   131cc:	20000368 	.word	0x20000368

000131d0 <bt_conn_get_pkts>:
}
   131d0:	4800      	ldr	r0, [pc, #0]	; (131d4 <bt_conn_get_pkts+0x4>)
   131d2:	4770      	bx	lr
   131d4:	20000368 	.word	0x20000368

000131d8 <notify_le_param_updated>:
{
   131d8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   131da:	f3bf 8f5b 	dmb	ish
   131de:	6842      	ldr	r2, [r0, #4]
   131e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   131e4:	0592      	lsls	r2, r2, #22
{
   131e6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   131e8:	f100 0304 	add.w	r3, r0, #4
   131ec:	d519      	bpl.n	13222 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   131ee:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   131f2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   131f6:	4291      	cmp	r1, r2
   131f8:	d813      	bhi.n	13222 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   131fa:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   131fe:	4291      	cmp	r1, r2
   13200:	d30f      	bcc.n	13222 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   13202:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   13206:	4291      	cmp	r1, r2
   13208:	d10b      	bne.n	13222 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1320a:	f3bf 8f5b 	dmb	ish
   1320e:	e853 2f00 	ldrex	r2, [r3]
   13212:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   13216:	e843 2100 	strex	r1, r2, [r3]
   1321a:	2900      	cmp	r1, #0
   1321c:	d1f7      	bne.n	1320e <notify_le_param_updated+0x36>
   1321e:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   13222:	4b08      	ldr	r3, [pc, #32]	; (13244 <notify_le_param_updated+0x6c>)
   13224:	681d      	ldr	r5, [r3, #0]
   13226:	b905      	cbnz	r5, 1322a <notify_le_param_updated+0x52>
}
   13228:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1322a:	68ee      	ldr	r6, [r5, #12]
   1322c:	b13e      	cbz	r6, 1323e <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   1322e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   13232:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   13236:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1323a:	4620      	mov	r0, r4
   1323c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1323e:	69ad      	ldr	r5, [r5, #24]
   13240:	e7f1      	b.n	13226 <notify_le_param_updated+0x4e>
   13242:	bf00      	nop
   13244:	20001eec 	.word	0x20001eec

00013248 <le_param_req>:
{
   13248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1324a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   1324c:	4608      	mov	r0, r1
{
   1324e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   13250:	f008 fb68 	bl	1b924 <bt_le_conn_params_valid>
   13254:	4604      	mov	r4, r0
   13256:	b910      	cbnz	r0, 1325e <le_param_req+0x16>
		return false;
   13258:	2400      	movs	r4, #0
}
   1325a:	4620      	mov	r0, r4
   1325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1325e:	4b09      	ldr	r3, [pc, #36]	; (13284 <le_param_req+0x3c>)
   13260:	681e      	ldr	r6, [r3, #0]
   13262:	2e00      	cmp	r6, #0
   13264:	d0f9      	beq.n	1325a <le_param_req+0x12>
		if (!cb->le_param_req) {
   13266:	68b3      	ldr	r3, [r6, #8]
   13268:	b90b      	cbnz	r3, 1326e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1326a:	69b6      	ldr	r6, [r6, #24]
   1326c:	e7f9      	b.n	13262 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1326e:	4629      	mov	r1, r5
   13270:	4638      	mov	r0, r7
   13272:	4798      	blx	r3
   13274:	2800      	cmp	r0, #0
   13276:	d0ef      	beq.n	13258 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   13278:	4628      	mov	r0, r5
   1327a:	f008 fb53 	bl	1b924 <bt_le_conn_params_valid>
   1327e:	2800      	cmp	r0, #0
   13280:	d1f3      	bne.n	1326a <le_param_req+0x22>
   13282:	e7e9      	b.n	13258 <le_param_req+0x10>
   13284:	20001eec 	.word	0x20001eec

00013288 <bt_conn_identity_resolved>:
{
   13288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1328a:	78c3      	ldrb	r3, [r0, #3]
{
   1328c:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1328e:	b93b      	cbnz	r3, 132a0 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   13290:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   13294:	4b08      	ldr	r3, [pc, #32]	; (132b8 <bt_conn_identity_resolved+0x30>)
   13296:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   13298:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1329c:	b91d      	cbnz	r5, 132a6 <bt_conn_identity_resolved+0x1e>
}
   1329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   132a0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   132a4:	e7f6      	b.n	13294 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   132a6:	692b      	ldr	r3, [r5, #16]
   132a8:	b11b      	cbz	r3, 132b2 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   132aa:	463a      	mov	r2, r7
   132ac:	4631      	mov	r1, r6
   132ae:	4620      	mov	r0, r4
   132b0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   132b2:	69ad      	ldr	r5, [r5, #24]
   132b4:	e7f2      	b.n	1329c <bt_conn_identity_resolved+0x14>
   132b6:	bf00      	nop
   132b8:	20001eec 	.word	0x20001eec

000132bc <bt_conn_security_changed>:
{
   132bc:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   132be:	7a43      	ldrb	r3, [r0, #9]
   132c0:	7283      	strb	r3, [r0, #10]
{
   132c2:	4604      	mov	r4, r0
   132c4:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   132c6:	f008 fdac 	bl	1be22 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   132ca:	4b06      	ldr	r3, [pc, #24]	; (132e4 <bt_conn_security_changed+0x28>)
   132cc:	681d      	ldr	r5, [r3, #0]
   132ce:	b905      	cbnz	r5, 132d2 <bt_conn_security_changed+0x16>
}
   132d0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   132d2:	696b      	ldr	r3, [r5, #20]
   132d4:	b11b      	cbz	r3, 132de <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   132d6:	7a61      	ldrb	r1, [r4, #9]
   132d8:	4632      	mov	r2, r6
   132da:	4620      	mov	r0, r4
   132dc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   132de:	69ad      	ldr	r5, [r5, #24]
   132e0:	e7f5      	b.n	132ce <bt_conn_security_changed+0x12>
   132e2:	bf00      	nop
   132e4:	20001eec 	.word	0x20001eec

000132e8 <bt_conn_cb_register>:
	cb->_next = callback_list;
   132e8:	4b02      	ldr	r3, [pc, #8]	; (132f4 <bt_conn_cb_register+0xc>)
   132ea:	681a      	ldr	r2, [r3, #0]
   132ec:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   132ee:	6018      	str	r0, [r3, #0]
}
   132f0:	4770      	bx	lr
   132f2:	bf00      	nop
   132f4:	20001eec 	.word	0x20001eec

000132f8 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   132f8:	b570      	push	{r4, r5, r6, lr}
   132fa:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   132fc:	f100 0638 	add.w	r6, r0, #56	; 0x38
   13300:	2200      	movs	r2, #0
   13302:	2300      	movs	r3, #0
   13304:	4630      	mov	r0, r6
   13306:	f00a fbaa 	bl	1da5e <net_buf_get>
   1330a:	4605      	mov	r5, r0
   1330c:	b958      	cbnz	r0, 13326 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
   1330e:	4620      	mov	r0, r4
   13310:	f008 fbff 	bl	1bb12 <bt_conn_reset_rx_state>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   13314:	f104 0158 	add.w	r1, r4, #88	; 0x58
   13318:	4807      	ldr	r0, [pc, #28]	; (13338 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   1331a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1331e:	2200      	movs	r2, #0
   13320:	2300      	movs	r3, #0
   13322:	f005 bd09 	b.w	18d38 <k_work_reschedule_for_queue>
		if (tx_data(buf)->tx) {
   13326:	6968      	ldr	r0, [r5, #20]
   13328:	b108      	cbz	r0, 1332e <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
   1332a:	f7ff fea7 	bl	1307c <tx_free>
		net_buf_unref(buf);
   1332e:	4628      	mov	r0, r5
   13330:	f003 f80a 	bl	16348 <net_buf_unref>
   13334:	e7e4      	b.n	13300 <conn_cleanup+0x8>
   13336:	bf00      	nop
   13338:	20001d58 	.word	0x20001d58

0001333c <bt_conn_send_cb>:
{
   1333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13340:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   13342:	7b43      	ldrb	r3, [r0, #13]
   13344:	2b07      	cmp	r3, #7
{
   13346:	4606      	mov	r6, r0
   13348:	460d      	mov	r5, r1
   1334a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1334c:	d005      	beq.n	1335a <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
   1334e:	4608      	mov	r0, r1
   13350:	f002 fffa 	bl	16348 <net_buf_unref>
			return -ENOTCONN;
   13354:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13358:	e015      	b.n	13386 <bt_conn_send_cb+0x4a>
	if (cb) {
   1335a:	b362      	cbz	r2, 133b6 <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
   1335c:	f005 f9fc 	bl	18758 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   13360:	4b16      	ldr	r3, [pc, #88]	; (133bc <bt_conn_send_cb+0x80>)
   13362:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   13364:	4816      	ldr	r0, [pc, #88]	; (133c0 <bt_conn_send_cb+0x84>)
   13366:	bf07      	ittee	eq
   13368:	2200      	moveq	r2, #0
   1336a:	2300      	moveq	r3, #0
   1336c:	f04f 32ff 	movne.w	r2, #4294967295
   13370:	f04f 33ff 	movne.w	r3, #4294967295
   13374:	f004 ff00 	bl	18178 <z_impl_k_queue_get>
   13378:	4604      	mov	r4, r0
		if (!tx) {
   1337a:	b930      	cbnz	r0, 1338a <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
   1337c:	4628      	mov	r0, r5
   1337e:	f002 ffe3 	bl	16348 <net_buf_unref>
			return -ENOBUFS;
   13382:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1338a:	7b73      	ldrb	r3, [r6, #13]
   1338c:	2b07      	cmp	r3, #7
   1338e:	d006      	beq.n	1339e <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
   13390:	4628      	mov	r0, r5
   13392:	f002 ffd9 	bl	16348 <net_buf_unref>
			tx_free(tx);
   13396:	4620      	mov	r0, r4
   13398:	f7ff fe70 	bl	1307c <tx_free>
   1339c:	e7da      	b.n	13354 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
   1339e:	2300      	movs	r3, #0
		tx->user_data = user_data;
   133a0:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   133a4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   133a6:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   133a8:	f106 0038 	add.w	r0, r6, #56	; 0x38
   133ac:	4629      	mov	r1, r5
   133ae:	f00a fb74 	bl	1da9a <net_buf_put>
	return 0;
   133b2:	2000      	movs	r0, #0
   133b4:	e7e7      	b.n	13386 <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
   133b6:	614a      	str	r2, [r1, #20]
   133b8:	e7f6      	b.n	133a8 <bt_conn_send_cb+0x6c>
   133ba:	bf00      	nop
   133bc:	20001d58 	.word	0x20001d58
   133c0:	20000860 	.word	0x20000860

000133c4 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   133c4:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   133c6:	4b1b      	ldr	r3, [pc, #108]	; (13434 <bt_conn_prepare_events+0x70>)
   133c8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   133ca:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   133cc:	609a      	str	r2, [r3, #8]
{
   133ce:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   133d0:	f00b f9d6 	bl	1e780 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   133d4:	f3bf 8f5b 	dmb	ish
   133d8:	4b17      	ldr	r3, [pc, #92]	; (13438 <bt_conn_prepare_events+0x74>)
   133da:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   133de:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   133e2:	f104 0014 	add.w	r0, r4, #20
   133e6:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   133e8:	b90a      	cbnz	r2, 133ee <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   133ea:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   133ec:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   133ee:	7b5a      	ldrb	r2, [r3, #13]
   133f0:	b99a      	cbnz	r2, 1341a <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133f2:	f3bf 8f5b 	dmb	ish
   133f6:	1d1a      	adds	r2, r3, #4
   133f8:	e852 5f00 	ldrex	r5, [r2]
   133fc:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   13400:	e842 ce00 	strex	lr, ip, [r2]
   13404:	f1be 0f00 	cmp.w	lr, #0
   13408:	d1f6      	bne.n	133f8 <bt_conn_prepare_events+0x34>
   1340a:	f3bf 8f5b 	dmb	ish
   1340e:	066a      	lsls	r2, r5, #25
   13410:	d503      	bpl.n	1341a <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   13412:	4618      	mov	r0, r3
   13414:	f7ff ff70 	bl	132f8 <conn_cleanup>
   13418:	e7e7      	b.n	133ea <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   1341a:	7b4b      	ldrb	r3, [r1, #13]
   1341c:	2b07      	cmp	r3, #7
   1341e:	d1e4      	bne.n	133ea <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   13420:	4b06      	ldr	r3, [pc, #24]	; (1343c <bt_conn_prepare_events+0x78>)
   13422:	2200      	movs	r2, #0
   13424:	2104      	movs	r1, #4
   13426:	f00b f9ab 	bl	1e780 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1342a:	2301      	movs	r3, #1
   1342c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   13430:	2002      	movs	r0, #2
	return ev_count;
   13432:	e7db      	b.n	133ec <bt_conn_prepare_events+0x28>
   13434:	20000594 	.word	0x20000594
   13438:	20001770 	.word	0x20001770
   1343c:	200017a8 	.word	0x200017a8

00013440 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   13440:	b570      	push	{r4, r5, r6, lr}
   13442:	4606      	mov	r6, r0
   13444:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   13446:	480f      	ldr	r0, [pc, #60]	; (13484 <bt_conn_add_le+0x44>)
   13448:	2101      	movs	r1, #1
   1344a:	f008 fb07 	bl	1ba5c <bt_conn_new>
	if (!conn) {
   1344e:	4604      	mov	r4, r0
   13450:	b1b0      	cbz	r0, 13480 <bt_conn_add_le+0x40>
	k_work_init_delayable(&work->work, handler);
   13452:	490d      	ldr	r1, [pc, #52]	; (13488 <bt_conn_add_le+0x48>)
   13454:	3058      	adds	r0, #88	; 0x58
   13456:	f00a ffb8 	bl	1e3ca <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1345a:	490c      	ldr	r1, [pc, #48]	; (1348c <bt_conn_add_le+0x4c>)
   1345c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13460:	f00a ff8d 	bl	1e37e <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   13464:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
   13466:	2207      	movs	r2, #7
   13468:	4629      	mov	r1, r5
   1346a:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1346e:	f007 fdd3 	bl	1b018 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   13472:	2301      	movs	r3, #1
   13474:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   13476:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   13478:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1347a:	4b05      	ldr	r3, [pc, #20]	; (13490 <bt_conn_add_le+0x50>)
   1347c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   13480:	4620      	mov	r0, r4
   13482:	bd70      	pop	{r4, r5, r6, pc}
   13484:	20001770 	.word	0x20001770
   13488:	000136f5 	.word	0x000136f5
   1348c:	0001ba57 	.word	0x0001ba57
   13490:	00280018 	.word	0x00280018

00013494 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   13494:	4602      	mov	r2, r0
   13496:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   13498:	2101      	movs	r1, #1
   1349a:	4803      	ldr	r0, [pc, #12]	; (134a8 <bt_conn_lookup_handle+0x14>)
   1349c:	f008 fbdb 	bl	1bc56 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   134a0:	2800      	cmp	r0, #0
   134a2:	bf38      	it	cc
   134a4:	2000      	movcc	r0, #0
   134a6:	bd08      	pop	{r3, pc}
   134a8:	20001770 	.word	0x20001770

000134ac <bt_conn_set_state>:
{
   134ac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   134ae:	7b45      	ldrb	r5, [r0, #13]
   134b0:	428d      	cmp	r5, r1
{
   134b2:	4604      	mov	r4, r0
	if (conn->state == state) {
   134b4:	f000 80a5 	beq.w	13602 <bt_conn_set_state+0x156>
	conn->state = state;
   134b8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   134ba:	b90d      	cbnz	r5, 134c0 <bt_conn_set_state+0x14>
		bt_conn_ref(conn);
   134bc:	f008 fb99 	bl	1bbf2 <bt_conn_ref>
	switch (conn->state) {
   134c0:	7b63      	ldrb	r3, [r4, #13]
   134c2:	2b01      	cmp	r3, #1
   134c4:	d116      	bne.n	134f4 <bt_conn_set_state+0x48>
	z_impl_k_sem_give(sem);
   134c6:	4d4f      	ldr	r5, [pc, #316]	; (13604 <bt_conn_set_state+0x158>)
		tx->pending_no_cb = 0U;
   134c8:	2600      	movs	r6, #0
	__asm__ volatile(
   134ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   134ce:	f3ef 8211 	mrs	r2, BASEPRI
   134d2:	f383 8811 	msr	BASEPRI, r3
   134d6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   134da:	69e3      	ldr	r3, [r4, #28]
   134dc:	2b00      	cmp	r3, #0
   134de:	d071      	beq.n	135c4 <bt_conn_set_state+0x118>
			conn->pending_no_cb--;
   134e0:	3b01      	subs	r3, #1
   134e2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   134e4:	f382 8811 	msr	BASEPRI, r2
   134e8:	f3bf 8f6f 	isb	sy
   134ec:	4628      	mov	r0, r5
   134ee:	f005 f9ad 	bl	1884c <z_impl_k_sem_give>
}
   134f2:	e7ea      	b.n	134ca <bt_conn_set_state+0x1e>
	switch (conn->state) {
   134f4:	2b07      	cmp	r3, #7
   134f6:	d00a      	beq.n	1350e <bt_conn_set_state+0x62>
   134f8:	2b00      	cmp	r3, #0
   134fa:	f040 8082 	bne.w	13602 <bt_conn_set_state+0x156>
		if (conn->type == BT_CONN_TYPE_SCO) {
   134fe:	78a3      	ldrb	r3, [r4, #2]
   13500:	2b04      	cmp	r3, #4
   13502:	d125      	bne.n	13550 <bt_conn_set_state+0xa4>
			bt_conn_unref(conn);
   13504:	4620      	mov	r0, r4
}
   13506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1350a:	f008 bb8d 	b.w	1bc28 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1350e:	78a3      	ldrb	r3, [r4, #2]
   13510:	2b04      	cmp	r3, #4
   13512:	d076      	beq.n	13602 <bt_conn_set_state+0x156>
	z_impl_k_queue_init(queue);
   13514:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13518:	f00a fd36 	bl	1df88 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1351c:	2100      	movs	r1, #0
   1351e:	483a      	ldr	r0, [pc, #232]	; (13608 <bt_conn_set_state+0x15c>)
   13520:	f005 fea4 	bl	1926c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   13524:	2300      	movs	r3, #0
	list->tail = NULL;
   13526:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
   1352a:	4620      	mov	r0, r4
   1352c:	f000 fa3c 	bl	139a8 <bt_l2cap_connected>
		notify_connected(conn);
   13530:	4620      	mov	r0, r4
   13532:	f7ff fdad 	bl	13090 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13536:	78e3      	ldrb	r3, [r4, #3]
   13538:	2b01      	cmp	r3, #1
   1353a:	d162      	bne.n	13602 <bt_conn_set_state+0x156>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1353c:	f104 0158 	add.w	r1, r4, #88	; 0x58
   13540:	4832      	ldr	r0, [pc, #200]	; (1360c <bt_conn_set_state+0x160>)
}
   13542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13546:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1354a:	2300      	movs	r3, #0
   1354c:	f005 bbf4 	b.w	18d38 <k_work_reschedule_for_queue>
		switch (old_state) {
   13550:	3d01      	subs	r5, #1
   13552:	2d05      	cmp	r5, #5
   13554:	d855      	bhi.n	13602 <bt_conn_set_state+0x156>
   13556:	a301      	add	r3, pc, #4	; (adr r3, 1355c <bt_conn_set_state+0xb0>)
   13558:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1355c:	00013575 	.word	0x00013575
   13560:	000135b7 	.word	0x000135b7
   13564:	00013505 	.word	0x00013505
   13568:	00013505 	.word	0x00013505
   1356c:	000135b7 	.word	0x000135b7
   13570:	000135b7 	.word	0x000135b7
			tx_notify(conn);
   13574:	4620      	mov	r0, r4
   13576:	f008 fa4b 	bl	1ba10 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1357a:	78a3      	ldrb	r3, [r4, #2]
   1357c:	2b01      	cmp	r3, #1
   1357e:	d107      	bne.n	13590 <bt_conn_set_state+0xe4>
	bool pending = k_work_delayable_is_pending(&work->work);
   13580:	f104 0558 	add.w	r5, r4, #88	; 0x58
	return k_work_delayable_busy_get(dwork) != 0;
   13584:	4628      	mov	r0, r5
   13586:	f00a ff2c 	bl	1e3e2 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
   1358a:	4628      	mov	r0, r5
   1358c:	f00a ff3d 	bl	1e40a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13590:	f3bf 8f5b 	dmb	ish
   13594:	3404      	adds	r4, #4
   13596:	e854 3f00 	ldrex	r3, [r4]
   1359a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1359e:	e844 3200 	strex	r2, r3, [r4]
   135a2:	2a00      	cmp	r2, #0
   135a4:	d1f7      	bne.n	13596 <bt_conn_set_state+0xea>
   135a6:	f3bf 8f5b 	dmb	ish
   135aa:	4817      	ldr	r0, [pc, #92]	; (13608 <bt_conn_set_state+0x15c>)
}
   135ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   135b0:	2100      	movs	r1, #0
   135b2:	f005 be5b 	b.w	1926c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   135b6:	7b23      	ldrb	r3, [r4, #12]
   135b8:	2b00      	cmp	r3, #0
   135ba:	d0a3      	beq.n	13504 <bt_conn_set_state+0x58>
				notify_connected(conn);
   135bc:	4620      	mov	r0, r4
   135be:	f7ff fd67 	bl	13090 <notify_connected>
   135c2:	e79f      	b.n	13504 <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
   135c4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   135c6:	b128      	cbz	r0, 135d4 <bt_conn_set_state+0x128>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   135c8:	69a1      	ldr	r1, [r4, #24]
   135ca:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   135cc:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   135ce:	4288      	cmp	r0, r1
	list->tail = node;
   135d0:	bf08      	it	eq
   135d2:	61a3      	streq	r3, [r4, #24]
   135d4:	f382 8811 	msr	BASEPRI, r2
   135d8:	f3bf 8f6f 	isb	sy
		if (!node) {
   135dc:	b188      	cbz	r0, 13602 <bt_conn_set_state+0x156>
	__asm__ volatile(
   135de:	f04f 0240 	mov.w	r2, #64	; 0x40
   135e2:	f3ef 8311 	mrs	r3, BASEPRI
   135e6:	f382 8811 	msr	BASEPRI, r2
   135ea:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   135ee:	68c2      	ldr	r2, [r0, #12]
   135f0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   135f2:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   135f4:	f383 8811 	msr	BASEPRI, r3
   135f8:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   135fc:	f7ff fd3e 	bl	1307c <tx_free>
   13600:	e774      	b.n	134ec <bt_conn_set_state+0x40>
}
   13602:	bd70      	pop	{r4, r5, r6, pc}
   13604:	20000368 	.word	0x20000368
   13608:	20000594 	.word	0x20000594
   1360c:	20001d58 	.word	0x20001d58

00013610 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   13610:	b570      	push	{r4, r5, r6, lr}
   13612:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13614:	480c      	ldr	r0, [pc, #48]	; (13648 <bt_conn_lookup_addr_le+0x38>)
{
   13616:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13618:	f008 faeb 	bl	1bbf2 <bt_conn_ref>

		if (!conn) {
   1361c:	4604      	mov	r4, r0
   1361e:	b128      	cbz	r0, 1362c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13620:	7883      	ldrb	r3, [r0, #2]
   13622:	2b01      	cmp	r3, #1
   13624:	d004      	beq.n	13630 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   13626:	f008 faff 	bl	1bc28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1362a:	2400      	movs	r4, #0
}
   1362c:	4620      	mov	r0, r4
   1362e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   13630:	4629      	mov	r1, r5
   13632:	4632      	mov	r2, r6
   13634:	f008 fabd 	bl	1bbb2 <bt_conn_is_peer_addr_le>
   13638:	4605      	mov	r5, r0
   1363a:	2800      	cmp	r0, #0
   1363c:	d1f6      	bne.n	1362c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1363e:	4620      	mov	r0, r4
   13640:	f008 faf2 	bl	1bc28 <bt_conn_unref>
	return NULL;
   13644:	462c      	mov	r4, r5
			continue;
   13646:	e7f1      	b.n	1362c <bt_conn_lookup_addr_le+0x1c>
   13648:	20001770 	.word	0x20001770

0001364c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1364e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13650:	480f      	ldr	r0, [pc, #60]	; (13690 <bt_conn_lookup_state_le+0x44>)
{
   13652:	460e      	mov	r6, r1
   13654:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13656:	f008 facc 	bl	1bbf2 <bt_conn_ref>

		if (!conn) {
   1365a:	4604      	mov	r4, r0
   1365c:	b1b0      	cbz	r0, 1368c <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1365e:	7883      	ldrb	r3, [r0, #2]
   13660:	2b01      	cmp	r3, #1
   13662:	d003      	beq.n	1366c <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
   13664:	f008 fac5 	bl	1bbf2 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
   13668:	2400      	movs	r4, #0
			continue;
   1366a:	e00f      	b.n	1368c <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1366c:	b146      	cbz	r6, 13680 <bt_conn_lookup_state_le+0x34>
   1366e:	4632      	mov	r2, r6
   13670:	4629      	mov	r1, r5
   13672:	f008 fa9e 	bl	1bbb2 <bt_conn_is_peer_addr_le>
   13676:	b918      	cbnz	r0, 13680 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
   13678:	4620      	mov	r0, r4
   1367a:	f008 fad5 	bl	1bc28 <bt_conn_unref>
   1367e:	e7f3      	b.n	13668 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
   13680:	7b63      	ldrb	r3, [r4, #13]
   13682:	42bb      	cmp	r3, r7
   13684:	d1f8      	bne.n	13678 <bt_conn_lookup_state_le+0x2c>
   13686:	7a23      	ldrb	r3, [r4, #8]
   13688:	42ab      	cmp	r3, r5
   1368a:	d1f5      	bne.n	13678 <bt_conn_lookup_state_le+0x2c>
}
   1368c:	4620      	mov	r0, r4
   1368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13690:	20001770 	.word	0x20001770

00013694 <send_conn_le_param_update>:
{
   13694:	b538      	push	{r3, r4, r5, lr}
   13696:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   13698:	4608      	mov	r0, r1
{
   1369a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1369c:	f008 f942 	bl	1b924 <bt_le_conn_params_valid>
   136a0:	b318      	cbz	r0, 136ea <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   136a2:	4b13      	ldr	r3, [pc, #76]	; (136f0 <send_conn_le_param_update+0x5c>)
   136a4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   136a8:	0799      	lsls	r1, r3, #30
   136aa:	d407      	bmi.n	136bc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   136ac:	78e3      	ldrb	r3, [r4, #3]
   136ae:	b183      	cbz	r3, 136d2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   136b0:	4629      	mov	r1, r5
   136b2:	4620      	mov	r0, r4
}
   136b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   136b8:	f000 b9d2 	b.w	13a60 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   136bc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   136c0:	079a      	lsls	r2, r3, #30
   136c2:	d5f3      	bpl.n	136ac <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   136c4:	f3bf 8f5b 	dmb	ish
   136c8:	6863      	ldr	r3, [r4, #4]
   136ca:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   136ce:	055b      	lsls	r3, r3, #21
   136d0:	d4ec      	bmi.n	136ac <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   136d2:	4629      	mov	r1, r5
   136d4:	4620      	mov	r0, r4
   136d6:	f008 fb0b 	bl	1bcf0 <bt_conn_le_conn_update>
		if (rc == 0) {
   136da:	b928      	cbnz	r0, 136e8 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   136dc:	88ab      	ldrh	r3, [r5, #4]
   136de:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   136e2:	88eb      	ldrh	r3, [r5, #6]
   136e4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   136e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   136ea:	f06f 0015 	mvn.w	r0, #21
   136ee:	e7fb      	b.n	136e8 <send_conn_le_param_update+0x54>
   136f0:	20000298 	.word	0x20000298

000136f4 <deferred_work>:
{
   136f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   136f6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   136fa:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   136fc:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   13700:	b993      	cbnz	r3, 13728 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   13702:	4630      	mov	r0, r6
   13704:	f008 fb77 	bl	1bdf6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   13708:	4b1f      	ldr	r3, [pc, #124]	; (13788 <deferred_work+0x94>)
   1370a:	681d      	ldr	r5, [r3, #0]
   1370c:	b925      	cbnz	r5, 13718 <deferred_work+0x24>
		bt_conn_unref(conn);
   1370e:	4630      	mov	r0, r6
   13710:	f008 fa8a 	bl	1bc28 <bt_conn_unref>
}
   13714:	b002      	add	sp, #8
   13716:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   13718:	686b      	ldr	r3, [r5, #4]
   1371a:	b11b      	cbz	r3, 13724 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   1371c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   13720:	4630      	mov	r0, r6
   13722:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13724:	69ad      	ldr	r5, [r5, #24]
   13726:	e7f1      	b.n	1370c <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   13728:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1372c:	2b01      	cmp	r3, #1
   1372e:	d1f1      	bne.n	13714 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13730:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   13734:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   13738:	e855 3f00 	ldrex	r3, [r5]
   1373c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   13740:	e845 2100 	strex	r1, r2, [r5]
   13744:	2900      	cmp	r1, #0
   13746:	d1f7      	bne.n	13738 <deferred_work+0x44>
   13748:	f3bf 8f5b 	dmb	ish
   1374c:	059b      	lsls	r3, r3, #22
   1374e:	d514      	bpl.n	1377a <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   13750:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   13752:	9300      	str	r3, [sp, #0]
   13754:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13756:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   13758:	4669      	mov	r1, sp
   1375a:	4630      	mov	r0, r6
   1375c:	f7ff ff9a 	bl	13694 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13760:	f3bf 8f5b 	dmb	ish
   13764:	e855 3f00 	ldrex	r3, [r5]
   13768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1376c:	e845 3200 	strex	r2, r3, [r5]
   13770:	2a00      	cmp	r2, #0
   13772:	d1f7      	bne.n	13764 <deferred_work+0x70>
   13774:	f3bf 8f5b 	dmb	ish
   13778:	e7cc      	b.n	13714 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   1377a:	4a04      	ldr	r2, [pc, #16]	; (1378c <deferred_work+0x98>)
   1377c:	6810      	ldr	r0, [r2, #0]
   1377e:	6851      	ldr	r1, [r2, #4]
   13780:	466b      	mov	r3, sp
   13782:	c303      	stmia	r3!, {r0, r1}
   13784:	e7e8      	b.n	13758 <deferred_work+0x64>
   13786:	bf00      	nop
   13788:	20001eec 	.word	0x20001eec
   1378c:	0001ea6c 	.word	0x0001ea6c

00013790 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   13790:	b538      	push	{r3, r4, r5, lr}
   13792:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   13794:	4906      	ldr	r1, [pc, #24]	; (137b0 <bt_conn_create_pdu_timeout+0x20>)
   13796:	2800      	cmp	r0, #0
   13798:	bf08      	it	eq
   1379a:	4608      	moveq	r0, r1
   1379c:	f00a f95a 	bl	1da54 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   137a0:	4604      	mov	r4, r0
   137a2:	b118      	cbz	r0, 137ac <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   137a4:	1d29      	adds	r1, r5, #4
   137a6:	3008      	adds	r0, #8
   137a8:	f00a f973 	bl	1da92 <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   137ac:	4620      	mov	r0, r4
   137ae:	bd38      	pop	{r3, r4, r5, pc}
   137b0:	20000878 	.word	0x20000878

000137b4 <bt_conn_create_frag_timeout>:
{
   137b4:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   137b6:	4801      	ldr	r0, [pc, #4]	; (137bc <bt_conn_create_frag_timeout+0x8>)
   137b8:	f7ff bfea 	b.w	13790 <bt_conn_create_pdu_timeout>
   137bc:	200008c8 	.word	0x200008c8

000137c0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137c4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   137c6:	f04f 33ff 	mov.w	r3, #4294967295
   137ca:	f04f 32ff 	mov.w	r2, #4294967295
   137ce:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   137d0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   137d2:	f7ff ffef 	bl	137b4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   137d6:	7833      	ldrb	r3, [r6, #0]
   137d8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   137da:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   137dc:	f04f 0600 	mov.w	r6, #0
   137e0:	d005      	beq.n	137ee <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   137e2:	f002 fdb1 	bl	16348 <net_buf_unref>
		return NULL;
   137e6:	4635      	mov	r5, r6
}
   137e8:	4628      	mov	r0, r5
   137ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   137ee:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   137f0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   137f4:	4e0c      	ldr	r6, [pc, #48]	; (13828 <create_frag.isra.0+0x68>)
   137f6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   137f8:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   137fc:	f00a f9bb 	bl	1db76 <net_buf_simple_tailroom>
   13800:	4580      	cmp	r8, r0
   13802:	d20c      	bcs.n	1381e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   13804:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13808:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1380c:	4632      	mov	r2, r6
   1380e:	4638      	mov	r0, r7
   13810:	f00a f97c 	bl	1db0c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   13814:	4631      	mov	r1, r6
   13816:	4620      	mov	r0, r4
   13818:	f00a f991 	bl	1db3e <net_buf_simple_pull>
   1381c:	e7e4      	b.n	137e8 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1381e:	4638      	mov	r0, r7
   13820:	f00a f9a9 	bl	1db76 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   13824:	b286      	uxth	r6, r0
   13826:	e7ef      	b.n	13808 <create_frag.isra.0+0x48>
   13828:	20000298 	.word	0x20000298

0001382c <bt_conn_process_tx>:
{
   1382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1382e:	7b43      	ldrb	r3, [r0, #13]
{
   13830:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   13832:	b993      	cbnz	r3, 1385a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13834:	f3bf 8f5b 	dmb	ish
   13838:	1d03      	adds	r3, r0, #4
   1383a:	e853 2f00 	ldrex	r2, [r3]
   1383e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   13842:	e843 1400 	strex	r4, r1, [r3]
   13846:	2c00      	cmp	r4, #0
   13848:	d1f7      	bne.n	1383a <bt_conn_process_tx+0xe>
   1384a:	f3bf 8f5b 	dmb	ish
   1384e:	0653      	lsls	r3, r2, #25
   13850:	d503      	bpl.n	1385a <bt_conn_process_tx+0x2e>
}
   13852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   13856:	f7ff bd4f 	b.w	132f8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1385a:	2200      	movs	r2, #0
   1385c:	2300      	movs	r3, #0
   1385e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   13862:	f00a f8fc 	bl	1da5e <net_buf_get>
	BT_ASSERT(buf);
   13866:	4604      	mov	r4, r0
   13868:	b960      	cbnz	r0, 13884 <bt_conn_process_tx+0x58>
   1386a:	4a20      	ldr	r2, [pc, #128]	; (138ec <bt_conn_process_tx+0xc0>)
   1386c:	4920      	ldr	r1, [pc, #128]	; (138f0 <bt_conn_process_tx+0xc4>)
   1386e:	4821      	ldr	r0, [pc, #132]	; (138f4 <bt_conn_process_tx+0xc8>)
   13870:	f240 535f 	movw	r3, #1375	; 0x55f
   13874:	f005 fe2b 	bl	194ce <printk>
   13878:	4040      	eors	r0, r0
   1387a:	f380 8811 	msr	BASEPRI, r0
   1387e:	f04f 0003 	mov.w	r0, #3
   13882:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   13884:	4f1c      	ldr	r7, [pc, #112]	; (138f8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   13886:	89a1      	ldrh	r1, [r4, #12]
   13888:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   1388c:	4291      	cmp	r1, r2
   1388e:	d807      	bhi.n	138a0 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   13890:	2300      	movs	r3, #0
   13892:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   13894:	4621      	mov	r1, r4
   13896:	4628      	mov	r0, r5
   13898:	f7ff fc10 	bl	130bc <send_frag>
	if (!send_buf(conn, buf)) {
   1389c:	b140      	cbz	r0, 138b0 <bt_conn_process_tx+0x84>
}
   1389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   138a0:	f105 060d 	add.w	r6, r5, #13
   138a4:	4621      	mov	r1, r4
   138a6:	4630      	mov	r0, r6
   138a8:	f7ff ff8a 	bl	137c0 <create_frag.isra.0>
	if (!frag) {
   138ac:	4601      	mov	r1, r0
   138ae:	b920      	cbnz	r0, 138ba <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   138b0:	4620      	mov	r0, r4
}
   138b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   138b6:	f002 bd47 	b.w	16348 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   138ba:	2301      	movs	r3, #1
   138bc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   138be:	4628      	mov	r0, r5
   138c0:	f7ff fbfc 	bl	130bc <send_frag>
   138c4:	2800      	cmp	r0, #0
   138c6:	d0f3      	beq.n	138b0 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   138c8:	89a2      	ldrh	r2, [r4, #12]
   138ca:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   138ce:	429a      	cmp	r2, r3
   138d0:	d802      	bhi.n	138d8 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   138d2:	2300      	movs	r3, #0
   138d4:	2203      	movs	r2, #3
   138d6:	e7dd      	b.n	13894 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   138d8:	4621      	mov	r1, r4
   138da:	4630      	mov	r0, r6
   138dc:	f7ff ff70 	bl	137c0 <create_frag.isra.0>
		if (!frag) {
   138e0:	4601      	mov	r1, r0
   138e2:	2800      	cmp	r0, #0
   138e4:	d0e4      	beq.n	138b0 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   138e6:	2301      	movs	r3, #1
   138e8:	461a      	mov	r2, r3
   138ea:	e7e8      	b.n	138be <bt_conn_process_tx+0x92>
   138ec:	0001f7c5 	.word	0x0001f7c5
   138f0:	0001f703 	.word	0x0001f703
   138f4:	0001f6af 	.word	0x0001f6af
   138f8:	20000298 	.word	0x20000298

000138fc <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   138fc:	4b0c      	ldr	r3, [pc, #48]	; (13930 <bt_conn_auth_cb_register+0x34>)
   138fe:	b908      	cbnz	r0, 13904 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   13900:	6018      	str	r0, [r3, #0]
		return 0;
   13902:	4770      	bx	lr
	}

	if (bt_auth) {
   13904:	681a      	ldr	r2, [r3, #0]
   13906:	b962      	cbnz	r2, 13922 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   13908:	6902      	ldr	r2, [r0, #16]
   1390a:	b93a      	cbnz	r2, 1391c <bt_conn_auth_cb_register+0x20>
   1390c:	6802      	ldr	r2, [r0, #0]
   1390e:	b95a      	cbnz	r2, 13928 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   13910:	6842      	ldr	r2, [r0, #4]
   13912:	b94a      	cbnz	r2, 13928 <bt_conn_auth_cb_register+0x2c>
   13914:	6882      	ldr	r2, [r0, #8]
   13916:	b93a      	cbnz	r2, 13928 <bt_conn_auth_cb_register+0x2c>
   13918:	6942      	ldr	r2, [r0, #20]
   1391a:	b92a      	cbnz	r2, 13928 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1391c:	6018      	str	r0, [r3, #0]
	return 0;
   1391e:	2000      	movs	r0, #0
   13920:	4770      	bx	lr
		return -EALREADY;
   13922:	f06f 0044 	mvn.w	r0, #68	; 0x44
   13926:	4770      	bx	lr
		return -EINVAL;
   13928:	f06f 0015 	mvn.w	r0, #21
}
   1392c:	4770      	bx	lr
   1392e:	bf00      	nop
   13930:	20001ee8 	.word	0x20001ee8

00013934 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   13934:	4b03      	ldr	r3, [pc, #12]	; (13944 <bt_conn_index+0x10>)
   13936:	1ac0      	subs	r0, r0, r3
   13938:	4b03      	ldr	r3, [pc, #12]	; (13948 <bt_conn_index+0x14>)
   1393a:	1180      	asrs	r0, r0, #6
   1393c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   1393e:	b2c0      	uxtb	r0, r0
   13940:	4770      	bx	lr
   13942:	bf00      	nop
   13944:	20001770 	.word	0x20001770
   13948:	aaaaaaab 	.word	0xaaaaaaab

0001394c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1394c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1394e:	490b      	ldr	r1, [pc, #44]	; (1397c <bt_conn_init+0x30>)
   13950:	480b      	ldr	r0, [pc, #44]	; (13980 <bt_conn_init+0x34>)
   13952:	f00a fb25 	bl	1dfa0 <k_queue_append>
   13956:	490b      	ldr	r1, [pc, #44]	; (13984 <bt_conn_init+0x38>)
   13958:	4809      	ldr	r0, [pc, #36]	; (13980 <bt_conn_init+0x34>)
   1395a:	f00a fb21 	bl	1dfa0 <k_queue_append>
   1395e:	490a      	ldr	r1, [pc, #40]	; (13988 <bt_conn_init+0x3c>)
   13960:	4807      	ldr	r0, [pc, #28]	; (13980 <bt_conn_init+0x34>)
   13962:	f00a fb1d 	bl	1dfa0 <k_queue_append>
	}

	bt_att_init();
   13966:	f008 fec7 	bl	1c6f8 <bt_att_init>

	err = bt_smp_init();
   1396a:	f002 fb85 	bl	16078 <bt_smp_init>
	if (err) {
   1396e:	4604      	mov	r4, r0
   13970:	b908      	cbnz	r0, 13976 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   13972:	f008 faf4 	bl	1bf5e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   13976:	4620      	mov	r0, r4
   13978:	bd10      	pop	{r4, pc}
   1397a:	bf00      	nop
   1397c:	20001ef0 	.word	0x20001ef0
   13980:	20000860 	.word	0x20000860
   13984:	20001f00 	.word	0x20001f00
   13988:	20001f10 	.word	0x20001f10

0001398c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1398c:	4b04      	ldr	r3, [pc, #16]	; (139a0 <l2cap_accept+0x14>)
   1398e:	6818      	ldr	r0, [r3, #0]
   13990:	b918      	cbnz	r0, 1399a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   13992:	4a04      	ldr	r2, [pc, #16]	; (139a4 <l2cap_accept+0x18>)
   13994:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   13996:	600b      	str	r3, [r1, #0]

		return 0;
   13998:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   1399a:	f06f 000b 	mvn.w	r0, #11
}
   1399e:	4770      	bx	lr
   139a0:	20001830 	.word	0x20001830
   139a4:	0001eef8 	.word	0x0001eef8

000139a8 <bt_l2cap_connected>:
{
   139a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   139ac:	4e29      	ldr	r6, [pc, #164]	; (13a54 <bt_l2cap_connected+0xac>)
   139ae:	4f2a      	ldr	r7, [pc, #168]	; (13a58 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&work->work, handler);
   139b0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 13a5c <bt_l2cap_connected+0xb4>
{
   139b4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   139b6:	42be      	cmp	r6, r7
   139b8:	d302      	bcc.n	139c0 <bt_l2cap_connected+0x18>
}
   139ba:	b003      	add	sp, #12
   139bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   139c0:	6873      	ldr	r3, [r6, #4]
   139c2:	a901      	add	r1, sp, #4
   139c4:	4620      	mov	r0, r4
   139c6:	4798      	blx	r3
   139c8:	2800      	cmp	r0, #0
   139ca:	db3d      	blt.n	13a48 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   139cc:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   139ce:	8833      	ldrh	r3, [r6, #0]
   139d0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   139d4:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
   139d8:	4641      	mov	r1, r8
   139da:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   139de:	f8d6 9008 	ldr.w	r9, [r6, #8]
   139e2:	f00a fcf2 	bl	1e3ca <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   139e6:	f3bf 8f5b 	dmb	ish
   139ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
   139ee:	2200      	movs	r2, #0
   139f0:	e853 1f00 	ldrex	r1, [r3]
   139f4:	e843 2000 	strex	r0, r2, [r3]
   139f8:	2800      	cmp	r0, #0
   139fa:	d1f9      	bne.n	139f0 <bt_l2cap_connected+0x48>
   139fc:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   13a00:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   13a02:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   13a04:	f105 0308 	add.w	r3, r5, #8
   13a08:	bb02      	cbnz	r2, 13a4c <bt_l2cap_connected+0xa4>
	list->head = node;
   13a0a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   13a0e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   13a10:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   13a12:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   13a14:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   13a18:	681b      	ldr	r3, [r3, #0]
   13a1a:	b103      	cbz	r3, 13a1e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   13a1c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a1e:	9b01      	ldr	r3, [sp, #4]
   13a20:	f3bf 8f5b 	dmb	ish
   13a24:	3340      	adds	r3, #64	; 0x40
   13a26:	e853 2f00 	ldrex	r2, [r3]
   13a2a:	f042 0201 	orr.w	r2, r2, #1
   13a2e:	e843 2100 	strex	r1, r2, [r3]
   13a32:	2900      	cmp	r1, #0
   13a34:	d1f7      	bne.n	13a26 <bt_l2cap_connected+0x7e>
   13a36:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   13a3a:	9801      	ldr	r0, [sp, #4]
   13a3c:	6843      	ldr	r3, [r0, #4]
   13a3e:	699b      	ldr	r3, [r3, #24]
   13a40:	b113      	cbz	r3, 13a48 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   13a42:	f100 0140 	add.w	r1, r0, #64	; 0x40
   13a46:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   13a48:	360c      	adds	r6, #12
   13a4a:	e7b4      	b.n	139b6 <bt_l2cap_connected+0xe>
	parent->next = child;
   13a4c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13a4e:	6563      	str	r3, [r4, #84]	; 0x54
}
   13a50:	e7dd      	b.n	13a0e <bt_l2cap_connected+0x66>
   13a52:	bf00      	nop
   13a54:	0001e994 	.word	0x0001e994
   13a58:	0001e9b8 	.word	0x0001e9b8
   13a5c:	0001bddf 	.word	0x0001bddf

00013a60 <bt_l2cap_update_conn_param>:
{
   13a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   13a62:	4b15      	ldr	r3, [pc, #84]	; (13ab8 <bt_l2cap_update_conn_param+0x58>)
   13a64:	781a      	ldrb	r2, [r3, #0]
   13a66:	3201      	adds	r2, #1
	if (!ident) {
   13a68:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   13a6c:	bf08      	it	eq
   13a6e:	2201      	moveq	r2, #1
   13a70:	701a      	strb	r2, [r3, #0]
{
   13a72:	4605      	mov	r5, r0
   13a74:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   13a76:	2208      	movs	r2, #8
   13a78:	7819      	ldrb	r1, [r3, #0]
   13a7a:	2012      	movs	r0, #18
   13a7c:	f008 f961 	bl	1bd42 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   13a80:	4606      	mov	r6, r0
   13a82:	b1b0      	cbz	r0, 13ab2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   13a84:	2108      	movs	r1, #8
   13a86:	4408      	add	r0, r1
   13a88:	f00a f83a 	bl	1db00 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   13a8c:	8822      	ldrh	r2, [r4, #0]
   13a8e:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   13a90:	8862      	ldrh	r2, [r4, #2]
   13a92:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   13a94:	88a2      	ldrh	r2, [r4, #4]
   13a96:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   13a98:	88e2      	ldrh	r2, [r4, #6]
   13a9a:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   13a9c:	2400      	movs	r4, #0
   13a9e:	9400      	str	r4, [sp, #0]
   13aa0:	4623      	mov	r3, r4
   13aa2:	4632      	mov	r2, r6
   13aa4:	2105      	movs	r1, #5
   13aa6:	4628      	mov	r0, r5
   13aa8:	f008 f9d8 	bl	1be5c <bt_l2cap_send_cb>
	return 0;
   13aac:	4620      	mov	r0, r4
}
   13aae:	b002      	add	sp, #8
   13ab0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   13ab2:	f06f 000b 	mvn.w	r0, #11
   13ab6:	e7fa      	b.n	13aae <bt_l2cap_update_conn_param+0x4e>
   13ab8:	200021ca 	.word	0x200021ca

00013abc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   13abc:	4b02      	ldr	r3, [pc, #8]	; (13ac8 <att_cfm_sent+0xc>)
   13abe:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
   13ac2:	f008 ba7a 	b.w	1bfba <att_sent>
   13ac6:	bf00      	nop
   13ac8:	0001c3bb 	.word	0x0001c3bb

00013acc <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   13acc:	4b02      	ldr	r3, [pc, #8]	; (13ad8 <att_rsp_sent+0xc>)
   13ace:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
   13ad2:	f008 ba72 	b.w	1bfba <att_sent>
   13ad6:	bf00      	nop
   13ad8:	0001c3d7 	.word	0x0001c3d7

00013adc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   13adc:	4b02      	ldr	r3, [pc, #8]	; (13ae8 <att_req_sent+0xc>)
   13ade:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
   13ae2:	f008 ba6a 	b.w	1bfba <att_sent>
   13ae6:	bf00      	nop
   13ae8:	00013d39 	.word	0x00013d39

00013aec <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   13aec:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   13aee:	3808      	subs	r0, #8
   13af0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   13af2:	a901      	add	r1, sp, #4
   13af4:	4802      	ldr	r0, [pc, #8]	; (13b00 <bt_att_released+0x14>)
   13af6:	f004 fb15 	bl	18124 <k_mem_slab_free>
}
   13afa:	b003      	add	sp, #12
   13afc:	f85d fb04 	ldr.w	pc, [sp], #4
   13b00:	200007b0 	.word	0x200007b0

00013b04 <read_group_cb>:
{
   13b04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13b08:	4606      	mov	r6, r0
   13b0a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13b0c:	f04f 0800 	mov.w	r8, #0
   13b10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13b14:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   13b16:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13b18:	f88d 8008 	strb.w	r8, [sp, #8]
   13b1c:	a902      	add	r1, sp, #8
{
   13b1e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13b20:	f8ad 300a 	strh.w	r3, [sp, #10]
   13b24:	f007 fb5b 	bl	1b1de <bt_uuid_cmp>
   13b28:	b1a0      	cbz	r0, 13b54 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   13b2a:	f642 0301 	movw	r3, #10241	; 0x2801
   13b2e:	6830      	ldr	r0, [r6, #0]
   13b30:	f88d 800c 	strb.w	r8, [sp, #12]
   13b34:	a903      	add	r1, sp, #12
   13b36:	f8ad 300e 	strh.w	r3, [sp, #14]
   13b3a:	f007 fb50 	bl	1b1de <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13b3e:	b148      	cbz	r0, 13b54 <read_group_cb+0x50>
		if (data->group &&
   13b40:	6923      	ldr	r3, [r4, #16]
   13b42:	b11b      	cbz	r3, 13b4c <read_group_cb+0x48>
   13b44:	885a      	ldrh	r2, [r3, #2]
   13b46:	42aa      	cmp	r2, r5
   13b48:	d200      	bcs.n	13b4c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   13b4a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   13b4c:	2001      	movs	r0, #1
}
   13b4e:	b004      	add	sp, #16
   13b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13b54:	6861      	ldr	r1, [r4, #4]
   13b56:	6830      	ldr	r0, [r6, #0]
   13b58:	f007 fb41 	bl	1b1de <bt_uuid_cmp>
   13b5c:	b110      	cbz	r0, 13b64 <read_group_cb+0x60>
		data->group = NULL;
   13b5e:	2300      	movs	r3, #0
   13b60:	6123      	str	r3, [r4, #16]
   13b62:	e7f3      	b.n	13b4c <read_group_cb+0x48>
	if (data->rsp->len &&
   13b64:	68e3      	ldr	r3, [r4, #12]
   13b66:	68a0      	ldr	r0, [r4, #8]
   13b68:	781a      	ldrb	r2, [r3, #0]
   13b6a:	b13a      	cbz	r2, 13b7c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   13b6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   13b70:	8981      	ldrh	r1, [r0, #12]
   13b72:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   13b74:	4293      	cmp	r3, r2
   13b76:	da01      	bge.n	13b7c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   13b78:	2000      	movs	r0, #0
   13b7a:	e7e8      	b.n	13b4e <read_group_cb+0x4a>
   13b7c:	2104      	movs	r1, #4
   13b7e:	3008      	adds	r0, #8
   13b80:	f009 ffbe 	bl	1db00 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   13b84:	4b09      	ldr	r3, [pc, #36]	; (13bac <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   13b86:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   13b88:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   13b8a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   13b8c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   13b8e:	4631      	mov	r1, r6
   13b90:	9300      	str	r3, [sp, #0]
   13b92:	9401      	str	r4, [sp, #4]
   13b94:	2300      	movs	r3, #0
   13b96:	4638      	mov	r0, r7
   13b98:	f008 fa5f 	bl	1c05a <att_chan_read>
	if (read < 0) {
   13b9c:	2800      	cmp	r0, #0
   13b9e:	dbeb      	blt.n	13b78 <read_group_cb+0x74>
	if (!data->group) {
   13ba0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   13ba2:	3800      	subs	r0, #0
   13ba4:	bf18      	it	ne
   13ba6:	2001      	movne	r0, #1
   13ba8:	e7d1      	b.n	13b4e <read_group_cb+0x4a>
   13baa:	bf00      	nop
   13bac:	0001c331 	.word	0x0001c331

00013bb0 <read_type_cb>:
{
   13bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   13bb4:	f8d2 8000 	ldr.w	r8, [r2]
{
   13bb8:	4606      	mov	r6, r0
   13bba:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13bbc:	6800      	ldr	r0, [r0, #0]
   13bbe:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   13bc0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   13bc4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13bc6:	f007 fb0a 	bl	1b1de <bt_uuid_cmp>
   13bca:	4607      	mov	r7, r0
   13bcc:	2800      	cmp	r0, #0
   13bce:	d13e      	bne.n	13c4e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   13bd0:	4628      	mov	r0, r5
   13bd2:	2215      	movs	r2, #21
   13bd4:	4631      	mov	r1, r6
   13bd6:	f009 f97a 	bl	1cece <bt_gatt_check_perm>
   13bda:	4605      	mov	r5, r0
   13bdc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   13bde:	b148      	cbz	r0, 13bf4 <read_type_cb+0x44>
		if (data->rsp->len) {
   13be0:	68e3      	ldr	r3, [r4, #12]
   13be2:	781b      	ldrb	r3, [r3, #0]
   13be4:	b923      	cbnz	r3, 13bf0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   13be6:	2500      	movs	r5, #0
}
   13be8:	4628      	mov	r0, r5
   13bea:	b003      	add	sp, #12
   13bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   13bf0:	7527      	strb	r7, [r4, #20]
   13bf2:	e7f8      	b.n	13be6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   13bf4:	68a0      	ldr	r0, [r4, #8]
   13bf6:	f009 ff61 	bl	1dabc <net_buf_frag_last>
   13bfa:	2102      	movs	r1, #2
   13bfc:	3008      	adds	r0, #8
   13bfe:	f009 ff7f 	bl	1db00 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13c02:	4b14      	ldr	r3, [pc, #80]	; (13c54 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   13c04:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13c06:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   13c08:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13c0c:	4631      	mov	r1, r6
   13c0e:	9300      	str	r3, [sp, #0]
   13c10:	9401      	str	r4, [sp, #4]
   13c12:	462b      	mov	r3, r5
   13c14:	4640      	mov	r0, r8
   13c16:	f008 fa20 	bl	1c05a <att_chan_read>
	if (read < 0) {
   13c1a:	2800      	cmp	r0, #0
   13c1c:	da07      	bge.n	13c2e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   13c1e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   13c22:	bf26      	itte	cs
   13c24:	4240      	negcs	r0, r0
   13c26:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   13c28:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   13c2a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   13c2c:	e7dc      	b.n	13be8 <read_type_cb+0x38>
	if (!data->item) {
   13c2e:	6923      	ldr	r3, [r4, #16]
   13c30:	2b00      	cmp	r3, #0
   13c32:	d0d8      	beq.n	13be6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   13c34:	68a0      	ldr	r0, [r4, #8]
   13c36:	f008 f9b8 	bl	1bfaa <net_buf_frags_len>
   13c3a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13c3e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   13c40:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13c42:	7818      	ldrb	r0, [r3, #0]
   13c44:	4285      	cmp	r5, r0
   13c46:	bf94      	ite	ls
   13c48:	2500      	movls	r5, #0
   13c4a:	2501      	movhi	r5, #1
   13c4c:	e7cc      	b.n	13be8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   13c4e:	2501      	movs	r5, #1
   13c50:	e7ca      	b.n	13be8 <read_type_cb+0x38>
   13c52:	bf00      	nop
   13c54:	0001bfc7 	.word	0x0001bfc7

00013c58 <chan_send>:
{
   13c58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   13c5c:	688b      	ldr	r3, [r1, #8]
   13c5e:	781b      	ldrb	r3, [r3, #0]
   13c60:	2bd2      	cmp	r3, #210	; 0xd2
{
   13c62:	4606      	mov	r6, r0
   13c64:	460c      	mov	r4, r1
   13c66:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   13c68:	d10c      	bne.n	13c84 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   13c6a:	6803      	ldr	r3, [r0, #0]
   13c6c:	6818      	ldr	r0, [r3, #0]
   13c6e:	f009 fce8 	bl	1d642 <bt_smp_sign>
		if (err) {
   13c72:	4605      	mov	r5, r0
   13c74:	b130      	cbz	r0, 13c84 <chan_send+0x2c>
			net_buf_unref(buf);
   13c76:	4620      	mov	r0, r4
   13c78:	f002 fb66 	bl	16348 <net_buf_unref>
}
   13c7c:	4628      	mov	r0, r5
   13c7e:	b003      	add	sp, #12
   13c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   13c84:	f104 0008 	add.w	r0, r4, #8
   13c88:	f009 ff71 	bl	1db6e <net_buf_simple_headroom>
	state->len = buf->len;
   13c8c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   13c90:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   13c92:	b957      	cbnz	r7, 13caa <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   13c94:	68a3      	ldr	r3, [r4, #8]
   13c96:	7818      	ldrb	r0, [r3, #0]
   13c98:	f008 f9a7 	bl	1bfea <att_op_get_type>
   13c9c:	3801      	subs	r0, #1
   13c9e:	b2c0      	uxtb	r0, r0
   13ca0:	2804      	cmp	r0, #4
   13ca2:	bf9c      	itt	ls
   13ca4:	4b13      	ldrls	r3, [pc, #76]	; (13cf4 <chan_send+0x9c>)
   13ca6:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   13caa:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   13cac:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   13cb0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   13cb2:	4b11      	ldr	r3, [pc, #68]	; (13cf8 <chan_send+0xa0>)
   13cb4:	429f      	cmp	r7, r3
   13cb6:	d018      	beq.n	13cea <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   13cb8:	4b10      	ldr	r3, [pc, #64]	; (13cfc <chan_send+0xa4>)
   13cba:	429f      	cmp	r7, r3
   13cbc:	d017      	beq.n	13cee <chan_send+0x96>
		return att_sent;
   13cbe:	4910      	ldr	r1, [pc, #64]	; (13d00 <chan_send+0xa8>)
   13cc0:	4b10      	ldr	r3, [pc, #64]	; (13d04 <chan_send+0xac>)
   13cc2:	4a11      	ldr	r2, [pc, #68]	; (13d08 <chan_send+0xb0>)
   13cc4:	428f      	cmp	r7, r1
   13cc6:	bf18      	it	ne
   13cc8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   13cca:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   13ccc:	9600      	str	r6, [sp, #0]
   13cce:	4622      	mov	r2, r4
   13cd0:	2104      	movs	r1, #4
   13cd2:	f008 f8c3 	bl	1be5c <bt_l2cap_send_cb>
	if (err) {
   13cd6:	4605      	mov	r5, r0
   13cd8:	2800      	cmp	r0, #0
   13cda:	d0cf      	beq.n	13c7c <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   13cdc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13cde:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   13ce2:	fa10 f088 	uxtah	r0, r0, r8
   13ce6:	60a0      	str	r0, [r4, #8]
}
   13ce8:	e7c8      	b.n	13c7c <chan_send+0x24>
		return att_rsp_sent;
   13cea:	4b08      	ldr	r3, [pc, #32]	; (13d0c <chan_send+0xb4>)
   13cec:	e7ed      	b.n	13cca <chan_send+0x72>
		return att_cfm_sent;
   13cee:	4b08      	ldr	r3, [pc, #32]	; (13d10 <chan_send+0xb8>)
   13cf0:	e7eb      	b.n	13cca <chan_send+0x72>
   13cf2:	bf00      	nop
   13cf4:	0001ef18 	.word	0x0001ef18
   13cf8:	0001c3d7 	.word	0x0001c3d7
   13cfc:	0001c3bb 	.word	0x0001c3bb
   13d00:	00013d39 	.word	0x00013d39
   13d04:	00013add 	.word	0x00013add
   13d08:	0001bfbb 	.word	0x0001bfbb
   13d0c:	00013acd 	.word	0x00013acd
   13d10:	00013abd 	.word	0x00013abd

00013d14 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   13d14:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   13d16:	4a07      	ldr	r2, [pc, #28]	; (13d34 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   13d18:	4604      	mov	r4, r0
   13d1a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   13d1c:	f7ff ff9c 	bl	13c58 <chan_send>
	if (err) {
   13d20:	b130      	cbz	r0, 13d30 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   13d22:	4629      	mov	r1, r5
   13d24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   13d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   13d2c:	f009 beb5 	b.w	1da9a <net_buf_put>
}
   13d30:	bd38      	pop	{r3, r4, r5, pc}
   13d32:	bf00      	nop
   13d34:	0001c3d7 	.word	0x0001c3d7

00013d38 <chan_req_sent>:
	if (chan->req) {
   13d38:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   13d3c:	b13b      	cbz	r3, 13d4e <chan_req_sent+0x16>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   13d3e:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
   13d42:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13d46:	4802      	ldr	r0, [pc, #8]	; (13d50 <chan_req_sent+0x18>)
   13d48:	2300      	movs	r3, #0
   13d4a:	f004 bff5 	b.w	18d38 <k_work_reschedule_for_queue>
}
   13d4e:	4770      	bx	lr
   13d50:	20001d58 	.word	0x20001d58

00013d54 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   13d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   13d56:	2300      	movs	r3, #0
{
   13d58:	4607      	mov	r7, r0
   13d5a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   13d5c:	481e      	ldr	r0, [pc, #120]	; (13dd8 <bt_att_accept+0x84>)
   13d5e:	2200      	movs	r2, #0
   13d60:	4669      	mov	r1, sp
   13d62:	f004 f9ad 	bl	180c0 <k_mem_slab_alloc>
   13d66:	4604      	mov	r4, r0
   13d68:	b120      	cbz	r0, 13d74 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   13d6a:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   13d6e:	4620      	mov	r0, r4
   13d70:	b003      	add	sp, #12
   13d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   13d74:	4601      	mov	r1, r0
   13d76:	222c      	movs	r2, #44	; 0x2c
   13d78:	9800      	ldr	r0, [sp, #0]
   13d7a:	f007 f978 	bl	1b06e <memset>
	att->conn = conn;
   13d7e:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   13d80:	4816      	ldr	r0, [pc, #88]	; (13ddc <bt_att_accept+0x88>)
	list->tail = NULL;
   13d82:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   13d84:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   13d88:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   13d8c:	2200      	movs	r2, #0
   13d8e:	2300      	movs	r3, #0
   13d90:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   13d92:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   13d94:	f004 f994 	bl	180c0 <k_mem_slab_alloc>
   13d98:	4604      	mov	r4, r0
   13d9a:	2800      	cmp	r0, #0
   13d9c:	d1e5      	bne.n	13d6a <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   13d9e:	4601      	mov	r1, r0
   13da0:	f44f 7290 	mov.w	r2, #288	; 0x120
   13da4:	9801      	ldr	r0, [sp, #4]
   13da6:	f007 f962 	bl	1b06e <memset>
	chan->chan.chan.ops = &ops;
   13daa:	9801      	ldr	r0, [sp, #4]
   13dac:	4b0c      	ldr	r3, [pc, #48]	; (13de0 <bt_att_accept+0x8c>)
   13dae:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   13db0:	30d0      	adds	r0, #208	; 0xd0
   13db2:	f00a f8e9 	bl	1df88 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13db6:	9b01      	ldr	r3, [sp, #4]
   13db8:	f3bf 8f5b 	dmb	ish
   13dbc:	33c8      	adds	r3, #200	; 0xc8
   13dbe:	e853 2f00 	ldrex	r2, [r3]
   13dc2:	e843 4100 	strex	r1, r4, [r3]
   13dc6:	2900      	cmp	r1, #0
   13dc8:	d1f9      	bne.n	13dbe <bt_att_accept+0x6a>
   13dca:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   13dce:	9b01      	ldr	r3, [sp, #4]
   13dd0:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   13dd4:	6033      	str	r3, [r6, #0]
	return 0;
   13dd6:	e7ca      	b.n	13d6e <bt_att_accept+0x1a>
   13dd8:	20000794 	.word	0x20000794
   13ddc:	200007b0 	.word	0x200007b0
   13de0:	200005a4 	.word	0x200005a4

00013de4 <bt_att_connected>:
{
   13de4:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   13de6:	2104      	movs	r1, #4
{
   13de8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   13dea:	6800      	ldr	r0, [r0, #0]
   13dec:	f008 f87c 	bl	1bee8 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   13df0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   13df4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13df6:	b91b      	cbnz	r3, 13e00 <bt_att_connected+0x1c>
   13df8:	f105 000c 	add.w	r0, r5, #12
   13dfc:	f00a f8c4 	bl	1df88 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   13e00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   13e02:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
Z_GENLIST_PREPEND(slist, snode)
   13e06:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   13e08:	f504 738a 	add.w	r3, r4, #276	; 0x114
	list->head = node;
   13e0c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   13e0e:	b902      	cbnz	r2, 13e12 <bt_att_connected+0x2e>
	list->tail = node;
   13e10:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13e12:	f3bf 8f5b 	dmb	ish
   13e16:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_work_init_delayable(&work->work, handler);
   13e1a:	4908      	ldr	r1, [pc, #32]	; (13e3c <bt_att_connected+0x58>)
   13e1c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   13e20:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13e22:	bf5e      	ittt	pl
   13e24:	2317      	movpl	r3, #23
   13e26:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13e2a:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   13e2e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
   13e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13e36:	f00a bac8 	b.w	1e3ca <k_work_init_delayable>
   13e3a:	bf00      	nop
   13e3c:	0001c789 	.word	0x0001c789

00013e40 <att_write_cmd>:
{
   13e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e42:	4604      	mov	r4, r0
   13e44:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   13e46:	f101 0008 	add.w	r0, r1, #8
   13e4a:	460d      	mov	r5, r1
   13e4c:	f009 fe87 	bl	1db5e <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13e50:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   13e52:	68af      	ldr	r7, [r5, #8]
   13e54:	89ad      	ldrh	r5, [r5, #12]
   13e56:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13e58:	2100      	movs	r1, #0
   13e5a:	6818      	ldr	r0, [r3, #0]
   13e5c:	f009 f862 	bl	1cf24 <bt_gatt_change_aware>
   13e60:	b320      	cbz	r0, 13eac <att_write_cmd+0x6c>
	if (!handle) {
   13e62:	b32e      	cbz	r6, 13eb0 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   13e64:	2218      	movs	r2, #24
   13e66:	2100      	movs	r1, #0
   13e68:	4668      	mov	r0, sp
   13e6a:	f007 f900 	bl	1b06e <memset>
	data.conn = chan->att->conn;
   13e6e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13e70:	4a10      	ldr	r2, [pc, #64]	; (13eb4 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   13e72:	681b      	ldr	r3, [r3, #0]
   13e74:	9300      	str	r3, [sp, #0]
	data.req = req;
   13e76:	2300      	movs	r3, #0
   13e78:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   13e7c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   13e80:	2301      	movs	r3, #1
   13e82:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13e86:	4631      	mov	r1, r6
   13e88:	466b      	mov	r3, sp
   13e8a:	4630      	mov	r0, r6
	data.value = value;
   13e8c:	9703      	str	r7, [sp, #12]
	data.len = len;
   13e8e:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13e92:	f008 f8d7 	bl	1c044 <bt_gatt_foreach_attr>
	if (data.err) {
   13e96:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13e9a:	b923      	cbnz	r3, 13ea6 <att_write_cmd+0x66>
	if (data.buf) {
   13e9c:	9901      	ldr	r1, [sp, #4]
   13e9e:	b111      	cbz	r1, 13ea6 <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   13ea0:	4620      	mov	r0, r4
   13ea2:	f7ff ff37 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
   13ea6:	2000      	movs	r0, #0
}
   13ea8:	b007      	add	sp, #28
   13eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   13eac:	2012      	movs	r0, #18
   13eae:	e7fb      	b.n	13ea8 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   13eb0:	2001      	movs	r0, #1
   13eb2:	e7f9      	b.n	13ea8 <att_write_cmd+0x68>
   13eb4:	0001c467 	.word	0x0001c467

00013eb8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   13eb8:	898b      	ldrh	r3, [r1, #12]
{
   13eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ebe:	4604      	mov	r4, r0
   13ec0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d05e      	beq.n	13f84 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   13ec6:	2101      	movs	r1, #1
   13ec8:	f105 0008 	add.w	r0, r5, #8
   13ecc:	f009 fe3f 	bl	1db4e <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   13ed0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   13ed4:	4607      	mov	r7, r0
   13ed6:	2b00      	cmp	r3, #0
   13ed8:	d054      	beq.n	13f84 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   13eda:	4a2e      	ldr	r2, [pc, #184]	; (13f94 <bt_att_recv+0xdc>)
   13edc:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   13ede:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   13ee2:	2300      	movs	r3, #0
   13ee4:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   13ee6:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   13eea:	4288      	cmp	r0, r1
   13eec:	d11a      	bne.n	13f24 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   13eee:	00d9      	lsls	r1, r3, #3
   13ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13ef4:	f893 8002 	ldrb.w	r8, [r3, #2]
   13ef8:	f1b8 0f01 	cmp.w	r8, #1
   13efc:	d020      	beq.n	13f40 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   13efe:	f1b8 0f05 	cmp.w	r8, #5
   13f02:	d12d      	bne.n	13f60 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13f04:	f3bf 8f5b 	dmb	ish
   13f08:	34c0      	adds	r4, #192	; 0xc0
   13f0a:	e854 2f00 	ldrex	r2, [r4]
   13f0e:	f042 0302 	orr.w	r3, r2, #2
   13f12:	e844 3000 	strex	r0, r3, [r4]
   13f16:	2800      	cmp	r0, #0
   13f18:	d1f7      	bne.n	13f0a <bt_att_recv+0x52>
   13f1a:	f3bf 8f5b 	dmb	ish
   13f1e:	f012 0f02 	tst.w	r2, #2
   13f22:	e01c      	b.n	13f5e <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   13f24:	3301      	adds	r3, #1
   13f26:	2b0d      	cmp	r3, #13
   13f28:	d1dd      	bne.n	13ee6 <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   13f2a:	4608      	mov	r0, r1
   13f2c:	f008 f85d 	bl	1bfea <att_op_get_type>
   13f30:	b340      	cbz	r0, 13f84 <bt_att_recv+0xcc>
	if (!req) {
   13f32:	b339      	cbz	r1, 13f84 <bt_att_recv+0xcc>
   13f34:	2306      	movs	r3, #6
   13f36:	2200      	movs	r2, #0
   13f38:	4630      	mov	r0, r6
   13f3a:	f008 fb4e 	bl	1c5da <send_err_rsp.part.0>
   13f3e:	e021      	b.n	13f84 <bt_att_recv+0xcc>
   13f40:	34c0      	adds	r4, #192	; 0xc0
   13f42:	f3bf 8f5b 	dmb	ish
   13f46:	e854 3f00 	ldrex	r3, [r4]
   13f4a:	f043 0201 	orr.w	r2, r3, #1
   13f4e:	e844 2000 	strex	r0, r2, [r4]
   13f52:	2800      	cmp	r0, #0
   13f54:	d1f7      	bne.n	13f46 <bt_att_recv+0x8e>
   13f56:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   13f5a:	f013 0f01 	tst.w	r3, #1
   13f5e:	d111      	bne.n	13f84 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   13f60:	eb0c 0301 	add.w	r3, ip, r1
   13f64:	89a9      	ldrh	r1, [r5, #12]
   13f66:	785a      	ldrb	r2, [r3, #1]
   13f68:	4291      	cmp	r1, r2
   13f6a:	d30e      	bcc.n	13f8a <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   13f6c:	685b      	ldr	r3, [r3, #4]
   13f6e:	4629      	mov	r1, r5
   13f70:	4630      	mov	r0, r6
   13f72:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   13f74:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   13f78:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   13f7a:	d103      	bne.n	13f84 <bt_att_recv+0xcc>
   13f7c:	b110      	cbz	r0, 13f84 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   13f7e:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   13f80:	2900      	cmp	r1, #0
   13f82:	d1d8      	bne.n	13f36 <bt_att_recv+0x7e>
}
   13f84:	2000      	movs	r0, #0
   13f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   13f8a:	f1b8 0f01 	cmp.w	r8, #1
   13f8e:	d1f9      	bne.n	13f84 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   13f90:	2304      	movs	r3, #4
   13f92:	e7f4      	b.n	13f7e <bt_att_recv+0xc6>
   13f94:	0001ef2c 	.word	0x0001ef2c

00013f98 <att_write_req>:
{
   13f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f9c:	4604      	mov	r4, r0
   13f9e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   13fa0:	f101 0008 	add.w	r0, r1, #8
   13fa4:	460d      	mov	r5, r1
   13fa6:	f009 fdda 	bl	1db5e <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13faa:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   13fac:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   13fb0:	89ad      	ldrh	r5, [r5, #12]
   13fb2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13fb4:	2101      	movs	r1, #1
   13fb6:	6818      	ldr	r0, [r3, #0]
   13fb8:	f008 ffb4 	bl	1cf24 <bt_gatt_change_aware>
   13fbc:	2800      	cmp	r0, #0
   13fbe:	d03f      	beq.n	14040 <att_write_req+0xa8>
	if (!handle) {
   13fc0:	2e00      	cmp	r6, #0
   13fc2:	d03f      	beq.n	14044 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   13fc4:	2218      	movs	r2, #24
   13fc6:	2100      	movs	r1, #0
   13fc8:	4668      	mov	r0, sp
   13fca:	f007 f850 	bl	1b06e <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   13fce:	2200      	movs	r2, #0
   13fd0:	2113      	movs	r1, #19
   13fd2:	4620      	mov	r0, r4
   13fd4:	f008 fadc 	bl	1c590 <bt_att_chan_create_pdu>
   13fd8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   13fda:	b378      	cbz	r0, 1403c <att_write_req+0xa4>
	data.conn = chan->att->conn;
   13fdc:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13fde:	4a1a      	ldr	r2, [pc, #104]	; (14048 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   13fe0:	681b      	ldr	r3, [r3, #0]
   13fe2:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   13fe4:	2301      	movs	r3, #1
   13fe6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   13fea:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   13fee:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13ff0:	466b      	mov	r3, sp
   13ff2:	4631      	mov	r1, r6
   13ff4:	4630      	mov	r0, r6
	data.len = len;
   13ff6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   13ffa:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   13ffe:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   14002:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14006:	f008 f81d 	bl	1c044 <bt_gatt_foreach_attr>
	if (data.err) {
   1400a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1400e:	b175      	cbz	r5, 1402e <att_write_req+0x96>
			net_buf_unref(data.buf);
   14010:	9801      	ldr	r0, [sp, #4]
   14012:	f002 f999 	bl	16348 <net_buf_unref>
	if (!req) {
   14016:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1401a:	4632      	mov	r2, r6
   1401c:	4641      	mov	r1, r8
   1401e:	4620      	mov	r0, r4
   14020:	f008 fadb 	bl	1c5da <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   14024:	463d      	mov	r5, r7
}
   14026:	4628      	mov	r0, r5
   14028:	b007      	add	sp, #28
   1402a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1402e:	9901      	ldr	r1, [sp, #4]
   14030:	2900      	cmp	r1, #0
   14032:	d0f8      	beq.n	14026 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14034:	4620      	mov	r0, r4
   14036:	f7ff fe6d 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
   1403a:	e7f4      	b.n	14026 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   1403c:	250e      	movs	r5, #14
   1403e:	e7f2      	b.n	14026 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14040:	2512      	movs	r5, #18
   14042:	e7f0      	b.n	14026 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   14044:	2501      	movs	r5, #1
   14046:	e7ee      	b.n	14026 <att_write_req+0x8e>
   14048:	0001c467 	.word	0x0001c467

0001404c <att_read_group_req>:
{
   1404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14050:	7b0c      	ldrb	r4, [r1, #12]
   14052:	3c04      	subs	r4, #4
   14054:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14056:	2c02      	cmp	r4, #2
{
   14058:	4605      	mov	r5, r0
   1405a:	b08c      	sub	sp, #48	; 0x30
   1405c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1405e:	d001      	beq.n	14064 <att_read_group_req+0x18>
   14060:	2c10      	cmp	r4, #16
   14062:	d16e      	bne.n	14142 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   14064:	2104      	movs	r1, #4
   14066:	3008      	adds	r0, #8
   14068:	f009 fd71 	bl	1db4e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1406c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   14070:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14072:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14074:	1d01      	adds	r1, r0, #4
   14076:	4622      	mov	r2, r4
   14078:	4640      	mov	r0, r8
   1407a:	f007 f8da 	bl	1b232 <bt_uuid_create>
   1407e:	2800      	cmp	r0, #0
   14080:	d061      	beq.n	14146 <att_read_group_req+0xfa>
	if (!start || !end) {
   14082:	2e00      	cmp	r6, #0
   14084:	d03a      	beq.n	140fc <att_read_group_req+0xb0>
   14086:	2400      	movs	r4, #0
   14088:	2f00      	cmp	r7, #0
   1408a:	d036      	beq.n	140fa <att_read_group_req+0xae>
	if (start > end) {
   1408c:	42be      	cmp	r6, r7
   1408e:	d835      	bhi.n	140fc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14090:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14094:	a901      	add	r1, sp, #4
   14096:	4640      	mov	r0, r8
   14098:	f88d 4004 	strb.w	r4, [sp, #4]
   1409c:	f8ad 3006 	strh.w	r3, [sp, #6]
   140a0:	f007 f89d 	bl	1b1de <bt_uuid_cmp>
   140a4:	2800      	cmp	r0, #0
   140a6:	d134      	bne.n	14112 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   140a8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   140aa:	2214      	movs	r2, #20
   140ac:	2100      	movs	r1, #0
   140ae:	a807      	add	r0, sp, #28
   140b0:	f006 ffdd 	bl	1b06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   140b4:	2201      	movs	r2, #1
   140b6:	2111      	movs	r1, #17
   140b8:	4620      	mov	r0, r4
   140ba:	f008 faab 	bl	1c614 <bt_att_create_pdu>
   140be:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   140c0:	2800      	cmp	r0, #0
   140c2:	d040      	beq.n	14146 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   140c4:	2101      	movs	r1, #1
   140c6:	3008      	adds	r0, #8
	data.uuid = uuid;
   140c8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   140cc:	f009 fd18 	bl	1db00 <net_buf_simple_add>
	data.rsp->len = 0U;
   140d0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   140d4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   140d6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   140d8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   140dc:	4a1b      	ldr	r2, [pc, #108]	; (1414c <att_read_group_req+0x100>)
	data.group = NULL;
   140de:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   140e2:	4639      	mov	r1, r7
   140e4:	4630      	mov	r0, r6
   140e6:	f007 ffad 	bl	1c044 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   140ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140ec:	781c      	ldrb	r4, [r3, #0]
   140ee:	bb1c      	cbnz	r4, 14138 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   140f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   140f2:	f002 f929 	bl	16348 <net_buf_unref>
	if (!req) {
   140f6:	230a      	movs	r3, #10
   140f8:	e018      	b.n	1412c <att_read_group_req+0xe0>
			*err = 0U;
   140fa:	463e      	mov	r6, r7
	if (!req) {
   140fc:	2301      	movs	r3, #1
   140fe:	4632      	mov	r2, r6
   14100:	2110      	movs	r1, #16
   14102:	4628      	mov	r0, r5
   14104:	f008 fa69 	bl	1c5da <send_err_rsp.part.0>
		return 0;
   14108:	2400      	movs	r4, #0
}
   1410a:	4620      	mov	r0, r4
   1410c:	b00c      	add	sp, #48	; 0x30
   1410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   14112:	f642 0301 	movw	r3, #10241	; 0x2801
   14116:	a907      	add	r1, sp, #28
   14118:	4640      	mov	r0, r8
   1411a:	f88d 401c 	strb.w	r4, [sp, #28]
   1411e:	f8ad 301e 	strh.w	r3, [sp, #30]
   14122:	f007 f85c 	bl	1b1de <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14126:	2800      	cmp	r0, #0
   14128:	d0be      	beq.n	140a8 <att_read_group_req+0x5c>
	if (!req) {
   1412a:	2310      	movs	r3, #16
   1412c:	4632      	mov	r2, r6
   1412e:	2110      	movs	r1, #16
   14130:	4628      	mov	r0, r5
   14132:	f008 fa52 	bl	1c5da <send_err_rsp.part.0>
		return 0;
   14136:	e7e8      	b.n	1410a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14138:	9909      	ldr	r1, [sp, #36]	; 0x24
   1413a:	4628      	mov	r0, r5
   1413c:	f7ff fdea 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   14140:	e7e2      	b.n	14108 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   14142:	2404      	movs	r4, #4
   14144:	e7e1      	b.n	1410a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   14146:	240e      	movs	r4, #14
   14148:	e7df      	b.n	1410a <att_read_group_req+0xbe>
   1414a:	bf00      	nop
   1414c:	00013b05 	.word	0x00013b05

00014150 <att_read_mult_req>:
{
   14150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14154:	6886      	ldr	r6, [r0, #8]
{
   14156:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   14158:	2210      	movs	r2, #16
{
   1415a:	4604      	mov	r4, r0
   1415c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1415e:	4668      	mov	r0, sp
   14160:	2100      	movs	r1, #0
   14162:	f006 ff84 	bl	1b06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14166:	2200      	movs	r2, #0
   14168:	210f      	movs	r1, #15
   1416a:	4630      	mov	r0, r6
   1416c:	f008 fa52 	bl	1c614 <bt_att_create_pdu>
   14170:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14172:	b358      	cbz	r0, 141cc <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14174:	f8df 9058 	ldr.w	r9, [pc, #88]	; 141d0 <att_read_mult_req+0x80>
	data.chan = chan;
   14178:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1417a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1417e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   14182:	89ab      	ldrh	r3, [r5, #12]
   14184:	2b01      	cmp	r3, #1
   14186:	d804      	bhi.n	14192 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14188:	9902      	ldr	r1, [sp, #8]
   1418a:	4620      	mov	r0, r4
   1418c:	f7ff fdc2 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
   14190:	e018      	b.n	141c4 <att_read_mult_req+0x74>
   14192:	4638      	mov	r0, r7
   14194:	f009 fce3 	bl	1db5e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14198:	466b      	mov	r3, sp
   1419a:	464a      	mov	r2, r9
   1419c:	4601      	mov	r1, r0
   1419e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   141a0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   141a4:	f007 ff4e 	bl	1c044 <bt_gatt_foreach_attr>
		if (data.err) {
   141a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   141ac:	2b00      	cmp	r3, #0
   141ae:	d0e8      	beq.n	14182 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   141b0:	9802      	ldr	r0, [sp, #8]
   141b2:	f002 f8c9 	bl	16348 <net_buf_unref>
	if (!req) {
   141b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   141ba:	4632      	mov	r2, r6
   141bc:	210e      	movs	r1, #14
   141be:	4620      	mov	r0, r4
   141c0:	f008 fa0b 	bl	1c5da <send_err_rsp.part.0>
	return 0;
   141c4:	2000      	movs	r0, #0
}
   141c6:	b005      	add	sp, #20
   141c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   141cc:	200e      	movs	r0, #14
   141ce:	e7fa      	b.n	141c6 <att_read_mult_req+0x76>
   141d0:	0001c53d 	.word	0x0001c53d

000141d4 <att_read_rsp>:
{
   141d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   141d8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   141dc:	4605      	mov	r5, r0
   141de:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   141e0:	4640      	mov	r0, r8
   141e2:	2101      	movs	r1, #1
{
   141e4:	4614      	mov	r4, r2
   141e6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   141e8:	f008 fe9c 	bl	1cf24 <bt_gatt_change_aware>
   141ec:	b388      	cbz	r0, 14252 <att_read_rsp+0x7e>
	if (!handle) {
   141ee:	b396      	cbz	r6, 14256 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   141f0:	2210      	movs	r2, #16
   141f2:	2100      	movs	r1, #0
   141f4:	4668      	mov	r0, sp
   141f6:	f006 ff3a 	bl	1b06e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   141fa:	2200      	movs	r2, #0
   141fc:	4621      	mov	r1, r4
   141fe:	4640      	mov	r0, r8
   14200:	f008 fa08 	bl	1c614 <bt_att_create_pdu>
   14204:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14206:	b340      	cbz	r0, 1425a <att_read_rsp+0x86>
	data.offset = offset;
   14208:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1420c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14210:	2301      	movs	r3, #1
   14212:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14216:	4a12      	ldr	r2, [pc, #72]	; (14260 <att_read_rsp+0x8c>)
	data.chan = chan;
   14218:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1421a:	466b      	mov	r3, sp
   1421c:	4631      	mov	r1, r6
   1421e:	4630      	mov	r0, r6
   14220:	f007 ff10 	bl	1c044 <bt_gatt_foreach_attr>
	if (data.err) {
   14224:	f89d 400c 	ldrb.w	r4, [sp, #12]
   14228:	b174      	cbz	r4, 14248 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1422a:	9802      	ldr	r0, [sp, #8]
   1422c:	f002 f88c 	bl	16348 <net_buf_unref>
	if (!req) {
   14230:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14234:	4632      	mov	r2, r6
   14236:	4639      	mov	r1, r7
   14238:	4628      	mov	r0, r5
   1423a:	f008 f9ce 	bl	1c5da <send_err_rsp.part.0>
		return 0;
   1423e:	2400      	movs	r4, #0
}
   14240:	4620      	mov	r0, r4
   14242:	b004      	add	sp, #16
   14244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14248:	9902      	ldr	r1, [sp, #8]
   1424a:	4628      	mov	r0, r5
   1424c:	f7ff fd62 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   14250:	e7f6      	b.n	14240 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14252:	2412      	movs	r4, #18
   14254:	e7f4      	b.n	14240 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   14256:	2401      	movs	r4, #1
   14258:	e7f2      	b.n	14240 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1425a:	240e      	movs	r4, #14
   1425c:	e7f0      	b.n	14240 <att_read_rsp+0x6c>
   1425e:	bf00      	nop
   14260:	0001c53d 	.word	0x0001c53d

00014264 <att_read_type_req>:
{
   14264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14268:	7b0c      	ldrb	r4, [r1, #12]
   1426a:	3c04      	subs	r4, #4
   1426c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1426e:	2c02      	cmp	r4, #2
{
   14270:	4605      	mov	r5, r0
   14272:	b08c      	sub	sp, #48	; 0x30
   14274:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14276:	d001      	beq.n	1427c <att_read_type_req+0x18>
   14278:	2c10      	cmp	r4, #16
   1427a:	d14f      	bne.n	1431c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1427c:	2104      	movs	r1, #4
   1427e:	3008      	adds	r0, #8
   14280:	f009 fc65 	bl	1db4e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14284:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   14288:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1428a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1428c:	1d01      	adds	r1, r0, #4
   1428e:	4622      	mov	r2, r4
   14290:	4640      	mov	r0, r8
   14292:	f006 ffce 	bl	1b232 <bt_uuid_create>
   14296:	b188      	cbz	r0, 142bc <att_read_type_req+0x58>
	if (!start || !end) {
   14298:	b19e      	cbz	r6, 142c2 <att_read_type_req+0x5e>
   1429a:	b18f      	cbz	r7, 142c0 <att_read_type_req+0x5c>
	if (start > end) {
   1429c:	42b7      	cmp	r7, r6
   1429e:	d310      	bcc.n	142c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   142a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   142a2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   142a4:	2100      	movs	r1, #0
   142a6:	eb0d 0002 	add.w	r0, sp, r2
   142aa:	f006 fee0 	bl	1b06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   142ae:	2201      	movs	r2, #1
   142b0:	2109      	movs	r1, #9
   142b2:	4620      	mov	r0, r4
   142b4:	f008 f9ae 	bl	1c614 <bt_att_create_pdu>
   142b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   142ba:	b968      	cbnz	r0, 142d8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   142bc:	240e      	movs	r4, #14
   142be:	e007      	b.n	142d0 <att_read_type_req+0x6c>
			*err = 0U;
   142c0:	463e      	mov	r6, r7
	if (!req) {
   142c2:	2301      	movs	r3, #1
   142c4:	4632      	mov	r2, r6
   142c6:	2108      	movs	r1, #8
   142c8:	4628      	mov	r0, r5
   142ca:	f008 f986 	bl	1c5da <send_err_rsp.part.0>
		return 0;
   142ce:	2400      	movs	r4, #0
}
   142d0:	4620      	mov	r0, r4
   142d2:	b00c      	add	sp, #48	; 0x30
   142d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   142d8:	2101      	movs	r1, #1
   142da:	3008      	adds	r0, #8
	data.uuid = uuid;
   142dc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   142e0:	f009 fc0e 	bl	1db00 <net_buf_simple_add>
	data.rsp->len = 0U;
   142e4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   142e8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   142ea:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   142ec:	4a0c      	ldr	r2, [pc, #48]	; (14320 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   142ee:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   142f2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   142f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   142f8:	4630      	mov	r0, r6
   142fa:	ab06      	add	r3, sp, #24
   142fc:	f007 fea2 	bl	1c044 <bt_gatt_foreach_attr>
	if (data.err) {
   14300:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   14304:	b12c      	cbz	r4, 14312 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   14306:	9808      	ldr	r0, [sp, #32]
   14308:	f002 f81e 	bl	16348 <net_buf_unref>
	if (!req) {
   1430c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   14310:	e7d8      	b.n	142c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14312:	9908      	ldr	r1, [sp, #32]
   14314:	4628      	mov	r0, r5
   14316:	f7ff fcfd 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1431a:	e7d9      	b.n	142d0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1431c:	2404      	movs	r4, #4
   1431e:	e7d7      	b.n	142d0 <att_read_type_req+0x6c>
   14320:	00013bb1 	.word	0x00013bb1

00014324 <att_find_type_req>:
{
   14324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14328:	4688      	mov	r8, r1
   1432a:	b086      	sub	sp, #24
   1432c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1432e:	2106      	movs	r1, #6
   14330:	f108 0008 	add.w	r0, r8, #8
   14334:	f009 fc0b 	bl	1db4e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   14338:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1433a:	b317      	cbz	r7, 14382 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1433c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   14340:	f1b9 0f00 	cmp.w	r9, #0
   14344:	d01c      	beq.n	14380 <att_find_type_req+0x5c>
	if (start > end) {
   14346:	454f      	cmp	r7, r9
   14348:	d81b      	bhi.n	14382 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1434a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1434c:	f8ad 3002 	strh.w	r3, [sp, #2]
   14350:	2400      	movs	r4, #0
   14352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14356:	a901      	add	r1, sp, #4
   14358:	4668      	mov	r0, sp
	value = buf->data;
   1435a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1435e:	f88d 4000 	strb.w	r4, [sp]
   14362:	f88d 4004 	strb.w	r4, [sp, #4]
   14366:	f8ad 3006 	strh.w	r3, [sp, #6]
   1436a:	f006 ff38 	bl	1b1de <bt_uuid_cmp>
   1436e:	4606      	mov	r6, r0
   14370:	b190      	cbz	r0, 14398 <att_find_type_req+0x74>
	if (!req) {
   14372:	230a      	movs	r3, #10
   14374:	463a      	mov	r2, r7
   14376:	2106      	movs	r1, #6
   14378:	4628      	mov	r0, r5
   1437a:	f008 f92e 	bl	1c5da <send_err_rsp.part.0>
		return 0;
   1437e:	e007      	b.n	14390 <att_find_type_req+0x6c>
			*err = 0U;
   14380:	464f      	mov	r7, r9
	if (!req) {
   14382:	2301      	movs	r3, #1
   14384:	463a      	mov	r2, r7
   14386:	2106      	movs	r1, #6
   14388:	4628      	mov	r0, r5
   1438a:	f008 f926 	bl	1c5da <send_err_rsp.part.0>
		return 0;
   1438e:	2400      	movs	r4, #0
}
   14390:	4620      	mov	r0, r4
   14392:	b006      	add	sp, #24
   14394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14398:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1439c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   143a0:	4601      	mov	r1, r0
   143a2:	2214      	movs	r2, #20
   143a4:	a801      	add	r0, sp, #4
   143a6:	f006 fe62 	bl	1b06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   143aa:	4632      	mov	r2, r6
   143ac:	2107      	movs	r1, #7
   143ae:	4640      	mov	r0, r8
   143b0:	f008 f930 	bl	1c614 <bt_att_create_pdu>
   143b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   143b6:	b1d8      	cbz	r0, 143f0 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   143b8:	230a      	movs	r3, #10
   143ba:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   143be:	4a0d      	ldr	r2, [pc, #52]	; (143f4 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   143c0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   143c4:	ab01      	add	r3, sp, #4
   143c6:	4649      	mov	r1, r9
   143c8:	4638      	mov	r0, r7
	data.value = value;
   143ca:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   143ce:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   143d0:	f007 fe38 	bl	1c044 <bt_gatt_foreach_attr>
	if (data.err) {
   143d4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   143d8:	b12c      	cbz	r4, 143e6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   143da:	9802      	ldr	r0, [sp, #8]
   143dc:	f001 ffb4 	bl	16348 <net_buf_unref>
	if (!req) {
   143e0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   143e4:	e7ce      	b.n	14384 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   143e6:	9902      	ldr	r1, [sp, #8]
   143e8:	4628      	mov	r0, r5
   143ea:	f7ff fc93 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   143ee:	e7cf      	b.n	14390 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   143f0:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   143f2:	e7cd      	b.n	14390 <att_find_type_req+0x6c>
   143f4:	0001c171 	.word	0x0001c171

000143f8 <att_find_info_req>:
{
   143f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   143fa:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   143fc:	881e      	ldrh	r6, [r3, #0]
{
   143fe:	b085      	sub	sp, #20
   14400:	4605      	mov	r5, r0
	if (!start || !end) {
   14402:	b19e      	cbz	r6, 1442c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14404:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   14406:	b184      	cbz	r4, 1442a <att_find_info_req+0x32>
	if (start > end) {
   14408:	42b4      	cmp	r4, r6
   1440a:	d30f      	bcc.n	1442c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1440c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1440e:	2210      	movs	r2, #16
   14410:	2100      	movs	r1, #0
   14412:	4668      	mov	r0, sp
   14414:	f006 fe2b 	bl	1b06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   14418:	2200      	movs	r2, #0
   1441a:	2105      	movs	r1, #5
   1441c:	4638      	mov	r0, r7
   1441e:	f008 f8f9 	bl	1c614 <bt_att_create_pdu>
   14422:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   14424:	b958      	cbnz	r0, 1443e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   14426:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   14428:	e007      	b.n	1443a <att_find_info_req+0x42>
			*err = 0U;
   1442a:	4626      	mov	r6, r4
	if (!req) {
   1442c:	2301      	movs	r3, #1
   1442e:	4632      	mov	r2, r6
   14430:	2104      	movs	r1, #4
   14432:	4628      	mov	r0, r5
   14434:	f008 f8d1 	bl	1c5da <send_err_rsp.part.0>
	return 0;
   14438:	2000      	movs	r0, #0
}
   1443a:	b005      	add	sp, #20
   1443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1443e:	4621      	mov	r1, r4
   14440:	4a08      	ldr	r2, [pc, #32]	; (14464 <att_find_info_req+0x6c>)
	data.chan = chan;
   14442:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14444:	466b      	mov	r3, sp
   14446:	4630      	mov	r0, r6
   14448:	f007 fdfc 	bl	1c044 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1444c:	9c02      	ldr	r4, [sp, #8]
   1444e:	b924      	cbnz	r4, 1445a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   14450:	9801      	ldr	r0, [sp, #4]
   14452:	f001 ff79 	bl	16348 <net_buf_unref>
	if (!req) {
   14456:	230a      	movs	r3, #10
   14458:	e7e9      	b.n	1442e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1445a:	9901      	ldr	r1, [sp, #4]
   1445c:	4628      	mov	r0, r5
   1445e:	f7ff fc59 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
   14462:	e7e9      	b.n	14438 <att_find_info_req+0x40>
   14464:	0001c299 	.word	0x0001c299

00014468 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   14468:	b513      	push	{r0, r1, r4, lr}
   1446a:	4602      	mov	r2, r0
   1446c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1446e:	4808      	ldr	r0, [pc, #32]	; (14490 <bt_att_req_alloc+0x28>)
   14470:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   14472:	2400      	movs	r4, #0
   14474:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14476:	f003 fe23 	bl	180c0 <k_mem_slab_alloc>
   1447a:	4601      	mov	r1, r0
   1447c:	b930      	cbnz	r0, 1448c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1447e:	9801      	ldr	r0, [sp, #4]
   14480:	221c      	movs	r2, #28
   14482:	f006 fdf4 	bl	1b06e <memset>

	return req;
   14486:	9801      	ldr	r0, [sp, #4]
}
   14488:	b002      	add	sp, #8
   1448a:	bd10      	pop	{r4, pc}
		return NULL;
   1448c:	4620      	mov	r0, r4
   1448e:	e7fb      	b.n	14488 <bt_att_req_alloc+0x20>
   14490:	200007cc 	.word	0x200007cc

00014494 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   14494:	b507      	push	{r0, r1, r2, lr}
   14496:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   14498:	6880      	ldr	r0, [r0, #8]
   1449a:	b120      	cbz	r0, 144a6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1449c:	f001 ff54 	bl	16348 <net_buf_unref>
		req->buf = NULL;
   144a0:	9b01      	ldr	r3, [sp, #4]
   144a2:	2200      	movs	r2, #0
   144a4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   144a6:	4803      	ldr	r0, [pc, #12]	; (144b4 <bt_att_req_free+0x20>)
   144a8:	a901      	add	r1, sp, #4
   144aa:	f003 fe3b 	bl	18124 <k_mem_slab_free>
}
   144ae:	b003      	add	sp, #12
   144b0:	f85d fb04 	ldr.w	pc, [sp], #4
   144b4:	200007cc 	.word	0x200007cc

000144b8 <att_handle_rsp>:
{
   144b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool pending = k_work_delayable_is_pending(&work->work);
   144bc:	f100 04e8 	add.w	r4, r0, #232	; 0xe8
   144c0:	b085      	sub	sp, #20
   144c2:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
   144c4:	4620      	mov	r0, r4
   144c6:	4689      	mov	r9, r1
   144c8:	4692      	mov	sl, r2
   144ca:	4698      	mov	r8, r3
   144cc:	f009 ff89 	bl	1e3e2 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
   144d0:	4620      	mov	r0, r4
   144d2:	f009 ff9a 	bl	1e40a <k_work_cancel_delayable>
	if (!chan->req) {
   144d6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   144da:	2400      	movs	r4, #0
   144dc:	b378      	cbz	r0, 1453e <att_handle_rsp+0x86>
	if (chan->req == &cancel) {
   144de:	4b27      	ldr	r3, [pc, #156]	; (1457c <att_handle_rsp+0xc4>)
   144e0:	4298      	cmp	r0, r3
   144e2:	d123      	bne.n	1452c <att_handle_rsp+0x74>
		chan->req = NULL;
   144e4:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
	bt_att_func_t func = NULL;
   144e8:	4627      	mov	r7, r4
	att_process(chan->att);
   144ea:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
   144ee:	f10b 0004 	add.w	r0, fp, #4
   144f2:	f007 fd35 	bl	1bf60 <sys_slist_get>
	if (!node) {
   144f6:	4606      	mov	r6, r0
   144f8:	b340      	cbz	r0, 1454c <att_handle_rsp+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   144fa:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   144fe:	b152      	cbz	r2, 14516 <att_handle_rsp+0x5e>
   14500:	f5b2 708e 	subs.w	r0, r2, #284	; 0x11c
   14504:	d007      	beq.n	14516 <att_handle_rsp+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14506:	6814      	ldr	r4, [r2, #0]
   14508:	b10c      	cbz	r4, 1450e <att_handle_rsp+0x56>
   1450a:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		if (!chan->req) {
   1450e:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
   14512:	b1b2      	cbz	r2, 14542 <att_handle_rsp+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14514:	bb3c      	cbnz	r4, 14566 <att_handle_rsp+0xae>
Z_GENLIST_PREPEND(slist, snode)
   14516:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   1451a:	6032      	str	r2, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1451c:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   14520:	f8cb 6004 	str.w	r6, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   14524:	b992      	cbnz	r2, 1454c <att_handle_rsp+0x94>
	list->tail = node;
   14526:	f8cb 6008 	str.w	r6, [fp, #8]
}
   1452a:	e00f      	b.n	1454c <att_handle_rsp+0x94>
	func = chan->req->func;
   1452c:	6847      	ldr	r7, [r0, #4]
	params = chan->req->user_data;
   1452e:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
   14530:	6044      	str	r4, [r0, #4]
	params = chan->req->user_data;
   14532:	9303      	str	r3, [sp, #12]
	bt_att_req_free(chan->req);
   14534:	f7ff ffae 	bl	14494 <bt_att_req_free>
	chan->req = NULL;
   14538:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
   1453c:	e7d5      	b.n	144ea <att_handle_rsp+0x32>
	bt_att_func_t func = NULL;
   1453e:	4607      	mov	r7, r0
   14540:	e7d3      	b.n	144ea <att_handle_rsp+0x32>
	return chan_req_send(chan, req);
   14542:	4631      	mov	r1, r6
   14544:	f007 ff04 	bl	1c350 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   14548:	2800      	cmp	r0, #0
   1454a:	dbe3      	blt.n	14514 <att_handle_rsp+0x5c>
	if (func) {
   1454c:	b13f      	cbz	r7, 1455e <att_handle_rsp+0xa6>
		func(chan->att->conn, err, pdu, len, params);
   1454e:	9b03      	ldr	r3, [sp, #12]
   14550:	6828      	ldr	r0, [r5, #0]
   14552:	9300      	str	r3, [sp, #0]
   14554:	6800      	ldr	r0, [r0, #0]
   14556:	4653      	mov	r3, sl
   14558:	464a      	mov	r2, r9
   1455a:	4641      	mov	r1, r8
   1455c:	47b8      	blx	r7
}
   1455e:	2000      	movs	r0, #0
   14560:	b005      	add	sp, #20
   14562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   14566:	f514 728e 	adds.w	r2, r4, #284	; 0x11c
   1456a:	d004      	beq.n	14576 <att_handle_rsp+0xbe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1456c:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14570:	b10a      	cbz	r2, 14576 <att_handle_rsp+0xbe>
   14572:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
	bt_att_func_t func = NULL;
   14576:	4620      	mov	r0, r4
   14578:	4614      	mov	r4, r2
   1457a:	e7c8      	b.n	1450e <att_handle_rsp+0x56>
   1457c:	20001f20 	.word	0x20001f20

00014580 <bt_att_disconnected>:
{
   14580:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   14582:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   14586:	b085      	sub	sp, #20
   14588:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1458a:	b385      	cbz	r5, 145ee <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1458c:	f500 718a 	add.w	r1, r0, #276	; 0x114
   14590:	f105 0024 	add.w	r0, r5, #36	; 0x24
   14594:	f007 fcee 	bl	1bf74 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   14598:	f1a4 0608 	sub.w	r6, r4, #8
   1459c:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
   145a0:	2200      	movs	r2, #0
   145a2:	2300      	movs	r3, #0
   145a4:	4638      	mov	r0, r7
   145a6:	f009 fa5a 	bl	1da5e <net_buf_get>
   145aa:	4602      	mov	r2, r0
   145ac:	bb08      	cbnz	r0, 145f2 <bt_att_disconnected+0x72>
	if (chan->req) {
   145ae:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   145b2:	b123      	cbz	r3, 145be <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   145b4:	4601      	mov	r1, r0
   145b6:	230e      	movs	r3, #14
   145b8:	4630      	mov	r0, r6
   145ba:	f7ff ff7d 	bl	144b8 <att_handle_rsp>
	chan->att = NULL;
   145be:	2300      	movs	r3, #0
   145c0:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   145c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   145c6:	b993      	cbnz	r3, 145ee <bt_att_disconnected+0x6e>
	att_reset(att);
   145c8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   145ca:	9803      	ldr	r0, [sp, #12]
   145cc:	2200      	movs	r2, #0
   145ce:	2300      	movs	r3, #0
   145d0:	300c      	adds	r0, #12
   145d2:	f009 fa44 	bl	1da5e <net_buf_get>
   145d6:	b978      	cbnz	r0, 145f8 <bt_att_disconnected+0x78>
	att->conn = NULL;
   145d8:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   145da:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   145dc:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   145de:	b976      	cbnz	r6, 145fe <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   145e0:	4813      	ldr	r0, [pc, #76]	; (14630 <bt_att_disconnected+0xb0>)
   145e2:	a903      	add	r1, sp, #12
   145e4:	f003 fd9e 	bl	18124 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   145e8:	6820      	ldr	r0, [r4, #0]
   145ea:	f000 fcdf 	bl	14fac <bt_gatt_disconnected>
}
   145ee:	b005      	add	sp, #20
   145f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   145f2:	f001 fea9 	bl	16348 <net_buf_unref>
   145f6:	e7d3      	b.n	145a0 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   145f8:	f001 fea6 	bl	16348 <net_buf_unref>
   145fc:	e7e5      	b.n	145ca <bt_att_disconnected+0x4a>
	return node->next;
   145fe:	6835      	ldr	r5, [r6, #0]
   14600:	2d00      	cmp	r5, #0
   14602:	bf38      	it	cc
   14604:	2500      	movcc	r5, #0
		if (req->func) {
   14606:	6877      	ldr	r7, [r6, #4]
   14608:	b137      	cbz	r7, 14618 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1460a:	69b3      	ldr	r3, [r6, #24]
   1460c:	9300      	str	r3, [sp, #0]
   1460e:	2300      	movs	r3, #0
   14610:	461a      	mov	r2, r3
   14612:	210e      	movs	r1, #14
   14614:	4618      	mov	r0, r3
   14616:	47b8      	blx	r7
		bt_att_req_free(req);
   14618:	4630      	mov	r0, r6
   1461a:	f7ff ff3b 	bl	14494 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1461e:	2d00      	cmp	r5, #0
   14620:	d0de      	beq.n	145e0 <bt_att_disconnected+0x60>
   14622:	682b      	ldr	r3, [r5, #0]
   14624:	2b00      	cmp	r3, #0
   14626:	bf38      	it	cc
   14628:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1462a:	462e      	mov	r6, r5
   1462c:	461d      	mov	r5, r3
   1462e:	e7ea      	b.n	14606 <bt_att_disconnected+0x86>
   14630:	20000794 	.word	0x20000794

00014634 <gatt_indicate>:
}
#endif

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
   14634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14638:	4680      	mov	r8, r0
   1463a:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1463c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   14640:	2100      	movs	r1, #0
	    params->func == sc_restore_rsp)) &&
	    !bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif
	len = sizeof(*ind) + params->len;
   14642:	8a96      	ldrh	r6, [r2, #20]
{
   14644:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   14646:	f7ff ff0f 	bl	14468 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1464a:	3602      	adds	r6, #2
	if (!req) {
   1464c:	4604      	mov	r4, r0
   1464e:	b920      	cbnz	r0, 1465a <gatt_indicate+0x26>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		bt_att_req_free(req);
		return -ENOMEM;
   14650:	f06f 050b 	mvn.w	r5, #11
	if (err) {
		bt_att_req_free(req);
	}

	return err;
}
   14654:	4628      	mov	r0, r5
   14656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
   1465a:	2300      	movs	r3, #0
   1465c:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
   1465e:	211d      	movs	r1, #29
	req->func = func;
   14660:	4b16      	ldr	r3, [pc, #88]	; (146bc <gatt_indicate+0x88>)
	req->len = len;
   14662:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   14664:	7441      	strb	r1, [r0, #17]
	req->func = func;
   14666:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   14668:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1466a:	4632      	mov	r2, r6
   1466c:	4640      	mov	r0, r8
   1466e:	f007 ffd1 	bl	1c614 <bt_att_create_pdu>
	if (!buf) {
   14672:	4606      	mov	r6, r0
   14674:	b918      	cbnz	r0, 1467e <gatt_indicate+0x4a>
		bt_att_req_free(req);
   14676:	4620      	mov	r0, r4
   14678:	f7ff ff0c 	bl	14494 <bt_att_req_free>
   1467c:	e7e8      	b.n	14650 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
   1467e:	f100 0a08 	add.w	sl, r0, #8
   14682:	2102      	movs	r1, #2
   14684:	4650      	mov	r0, sl
   14686:	f009 fa3b 	bl	1db00 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1468a:	4607      	mov	r7, r0
   1468c:	8aa9      	ldrh	r1, [r5, #20]
   1468e:	f827 9b02 	strh.w	r9, [r7], #2
   14692:	4650      	mov	r0, sl
   14694:	f009 fa34 	bl	1db00 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   14698:	8aaa      	ldrh	r2, [r5, #20]
   1469a:	6929      	ldr	r1, [r5, #16]
   1469c:	4638      	mov	r0, r7
   1469e:	f006 fcbb 	bl	1b018 <memcpy>
	req->buf = buf;
   146a2:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   146a4:	4621      	mov	r1, r4
   146a6:	4640      	mov	r0, r8
   146a8:	f008 f8bb 	bl	1c822 <bt_att_req_send>
	if (err) {
   146ac:	4605      	mov	r5, r0
   146ae:	2800      	cmp	r0, #0
   146b0:	d0d0      	beq.n	14654 <gatt_indicate+0x20>
		bt_att_req_free(req);
   146b2:	4620      	mov	r0, r4
   146b4:	f7ff feee 	bl	14494 <bt_att_req_free>
   146b8:	e7cc      	b.n	14654 <gatt_indicate+0x20>
   146ba:	bf00      	nop
   146bc:	0001c8a3 	.word	0x0001c8a3

000146c0 <find_sc_cfg>:
{
   146c0:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   146c2:	4c0e      	ldr	r4, [pc, #56]	; (146fc <find_sc_cfg+0x3c>)
   146c4:	7823      	ldrb	r3, [r4, #0]
   146c6:	4283      	cmp	r3, r0
{
   146c8:	4605      	mov	r5, r0
   146ca:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   146cc:	d00a      	beq.n	146e4 <find_sc_cfg+0x24>
   146ce:	7b23      	ldrb	r3, [r4, #12]
   146d0:	42ab      	cmp	r3, r5
   146d2:	d111      	bne.n	146f8 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   146d4:	480a      	ldr	r0, [pc, #40]	; (14700 <find_sc_cfg+0x40>)
   146d6:	2207      	movs	r2, #7
   146d8:	4631      	mov	r1, r6
   146da:	f006 fc8d 	bl	1aff8 <memcmp>
   146de:	b958      	cbnz	r0, 146f8 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   146e0:	2001      	movs	r0, #1
   146e2:	e005      	b.n	146f0 <find_sc_cfg+0x30>
   146e4:	2207      	movs	r2, #7
   146e6:	1c60      	adds	r0, r4, #1
   146e8:	f006 fc86 	bl	1aff8 <memcmp>
		if (id == sc_cfg[i].id &&
   146ec:	2800      	cmp	r0, #0
   146ee:	d1ee      	bne.n	146ce <find_sc_cfg+0xe>
			return &sc_cfg[i];
   146f0:	230c      	movs	r3, #12
   146f2:	fb03 4000 	mla	r0, r3, r0, r4
   146f6:	e000      	b.n	146fa <find_sc_cfg+0x3a>
	return NULL;
   146f8:	2000      	movs	r0, #0
}
   146fa:	bd70      	pop	{r4, r5, r6, pc}
   146fc:	2000210c 	.word	0x2000210c
   14700:	20002119 	.word	0x20002119

00014704 <find_cf_cfg>:
{
   14704:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14706:	4c16      	ldr	r4, [pc, #88]	; (14760 <find_cf_cfg+0x5c>)
		if (!conn) {
   14708:	4605      	mov	r5, r0
   1470a:	b140      	cbz	r0, 1471e <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1470c:	4622      	mov	r2, r4
   1470e:	f812 1b01 	ldrb.w	r1, [r2], #1
   14712:	f007 fa4e 	bl	1bbb2 <bt_conn_is_peer_addr_le>
   14716:	b1c0      	cbz	r0, 1474a <find_cf_cfg+0x46>
}
   14718:	4620      	mov	r0, r4
   1471a:	b003      	add	sp, #12
   1471c:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1471e:	9000      	str	r0, [sp, #0]
   14720:	2207      	movs	r2, #7
   14722:	f8cd 0003 	str.w	r0, [sp, #3]
   14726:	4669      	mov	r1, sp
   14728:	1c60      	adds	r0, r4, #1
   1472a:	f006 fc65 	bl	1aff8 <memcmp>
   1472e:	2800      	cmp	r0, #0
   14730:	d0f2      	beq.n	14718 <find_cf_cfg+0x14>
   14732:	2207      	movs	r2, #7
   14734:	4669      	mov	r1, sp
   14736:	f104 0011 	add.w	r0, r4, #17
   1473a:	9500      	str	r5, [sp, #0]
   1473c:	f8cd 5003 	str.w	r5, [sp, #3]
   14740:	f006 fc5a 	bl	1aff8 <memcmp>
   14744:	b948      	cbnz	r0, 1475a <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   14746:	3410      	adds	r4, #16
   14748:	e7e6      	b.n	14718 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1474a:	7c21      	ldrb	r1, [r4, #16]
   1474c:	f104 0211 	add.w	r2, r4, #17
   14750:	4628      	mov	r0, r5
   14752:	f007 fa2e 	bl	1bbb2 <bt_conn_is_peer_addr_le>
   14756:	2800      	cmp	r0, #0
   14758:	d1f5      	bne.n	14746 <find_cf_cfg+0x42>
	return NULL;
   1475a:	2400      	movs	r4, #0
   1475c:	e7dc      	b.n	14718 <find_cf_cfg+0x14>
   1475e:	bf00      	nop
   14760:	20001f3c 	.word	0x20001f3c

00014764 <sc_indicate_rsp>:
{
   14764:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14766:	4915      	ldr	r1, [pc, #84]	; (147bc <sc_indicate_rsp+0x58>)
   14768:	f3bf 8f5b 	dmb	ish
   1476c:	4604      	mov	r4, r0
   1476e:	f101 0350 	add.w	r3, r1, #80	; 0x50
   14772:	e853 2f00 	ldrex	r2, [r3]
   14776:	f022 0202 	bic.w	r2, r2, #2
   1477a:	e843 2000 	strex	r0, r2, [r3]
   1477e:	2800      	cmp	r0, #0
   14780:	d1f7      	bne.n	14772 <sc_indicate_rsp+0xe>
   14782:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14786:	f3bf 8f5b 	dmb	ish
   1478a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1478c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   14790:	07da      	lsls	r2, r3, #31
   14792:	d505      	bpl.n	147a0 <sc_indicate_rsp+0x3c>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   14794:	480a      	ldr	r0, [pc, #40]	; (147c0 <sc_indicate_rsp+0x5c>)
   14796:	2200      	movs	r2, #0
   14798:	2300      	movs	r3, #0
   1479a:	3120      	adds	r1, #32
   1479c:	f004 facc 	bl	18d38 <k_work_reschedule_for_queue>
	cfg = find_cf_cfg(conn);
   147a0:	4620      	mov	r0, r4
   147a2:	f7ff ffaf 	bl	14704 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   147a6:	b140      	cbz	r0, 147ba <sc_indicate_rsp+0x56>
   147a8:	7a03      	ldrb	r3, [r0, #8]
   147aa:	07db      	lsls	r3, r3, #31
   147ac:	d505      	bpl.n	147ba <sc_indicate_rsp+0x56>
}
   147ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   147b2:	2100      	movs	r1, #0
   147b4:	300c      	adds	r0, #12
   147b6:	f008 b8e1 	b.w	1c97c <atomic_set_bit>
}
   147ba:	bd10      	pop	{r4, pc}
   147bc:	20001920 	.word	0x20001920
   147c0:	20001d58 	.word	0x20001d58

000147c4 <read_ppcp>:
{
   147c4:	b513      	push	{r0, r1, r4, lr}
   147c6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   147ca:	4c0b      	ldr	r4, [pc, #44]	; (147f8 <read_ppcp+0x34>)
{
   147cc:	4610      	mov	r0, r2
	if (offset > value_len) {
   147ce:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   147d0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   147d4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   147d8:	d80b      	bhi.n	147f2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   147da:	f1c1 0408 	rsb	r4, r1, #8
   147de:	429c      	cmp	r4, r3
   147e0:	bfa8      	it	ge
   147e2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   147e4:	4622      	mov	r2, r4
   147e6:	4469      	add	r1, sp
   147e8:	f006 fc16 	bl	1b018 <memcpy>
}
   147ec:	4620      	mov	r0, r4
   147ee:	b002      	add	sp, #8
   147f0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   147f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   147f6:	e7f9      	b.n	147ec <read_ppcp+0x28>
   147f8:	00280018 	.word	0x00280018

000147fc <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
   147fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   14800:	4b38      	ldr	r3, [pc, #224]	; (148e4 <notify_cb+0xe8>)
{
   14802:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14804:	6882      	ldr	r2, [r0, #8]
   14806:	429a      	cmp	r2, r3
{
   14808:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1480a:	d003      	beq.n	14814 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1480c:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
   1480e:	b003      	add	sp, #12
   14810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   14814:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   14818:	4b33      	ldr	r3, [pc, #204]	; (148e8 <notify_cb+0xec>)
   1481a:	4599      	cmp	r9, r3
   1481c:	d01a      	beq.n	14854 <notify_cb+0x58>
   1481e:	f109 0701 	add.w	r7, r9, #1
   14822:	f109 0a15 	add.w	sl, r9, #21
   14826:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
   1482a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   1482e:	89a3      	ldrh	r3, [r4, #12]
   14830:	429a      	cmp	r2, r3
   14832:	d10b      	bne.n	1484c <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   14834:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   14838:	4639      	mov	r1, r7
   1483a:	f7fe fee9 	bl	13610 <bt_conn_lookup_addr_le>
		if (!conn) {
   1483e:	4605      	mov	r5, r0
   14840:	b120      	cbz	r0, 1484c <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   14842:	7b43      	ldrb	r3, [r0, #13]
   14844:	2b07      	cmp	r3, #7
   14846:	d029      	beq.n	1489c <notify_cb+0xa0>
			bt_conn_unref(conn);
   14848:	f007 f9ee 	bl	1bc28 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1484c:	370a      	adds	r7, #10
   1484e:	4557      	cmp	r7, sl
   14850:	d0dc      	beq.n	1480c <notify_cb+0x10>
   14852:	e7ea      	b.n	1482a <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   14854:	2600      	movs	r6, #0
   14856:	4d25      	ldr	r5, [pc, #148]	; (148ec <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   14858:	4637      	mov	r7, r6
   1485a:	2207      	movs	r2, #7
   1485c:	4669      	mov	r1, sp
   1485e:	4628      	mov	r0, r5
   14860:	9700      	str	r7, [sp, #0]
   14862:	f8cd 7003 	str.w	r7, [sp, #3]
   14866:	f006 fbc7 	bl	1aff8 <memcmp>
   1486a:	b178      	cbz	r0, 1488c <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1486c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   14870:	2207      	movs	r2, #7
   14872:	4629      	mov	r1, r5
   14874:	f7fe feea 	bl	1364c <bt_conn_lookup_state_le>
			if (!conn) {
   14878:	b968      	cbnz	r0, 14896 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   1487a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1487c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   14880:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   14882:	4629      	mov	r1, r5
   14884:	8853      	ldrh	r3, [r2, #2]
   14886:	8812      	ldrh	r2, [r2, #0]
   14888:	f008 f9ea 	bl	1cc60 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1488c:	350c      	adds	r5, #12
   1488e:	2e00      	cmp	r6, #0
   14890:	d1c5      	bne.n	1481e <notify_cb+0x22>
   14892:	2601      	movs	r6, #1
   14894:	e7e1      	b.n	1485a <notify_cb+0x5e>
			bt_conn_unref(conn);
   14896:	f007 f9c7 	bl	1bc28 <bt_conn_unref>
   1489a:	e7f7      	b.n	1488c <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1489c:	f8d9 3020 	ldr.w	r3, [r9, #32]
   148a0:	b123      	cbz	r3, 148ac <notify_cb+0xb0>
   148a2:	4641      	mov	r1, r8
   148a4:	4798      	blx	r3
   148a6:	b908      	cbnz	r0, 148ac <notify_cb+0xb0>
			bt_conn_unref(conn);
   148a8:	4628      	mov	r0, r5
   148aa:	e7cd      	b.n	14848 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   148ac:	89a3      	ldrh	r3, [r4, #12]
   148ae:	88a1      	ldrh	r1, [r4, #4]
   148b0:	6922      	ldr	r2, [r4, #16]
   148b2:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   148b4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   148b6:	d10f      	bne.n	148d8 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   148b8:	f7ff febc 	bl	14634 <gatt_indicate>
			if (err == 0) {
   148bc:	4606      	mov	r6, r0
   148be:	b918      	cbnz	r0, 148c8 <notify_cb+0xcc>
				data->ind_params->_ref++;
   148c0:	6922      	ldr	r2, [r4, #16]
   148c2:	7d93      	ldrb	r3, [r2, #22]
   148c4:	3301      	adds	r3, #1
   148c6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   148c8:	4628      	mov	r0, r5
   148ca:	f007 f9ad 	bl	1bc28 <bt_conn_unref>
		if (err < 0) {
   148ce:	2e00      	cmp	r6, #0
   148d0:	db06      	blt.n	148e0 <notify_cb+0xe4>
		data->err = 0;
   148d2:	f8c4 b008 	str.w	fp, [r4, #8]
   148d6:	e7b9      	b.n	1484c <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   148d8:	f008 f87c 	bl	1c9d4 <gatt_notify>
   148dc:	4606      	mov	r6, r0
   148de:	e7f3      	b.n	148c8 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   148e0:	2000      	movs	r0, #0
   148e2:	e794      	b.n	1480e <notify_cb+0x12>
   148e4:	0001ccf7 	.word	0x0001ccf7
   148e8:	200005f4 	.word	0x200005f4
   148ec:	2000210d 	.word	0x2000210d

000148f0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   148f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   148f4:	4b2c      	ldr	r3, [pc, #176]	; (149a8 <disconnected_cb+0xb8>)
{
   148f6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   148f8:	6882      	ldr	r2, [r0, #8]
   148fa:	429a      	cmp	r2, r3
{
   148fc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   148fe:	d12f      	bne.n	14960 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   14900:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   14902:	8aab      	ldrh	r3, [r5, #20]
   14904:	b363      	cbz	r3, 14960 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
   14906:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 149ac <disconnected_cb+0xbc>
   1490a:	1c6c      	adds	r4, r5, #1
   1490c:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   14910:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14914:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   14918:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1491c:	b19b      	cbz	r3, 14946 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1491e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   14922:	4622      	mov	r2, r4
   14924:	4630      	mov	r0, r6
   14926:	f007 f944 	bl	1bbb2 <bt_conn_is_peer_addr_le>
   1492a:	b9e8      	cbnz	r0, 14968 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1492c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   14930:	4621      	mov	r1, r4
   14932:	f7fe fe6d 	bl	13610 <bt_conn_lookup_addr_le>
			if (tmp) {
   14936:	b130      	cbz	r0, 14946 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   14938:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1493a:	2b07      	cmp	r3, #7
   1493c:	bf08      	it	eq
   1493e:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   14942:	f007 f971 	bl	1bc28 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   14946:	340a      	adds	r4, #10
   14948:	4554      	cmp	r4, sl
   1494a:	d1e5      	bne.n	14918 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1494c:	f1b8 0f00 	cmp.w	r8, #0
   14950:	d106      	bne.n	14960 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   14952:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   14954:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   14958:	b113      	cbz	r3, 14960 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   1495a:	4641      	mov	r1, r8
   1495c:	4638      	mov	r0, r7
   1495e:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   14960:	2001      	movs	r0, #1
   14962:	b003      	add	sp, #12
   14964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14968:	7a30      	ldrb	r0, [r6, #8]
   1496a:	4649      	mov	r1, r9
   1496c:	f007 f80c 	bl	1b988 <bt_addr_le_is_bonded>
   14970:	b998      	cbnz	r0, 1499a <disconnected_cb+0xaa>
				if (ccc == &sc_ccc) {
   14972:	455d      	cmp	r5, fp
   14974:	d102      	bne.n	1497c <disconnected_cb+0x8c>
					sc_clear(conn);
   14976:	4630      	mov	r0, r6
   14978:	f008 f99a 	bl	1ccb0 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1497c:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   1497e:	2207      	movs	r2, #7
   14980:	4669      	mov	r1, sp
   14982:	4620      	mov	r0, r4
   14984:	9300      	str	r3, [sp, #0]
   14986:	f8cd 3003 	str.w	r3, [sp, #3]
   1498a:	f006 fb45 	bl	1b018 <memcpy>
	cfg->id = 0U;
   1498e:	2300      	movs	r3, #0
   14990:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   14994:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   14998:	e7d5      	b.n	14946 <disconnected_cb+0x56>
   1499a:	2207      	movs	r2, #7
   1499c:	4649      	mov	r1, r9
   1499e:	4620      	mov	r0, r4
   149a0:	f006 fb3a 	bl	1b018 <memcpy>
}
   149a4:	e7cf      	b.n	14946 <disconnected_cb+0x56>
   149a6:	bf00      	nop
   149a8:	0001ccf7 	.word	0x0001ccf7
   149ac:	200005f4 	.word	0x200005f4

000149b0 <bt_gatt_init>:
{
   149b0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   149b2:	4b1f      	ldr	r3, [pc, #124]	; (14a30 <bt_gatt_init+0x80>)
   149b4:	f3bf 8f5b 	dmb	ish
   149b8:	2201      	movs	r2, #1
   149ba:	e853 1f00 	ldrex	r1, [r3]
   149be:	2900      	cmp	r1, #0
   149c0:	d103      	bne.n	149ca <bt_gatt_init+0x1a>
   149c2:	e843 2000 	strex	r0, r2, [r3]
   149c6:	2800      	cmp	r0, #0
   149c8:	d1f7      	bne.n	149ba <bt_gatt_init+0xa>
   149ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   149ce:	d12d      	bne.n	14a2c <bt_gatt_init+0x7c>
   149d0:	f3bf 8f5b 	dmb	ish
   149d4:	4b17      	ldr	r3, [pc, #92]	; (14a34 <bt_gatt_init+0x84>)
   149d6:	e853 1f00 	ldrex	r1, [r3]
   149da:	2900      	cmp	r1, #0
   149dc:	d103      	bne.n	149e6 <bt_gatt_init+0x36>
   149de:	e843 2000 	strex	r0, r2, [r3]
   149e2:	2800      	cmp	r0, #0
   149e4:	d1f7      	bne.n	149d6 <bt_gatt_init+0x26>
   149e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   149ea:	d108      	bne.n	149fe <bt_gatt_init+0x4e>
   149ec:	4a12      	ldr	r2, [pc, #72]	; (14a38 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   149ee:	4913      	ldr	r1, [pc, #76]	; (14a3c <bt_gatt_init+0x8c>)
   149f0:	8813      	ldrh	r3, [r2, #0]
   149f2:	4c13      	ldr	r4, [pc, #76]	; (14a40 <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
   149f4:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   149f6:	42a1      	cmp	r1, r4
   149f8:	d312      	bcc.n	14a20 <bt_gatt_init+0x70>
   149fa:	b100      	cbz	r0, 149fe <bt_gatt_init+0x4e>
   149fc:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&work->work, handler);
   149fe:	4911      	ldr	r1, [pc, #68]	; (14a44 <bt_gatt_init+0x94>)
   14a00:	4811      	ldr	r0, [pc, #68]	; (14a48 <bt_gatt_init+0x98>)
   14a02:	f009 fce2 	bl	1e3ca <k_work_init_delayable>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   14a06:	4910      	ldr	r1, [pc, #64]	; (14a48 <bt_gatt_init+0x98>)
   14a08:	4810      	ldr	r0, [pc, #64]	; (14a4c <bt_gatt_init+0x9c>)
   14a0a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14a0e:	2300      	movs	r3, #0
   14a10:	f004 f992 	bl	18d38 <k_work_reschedule_for_queue>
}
   14a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&work->work, handler);
   14a18:	490d      	ldr	r1, [pc, #52]	; (14a50 <bt_gatt_init+0xa0>)
   14a1a:	480e      	ldr	r0, [pc, #56]	; (14a54 <bt_gatt_init+0xa4>)
   14a1c:	f009 bcd5 	b.w	1e3ca <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   14a20:	6848      	ldr	r0, [r1, #4]
   14a22:	4403      	add	r3, r0
   14a24:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   14a26:	3108      	adds	r1, #8
   14a28:	2001      	movs	r0, #1
   14a2a:	e7e4      	b.n	149f6 <bt_gatt_init+0x46>
}
   14a2c:	bd10      	pop	{r4, pc}
   14a2e:	bf00      	nop
   14a30:	20001f5c 	.word	0x20001f5c
   14a34:	20001f78 	.word	0x20001f78
   14a38:	2000210a 	.word	0x2000210a
   14a3c:	0001e9b8 	.word	0x0001e9b8
   14a40:	0001e9e0 	.word	0x0001e9e0
   14a44:	0001ce8d 	.word	0x0001ce8d
   14a48:	200018f0 	.word	0x200018f0
   14a4c:	20001d58 	.word	0x20001d58
   14a50:	00014da5 	.word	0x00014da5
   14a54:	20001940 	.word	0x20001940

00014a58 <bt_gatt_attr_get_handle>:
{
   14a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   14a5c:	4603      	mov	r3, r0
   14a5e:	b148      	cbz	r0, 14a74 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   14a60:	8a00      	ldrh	r0, [r0, #16]
   14a62:	b938      	cbnz	r0, 14a74 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14a64:	4912      	ldr	r1, [pc, #72]	; (14ab0 <bt_gatt_attr_get_handle+0x58>)
   14a66:	f8df e04c 	ldr.w	lr, [pc, #76]	; 14ab4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   14a6a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   14a6c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14a70:	4571      	cmp	r1, lr
   14a72:	d301      	bcc.n	14a78 <bt_gatt_attr_get_handle+0x20>
}
   14a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   14a78:	e9d1 7600 	ldrd	r7, r6, [r1]
   14a7c:	42bb      	cmp	r3, r7
   14a7e:	d304      	bcc.n	14a8a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   14a80:	fb0c 7206 	mla	r2, ip, r6, r7
   14a84:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   14a86:	4293      	cmp	r3, r2
   14a88:	d90e      	bls.n	14aa8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   14a8a:	19a2      	adds	r2, r4, r6
   14a8c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14a8e:	3108      	adds	r1, #8
   14a90:	4614      	mov	r4, r2
   14a92:	e7ed      	b.n	14a70 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   14a94:	fb0c 7805 	mla	r8, ip, r5, r7
   14a98:	4543      	cmp	r3, r8
   14a9a:	d007      	beq.n	14aac <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   14a9c:	3501      	adds	r5, #1
   14a9e:	1962      	adds	r2, r4, r5
   14aa0:	42b5      	cmp	r5, r6
   14aa2:	b292      	uxth	r2, r2
   14aa4:	d1f6      	bne.n	14a94 <bt_gatt_attr_get_handle+0x3c>
   14aa6:	e7f2      	b.n	14a8e <bt_gatt_attr_get_handle+0x36>
   14aa8:	2500      	movs	r5, #0
   14aaa:	e7f8      	b.n	14a9e <bt_gatt_attr_get_handle+0x46>
   14aac:	4610      	mov	r0, r2
   14aae:	e7e1      	b.n	14a74 <bt_gatt_attr_get_handle+0x1c>
   14ab0:	0001e9b8 	.word	0x0001e9b8
   14ab4:	0001e9e0 	.word	0x0001e9e0

00014ab8 <bt_gatt_foreach_attr_type>:
{
   14ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14abc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   14ac0:	9100      	str	r1, [sp, #0]
   14ac2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   14ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14ac8:	2d00      	cmp	r5, #0
   14aca:	bf08      	it	eq
   14acc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   14ace:	4b24      	ldr	r3, [pc, #144]	; (14b60 <bt_gatt_foreach_attr_type+0xa8>)
   14ad0:	881b      	ldrh	r3, [r3, #0]
   14ad2:	4283      	cmp	r3, r0
{
   14ad4:	4607      	mov	r7, r0
   14ad6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   14ad8:	d23c      	bcs.n	14b54 <bt_gatt_foreach_attr_type+0x9c>
}
   14ada:	b003      	add	sp, #12
   14adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   14ae0:	6873      	ldr	r3, [r6, #4]
   14ae2:	4423      	add	r3, r4
   14ae4:	42bb      	cmp	r3, r7
   14ae6:	d232      	bcs.n	14b4e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   14ae8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14aea:	3608      	adds	r6, #8
   14aec:	4b1d      	ldr	r3, [pc, #116]	; (14b64 <bt_gatt_foreach_attr_type+0xac>)
   14aee:	429e      	cmp	r6, r3
   14af0:	d3f6      	bcc.n	14ae0 <bt_gatt_foreach_attr_type+0x28>
   14af2:	e7f2      	b.n	14ada <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   14af4:	5889      	ldr	r1, [r1, r2]
   14af6:	9301      	str	r3, [sp, #4]
   14af8:	4640      	mov	r0, r8
   14afa:	f006 fb70 	bl	1b1de <bt_uuid_cmp>
   14afe:	9b01      	ldr	r3, [sp, #4]
   14b00:	b190      	cbz	r0, 14b28 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   14b02:	3401      	adds	r4, #1
   14b04:	f10a 0a01 	add.w	sl, sl, #1
   14b08:	b2a4      	uxth	r4, r4
   14b0a:	6873      	ldr	r3, [r6, #4]
   14b0c:	4553      	cmp	r3, sl
   14b0e:	d9ec      	bls.n	14aea <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   14b10:	9b00      	ldr	r3, [sp, #0]
   14b12:	429c      	cmp	r4, r3
   14b14:	d8e1      	bhi.n	14ada <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   14b16:	42bc      	cmp	r4, r7
   14b18:	d3f3      	bcc.n	14b02 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14b1a:	6831      	ldr	r1, [r6, #0]
   14b1c:	fb0b f20a 	mul.w	r2, fp, sl
   14b20:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   14b22:	f1b8 0f00 	cmp.w	r8, #0
   14b26:	d1e5      	bne.n	14af4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   14b28:	f1b9 0f00 	cmp.w	r9, #0
   14b2c:	d10b      	bne.n	14b46 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   14b2e:	3d01      	subs	r5, #1
   14b30:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   14b32:	4618      	mov	r0, r3
   14b34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14b38:	4621      	mov	r1, r4
   14b3a:	4798      	blx	r3
	if (!*num_matches) {
   14b3c:	2d00      	cmp	r5, #0
   14b3e:	d0cc      	beq.n	14ada <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14b40:	2800      	cmp	r0, #0
   14b42:	d1de      	bne.n	14b02 <bt_gatt_foreach_attr_type+0x4a>
   14b44:	e7c9      	b.n	14ada <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   14b46:	68da      	ldr	r2, [r3, #12]
   14b48:	4591      	cmp	r9, r2
   14b4a:	d1da      	bne.n	14b02 <bt_gatt_foreach_attr_type+0x4a>
   14b4c:	e7ef      	b.n	14b2e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   14b4e:	f04f 0a00 	mov.w	sl, #0
   14b52:	e7da      	b.n	14b0a <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14b54:	4e04      	ldr	r6, [pc, #16]	; (14b68 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   14b56:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14b58:	f04f 0b14 	mov.w	fp, #20
   14b5c:	e7c6      	b.n	14aec <bt_gatt_foreach_attr_type+0x34>
   14b5e:	bf00      	nop
   14b60:	2000210a 	.word	0x2000210a
   14b64:	0001e9e0 	.word	0x0001e9e0
   14b68:	0001e9b8 	.word	0x0001e9b8

00014b6c <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   14b6c:	b510      	push	{r4, lr}
   14b6e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   14b70:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   14b72:	aa1c      	add	r2, sp, #112	; 0x70
   14b74:	4669      	mov	r1, sp
   14b76:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   14b78:	e9cd 3300 	strd	r3, r3, [sp]
   14b7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   14b80:	f006 f937 	bl	1adf2 <tc_cmac_setup>
   14b84:	b1b8      	cbz	r0, 14bb6 <db_hash_gen.isra.0+0x4a>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   14b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14b8a:	2001      	movs	r0, #1
   14b8c:	4a0b      	ldr	r2, [pc, #44]	; (14bbc <db_hash_gen.isra.0+0x50>)
   14b8e:	ab04      	add	r3, sp, #16
   14b90:	f008 f971 	bl	1ce76 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   14b94:	480a      	ldr	r0, [pc, #40]	; (14bc0 <db_hash_gen.isra.0+0x54>)
   14b96:	a904      	add	r1, sp, #16
   14b98:	f006 f9c2 	bl	1af20 <tc_cmac_final>
   14b9c:	b158      	cbz	r0, 14bb6 <db_hash_gen.isra.0+0x4a>
   14b9e:	4b08      	ldr	r3, [pc, #32]	; (14bc0 <db_hash_gen.isra.0+0x54>)
   14ba0:	2208      	movs	r2, #8
   14ba2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   14ba6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   14ba8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   14bac:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   14bb0:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   14bb2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   14bb4:	d1f7      	bne.n	14ba6 <db_hash_gen.isra.0+0x3a>
}
   14bb6:	b048      	add	sp, #288	; 0x120
   14bb8:	bd10      	pop	{r4, pc}
   14bba:	bf00      	nop
   14bbc:	0001c8d1 	.word	0x0001c8d1
   14bc0:	200021cb 	.word	0x200021cb

00014bc4 <bt_gatt_notify_cb>:
{
   14bc4:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14bc6:	4b37      	ldr	r3, [pc, #220]	; (14ca4 <bt_gatt_notify_cb+0xe0>)
   14bc8:	f3bf 8f5b 	dmb	ish
   14bcc:	681b      	ldr	r3, [r3, #0]
   14bce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14bd2:	079a      	lsls	r2, r3, #30
{
   14bd4:	b08b      	sub	sp, #44	; 0x2c
   14bd6:	4604      	mov	r4, r0
   14bd8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14bda:	d55d      	bpl.n	14c98 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   14bdc:	6848      	ldr	r0, [r1, #4]
   14bde:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14be0:	b114      	cbz	r4, 14be8 <bt_gatt_notify_cb+0x24>
   14be2:	7b63      	ldrb	r3, [r4, #13]
   14be4:	2b07      	cmp	r3, #7
   14be6:	d15a      	bne.n	14c9e <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14be8:	f7ff ff36 	bl	14a58 <bt_gatt_attr_get_handle>
   14bec:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14bf0:	b918      	cbnz	r0, 14bfa <bt_gatt_notify_cb+0x36>
		return -ENOENT;
   14bf2:	f06f 0001 	mvn.w	r0, #1
}
   14bf6:	b00b      	add	sp, #44	; 0x2c
   14bf8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   14bfa:	682a      	ldr	r2, [r5, #0]
   14bfc:	b9aa      	cbnz	r2, 14c2a <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14bfe:	9b05      	ldr	r3, [sp, #20]
   14c00:	6818      	ldr	r0, [r3, #0]
   14c02:	2300      	movs	r3, #0
   14c04:	f88d 3010 	strb.w	r3, [sp, #16]
   14c08:	a904      	add	r1, sp, #16
   14c0a:	f642 0303 	movw	r3, #10243	; 0x2803
   14c0e:	f8ad 3012 	strh.w	r3, [sp, #18]
   14c12:	f006 fae4 	bl	1b1de <bt_uuid_cmp>
   14c16:	b1c0      	cbz	r0, 14c4a <bt_gatt_notify_cb+0x86>
	if (conn) {
   14c18:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   14c1c:	b314      	cbz	r4, 14c64 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   14c1e:	4601      	mov	r1, r0
   14c20:	462a      	mov	r2, r5
   14c22:	4620      	mov	r0, r4
   14c24:	f007 fed6 	bl	1c9d4 <gatt_notify>
   14c28:	e7e5      	b.n	14bf6 <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14c2a:	a905      	add	r1, sp, #20
   14c2c:	9102      	str	r1, [sp, #8]
   14c2e:	491e      	ldr	r1, [pc, #120]	; (14ca8 <bt_gatt_notify_cb+0xe4>)
   14c30:	9101      	str	r1, [sp, #4]
   14c32:	2101      	movs	r1, #1
	found->attr = NULL;
   14c34:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14c36:	9100      	str	r1, [sp, #0]
   14c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14c3c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14c3e:	f7ff ff3b 	bl	14ab8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14c42:	9b05      	ldr	r3, [sp, #20]
   14c44:	2b00      	cmp	r3, #0
   14c46:	d1da      	bne.n	14bfe <bt_gatt_notify_cb+0x3a>
   14c48:	e7d3      	b.n	14bf2 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14c4a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   14c4c:	68c3      	ldr	r3, [r0, #12]
   14c4e:	799b      	ldrb	r3, [r3, #6]
   14c50:	06db      	lsls	r3, r3, #27
   14c52:	d402      	bmi.n	14c5a <bt_gatt_notify_cb+0x96>
			return -EINVAL;
   14c54:	f06f 0015 	mvn.w	r0, #21
   14c58:	e7cd      	b.n	14bf6 <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14c5a:	f008 f8be 	bl	1cdda <bt_gatt_attr_value_handle>
   14c5e:	f8ad 0018 	strh.w	r0, [sp, #24]
   14c62:	e7d9      	b.n	14c18 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c64:	f642 1202 	movw	r2, #10498	; 0x2902
   14c68:	f8ad 2012 	strh.w	r2, [sp, #18]
   14c6c:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   14c6e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c72:	9202      	str	r2, [sp, #8]
   14c74:	4a0d      	ldr	r2, [pc, #52]	; (14cac <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   14c76:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   14c78:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c7a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   14c7e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c82:	aa04      	add	r2, sp, #16
   14c84:	4623      	mov	r3, r4
   14c86:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   14c8a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c8c:	f88d 4010 	strb.w	r4, [sp, #16]
   14c90:	f7ff ff12 	bl	14ab8 <bt_gatt_foreach_attr_type>
	return data.err;
   14c94:	9807      	ldr	r0, [sp, #28]
   14c96:	e7ae      	b.n	14bf6 <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
   14c98:	f06f 000a 	mvn.w	r0, #10
   14c9c:	e7ab      	b.n	14bf6 <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
   14c9e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14ca2:	e7a8      	b.n	14bf6 <bt_gatt_notify_cb+0x32>
   14ca4:	20000330 	.word	0x20000330
   14ca8:	0001c8c9 	.word	0x0001c8c9
   14cac:	000147fd 	.word	0x000147fd

00014cb0 <bt_gatt_indicate>:
{
   14cb0:	b530      	push	{r4, r5, lr}
   14cb2:	4b39      	ldr	r3, [pc, #228]	; (14d98 <bt_gatt_indicate+0xe8>)
   14cb4:	f3bf 8f5b 	dmb	ish
   14cb8:	681b      	ldr	r3, [r3, #0]
   14cba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14cbe:	079a      	lsls	r2, r3, #30
{
   14cc0:	b08b      	sub	sp, #44	; 0x2c
   14cc2:	4604      	mov	r4, r0
   14cc4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14cc6:	d561      	bpl.n	14d8c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   14cc8:	6848      	ldr	r0, [r1, #4]
   14cca:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14ccc:	b114      	cbz	r4, 14cd4 <bt_gatt_indicate+0x24>
   14cce:	7b63      	ldrb	r3, [r4, #13]
   14cd0:	2b07      	cmp	r3, #7
   14cd2:	d15e      	bne.n	14d92 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14cd4:	f7ff fec0 	bl	14a58 <bt_gatt_attr_get_handle>
   14cd8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14cdc:	b918      	cbnz	r0, 14ce6 <bt_gatt_indicate+0x36>
		return -ENOENT;
   14cde:	f06f 0001 	mvn.w	r0, #1
}
   14ce2:	b00b      	add	sp, #44	; 0x2c
   14ce4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   14ce6:	682a      	ldr	r2, [r5, #0]
   14ce8:	b9ba      	cbnz	r2, 14d1a <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14cea:	9b05      	ldr	r3, [sp, #20]
   14cec:	6818      	ldr	r0, [r3, #0]
   14cee:	2300      	movs	r3, #0
   14cf0:	f88d 3010 	strb.w	r3, [sp, #16]
   14cf4:	a904      	add	r1, sp, #16
   14cf6:	f642 0303 	movw	r3, #10243	; 0x2803
   14cfa:	f8ad 3012 	strh.w	r3, [sp, #18]
   14cfe:	f006 fa6e 	bl	1b1de <bt_uuid_cmp>
   14d02:	b1d0      	cbz	r0, 14d3a <bt_gatt_indicate+0x8a>
	if (conn) {
   14d04:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   14d08:	b324      	cbz	r4, 14d54 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   14d0a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14d0c:	4601      	mov	r1, r0
		params->_ref = 1;
   14d0e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   14d10:	462a      	mov	r2, r5
   14d12:	4620      	mov	r0, r4
   14d14:	f7ff fc8e 	bl	14634 <gatt_indicate>
   14d18:	e7e3      	b.n	14ce2 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14d1a:	a905      	add	r1, sp, #20
   14d1c:	9102      	str	r1, [sp, #8]
   14d1e:	491f      	ldr	r1, [pc, #124]	; (14d9c <bt_gatt_indicate+0xec>)
   14d20:	9101      	str	r1, [sp, #4]
   14d22:	2101      	movs	r1, #1
	found->attr = NULL;
   14d24:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14d26:	9100      	str	r1, [sp, #0]
   14d28:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14d2c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14d2e:	f7ff fec3 	bl	14ab8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14d32:	9b05      	ldr	r3, [sp, #20]
   14d34:	2b00      	cmp	r3, #0
   14d36:	d1d8      	bne.n	14cea <bt_gatt_indicate+0x3a>
   14d38:	e7d1      	b.n	14cde <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14d3a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14d3c:	68c3      	ldr	r3, [r0, #12]
   14d3e:	799b      	ldrb	r3, [r3, #6]
   14d40:	069b      	lsls	r3, r3, #26
   14d42:	d402      	bmi.n	14d4a <bt_gatt_indicate+0x9a>
			return -EINVAL;
   14d44:	f06f 0015 	mvn.w	r0, #21
   14d48:	e7cb      	b.n	14ce2 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14d4a:	f008 f846 	bl	1cdda <bt_gatt_attr_value_handle>
   14d4e:	f8ad 0018 	strh.w	r0, [sp, #24]
   14d52:	e7d7      	b.n	14d04 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   14d54:	f06f 0338 	mvn.w	r3, #56	; 0x38
   14d58:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   14d5a:	2302      	movs	r3, #2
   14d5c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14d60:	f642 1302 	movw	r3, #10498	; 0x2902
   14d64:	f8ad 3012 	strh.w	r3, [sp, #18]
   14d68:	ab05      	add	r3, sp, #20
   14d6a:	9302      	str	r3, [sp, #8]
   14d6c:	4b0c      	ldr	r3, [pc, #48]	; (14da0 <bt_gatt_indicate+0xf0>)
   14d6e:	9301      	str	r3, [sp, #4]
   14d70:	2301      	movs	r3, #1
   14d72:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   14d74:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14d76:	4623      	mov	r3, r4
   14d78:	aa04      	add	r2, sp, #16
   14d7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   14d7e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14d80:	f88d 4010 	strb.w	r4, [sp, #16]
   14d84:	f7ff fe98 	bl	14ab8 <bt_gatt_foreach_attr_type>
	return data.err;
   14d88:	9807      	ldr	r0, [sp, #28]
   14d8a:	e7aa      	b.n	14ce2 <bt_gatt_indicate+0x32>
		return -EAGAIN;
   14d8c:	f06f 000a 	mvn.w	r0, #10
   14d90:	e7a7      	b.n	14ce2 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   14d92:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14d96:	e7a4      	b.n	14ce2 <bt_gatt_indicate+0x32>
   14d98:	20000330 	.word	0x20000330
   14d9c:	0001c8c9 	.word	0x0001c8c9
   14da0:	000147fd 	.word	0x000147fd

00014da4 <sc_process>:
{
   14da4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   14da6:	f850 2c08 	ldr.w	r2, [r0, #-8]
   14daa:	9201      	str	r2, [sp, #4]
{
   14dac:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   14dae:	f1a0 0120 	sub.w	r1, r0, #32
   14db2:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14db6:	f3bf 8f5b 	dmb	ish
   14dba:	e854 2f00 	ldrex	r2, [r4]
   14dbe:	f022 0201 	bic.w	r2, r2, #1
   14dc2:	e844 2000 	strex	r0, r2, [r4]
   14dc6:	2800      	cmp	r0, #0
   14dc8:	d1f7      	bne.n	14dba <sc_process+0x16>
   14dca:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14dce:	4a0d      	ldr	r2, [pc, #52]	; (14e04 <sc_process+0x60>)
   14dd0:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   14dd4:	4a0c      	ldr	r2, [pc, #48]	; (14e08 <sc_process+0x64>)
   14dd6:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   14dda:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   14ddc:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   14dde:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   14de2:	2204      	movs	r2, #4
	sc->start = 0U;
   14de4:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   14de8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   14dec:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   14df0:	f7ff ff5e 	bl	14cb0 <bt_gatt_indicate>
   14df4:	b918      	cbnz	r0, 14dfe <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   14df6:	2101      	movs	r1, #1
   14df8:	4620      	mov	r0, r4
   14dfa:	f007 fdbf 	bl	1c97c <atomic_set_bit>
}
   14dfe:	b002      	add	sp, #8
   14e00:	bd10      	pop	{r4, pc}
   14e02:	bf00      	nop
   14e04:	0001efbc 	.word	0x0001efbc
   14e08:	00014765 	.word	0x00014765

00014e0c <update_ccc>:
{
   14e0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14e10:	4b35      	ldr	r3, [pc, #212]	; (14ee8 <update_ccc+0xdc>)
{
   14e12:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14e14:	6882      	ldr	r2, [r0, #8]
   14e16:	429a      	cmp	r2, r3
{
   14e18:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14e1a:	d160      	bne.n	14ede <update_ccc+0xd2>
	ccc = attr->user_data;
   14e1c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   14e20:	683c      	ldr	r4, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   14e22:	f108 0501 	add.w	r5, r8, #1
   14e26:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   14e2a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14e2e:	b1f3      	cbz	r3, 14e6e <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14e30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   14e34:	462a      	mov	r2, r5
   14e36:	4620      	mov	r0, r4
   14e38:	f006 febb 	bl	1bbb2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   14e3c:	b1b8      	cbz	r0, 14e6e <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   14e3e:	222a      	movs	r2, #42	; 0x2a
   14e40:	4631      	mov	r1, r6
   14e42:	4620      	mov	r0, r4
   14e44:	f008 f843 	bl	1cece <bt_gatt_check_perm>
		if (err) {
   14e48:	b1a8      	cbz	r0, 14e76 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   14e4a:	2803      	cmp	r0, #3
   14e4c:	d00f      	beq.n	14e6e <update_ccc+0x62>
				sec = BT_SECURITY_L3;
   14e4e:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   14e50:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   14e52:	bf14      	ite	ne
   14e54:	f04f 0a02 	movne.w	sl, #2
   14e58:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
   14e5c:	f006 fe57 	bl	1bb0e <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   14e60:	4582      	cmp	sl, r0
   14e62:	d908      	bls.n	14e76 <update_ccc+0x6a>
				if (data->sec < sec) {
   14e64:	793b      	ldrb	r3, [r7, #4]
   14e66:	4553      	cmp	r3, sl
   14e68:	d201      	bcs.n	14e6e <update_ccc+0x62>
					data->sec = sec;
   14e6a:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   14e6e:	350a      	adds	r5, #10
   14e70:	454d      	cmp	r5, r9
   14e72:	d034      	beq.n	14ede <update_ccc+0xd2>
   14e74:	e7d9      	b.n	14e2a <update_ccc+0x1e>
		gatt_ccc_changed(attr, ccc);
   14e76:	4641      	mov	r1, r8
   14e78:	4630      	mov	r0, r6
   14e7a:	f007 fd04 	bl	1c886 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   14e7e:	4b1b      	ldr	r3, [pc, #108]	; (14eec <update_ccc+0xe0>)
   14e80:	4598      	cmp	r8, r3
   14e82:	d12c      	bne.n	14ede <update_ccc+0xd2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   14e84:	7a20      	ldrb	r0, [r4, #8]
   14e86:	f104 0188 	add.w	r1, r4, #136	; 0x88
   14e8a:	f7ff fc19 	bl	146c0 <find_sc_cfg>
	if (!cfg) {
   14e8e:	4605      	mov	r5, r0
   14e90:	b328      	cbz	r0, 14ede <update_ccc+0xd2>
	if (!(cfg->data.start || cfg->data.end)) {
   14e92:	8902      	ldrh	r2, [r0, #8]
   14e94:	8943      	ldrh	r3, [r0, #10]
   14e96:	ea52 0103 	orrs.w	r1, r2, r3
   14e9a:	d020      	beq.n	14ede <update_ccc+0xd2>
	index = bt_conn_index(conn);
   14e9c:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   14e9e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   14ea2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   14ea6:	f7fe fd45 	bl	13934 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   14eaa:	4911      	ldr	r1, [pc, #68]	; (14ef0 <update_ccc+0xe4>)
   14eac:	4a11      	ldr	r2, [pc, #68]	; (14ef4 <update_ccc+0xe8>)
   14eae:	2318      	movs	r3, #24
   14eb0:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
   14eb4:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   14eb6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   14eb8:	4a0f      	ldr	r2, [pc, #60]	; (14ef8 <update_ccc+0xec>)
   14eba:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   14ebc:	aa01      	add	r2, sp, #4
   14ebe:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   14ec0:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14ec2:	b203      	sxth	r3, r0
   14ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   14ecc:	4620      	mov	r0, r4
   14ece:	f7ff feef 	bl	14cb0 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
   14ed2:	4632      	mov	r2, r6
   14ed4:	2100      	movs	r1, #0
   14ed6:	f105 0008 	add.w	r0, r5, #8
   14eda:	f006 f8c8 	bl	1b06e <memset>
}
   14ede:	2001      	movs	r0, #1
   14ee0:	b002      	add	sp, #8
   14ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14ee6:	bf00      	nop
   14ee8:	0001ccf7 	.word	0x0001ccf7
   14eec:	200005f4 	.word	0x200005f4
   14ef0:	20001f60 	.word	0x20001f60
   14ef4:	0001efbc 	.word	0x0001efbc
   14ef8:	0001cab7 	.word	0x0001cab7

00014efc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   14efc:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14efe:	4a0b      	ldr	r2, [pc, #44]	; (14f2c <bt_gatt_connected+0x30>)
	data.conn = conn;
   14f00:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
   14f06:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f08:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   14f0a:	2001      	movs	r0, #1
   14f0c:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f10:	f007 ffb1 	bl	1ce76 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
   14f14:	4620      	mov	r0, r4
   14f16:	f006 fdfa 	bl	1bb0e <bt_conn_get_security>
   14f1a:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   14f1e:	4288      	cmp	r0, r1
   14f20:	d202      	bcs.n	14f28 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
   14f22:	4620      	mov	r0, r4
   14f24:	f006 fdc0 	bl	1baa8 <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   14f28:	b002      	add	sp, #8
   14f2a:	bd10      	pop	{r4, pc}
   14f2c:	00014e0d 	.word	0x00014e0d

00014f30 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   14f30:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f32:	4a06      	ldr	r2, [pc, #24]	; (14f4c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   14f34:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f36:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   14f38:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   14f3e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14f42:	f007 ff98 	bl	1ce76 <bt_gatt_foreach_attr>
}
   14f46:	b003      	add	sp, #12
   14f48:	f85d fb04 	ldr.w	pc, [sp], #4
   14f4c:	00014e0d 	.word	0x00014e0d

00014f50 <db_hash_read>:
{
   14f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f54:	4680      	mov	r8, r0
	return k_work_delayable_busy_get(dwork) != 0;
   14f56:	4813      	ldr	r0, [pc, #76]	; (14fa4 <db_hash_read+0x54>)
   14f58:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   14f5c:	4615      	mov	r5, r2
   14f5e:	461f      	mov	r7, r3
   14f60:	f009 fa3f 	bl	1e3e2 <k_work_delayable_busy_get>
   14f64:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
   14f66:	480f      	ldr	r0, [pc, #60]	; (14fa4 <db_hash_read+0x54>)
   14f68:	f009 fa4f 	bl	1e40a <k_work_cancel_delayable>
	if (pending) {
   14f6c:	b114      	cbz	r4, 14f74 <db_hash_read+0x24>
		return (rc == 0) ? 0 : -EINVAL;
   14f6e:	b908      	cbnz	r0, 14f74 <db_hash_read+0x24>
		db_hash_gen(true);
   14f70:	f7ff fdfc 	bl	14b6c <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   14f74:	2101      	movs	r1, #1
   14f76:	4640      	mov	r0, r8
   14f78:	f007 ffd4 	bl	1cf24 <bt_gatt_change_aware>
	if (offset > value_len) {
   14f7c:	2e10      	cmp	r6, #16
   14f7e:	d80d      	bhi.n	14f9c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   14f80:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   14f84:	4908      	ldr	r1, [pc, #32]	; (14fa8 <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
   14f86:	42bc      	cmp	r4, r7
   14f88:	bfa8      	it	ge
   14f8a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   14f8c:	4622      	mov	r2, r4
   14f8e:	4431      	add	r1, r6
   14f90:	4628      	mov	r0, r5
   14f92:	f006 f841 	bl	1b018 <memcpy>
}
   14f96:	4620      	mov	r0, r4
   14f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14f9c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   14fa0:	e7f9      	b.n	14f96 <db_hash_read+0x46>
   14fa2:	bf00      	nop
   14fa4:	200018f0 	.word	0x200018f0
   14fa8:	200021cb 	.word	0x200021cb

00014fac <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   14fac:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14fae:	4603      	mov	r3, r0
   14fb0:	4a15      	ldr	r2, [pc, #84]	; (15008 <bt_gatt_disconnected+0x5c>)
{
   14fb2:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14fb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14fb8:	2001      	movs	r0, #1
   14fba:	f007 ff5c 	bl	1ce76 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   14fbe:	4628      	mov	r0, r5
   14fc0:	f7ff fba0 	bl	14704 <find_cf_cfg>
	if (!cfg) {
   14fc4:	4604      	mov	r4, r0
   14fc6:	b1e8      	cbz	r0, 15004 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14fc8:	f105 0688 	add.w	r6, r5, #136	; 0x88
   14fcc:	7a28      	ldrb	r0, [r5, #8]
   14fce:	4631      	mov	r1, r6
   14fd0:	f006 fcda 	bl	1b988 <bt_addr_le_is_bonded>
   14fd4:	b920      	cbnz	r0, 14fe0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   14fd6:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   14fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   14fdc:	f007 bcdc 	b.w	1c998 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   14fe0:	1c60      	adds	r0, r4, #1
   14fe2:	2207      	movs	r2, #7
   14fe4:	4631      	mov	r1, r6
   14fe6:	340c      	adds	r4, #12
   14fe8:	f006 f816 	bl	1b018 <memcpy>
   14fec:	f3bf 8f5b 	dmb	ish
   14ff0:	e854 3f00 	ldrex	r3, [r4]
   14ff4:	f023 0302 	bic.w	r3, r3, #2
   14ff8:	e844 3200 	strex	r2, r3, [r4]
   14ffc:	2a00      	cmp	r2, #0
   14ffe:	d1f7      	bne.n	14ff0 <bt_gatt_disconnected+0x44>
   15000:	f3bf 8f5b 	dmb	ish
}
   15004:	bd70      	pop	{r4, r5, r6, pc}
   15006:	bf00      	nop
   15008:	000148f1 	.word	0x000148f1

0001500c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1500c:	4b10      	ldr	r3, [pc, #64]	; (15050 <get_io_capa+0x44>)
   1500e:	681b      	ldr	r3, [r3, #0]
   15010:	b1bb      	cbz	r3, 15042 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   15012:	681a      	ldr	r2, [r3, #0]
   15014:	b142      	cbz	r2, 15028 <get_io_capa+0x1c>
   15016:	6859      	ldr	r1, [r3, #4]
   15018:	b131      	cbz	r1, 15028 <get_io_capa+0x1c>
   1501a:	6899      	ldr	r1, [r3, #8]
   1501c:	b911      	cbnz	r1, 15024 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1501e:	490d      	ldr	r1, [pc, #52]	; (15054 <get_io_capa+0x48>)
   15020:	7809      	ldrb	r1, [r1, #0]
   15022:	b939      	cbnz	r1, 15034 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   15024:	2004      	movs	r0, #4
   15026:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   15028:	490a      	ldr	r1, [pc, #40]	; (15054 <get_io_capa+0x48>)
   1502a:	7809      	ldrb	r1, [r1, #0]
   1502c:	b111      	cbz	r1, 15034 <get_io_capa+0x28>
   1502e:	b10a      	cbz	r2, 15034 <get_io_capa+0x28>
   15030:	6899      	ldr	r1, [r3, #8]
   15032:	b941      	cbnz	r1, 15046 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   15034:	685b      	ldr	r3, [r3, #4]
   15036:	b943      	cbnz	r3, 1504a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   15038:	2a00      	cmp	r2, #0
   1503a:	bf0c      	ite	eq
   1503c:	2003      	moveq	r0, #3
   1503e:	2000      	movne	r0, #0
   15040:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   15042:	2003      	movs	r0, #3
   15044:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   15046:	2001      	movs	r0, #1
   15048:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1504a:	2002      	movs	r0, #2
	}
}
   1504c:	4770      	bx	lr
   1504e:	bf00      	nop
   15050:	20001ee8 	.word	0x20001ee8
   15054:	200021dc 	.word	0x200021dc

00015058 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   15058:	4b04      	ldr	r3, [pc, #16]	; (1506c <bt_smp_accept+0x14>)
   1505a:	6818      	ldr	r0, [r3, #0]
   1505c:	b918      	cbnz	r0, 15066 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1505e:	4a04      	ldr	r2, [pc, #16]	; (15070 <bt_smp_accept+0x18>)
   15060:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
   15062:	600b      	str	r3, [r1, #0]

		return 0;
   15064:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   15066:	f06f 000b 	mvn.w	r0, #11
}
   1506a:	4770      	bx	lr
   1506c:	20001978 	.word	0x20001978
   15070:	0001f138 	.word	0x0001f138

00015074 <smp_dhkey_generate>:
{
   15074:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   15076:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   1507a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1507c:	2108      	movs	r1, #8
   1507e:	4628      	mov	r0, r5
   15080:	f007 ff96 	bl	1cfb0 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   15084:	4905      	ldr	r1, [pc, #20]	; (1509c <smp_dhkey_generate+0x28>)
   15086:	f204 1017 	addw	r0, r4, #279	; 0x117
   1508a:	f7fd ff6d 	bl	12f68 <bt_dh_key_gen>
	if (err) {
   1508e:	b120      	cbz	r0, 1509a <smp_dhkey_generate+0x26>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   15090:	4628      	mov	r0, r5
   15092:	2108      	movs	r1, #8
   15094:	f007 ffb2 	bl	1cffc <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   15098:	2008      	movs	r0, #8
}
   1509a:	bd38      	pop	{r3, r4, r5, pc}
   1509c:	0001d6b1 	.word	0x0001d6b1

000150a0 <get_auth.isra.0>:
	if (sc_supported) {
   150a0:	4b0c      	ldr	r3, [pc, #48]	; (150d4 <get_auth.isra.0+0x34>)
   150a2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   150a4:	b510      	push	{r4, lr}
	if (sc_supported) {
   150a6:	b17b      	cbz	r3, 150c8 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   150a8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   150ac:	f7ff ffae 	bl	1500c <get_io_capa>
	if (bondable) {
   150b0:	4b09      	ldr	r3, [pc, #36]	; (150d8 <get_auth.isra.0+0x38>)
   150b2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   150b4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   150b6:	bf0c      	ite	eq
   150b8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   150bc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   150c0:	b12b      	cbz	r3, 150ce <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   150c2:	f044 0001 	orr.w	r0, r4, #1
}
   150c6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   150c8:	f000 0407 	and.w	r4, r0, #7
   150cc:	e7ee      	b.n	150ac <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   150ce:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   150d2:	e7f8      	b.n	150c6 <get_auth.isra.0+0x26>
   150d4:	200021dc 	.word	0x200021dc
   150d8:	20000701 	.word	0x20000701

000150dc <smp_init>:
{
   150dc:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   150de:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
   150e2:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   150e4:	22f0      	movs	r2, #240	; 0xf0
   150e6:	2100      	movs	r1, #0
   150e8:	4628      	mov	r0, r5
   150ea:	f005 ffc0 	bl	1b06e <memset>
	if (bt_rand(smp->prnd, 16)) {
   150ee:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   150f2:	2110      	movs	r1, #16
   150f4:	f002 fc42 	bl	1797c <bt_rand>
   150f8:	4604      	mov	r4, r0
   150fa:	b948      	cbnz	r0, 15110 <smp_init+0x34>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   150fc:	2105      	movs	r1, #5
   150fe:	4628      	mov	r0, r5
   15100:	f007 ff56 	bl	1cfb0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   15104:	f7fd ff20 	bl	12f48 <bt_pub_key_get>
   15108:	4b02      	ldr	r3, [pc, #8]	; (15114 <smp_init+0x38>)
   1510a:	6018      	str	r0, [r3, #0]
}
   1510c:	4620      	mov	r0, r4
   1510e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   15110:	2408      	movs	r4, #8
   15112:	e7fb      	b.n	1510c <smp_init+0x30>
   15114:	20001f7c 	.word	0x20001f7c

00015118 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   15118:	b513      	push	{r0, r1, r4, lr}
   1511a:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1511c:	2200      	movs	r2, #0
   1511e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   15120:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   15122:	460a      	mov	r2, r1
   15124:	6800      	ldr	r0, [r0, #0]
   15126:	2106      	movs	r1, #6
   15128:	f006 fe98 	bl	1be5c <bt_l2cap_send_cb>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1512c:	4805      	ldr	r0, [pc, #20]	; (15144 <smp_send.isra.0+0x2c>)
   1512e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15132:	2300      	movs	r3, #0
   15134:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
   15138:	b002      	add	sp, #8
   1513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1513e:	f003 bdfb 	b.w	18d38 <k_work_reschedule_for_queue>
   15142:	bf00      	nop
   15144:	20001d58 	.word	0x20001d58

00015148 <smp_find>:
{
   15148:	4601      	mov	r1, r0
   1514a:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1514c:	4803      	ldr	r0, [pc, #12]	; (1515c <smp_find+0x14>)
   1514e:	f008 f803 	bl	1d158 <atomic_test_bit>
   15152:	2800      	cmp	r0, #0
}
   15154:	4802      	ldr	r0, [pc, #8]	; (15160 <smp_find+0x18>)
   15156:	bf08      	it	eq
   15158:	2000      	moveq	r0, #0
   1515a:	bd08      	pop	{r3, pc}
   1515c:	20001a3c 	.word	0x20001a3c
   15160:	20001978 	.word	0x20001978

00015164 <compute_and_check_and_send_slave_dhcheck>:
{
   15164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   15168:	2210      	movs	r2, #16
{
   1516a:	b0a3      	sub	sp, #140	; 0x8c
   1516c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1516e:	2100      	movs	r1, #0
   15170:	eb0d 0002 	add.w	r0, sp, r2
   15174:	f005 ff7b 	bl	1b06e <memset>
	switch (smp->method) {
   15178:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1517c:	2b05      	cmp	r3, #5
   1517e:	d87e      	bhi.n	1527e <compute_and_check_and_send_slave_dhcheck+0x11a>
   15180:	e8df f003 	tbb	[pc, r3]
   15184:	09030309 	.word	0x09030309
   15188:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1518a:	2204      	movs	r2, #4
   1518c:	f504 71cc 	add.w	r1, r4, #408	; 0x198
   15190:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   15192:	f005 ff41 	bl	1b018 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   15196:	4b63      	ldr	r3, [pc, #396]	; (15324 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   15198:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
   1519c:	aa14      	add	r2, sp, #80	; 0x50
   1519e:	f103 0630 	add.w	r6, r3, #48	; 0x30
   151a2:	6818      	ldr	r0, [r3, #0]
   151a4:	6859      	ldr	r1, [r3, #4]
   151a6:	4615      	mov	r5, r2
   151a8:	c503      	stmia	r5!, {r0, r1}
   151aa:	3308      	adds	r3, #8
   151ac:	42b3      	cmp	r3, r6
   151ae:	462a      	mov	r2, r5
   151b0:	d1f7      	bne.n	151a2 <compute_and_check_and_send_slave_dhcheck+0x3e>
   151b2:	6818      	ldr	r0, [r3, #0]
   151b4:	791b      	ldrb	r3, [r3, #4]
   151b6:	6028      	str	r0, [r5, #0]
   151b8:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   151ba:	ad0c      	add	r5, sp, #48	; 0x30
   151bc:	2220      	movs	r2, #32
   151be:	f204 1157 	addw	r1, r4, #343	; 0x157
   151c2:	4628      	mov	r0, r5
   151c4:	f007 fee0 	bl	1cf88 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   151c8:	4857      	ldr	r0, [pc, #348]	; (15328 <compute_and_check_and_send_slave_dhcheck+0x1c4>)
   151ca:	ab08      	add	r3, sp, #32
   151cc:	2220      	movs	r2, #32
   151ce:	4629      	mov	r1, r5
   151d0:	f007 ff23 	bl	1d01a <bt_smp_aes_cmac>
	if (err) {
   151d4:	2800      	cmp	r0, #0
   151d6:	d152      	bne.n	1527e <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   151d8:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
   151dc:	2210      	movs	r2, #16
   151de:	4639      	mov	r1, r7
   151e0:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   151e4:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
   151e8:	f007 fece 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   151ec:	2210      	movs	r2, #16
   151ee:	4641      	mov	r1, r8
   151f0:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   151f4:	f007 fec8 	bl	1cf88 <sys_memcpy_swap>
	m[37] = a1->type;
   151f8:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   151fc:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   15200:	2206      	movs	r2, #6
   15202:	f109 0190 	add.w	r1, r9, #144	; 0x90
   15206:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1520a:	f007 febd 	bl	1cf88 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1520e:	f204 1687 	addw	r6, r4, #391	; 0x187
	m[44] = a2->type;
   15212:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   15216:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1521a:	2206      	movs	r2, #6
   1521c:	f109 0197 	add.w	r1, r9, #151	; 0x97
   15220:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   15224:	f007 feb0 	bl	1cf88 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   15228:	4633      	mov	r3, r6
   1522a:	2235      	movs	r2, #53	; 0x35
   1522c:	a914      	add	r1, sp, #80	; 0x50
   1522e:	a808      	add	r0, sp, #32
   15230:	f007 fef3 	bl	1d01a <bt_smp_aes_cmac>
	if (err) {
   15234:	bb18      	cbnz	r0, 1527e <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   15236:	4630      	mov	r0, r6
   15238:	f007 ff0d 	bl	1d056 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1523c:	f204 1907 	addw	r9, r4, #263	; 0x107
	m[0] = 0x01;
   15240:	2301      	movs	r3, #1
   15242:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   15246:	2235      	movs	r2, #53	; 0x35
   15248:	464b      	mov	r3, r9
   1524a:	a914      	add	r1, sp, #80	; 0x50
   1524c:	a808      	add	r0, sp, #32
   1524e:	f007 fee4 	bl	1d01a <bt_smp_aes_cmac>
	if (err) {
   15252:	b9a0      	cbnz	r0, 1527e <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   15254:	4648      	mov	r0, r9
   15256:	f007 fefe 	bl	1d056 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1525a:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1525c:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
   1525e:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   15262:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   15264:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   15268:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1526a:	e9cd 2300 	strd	r2, r3, [sp]
   1526e:	9102      	str	r1, [sp, #8]
   15270:	ab04      	add	r3, sp, #16
   15272:	463a      	mov	r2, r7
   15274:	4641      	mov	r1, r8
   15276:	4630      	mov	r0, r6
   15278:	f007 fefb 	bl	1d072 <smp_f6>
   1527c:	b148      	cbz	r0, 15292 <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   1527e:	2008      	movs	r0, #8
   15280:	e048      	b.n	15314 <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
   15282:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   15286:	2900      	cmp	r1, #0
   15288:	d085      	beq.n	15196 <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1528a:	2210      	movs	r2, #16
   1528c:	eb0d 0002 	add.w	r0, sp, r2
   15290:	e77f      	b.n	15192 <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
   15292:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   15296:	2b05      	cmp	r3, #5
   15298:	d108      	bne.n	152ac <compute_and_check_and_send_slave_dhcheck+0x148>
		if (smp->oobd_local) {
   1529a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1529e:	2210      	movs	r2, #16
   152a0:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   152a4:	2900      	cmp	r1, #0
   152a6:	d038      	beq.n	1531a <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   152a8:	f005 feb6 	bl	1b018 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   152ac:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   152ae:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
   152b0:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   152b4:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   152b6:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   152ba:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   152bc:	e9cd 2300 	strd	r2, r3, [sp]
   152c0:	9102      	str	r1, [sp, #8]
   152c2:	ab04      	add	r3, sp, #16
   152c4:	4642      	mov	r2, r8
   152c6:	4639      	mov	r1, r7
   152c8:	f007 fed3 	bl	1d072 <smp_f6>
   152cc:	2800      	cmp	r0, #0
   152ce:	d1d6      	bne.n	1527e <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   152d0:	4629      	mov	r1, r5
   152d2:	2210      	movs	r2, #16
   152d4:	f204 1077 	addw	r0, r4, #375	; 0x177
   152d8:	f005 fe8e 	bl	1aff8 <memcmp>
   152dc:	4605      	mov	r5, r0
   152de:	b9f8      	cbnz	r0, 15320 <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   152e0:	210d      	movs	r1, #13
   152e2:	4620      	mov	r0, r4
   152e4:	f007 ff41 	bl	1d16a <smp_create_pdu.isra.0>
	if (!buf) {
   152e8:	4606      	mov	r6, r0
   152ea:	2800      	cmp	r0, #0
   152ec:	d0c7      	beq.n	1527e <compute_and_check_and_send_slave_dhcheck+0x11a>
   152ee:	2110      	movs	r1, #16
   152f0:	3008      	adds	r0, #8
   152f2:	f008 fc05 	bl	1db00 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   152f6:	2210      	movs	r2, #16
   152f8:	a914      	add	r1, sp, #80	; 0x50
   152fa:	f005 fe8d 	bl	1b018 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   152fe:	462a      	mov	r2, r5
   15300:	4631      	mov	r1, r6
   15302:	4620      	mov	r0, r4
   15304:	f7ff ff08 	bl	15118 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   15308:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1530c:	2101      	movs	r1, #1
   1530e:	f007 fe4f 	bl	1cfb0 <atomic_set_bit>
	return 0;
   15312:	4628      	mov	r0, r5
}
   15314:	b023      	add	sp, #140	; 0x8c
   15316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   1531a:	f005 fea8 	bl	1b06e <memset>
   1531e:	e7c5      	b.n	152ac <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   15320:	200b      	movs	r0, #11
   15322:	e7f7      	b.n	15314 <compute_and_check_and_send_slave_dhcheck+0x1b0>
   15324:	0001ea81 	.word	0x0001ea81
   15328:	0001f845 	.word	0x0001f845

0001532c <smp_send_pairing_confirm>:
{
   1532c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1532e:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
   15332:	2c02      	cmp	r4, #2
{
   15334:	4605      	mov	r5, r0
	switch (smp->method) {
   15336:	d824      	bhi.n	15382 <smp_send_pairing_confirm+0x56>
   15338:	b14c      	cbz	r4, 1534e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1533a:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
   1533e:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
   15342:	40dc      	lsrs	r4, r3
   15344:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   15348:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1534c:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1534e:	2103      	movs	r1, #3
   15350:	4628      	mov	r0, r5
   15352:	f007 ff0a 	bl	1d16a <smp_create_pdu.isra.0>
	if (!buf) {
   15356:	4606      	mov	r6, r0
   15358:	b1a8      	cbz	r0, 15386 <smp_send_pairing_confirm+0x5a>
   1535a:	2110      	movs	r1, #16
   1535c:	3008      	adds	r0, #8
   1535e:	f008 fbcf 	bl	1db00 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   15362:	9000      	str	r0, [sp, #0]
   15364:	4810      	ldr	r0, [pc, #64]	; (153a8 <smp_send_pairing_confirm+0x7c>)
   15366:	4623      	mov	r3, r4
   15368:	6800      	ldr	r0, [r0, #0]
   1536a:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
   1536e:	f205 1117 	addw	r1, r5, #279	; 0x117
   15372:	f007 feca 	bl	1d10a <smp_f4>
   15376:	4604      	mov	r4, r0
   15378:	b148      	cbz	r0, 1538e <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
   1537a:	4630      	mov	r0, r6
   1537c:	f000 ffe4 	bl	16348 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   15380:	e001      	b.n	15386 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
   15382:	2c03      	cmp	r4, #3
   15384:	d001      	beq.n	1538a <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
   15386:	2008      	movs	r0, #8
   15388:	e00c      	b.n	153a4 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1538a:	2400      	movs	r4, #0
   1538c:	e7df      	b.n	1534e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1538e:	4602      	mov	r2, r0
   15390:	4631      	mov	r1, r6
   15392:	4628      	mov	r0, r5
   15394:	f7ff fec0 	bl	15118 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   15398:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1539c:	4621      	mov	r1, r4
   1539e:	f007 fe2d 	bl	1cffc <atomic_clear_bit>
	return 0;
   153a2:	4620      	mov	r0, r4
}
   153a4:	b002      	add	sp, #8
   153a6:	bd70      	pop	{r4, r5, r6, pc}
   153a8:	20001f7c 	.word	0x20001f7c

000153ac <smp_public_key_slave>:
{
   153ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   153b0:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
{
   153b4:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   153b6:	210e      	movs	r1, #14
   153b8:	4630      	mov	r0, r6
   153ba:	f007 fecd 	bl	1d158 <atomic_test_bit>
   153be:	b138      	cbz	r0, 153d0 <smp_public_key_slave+0x24>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   153c0:	210c      	movs	r1, #12
   153c2:	4620      	mov	r0, r4
   153c4:	f007 fed1 	bl	1d16a <smp_create_pdu.isra.0>
	if (!req_buf) {
   153c8:	4605      	mov	r5, r0
   153ca:	b958      	cbnz	r0, 153e4 <smp_public_key_slave+0x38>
	switch (smp->method) {
   153cc:	2008      	movs	r0, #8
   153ce:	e03f      	b.n	15450 <smp_public_key_slave+0xa4>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   153d0:	4b43      	ldr	r3, [pc, #268]	; (154e0 <smp_public_key_slave+0x134>)
   153d2:	2240      	movs	r2, #64	; 0x40
   153d4:	6819      	ldr	r1, [r3, #0]
   153d6:	f204 1017 	addw	r0, r4, #279	; 0x117
   153da:	f005 fe0d 	bl	1aff8 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   153de:	2800      	cmp	r0, #0
   153e0:	d1ee      	bne.n	153c0 <smp_public_key_slave+0x14>
   153e2:	e7f3      	b.n	153cc <smp_public_key_slave+0x20>
   153e4:	2140      	movs	r1, #64	; 0x40
   153e6:	3008      	adds	r0, #8
   153e8:	f008 fb8a 	bl	1db00 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   153ec:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 154e0 <smp_public_key_slave+0x134>
   153f0:	2220      	movs	r2, #32
   153f2:	f8d8 1000 	ldr.w	r1, [r8]
   153f6:	4607      	mov	r7, r0
   153f8:	f005 fe0e 	bl	1b018 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   153fc:	f8d8 1000 	ldr.w	r1, [r8]
   15400:	2220      	movs	r2, #32
   15402:	4411      	add	r1, r2
   15404:	18b8      	adds	r0, r7, r2
   15406:	f005 fe07 	bl	1b018 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1540a:	2200      	movs	r2, #0
   1540c:	4629      	mov	r1, r5
   1540e:	4620      	mov	r0, r4
   15410:	f7ff fe82 	bl	15118 <smp_send.isra.0>
	switch (smp->method) {
   15414:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   15418:	2b05      	cmp	r3, #5
   1541a:	d8d7      	bhi.n	153cc <smp_public_key_slave+0x20>
   1541c:	a201      	add	r2, pc, #4	; (adr r2, 15424 <smp_public_key_slave+0x78>)
   1541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15422:	bf00      	nop
   15424:	0001543d 	.word	0x0001543d
   15428:	000154a3 	.word	0x000154a3
   1542c:	00015455 	.word	0x00015455
   15430:	0001543d 	.word	0x0001543d
   15434:	000153cd 	.word	0x000153cd
   15438:	000154d9 	.word	0x000154d9
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1543c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15440:	2104      	movs	r1, #4
   15442:	f007 fdb5 	bl	1cfb0 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   15446:	4620      	mov	r0, r4
   15448:	f7ff ff70 	bl	1532c <smp_send_pairing_confirm>
		if (err) {
   1544c:	2800      	cmp	r0, #0
   1544e:	d036      	beq.n	154be <smp_public_key_slave+0x112>
}
   15450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   15454:	2104      	movs	r1, #4
   15456:	f504 70cc 	add.w	r0, r4, #408	; 0x198
   1545a:	f002 fa8f 	bl	1797c <bt_rand>
   1545e:	2800      	cmp	r0, #0
   15460:	d1b4      	bne.n	153cc <smp_public_key_slave+0x20>
		smp->passkey %= 1000000;
   15462:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   15466:	4a1f      	ldr	r2, [pc, #124]	; (154e4 <smp_public_key_slave+0x138>)
	if (bt_auth && bt_auth->passkey_display) {
   15468:	4d1f      	ldr	r5, [pc, #124]	; (154e8 <smp_public_key_slave+0x13c>)
		smp->passkey %= 1000000;
   1546a:	fbb1 f3f2 	udiv	r3, r1, r2
   1546e:	fb02 1313 	mls	r3, r2, r3, r1
   15472:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
   15476:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   15478:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
   1547c:	b15b      	cbz	r3, 15496 <smp_public_key_slave+0xea>
   1547e:	681b      	ldr	r3, [r3, #0]
   15480:	b14b      	cbz	r3, 15496 <smp_public_key_slave+0xea>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   15482:	210b      	movs	r1, #11
   15484:	4630      	mov	r0, r6
   15486:	f007 fd93 	bl	1cfb0 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1548a:	682b      	ldr	r3, [r5, #0]
   1548c:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   15490:	681b      	ldr	r3, [r3, #0]
   15492:	6820      	ldr	r0, [r4, #0]
   15494:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   15496:	2103      	movs	r1, #3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   15498:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1549c:	f007 fd88 	bl	1cfb0 <atomic_set_bit>
		break;
   154a0:	e00d      	b.n	154be <smp_public_key_slave+0x112>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   154a2:	2103      	movs	r1, #3
   154a4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   154a8:	f007 fd82 	bl	1cfb0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   154ac:	4630      	mov	r0, r6
   154ae:	210a      	movs	r1, #10
   154b0:	f007 fd7e 	bl	1cfb0 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   154b4:	4b0c      	ldr	r3, [pc, #48]	; (154e8 <smp_public_key_slave+0x13c>)
   154b6:	6820      	ldr	r0, [r4, #0]
   154b8:	681b      	ldr	r3, [r3, #0]
   154ba:	685b      	ldr	r3, [r3, #4]
   154bc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   154be:	4630      	mov	r0, r6
   154c0:	2107      	movs	r1, #7
   154c2:	f007 fd75 	bl	1cfb0 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   154c6:	2008      	movs	r0, #8
   154c8:	f7ff fe3e 	bl	15148 <smp_find>
   154cc:	b930      	cbnz	r0, 154dc <smp_public_key_slave+0x130>
		return smp_dhkey_generate(smp);
   154ce:	4620      	mov	r0, r4
}
   154d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   154d4:	f7ff bdce 	b.w	15074 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   154d8:	2104      	movs	r1, #4
   154da:	e7dd      	b.n	15498 <smp_public_key_slave+0xec>
	return 0;
   154dc:	2000      	movs	r0, #0
   154de:	e7b7      	b.n	15450 <smp_public_key_slave+0xa4>
   154e0:	20001f7c 	.word	0x20001f7c
   154e4:	000f4240 	.word	0x000f4240
   154e8:	20001ee8 	.word	0x20001ee8

000154ec <smp_public_key>:
{
   154ec:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   154ee:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   154f0:	f200 1517 	addw	r5, r0, #279	; 0x117
{
   154f4:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   154f6:	2220      	movs	r2, #32
   154f8:	4631      	mov	r1, r6
   154fa:	4628      	mov	r0, r5
   154fc:	f005 fd8c 	bl	1b018 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   15500:	2220      	movs	r2, #32
   15502:	18b1      	adds	r1, r6, r2
   15504:	f204 1037 	addw	r0, r4, #311	; 0x137
   15508:	f005 fd86 	bl	1b018 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1550c:	4628      	mov	r0, r5
   1550e:	f7fd fcc9 	bl	12ea4 <bt_pub_key_is_debug>
   15512:	b948      	cbnz	r0, 15528 <smp_public_key+0x3c>
	if (!sc_public_key) {
   15514:	4b16      	ldr	r3, [pc, #88]	; (15570 <smp_public_key+0x84>)
   15516:	681d      	ldr	r5, [r3, #0]
   15518:	bb25      	cbnz	r5, 15564 <smp_public_key+0x78>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1551a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1551e:	2106      	movs	r1, #6
   15520:	f007 fd46 	bl	1cfb0 <atomic_set_bit>
		return 0;
   15524:	4628      	mov	r0, r5
   15526:	e01c      	b.n	15562 <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   15528:	210e      	movs	r1, #14
   1552a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1552e:	f007 fd3f 	bl	1cfb0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   15532:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
   15534:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   15538:	b933      	cbnz	r3, 15548 <smp_public_key+0x5c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1553a:	7a28      	ldrb	r0, [r5, #8]
   1553c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   15540:	f000 fdb0 	bl	160a4 <bt_keys_get_addr>
   15544:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   15548:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1554c:	2b00      	cmp	r3, #0
   1554e:	d0e1      	beq.n	15514 <smp_public_key+0x28>
   15550:	89da      	ldrh	r2, [r3, #14]
   15552:	f002 0224 	and.w	r2, r2, #36	; 0x24
   15556:	2a00      	cmp	r2, #0
   15558:	d0dc      	beq.n	15514 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1555a:	7b5b      	ldrb	r3, [r3, #13]
   1555c:	079b      	lsls	r3, r3, #30
   1555e:	d4d9      	bmi.n	15514 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   15560:	2003      	movs	r0, #3
}
   15562:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
   15564:	4620      	mov	r0, r4
}
   15566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
   1556a:	f7ff bf1f 	b.w	153ac <smp_public_key_slave>
   1556e:	bf00      	nop
   15570:	20001f7c 	.word	0x20001f7c

00015574 <smp_pairing_req>:
{
   15574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   15578:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1557a:	78eb      	ldrb	r3, [r5, #3]
   1557c:	3b07      	subs	r3, #7
   1557e:	2b09      	cmp	r3, #9
{
   15580:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   15582:	d904      	bls.n	1558e <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   15584:	2506      	movs	r5, #6
}
   15586:	4628      	mov	r0, r5
   15588:	b002      	add	sp, #8
   1558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1558e:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
   15590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   15594:	b163      	cbz	r3, 155b0 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   15596:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   1559a:	210f      	movs	r1, #15
   1559c:	4630      	mov	r0, r6
   1559e:	f007 fddb 	bl	1d158 <atomic_test_bit>
   155a2:	b980      	cbnz	r0, 155c6 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   155a4:	4620      	mov	r0, r4
   155a6:	f7ff fd99 	bl	150dc <smp_init>
		if (ret) {
   155aa:	b160      	cbz	r0, 155c6 <smp_pairing_req+0x52>
			return ret;
   155ac:	b2c5      	uxtb	r5, r0
   155ae:	e7ea      	b.n	15586 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   155b0:	7a38      	ldrb	r0, [r7, #8]
   155b2:	f107 0188 	add.w	r1, r7, #136	; 0x88
   155b6:	f000 fd75 	bl	160a4 <bt_keys_get_addr>
   155ba:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   155be:	2800      	cmp	r0, #0
   155c0:	d1e9      	bne.n	15596 <smp_pairing_req+0x22>
	switch (conn->required_sec_level) {
   155c2:	2508      	movs	r5, #8
   155c4:	e7df      	b.n	15586 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   155c6:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   155c8:	2206      	movs	r2, #6
   155ca:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   155cc:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
   155d0:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   155d4:	f005 fd20 	bl	1b018 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   155d8:	2302      	movs	r3, #2
   155da:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
   155de:	78a8      	ldrb	r0, [r5, #2]
   155e0:	f7ff fd5e 	bl	150a0 <get_auth.isra.0>
   155e4:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
   155e8:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   155ea:	f7ff fd0f 	bl	1500c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   155ee:	4bb9      	ldr	r3, [pc, #740]	; (158d4 <smp_pairing_req+0x360>)
	rsp->io_capability = get_io_capa();
   155f0:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   155f4:	781b      	ldrb	r3, [r3, #0]
   155f6:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   155fa:	2310      	movs	r3, #16
   155fc:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   15600:	792b      	ldrb	r3, [r5, #4]
   15602:	f003 0303 	and.w	r3, r3, #3
   15606:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1560a:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1560c:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   15610:	f003 0301 	and.w	r3, r3, #1
   15614:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   15618:	d00f      	beq.n	1563a <smp_pairing_req+0xc6>
   1561a:	78ab      	ldrb	r3, [r5, #2]
   1561c:	071b      	lsls	r3, r3, #28
   1561e:	d50c      	bpl.n	1563a <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   15620:	2105      	movs	r1, #5
   15622:	4630      	mov	r0, r6
   15624:	f007 fcc4 	bl	1cfb0 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   15628:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   1562c:	f003 0302 	and.w	r3, r3, #2
   15630:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
   15634:	2300      	movs	r3, #0
   15636:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1563a:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   1563e:	0698      	lsls	r0, r3, #26
   15640:	d506      	bpl.n	15650 <smp_pairing_req+0xdc>
   15642:	78ab      	ldrb	r3, [r5, #2]
   15644:	0699      	lsls	r1, r3, #26
   15646:	d503      	bpl.n	15650 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   15648:	2114      	movs	r1, #20
   1564a:	4630      	mov	r0, r6
   1564c:	f007 fcb0 	bl	1cfb0 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   15650:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   15654:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
   15658:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   1565c:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   15660:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   15664:	07da      	lsls	r2, r3, #31
   15666:	d506      	bpl.n	15676 <smp_pairing_req+0x102>
   15668:	78ab      	ldrb	r3, [r5, #2]
   1566a:	07db      	lsls	r3, r3, #31
   1566c:	d503      	bpl.n	15676 <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1566e:	210d      	movs	r1, #13
   15670:	4630      	mov	r0, r6
   15672:	f007 fc9d 	bl	1cfb0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   15676:	2103      	movs	r1, #3
   15678:	4630      	mov	r0, r6
   1567a:	f007 fc99 	bl	1cfb0 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1567e:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   15680:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15682:	f007 fd69 	bl	1d158 <atomic_test_bit>
   15686:	f8d4 8000 	ldr.w	r8, [r4]
   1568a:	2800      	cmp	r0, #0
   1568c:	d164      	bne.n	15758 <smp_pairing_req+0x1e4>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1568e:	2d04      	cmp	r5, #4
   15690:	d81d      	bhi.n	156ce <smp_pairing_req+0x15a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   15692:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   15696:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
   1569a:	4013      	ands	r3, r2
   1569c:	07d8      	lsls	r0, r3, #31
   1569e:	d478      	bmi.n	15792 <smp_pairing_req+0x21e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   156a0:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   156a4:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   156a8:	4318      	orrs	r0, r3
   156aa:	f010 0004 	ands.w	r0, r0, #4
   156ae:	d00e      	beq.n	156ce <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa()];
   156b0:	f7ff fcac 	bl	1500c <get_io_capa>
   156b4:	4b88      	ldr	r3, [pc, #544]	; (158d8 <smp_pairing_req+0x364>)
   156b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   156ba:	441d      	add	r5, r3
   156bc:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   156be:	2804      	cmp	r0, #4
   156c0:	d105      	bne.n	156ce <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   156c2:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
   156c6:	2b00      	cmp	r3, #0
   156c8:	bf0c      	ite	eq
   156ca:	2002      	moveq	r0, #2
   156cc:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   156ce:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!conn->le.keys) {
   156d2:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   156d6:	b93b      	cbnz	r3, 156e8 <smp_pairing_req+0x174>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   156d8:	f898 0008 	ldrb.w	r0, [r8, #8]
   156dc:	f108 0188 	add.w	r1, r8, #136	; 0x88
   156e0:	f000 fce0 	bl	160a4 <bt_keys_get_addr>
   156e4:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
   156e8:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
   156ec:	2a00      	cmp	r2, #0
   156ee:	d16d      	bne.n	157cc <smp_pairing_req+0x258>
	switch (conn->required_sec_level) {
   156f0:	6823      	ldr	r3, [r4, #0]
   156f2:	7a9b      	ldrb	r3, [r3, #10]
   156f4:	2b03      	cmp	r3, #3
   156f6:	d064      	beq.n	157c2 <smp_pairing_req+0x24e>
   156f8:	d851      	bhi.n	1579e <smp_pairing_req+0x22a>
   156fa:	3b01      	subs	r3, #1
   156fc:	2b01      	cmp	r3, #1
   156fe:	f63f af60 	bhi.w	155c2 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15702:	2105      	movs	r1, #5
   15704:	4630      	mov	r0, r6
   15706:	f007 fd27 	bl	1d158 <atomic_test_bit>
   1570a:	2800      	cmp	r0, #0
   1570c:	f040 80f6 	bne.w	158fc <smp_pairing_req+0x388>
	struct bt_conn *conn = smp->chan.chan.conn;
   15710:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   15712:	7a28      	ldrb	r0, [r5, #8]
   15714:	f105 0188 	add.w	r1, r5, #136	; 0x88
   15718:	f000 fd4a 	bl	161b0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1571c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   15720:	b128      	cbz	r0, 1572e <smp_pairing_req+0x1ba>
   15722:	7b42      	ldrb	r2, [r0, #13]
   15724:	07d2      	lsls	r2, r2, #31
   15726:	d502      	bpl.n	1572e <smp_pairing_req+0x1ba>
   15728:	2b00      	cmp	r3, #0
   1572a:	f43f af4a 	beq.w	155c2 <smp_pairing_req+0x4e>
	switch (smp->method) {
   1572e:	2b06      	cmp	r3, #6
   15730:	f63f af47 	bhi.w	155c2 <smp_pairing_req+0x4e>
   15734:	a201      	add	r2, pc, #4	; (adr r2, 1573c <smp_pairing_req+0x1c8>)
   15736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1573a:	bf00      	nop
   1573c:	00015839 	.word	0x00015839
   15740:	000158bd 	.word	0x000158bd
   15744:	00015867 	.word	0x00015867
   15748:	000155c3 	.word	0x000155c3
   1574c:	000155c3 	.word	0x000155c3
   15750:	000155c3 	.word	0x000155c3
   15754:	0001580b 	.word	0x0001580b
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   15758:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   1575c:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
   15760:	ea00 0302 	and.w	r3, r0, r2
   15764:	0719      	lsls	r1, r3, #28
   15766:	d506      	bpl.n	15776 <smp_pairing_req+0x202>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   15768:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   1576c:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
   15770:	430b      	orrs	r3, r1
   15772:	07db      	lsls	r3, r3, #31
   15774:	d40f      	bmi.n	15796 <smp_pairing_req+0x222>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   15776:	2d04      	cmp	r5, #4
   15778:	d80f      	bhi.n	1579a <smp_pairing_req+0x226>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1577a:	4310      	orrs	r0, r2
   1577c:	f010 0004 	ands.w	r0, r0, #4
   15780:	d0a5      	beq.n	156ce <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
   15782:	f7ff fc43 	bl	1500c <get_io_capa>
   15786:	4b55      	ldr	r3, [pc, #340]	; (158dc <smp_pairing_req+0x368>)
   15788:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1578c:	441d      	add	r5, r3
   1578e:	5c28      	ldrb	r0, [r5, r0]
   15790:	e79d      	b.n	156ce <smp_pairing_req+0x15a>
		return LEGACY_OOB;
   15792:	2006      	movs	r0, #6
   15794:	e79b      	b.n	156ce <smp_pairing_req+0x15a>
			return LE_SC_OOB;
   15796:	2005      	movs	r0, #5
   15798:	e799      	b.n	156ce <smp_pairing_req+0x15a>
		return JUST_WORKS;
   1579a:	2000      	movs	r0, #0
   1579c:	e797      	b.n	156ce <smp_pairing_req+0x15a>
	switch (conn->required_sec_level) {
   1579e:	2b04      	cmp	r3, #4
   157a0:	f47f af0f 	bne.w	155c2 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   157a4:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   157a8:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   157ac:	4293      	cmp	r3, r2
   157ae:	bf28      	it	cs
   157b0:	4613      	movcs	r3, r2
   157b2:	2b10      	cmp	r3, #16
   157b4:	f47f aee6 	bne.w	15584 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   157b8:	2105      	movs	r1, #5
   157ba:	4630      	mov	r0, r6
   157bc:	f007 fccc 	bl	1d158 <atomic_test_bit>
   157c0:	b190      	cbz	r0, 157e8 <smp_pairing_req+0x274>
		if (smp->method == JUST_WORKS) {
   157c2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   157c6:	2b00      	cmp	r3, #0
   157c8:	d19b      	bne.n	15702 <smp_pairing_req+0x18e>
   157ca:	e00d      	b.n	157e8 <smp_pairing_req+0x274>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   157cc:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   157ce:	f011 0f24 	tst.w	r1, #36	; 0x24
   157d2:	d08d      	beq.n	156f0 <smp_pairing_req+0x17c>
	return MIN(req->max_key_size, rsp->max_key_size);
   157d4:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   157d8:	f894 00cd 	ldrb.w	r0, [r4, #205]	; 0xcd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   157dc:	7b12      	ldrb	r2, [r2, #12]
   157de:	4283      	cmp	r3, r0
   157e0:	bf28      	it	cs
   157e2:	4603      	movcs	r3, r0
   157e4:	429a      	cmp	r2, r3
   157e6:	d901      	bls.n	157ec <smp_pairing_req+0x278>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   157e8:	2503      	movs	r5, #3
   157ea:	e6cc      	b.n	15586 <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   157ec:	0689      	lsls	r1, r1, #26
   157ee:	d405      	bmi.n	157fc <smp_pairing_req+0x288>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   157f0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   157f4:	2b00      	cmp	r3, #0
   157f6:	f47f af7b 	bne.w	156f0 <smp_pairing_req+0x17c>
   157fa:	e7f5      	b.n	157e8 <smp_pairing_req+0x274>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   157fc:	2105      	movs	r1, #5
   157fe:	4630      	mov	r0, r6
   15800:	f007 fcaa 	bl	1d158 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   15804:	2800      	cmp	r0, #0
   15806:	d1f3      	bne.n	157f0 <smp_pairing_req+0x27c>
   15808:	e7ee      	b.n	157e8 <smp_pairing_req+0x274>
		if (bt_auth && bt_auth->oob_data_request) {
   1580a:	4d35      	ldr	r5, [pc, #212]	; (158e0 <smp_pairing_req+0x36c>)
   1580c:	682b      	ldr	r3, [r5, #0]
   1580e:	2b00      	cmp	r3, #0
   15810:	d05e      	beq.n	158d0 <smp_pairing_req+0x35c>
   15812:	68db      	ldr	r3, [r3, #12]
   15814:	2b00      	cmp	r3, #0
   15816:	d05b      	beq.n	158d0 <smp_pairing_req+0x35c>
			struct bt_conn_oob_info info = {
   15818:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1581a:	210a      	movs	r1, #10
   1581c:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1581e:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15822:	f007 fbc5 	bl	1cfb0 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   15826:	682b      	ldr	r3, [r5, #0]
   15828:	6820      	ldr	r0, [r4, #0]
   1582a:	68db      	ldr	r3, [r3, #12]
   1582c:	a901      	add	r1, sp, #4
   1582e:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15830:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   15834:	2b00      	cmp	r3, #0
   15836:	d157      	bne.n	158e8 <smp_pairing_req+0x374>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15838:	210f      	movs	r1, #15
   1583a:	4630      	mov	r0, r6
   1583c:	f007 fc8c 	bl	1d158 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15840:	4605      	mov	r5, r0
   15842:	2800      	cmp	r0, #0
   15844:	d150      	bne.n	158e8 <smp_pairing_req+0x374>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15846:	4f26      	ldr	r7, [pc, #152]	; (158e0 <smp_pairing_req+0x36c>)
   15848:	683b      	ldr	r3, [r7, #0]
   1584a:	2b00      	cmp	r3, #0
   1584c:	d04c      	beq.n	158e8 <smp_pairing_req+0x374>
	    bt_auth && bt_auth->pairing_confirm) {
   1584e:	695b      	ldr	r3, [r3, #20]
   15850:	2b00      	cmp	r3, #0
   15852:	d049      	beq.n	158e8 <smp_pairing_req+0x374>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15854:	4630      	mov	r0, r6
   15856:	210a      	movs	r1, #10
   15858:	f007 fbaa 	bl	1cfb0 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1585c:	683b      	ldr	r3, [r7, #0]
   1585e:	6820      	ldr	r0, [r4, #0]
   15860:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   15862:	4798      	blx	r3
		return 0;
   15864:	e68f      	b.n	15586 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   15866:	2104      	movs	r1, #4
   15868:	eb0d 0001 	add.w	r0, sp, r1
   1586c:	f002 f886 	bl	1797c <bt_rand>
   15870:	2800      	cmp	r0, #0
   15872:	f47f aea6 	bne.w	155c2 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   15876:	9901      	ldr	r1, [sp, #4]
   15878:	4a1a      	ldr	r2, [pc, #104]	; (158e4 <smp_pairing_req+0x370>)
		if (bt_auth && bt_auth->passkey_display) {
   1587a:	4f19      	ldr	r7, [pc, #100]	; (158e0 <smp_pairing_req+0x36c>)
			passkey %= 1000000;
   1587c:	fbb1 f3f2 	udiv	r3, r1, r2
   15880:	fb02 1313 	mls	r3, r2, r3, r1
   15884:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   15886:	683b      	ldr	r3, [r7, #0]
   15888:	b153      	cbz	r3, 158a0 <smp_pairing_req+0x32c>
   1588a:	681b      	ldr	r3, [r3, #0]
   1588c:	b143      	cbz	r3, 158a0 <smp_pairing_req+0x32c>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1588e:	210b      	movs	r1, #11
   15890:	4630      	mov	r0, r6
   15892:	f007 fb8d 	bl	1cfb0 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   15896:	683b      	ldr	r3, [r7, #0]
   15898:	9901      	ldr	r1, [sp, #4]
   1589a:	681b      	ldr	r3, [r3, #0]
   1589c:	4628      	mov	r0, r5
   1589e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   158a0:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   158a2:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
   158a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   158aa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   158ac:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
   158b0:	0a1b      	lsrs	r3, r3, #8
   158b2:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   158b6:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
   158ba:	e7b9      	b.n	15830 <smp_pairing_req+0x2bc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   158bc:	4630      	mov	r0, r6
   158be:	210a      	movs	r1, #10
   158c0:	f007 fb76 	bl	1cfb0 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   158c4:	4b06      	ldr	r3, [pc, #24]	; (158e0 <smp_pairing_req+0x36c>)
   158c6:	681b      	ldr	r3, [r3, #0]
   158c8:	4628      	mov	r0, r5
   158ca:	685b      	ldr	r3, [r3, #4]
   158cc:	4798      	blx	r3
	if (ret) {
   158ce:	e7af      	b.n	15830 <smp_pairing_req+0x2bc>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   158d0:	2502      	movs	r5, #2
   158d2:	e658      	b.n	15586 <smp_pairing_req+0x12>
   158d4:	200021db 	.word	0x200021db
   158d8:	0001f813 	.word	0x0001f813
   158dc:	0001f82c 	.word	0x0001f82c
   158e0:	20001ee8 	.word	0x20001ee8
   158e4:	000f4240 	.word	0x000f4240
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   158e8:	2103      	movs	r1, #3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   158ea:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   158ee:	f007 fb5f 	bl	1cfb0 <atomic_set_bit>
	return send_pairing_rsp(smp);
   158f2:	4620      	mov	r0, r4
   158f4:	f007 fc72 	bl	1d1dc <send_pairing_rsp>
   158f8:	4605      	mov	r5, r0
   158fa:	e644      	b.n	15586 <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   158fc:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   15900:	b9a5      	cbnz	r5, 1592c <smp_pairing_req+0x3b8>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15902:	210f      	movs	r1, #15
   15904:	4630      	mov	r0, r6
   15906:	f007 fc27 	bl	1d158 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1590a:	b978      	cbnz	r0, 1592c <smp_pairing_req+0x3b8>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1590c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 15930 <smp_pairing_req+0x3bc>
   15910:	f8d8 3000 	ldr.w	r3, [r8]
   15914:	b153      	cbz	r3, 1592c <smp_pairing_req+0x3b8>
	    bt_auth && bt_auth->pairing_confirm) {
   15916:	695b      	ldr	r3, [r3, #20]
   15918:	b143      	cbz	r3, 1592c <smp_pairing_req+0x3b8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1591a:	4630      	mov	r0, r6
   1591c:	210a      	movs	r1, #10
   1591e:	f007 fb47 	bl	1cfb0 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   15922:	f8d8 3000 	ldr.w	r3, [r8]
   15926:	4638      	mov	r0, r7
   15928:	695b      	ldr	r3, [r3, #20]
   1592a:	e79a      	b.n	15862 <smp_pairing_req+0x2ee>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1592c:	210c      	movs	r1, #12
   1592e:	e7dc      	b.n	158ea <smp_pairing_req+0x376>
   15930:	20001ee8 	.word	0x20001ee8

00015934 <bt_smp_connected>:
{
   15934:	b510      	push	{r4, lr}
	k_work_init_delayable(&work->work, handler);
   15936:	4905      	ldr	r1, [pc, #20]	; (1594c <bt_smp_connected+0x18>)
   15938:	4604      	mov	r4, r0
   1593a:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1593e:	f008 fd44 	bl	1e3ca <k_work_init_delayable>
	smp_reset(smp);
   15942:	4620      	mov	r0, r4
}
   15944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   15948:	f007 bce0 	b.w	1d30c <smp_reset>
   1594c:	0001d8db 	.word	0x0001d8db

00015950 <smp_pairing_random>:
{
   15950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15954:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   15956:	f100 07f7 	add.w	r7, r0, #247	; 0xf7
   1595a:	6889      	ldr	r1, [r1, #8]
{
   1595c:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1595e:	2210      	movs	r2, #16
   15960:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15962:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   15966:	f005 fb57 	bl	1b018 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1596a:	2105      	movs	r1, #5
   1596c:	4630      	mov	r0, r6
   1596e:	f007 fbf3 	bl	1d158 <atomic_test_bit>
   15972:	2800      	cmp	r0, #0
   15974:	d13d      	bne.n	159f2 <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
   15976:	6823      	ldr	r3, [r4, #0]
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   15978:	f204 1807 	addw	r8, r4, #263	; 0x107
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1597c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   15980:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   15982:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   15984:	9201      	str	r2, [sp, #4]
   15986:	9300      	str	r3, [sp, #0]
   15988:	9502      	str	r5, [sp, #8]
   1598a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1598e:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   15992:	4639      	mov	r1, r7
   15994:	4640      	mov	r0, r8
   15996:	f007 fcde 	bl	1d356 <smp_c1>
	if (err) {
   1599a:	b108      	cbz	r0, 159a0 <smp_pairing_random+0x50>
	switch (smp->method) {
   1599c:	2508      	movs	r5, #8
   1599e:	e096      	b.n	15ace <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   159a0:	2210      	movs	r2, #16
   159a2:	4629      	mov	r1, r5
   159a4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   159a8:	f005 fb26 	bl	1aff8 <memcmp>
   159ac:	2800      	cmp	r0, #0
   159ae:	f040 808d 	bne.w	15acc <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
   159b2:	2208      	movs	r2, #8
   159b4:	4639      	mov	r1, r7
   159b6:	4628      	mov	r0, r5
   159b8:	f005 fb2e 	bl	1b018 <memcpy>
	memcpy(out + 8, r1, 8);
   159bc:	2208      	movs	r2, #8
   159be:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   159c2:	a80c      	add	r0, sp, #48	; 0x30
   159c4:	f005 fb28 	bl	1b018 <memcpy>
	return bt_encrypt_le(k, out, out);
   159c8:	462a      	mov	r2, r5
   159ca:	4629      	mov	r1, r5
   159cc:	4640      	mov	r0, r8
   159ce:	f008 f966 	bl	1dc9e <bt_encrypt_le>
		if (err) {
   159d2:	2800      	cmp	r0, #0
   159d4:	d1e2      	bne.n	1599c <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   159d6:	4629      	mov	r1, r5
   159d8:	2210      	movs	r2, #16
   159da:	4640      	mov	r0, r8
   159dc:	f005 fb1c 	bl	1b018 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   159e0:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   159e2:	4630      	mov	r0, r6
   159e4:	f007 fae4 	bl	1cfb0 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   159e8:	4620      	mov	r0, r4
   159ea:	f007 fbde 	bl	1d1aa <smp_send_pairing_random>
   159ee:	4605      	mov	r5, r0
   159f0:	e06d      	b.n	15ace <smp_pairing_random+0x17e>
	switch (smp->method) {
   159f2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   159f6:	2b05      	cmp	r3, #5
   159f8:	d8d0      	bhi.n	1599c <smp_pairing_random+0x4c>
   159fa:	a201      	add	r2, pc, #4	; (adr r2, 15a00 <smp_pairing_random+0xb0>)
   159fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15a00:	00015a87 	.word	0x00015a87
   15a04:	00015a95 	.word	0x00015a95
   15a08:	00015a95 	.word	0x00015a95
   15a0c:	00015a19 	.word	0x00015a19
   15a10:	0001599d 	.word	0x0001599d
   15a14:	00015b21 	.word	0x00015b21
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   15a18:	4b5a      	ldr	r3, [pc, #360]	; (15b84 <smp_pairing_random+0x234>)
   15a1a:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   15a1c:	2220      	movs	r2, #32
   15a1e:	f204 1117 	addw	r1, r4, #279	; 0x117
   15a22:	a80a      	add	r0, sp, #40	; 0x28
   15a24:	f007 fab0 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   15a28:	2220      	movs	r2, #32
   15a2a:	4629      	mov	r1, r5
   15a2c:	a812      	add	r0, sp, #72	; 0x48
   15a2e:	f007 faab 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   15a32:	2210      	movs	r2, #16
   15a34:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   15a38:	a81a      	add	r0, sp, #104	; 0x68
   15a3a:	f007 faa5 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   15a3e:	2210      	movs	r2, #16
   15a40:	4639      	mov	r1, r7
   15a42:	a806      	add	r0, sp, #24
   15a44:	f007 faa0 	bl	1cf88 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   15a48:	ab06      	add	r3, sp, #24
   15a4a:	2250      	movs	r2, #80	; 0x50
   15a4c:	a90a      	add	r1, sp, #40	; 0x28
   15a4e:	4618      	mov	r0, r3
   15a50:	f007 fae3 	bl	1d01a <bt_smp_aes_cmac>
	if (err) {
   15a54:	2800      	cmp	r0, #0
   15a56:	d1a1      	bne.n	1599c <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
   15a58:	2204      	movs	r2, #4
   15a5a:	a909      	add	r1, sp, #36	; 0x24
   15a5c:	a805      	add	r0, sp, #20
   15a5e:	f005 fadb 	bl	1b018 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   15a62:	9b05      	ldr	r3, [sp, #20]
   15a64:	4948      	ldr	r1, [pc, #288]	; (15b88 <smp_pairing_random+0x238>)
   15a66:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15a68:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   15a6a:	fbb3 f2f1 	udiv	r2, r3, r1
   15a6e:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15a72:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   15a74:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15a76:	f007 fa9b 	bl	1cfb0 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   15a7a:	4b44      	ldr	r3, [pc, #272]	; (15b8c <smp_pairing_random+0x23c>)
   15a7c:	9905      	ldr	r1, [sp, #20]
   15a7e:	681b      	ldr	r3, [r3, #0]
   15a80:	6820      	ldr	r0, [r4, #0]
   15a82:	689b      	ldr	r3, [r3, #8]
   15a84:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   15a86:	210d      	movs	r1, #13
   15a88:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15a8c:	f007 fa90 	bl	1cfb0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   15a90:	2110      	movs	r1, #16
   15a92:	e7a6      	b.n	159e2 <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15a94:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
   15a98:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   15a9c:	4939      	ldr	r1, [pc, #228]	; (15b84 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15a9e:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   15aa0:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15aa2:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   15aa6:	9500      	str	r5, [sp, #0]
   15aa8:	6809      	ldr	r1, [r1, #0]
   15aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15aae:	463a      	mov	r2, r7
   15ab0:	f204 1017 	addw	r0, r4, #279	; 0x117
   15ab4:	f007 fb29 	bl	1d10a <smp_f4>
   15ab8:	2800      	cmp	r0, #0
   15aba:	f47f af6f 	bne.w	1599c <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   15abe:	2210      	movs	r2, #16
   15ac0:	4629      	mov	r1, r5
   15ac2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   15ac6:	f005 fa97 	bl	1aff8 <memcmp>
   15aca:	b120      	cbz	r0, 15ad6 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
   15acc:	2504      	movs	r5, #4
}
   15ace:	4628      	mov	r0, r5
   15ad0:	b01e      	add	sp, #120	; 0x78
   15ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   15ad6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
   15ada:	2103      	movs	r1, #3
   15adc:	4638      	mov	r0, r7
   15ade:	f007 fa67 	bl	1cfb0 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   15ae2:	4620      	mov	r0, r4
   15ae4:	f007 fb61 	bl	1d1aa <smp_send_pairing_random>
		if (err) {
   15ae8:	4605      	mov	r5, r0
   15aea:	2800      	cmp	r0, #0
   15aec:	d1ef      	bne.n	15ace <smp_pairing_random+0x17e>
		smp->passkey_round++;
   15aee:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   15af2:	3301      	adds	r3, #1
   15af4:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   15af6:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   15af8:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
   15afc:	d108      	bne.n	15b10 <smp_pairing_random+0x1c0>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   15afe:	4638      	mov	r0, r7
   15b00:	210d      	movs	r1, #13
   15b02:	f007 fa55 	bl	1cfb0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   15b06:	2110      	movs	r1, #16
   15b08:	4630      	mov	r0, r6
   15b0a:	f007 fa51 	bl	1cfb0 <atomic_set_bit>
			return 0;
   15b0e:	e7de      	b.n	15ace <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   15b10:	2110      	movs	r1, #16
   15b12:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   15b16:	f001 ff31 	bl	1797c <bt_rand>
   15b1a:	2800      	cmp	r0, #0
   15b1c:	d0d7      	beq.n	15ace <smp_pairing_random+0x17e>
   15b1e:	e73d      	b.n	1599c <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
   15b20:	2110      	movs	r1, #16
   15b22:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   15b26:	f001 ff29 	bl	1797c <bt_rand>
   15b2a:	2800      	cmp	r0, #0
   15b2c:	f47f af36 	bne.w	1599c <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
   15b30:	4f16      	ldr	r7, [pc, #88]	; (15b8c <smp_pairing_random+0x23c>)
   15b32:	683b      	ldr	r3, [r7, #0]
   15b34:	b193      	cbz	r3, 15b5c <smp_pairing_random+0x20c>
   15b36:	68db      	ldr	r3, [r3, #12]
   15b38:	b183      	cbz	r3, 15b5c <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
   15b3a:	4b15      	ldr	r3, [pc, #84]	; (15b90 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   15b3c:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			struct bt_conn_oob_info info = {
   15b40:	881b      	ldrh	r3, [r3, #0]
   15b42:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   15b46:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   15b4a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   15b4c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   15b50:	d406      	bmi.n	15b60 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
   15b52:	2b00      	cmp	r3, #0
   15b54:	bf0c      	ite	eq
   15b56:	2003      	moveq	r0, #3
   15b58:	2001      	movne	r0, #1
   15b5a:	e004      	b.n	15b66 <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   15b5c:	2502      	movs	r5, #2
   15b5e:	e7b6      	b.n	15ace <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
   15b60:	2b00      	cmp	r3, #0
   15b62:	bf18      	it	ne
   15b64:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   15b66:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   15b68:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   15b6c:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   15b70:	4630      	mov	r0, r6
   15b72:	210c      	movs	r1, #12
   15b74:	f007 fa1c 	bl	1cfb0 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   15b78:	683b      	ldr	r3, [r7, #0]
   15b7a:	6820      	ldr	r0, [r4, #0]
   15b7c:	68db      	ldr	r3, [r3, #12]
   15b7e:	a90a      	add	r1, sp, #40	; 0x28
   15b80:	4798      	blx	r3
			return 0;
   15b82:	e7a4      	b.n	15ace <smp_pairing_random+0x17e>
   15b84:	20001f7c 	.word	0x20001f7c
   15b88:	000f4240 	.word	0x000f4240
   15b8c:	20001ee8 	.word	0x20001ee8
   15b90:	0001eab6 	.word	0x0001eab6

00015b94 <bt_smp_start_security>:
{
   15b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   15b98:	78c4      	ldrb	r4, [r0, #3]
   15b9a:	2c01      	cmp	r4, #1
{
   15b9c:	4605      	mov	r5, r0
	switch (conn->role) {
   15b9e:	d005      	beq.n	15bac <bt_smp_start_security+0x18>
		return -EINVAL;
   15ba0:	f06f 0415 	mvn.w	r4, #21
}
   15ba4:	4620      	mov	r0, r4
   15ba6:	b003      	add	sp, #12
   15ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   15bac:	f007 f9f8 	bl	1cfa0 <smp_chan_get>
	if (!smp) {
   15bb0:	4606      	mov	r6, r0
   15bb2:	2800      	cmp	r0, #0
   15bb4:	f000 80a1 	beq.w	15cfa <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15bb8:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
   15bbc:	2104      	movs	r1, #4
   15bbe:	4638      	mov	r0, r7
   15bc0:	f007 faca 	bl	1d158 <atomic_test_bit>
   15bc4:	2800      	cmp	r0, #0
   15bc6:	f040 809b 	bne.w	15d00 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15bca:	2103      	movs	r1, #3
   15bcc:	4638      	mov	r0, r7
   15bce:	f007 fac3 	bl	1d158 <atomic_test_bit>
   15bd2:	b110      	cbz	r0, 15bda <bt_smp_start_security+0x46>
		return -EBUSY;
   15bd4:	f06f 040f 	mvn.w	r4, #15
   15bd8:	e7e4      	b.n	15ba4 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15bda:	4621      	mov	r1, r4
   15bdc:	4638      	mov	r0, r7
   15bde:	f007 fabb 	bl	1d158 <atomic_test_bit>
   15be2:	2800      	cmp	r0, #0
   15be4:	d1f6      	bne.n	15bd4 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   15be6:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   15be8:	2b03      	cmp	r3, #3
   15bea:	d03d      	beq.n	15c68 <bt_smp_start_security+0xd4>
   15bec:	d82c      	bhi.n	15c48 <bt_smp_start_security+0xb4>
   15bee:	3b01      	subs	r3, #1
   15bf0:	2b01      	cmp	r3, #1
   15bf2:	d947      	bls.n	15c84 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   15bf4:	210b      	movs	r1, #11
   15bf6:	1d28      	adds	r0, r5, #4
   15bf8:	f007 faae 	bl	1d158 <atomic_test_bit>
   15bfc:	2800      	cmp	r0, #0
   15bfe:	d1cf      	bne.n	15ba0 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   15c00:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   15c04:	b983      	cbnz	r3, 15c28 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
   15c06:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   15c0a:	7a29      	ldrb	r1, [r5, #8]
   15c0c:	4622      	mov	r2, r4
   15c0e:	2020      	movs	r0, #32
   15c10:	f000 fa7e 	bl	16110 <bt_keys_find>
   15c14:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   15c18:	b930      	cbnz	r0, 15c28 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   15c1a:	7a29      	ldrb	r1, [r5, #8]
   15c1c:	4622      	mov	r2, r4
   15c1e:	2004      	movs	r0, #4
   15c20:	f000 fa76 	bl	16110 <bt_keys_find>
   15c24:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   15c28:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   15c2c:	2b00      	cmp	r3, #0
   15c2e:	d0b7      	beq.n	15ba0 <bt_smp_start_security+0xc>
   15c30:	89da      	ldrh	r2, [r3, #14]
   15c32:	f002 0224 	and.w	r2, r2, #36	; 0x24
   15c36:	2a00      	cmp	r2, #0
   15c38:	d0b2      	beq.n	15ba0 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   15c3a:	7aaa      	ldrb	r2, [r5, #10]
   15c3c:	2a02      	cmp	r2, #2
   15c3e:	d921      	bls.n	15c84 <bt_smp_start_security+0xf0>
   15c40:	7b5b      	ldrb	r3, [r3, #13]
   15c42:	07db      	lsls	r3, r3, #31
   15c44:	d5ac      	bpl.n	15ba0 <bt_smp_start_security+0xc>
   15c46:	e01d      	b.n	15c84 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
   15c48:	2b04      	cmp	r3, #4
   15c4a:	d1d3      	bne.n	15bf4 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15c4c:	f7ff f9de 	bl	1500c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   15c50:	2803      	cmp	r0, #3
   15c52:	d104      	bne.n	15c5e <bt_smp_start_security+0xca>
   15c54:	4b2c      	ldr	r3, [pc, #176]	; (15d08 <bt_smp_start_security+0x174>)
   15c56:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15c58:	b1fb      	cbz	r3, 15c9a <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   15c5a:	68dc      	ldr	r4, [r3, #12]
   15c5c:	b10c      	cbz	r4, 15c62 <bt_smp_start_security+0xce>
   15c5e:	4b2b      	ldr	r3, [pc, #172]	; (15d0c <bt_smp_start_security+0x178>)
   15c60:	781c      	ldrb	r4, [r3, #0]
   15c62:	f004 0401 	and.w	r4, r4, #1
   15c66:	e00b      	b.n	15c80 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15c68:	f7ff f9d0 	bl	1500c <get_io_capa>
   15c6c:	2803      	cmp	r0, #3
   15c6e:	d107      	bne.n	15c80 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
   15c70:	4b25      	ldr	r3, [pc, #148]	; (15d08 <bt_smp_start_security+0x174>)
   15c72:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15c74:	2c00      	cmp	r4, #0
   15c76:	d0bd      	beq.n	15bf4 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   15c78:	68e4      	ldr	r4, [r4, #12]
   15c7a:	3c00      	subs	r4, #0
   15c7c:	bf18      	it	ne
   15c7e:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   15c80:	2c00      	cmp	r4, #0
   15c82:	d0b7      	beq.n	15bf4 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   15c84:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   15c88:	b14b      	cbz	r3, 15c9e <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
   15c8a:	4630      	mov	r0, r6
   15c8c:	f7ff fa26 	bl	150dc <smp_init>
   15c90:	4604      	mov	r4, r0
   15c92:	b180      	cbz	r0, 15cb6 <bt_smp_start_security+0x122>
		return -ENOBUFS;
   15c94:	f06f 0436 	mvn.w	r4, #54	; 0x36
   15c98:	e784      	b.n	15ba4 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   15c9a:	2400      	movs	r4, #0
   15c9c:	e7e1      	b.n	15c62 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15c9e:	7a28      	ldrb	r0, [r5, #8]
   15ca0:	f105 0188 	add.w	r1, r5, #136	; 0x88
   15ca4:	f000 f9fe 	bl	160a4 <bt_keys_get_addr>
   15ca8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   15cac:	2800      	cmp	r0, #0
   15cae:	d1ec      	bne.n	15c8a <bt_smp_start_security+0xf6>
			return -ENOMEM;
   15cb0:	f06f 040b 	mvn.w	r4, #11
   15cb4:	e776      	b.n	15ba4 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   15cb6:	210b      	movs	r1, #11
   15cb8:	4630      	mov	r0, r6
   15cba:	f007 fa56 	bl	1d16a <smp_create_pdu.isra.0>
	if (!req_buf) {
   15cbe:	4680      	mov	r8, r0
   15cc0:	2800      	cmp	r0, #0
   15cc2:	d0e7      	beq.n	15c94 <bt_smp_start_security+0x100>
   15cc4:	2101      	movs	r1, #1
   15cc6:	3008      	adds	r0, #8
   15cc8:	f007 ff1a 	bl	1db00 <net_buf_simple_add>
   15ccc:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   15cce:	2009      	movs	r0, #9
   15cd0:	f7ff f9e6 	bl	150a0 <get_auth.isra.0>
   15cd4:	4623      	mov	r3, r4
   15cd6:	f889 0000 	strb.w	r0, [r9]
   15cda:	4642      	mov	r2, r8
   15cdc:	9400      	str	r4, [sp, #0]
   15cde:	2106      	movs	r1, #6
   15ce0:	4628      	mov	r0, r5
   15ce2:	f006 f8bb 	bl	1be5c <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15ce6:	4638      	mov	r0, r7
   15ce8:	210f      	movs	r1, #15
   15cea:	f007 f961 	bl	1cfb0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   15cee:	2101      	movs	r1, #1
   15cf0:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   15cf4:	f007 f95c 	bl	1cfb0 <atomic_set_bit>
	return 0;
   15cf8:	e754      	b.n	15ba4 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   15cfa:	f06f 0438 	mvn.w	r4, #56	; 0x38
   15cfe:	e751      	b.n	15ba4 <bt_smp_start_security+0x10>
		return -EIO;
   15d00:	f06f 0404 	mvn.w	r4, #4
   15d04:	e74e      	b.n	15ba4 <bt_smp_start_security+0x10>
   15d06:	bf00      	nop
   15d08:	20001ee8 	.word	0x20001ee8
   15d0c:	200021dc 	.word	0x200021dc

00015d10 <smp_pairing_complete>:
{
   15d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15d14:	4606      	mov	r6, r0
   15d16:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 15dc4 <smp_pairing_complete+0xb4>
   15d1a:	f856 4bc4 	ldr.w	r4, [r6], #196
{
   15d1e:	4607      	mov	r7, r0
	if (!status) {
   15d20:	b9b9      	cbnz	r1, 15d52 <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   15d22:	210d      	movs	r1, #13
   15d24:	4630      	mov	r0, r6
   15d26:	f007 fa17 	bl	1d158 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   15d2a:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   15d2e:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   15d30:	b11b      	cbz	r3, 15d3a <smp_pairing_complete+0x2a>
   15d32:	699b      	ldr	r3, [r3, #24]
   15d34:	b10b      	cbz	r3, 15d3a <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
   15d36:	4620      	mov	r0, r4
   15d38:	4798      	blx	r3
	smp_reset(smp);
   15d3a:	4638      	mov	r0, r7
   15d3c:	f007 fae6 	bl	1d30c <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   15d40:	7a62      	ldrb	r2, [r4, #9]
   15d42:	7aa3      	ldrb	r3, [r4, #10]
   15d44:	429a      	cmp	r2, r3
   15d46:	d036      	beq.n	15db6 <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
   15d48:	4620      	mov	r0, r4
}
   15d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   15d4e:	f7ff bf21 	b.w	15b94 <bt_smp_start_security>
	switch (smp_err) {
   15d52:	3901      	subs	r1, #1
   15d54:	b2c9      	uxtb	r1, r1
   15d56:	290d      	cmp	r1, #13
   15d58:	bf9c      	itt	ls
   15d5a:	4b18      	ldrls	r3, [pc, #96]	; (15dbc <smp_pairing_complete+0xac>)
   15d5c:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
   15d5e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   15d62:	bf88      	it	hi
   15d64:	2508      	movhi	r5, #8
		if (conn->le.keys &&
   15d66:	b143      	cbz	r3, 15d7a <smp_pairing_complete+0x6a>
   15d68:	7b1b      	ldrb	r3, [r3, #12]
   15d6a:	b9eb      	cbnz	r3, 15da8 <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
   15d6c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   15d70:	f007 fe61 	bl	1da36 <bt_keys_clear>
			conn->le.keys = NULL;
   15d74:	2300      	movs	r3, #0
   15d76:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   15d7a:	2102      	movs	r1, #2
   15d7c:	4630      	mov	r0, r6
   15d7e:	f007 f9eb 	bl	1d158 <atomic_test_bit>
   15d82:	b940      	cbnz	r0, 15d96 <smp_pairing_complete+0x86>
	switch (err) {
   15d84:	2d08      	cmp	r5, #8
   15d86:	bf16      	itet	ne
   15d88:	4b0d      	ldrne	r3, [pc, #52]	; (15dc0 <smp_pairing_complete+0xb0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   15d8a:	211f      	moveq	r1, #31
   15d8c:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
   15d8e:	462a      	mov	r2, r5
   15d90:	4620      	mov	r0, r4
   15d92:	f7fd fa93 	bl	132bc <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   15d96:	f8d8 3000 	ldr.w	r3, [r8]
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d0cd      	beq.n	15d3a <smp_pairing_complete+0x2a>
   15d9e:	69db      	ldr	r3, [r3, #28]
   15da0:	2b00      	cmp	r3, #0
   15da2:	d0ca      	beq.n	15d3a <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
   15da4:	4629      	mov	r1, r5
   15da6:	e7c6      	b.n	15d36 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   15da8:	2102      	movs	r1, #2
   15daa:	4630      	mov	r0, r6
   15dac:	f007 f9d4 	bl	1d158 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   15db0:	2800      	cmp	r0, #0
   15db2:	d1db      	bne.n	15d6c <smp_pairing_complete+0x5c>
   15db4:	e7e1      	b.n	15d7a <smp_pairing_complete+0x6a>
}
   15db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15dba:	bf00      	nop
   15dbc:	0001f7f5 	.word	0x0001f7f5
   15dc0:	0001f80b 	.word	0x0001f80b
   15dc4:	20001ee8 	.word	0x20001ee8

00015dc8 <bt_smp_recv>:
{
   15dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   15dca:	898b      	ldrh	r3, [r1, #12]
{
   15dcc:	4604      	mov	r4, r0
   15dce:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   15dd0:	b38b      	cbz	r3, 15e36 <bt_smp_recv+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
   15dd2:	2101      	movs	r1, #1
   15dd4:	f105 0008 	add.w	r0, r5, #8
   15dd8:	f007 feb9 	bl	1db4e <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15ddc:	2104      	movs	r1, #4
   15dde:	4606      	mov	r6, r0
   15de0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   15de4:	f007 f9b8 	bl	1d158 <atomic_test_bit>
   15de8:	bb28      	cbnz	r0, 15e36 <bt_smp_recv+0x6e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   15dea:	7831      	ldrb	r1, [r6, #0]
   15dec:	290e      	cmp	r1, #14
   15dee:	d822      	bhi.n	15e36 <bt_smp_recv+0x6e>
	if (!handlers[hdr->code].func) {
   15df0:	4f12      	ldr	r7, [pc, #72]	; (15e3c <bt_smp_recv+0x74>)
   15df2:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   15df6:	b923      	cbnz	r3, 15e02 <bt_smp_recv+0x3a>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   15df8:	2107      	movs	r1, #7
		smp_error(smp, err);
   15dfa:	4620      	mov	r0, r4
   15dfc:	f007 fc24 	bl	1d648 <smp_error>
   15e00:	e019      	b.n	15e36 <bt_smp_recv+0x6e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   15e02:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15e06:	f007 fa69 	bl	1d2dc <atomic_test_and_clear_bit>
   15e0a:	7833      	ldrb	r3, [r6, #0]
   15e0c:	b918      	cbnz	r0, 15e16 <bt_smp_recv+0x4e>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   15e0e:	2b05      	cmp	r3, #5
   15e10:	d011      	beq.n	15e36 <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   15e12:	2108      	movs	r1, #8
   15e14:	e7f1      	b.n	15dfa <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
   15e16:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   15e1a:	89a9      	ldrh	r1, [r5, #12]
   15e1c:	7912      	ldrb	r2, [r2, #4]
   15e1e:	4291      	cmp	r1, r2
   15e20:	d001      	beq.n	15e26 <bt_smp_recv+0x5e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   15e22:	210a      	movs	r1, #10
   15e24:	e7e9      	b.n	15dfa <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
   15e26:	4629      	mov	r1, r5
   15e28:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   15e2c:	4620      	mov	r0, r4
   15e2e:	4798      	blx	r3
	if (err) {
   15e30:	4601      	mov	r1, r0
   15e32:	2800      	cmp	r0, #0
   15e34:	d1e1      	bne.n	15dfa <bt_smp_recv+0x32>
}
   15e36:	2000      	movs	r0, #0
   15e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e3a:	bf00      	nop
   15e3c:	0001f0c0 	.word	0x0001f0c0

00015e40 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   15e40:	4b0d      	ldr	r3, [pc, #52]	; (15e78 <bt_smp_pkey_ready+0x38>)
{
   15e42:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   15e44:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   15e46:	b1a8      	cbz	r0, 15e74 <bt_smp_pkey_ready+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15e48:	4c0c      	ldr	r4, [pc, #48]	; (15e7c <bt_smp_pkey_ready+0x3c>)
	z_impl_k_sem_give(sem);
   15e4a:	480d      	ldr	r0, [pc, #52]	; (15e80 <bt_smp_pkey_ready+0x40>)
   15e4c:	f002 fcfe 	bl	1884c <z_impl_k_sem_give>
   15e50:	f3bf 8f5b 	dmb	ish
   15e54:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   15e58:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   15e5c:	065b      	lsls	r3, r3, #25
   15e5e:	d509      	bpl.n	15e74 <bt_smp_pkey_ready+0x34>
		err = smp_public_key_slave(smp);
   15e60:	4620      	mov	r0, r4
   15e62:	f7ff faa3 	bl	153ac <smp_public_key_slave>
		if (err) {
   15e66:	4601      	mov	r1, r0
   15e68:	b120      	cbz	r0, 15e74 <bt_smp_pkey_ready+0x34>
			smp_error(smp, err);
   15e6a:	4620      	mov	r0, r4
}
   15e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   15e70:	f007 bbea 	b.w	1d648 <smp_error>
}
   15e74:	bd10      	pop	{r4, pc}
   15e76:	bf00      	nop
   15e78:	20001f7c 	.word	0x20001f7c
   15e7c:	20001978 	.word	0x20001978
   15e80:	20000818 	.word	0x20000818

00015e84 <smp_pairing_failed>:
{
   15e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15e86:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   15e88:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   15e8a:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   15e8e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   15e90:	210a      	movs	r1, #10
   15e92:	4628      	mov	r0, r5
   15e94:	f007 fa22 	bl	1d2dc <atomic_test_and_clear_bit>
   15e98:	b140      	cbz	r0, 15eac <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   15e9a:	4b0b      	ldr	r3, [pc, #44]	; (15ec8 <smp_pairing_failed+0x44>)
   15e9c:	681b      	ldr	r3, [r3, #0]
   15e9e:	b963      	cbnz	r3, 15eba <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   15ea0:	4620      	mov	r0, r4
   15ea2:	7831      	ldrb	r1, [r6, #0]
   15ea4:	f7ff ff34 	bl	15d10 <smp_pairing_complete>
}
   15ea8:	2000      	movs	r0, #0
   15eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   15eac:	210b      	movs	r1, #11
   15eae:	4628      	mov	r0, r5
   15eb0:	f007 fa14 	bl	1d2dc <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   15eb4:	2800      	cmp	r0, #0
   15eb6:	d1f0      	bne.n	15e9a <smp_pairing_failed+0x16>
   15eb8:	e7f2      	b.n	15ea0 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   15eba:	691b      	ldr	r3, [r3, #16]
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	d0ef      	beq.n	15ea0 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   15ec0:	4638      	mov	r0, r7
   15ec2:	4798      	blx	r3
   15ec4:	e7ec      	b.n	15ea0 <smp_pairing_failed+0x1c>
   15ec6:	bf00      	nop
   15ec8:	20001ee8 	.word	0x20001ee8

00015ecc <bt_smp_encrypt_change>:
{
   15ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
   15ed0:	4605      	mov	r5, r0
{
   15ed2:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
   15ed4:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   15ed8:	4604      	mov	r4, r0
   15eda:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15edc:	4628      	mov	r0, r5
   15ede:	2101      	movs	r1, #1
   15ee0:	f007 f9fc 	bl	1d2dc <atomic_test_and_clear_bit>
   15ee4:	b310      	cbz	r0, 15f2c <bt_smp_encrypt_change+0x60>
	if (hci_status) {
   15ee6:	b1be      	cbz	r6, 15f18 <bt_smp_encrypt_change+0x4c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15ee8:	2103      	movs	r1, #3
   15eea:	4628      	mov	r0, r5
   15eec:	f007 f934 	bl	1d158 <atomic_test_bit>
   15ef0:	b1e0      	cbz	r0, 15f2c <bt_smp_encrypt_change+0x60>
			uint8_t smp_err = smp_err_get(
   15ef2:	4630      	mov	r0, r6
   15ef4:	f7fc fac2 	bl	1247c <bt_security_err_get>
	switch (auth_err) {
   15ef8:	3801      	subs	r0, #1
   15efa:	b2c0      	uxtb	r0, r0
   15efc:	2807      	cmp	r0, #7
   15efe:	bf9a      	itte	ls
   15f00:	4b5b      	ldrls	r3, [pc, #364]	; (16070 <bt_smp_encrypt_change+0x1a4>)
   15f02:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
   15f04:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   15f06:	2102      	movs	r1, #2
   15f08:	4628      	mov	r0, r5
   15f0a:	f007 f851 	bl	1cfb0 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   15f0e:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
   15f10:	4620      	mov	r0, r4
   15f12:	f7ff fefd 	bl	15d10 <smp_pairing_complete>
   15f16:	e009      	b.n	15f2c <bt_smp_encrypt_change+0x60>
	if (!conn->encrypt) {
   15f18:	7afb      	ldrb	r3, [r7, #11]
   15f1a:	b13b      	cbz	r3, 15f2c <bt_smp_encrypt_change+0x60>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15f1c:	2103      	movs	r1, #3
   15f1e:	4628      	mov	r0, r5
   15f20:	f007 f91a 	bl	1d158 <atomic_test_bit>
   15f24:	b928      	cbnz	r0, 15f32 <bt_smp_encrypt_change+0x66>
		smp_reset(smp);
   15f26:	4620      	mov	r0, r4
   15f28:	f007 f9f0 	bl	1d30c <smp_reset>
}
   15f2c:	b009      	add	sp, #36	; 0x24
   15f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15f32:	2105      	movs	r1, #5
   15f34:	4628      	mov	r0, r5
   15f36:	f007 f90f 	bl	1d158 <atomic_test_bit>
   15f3a:	b198      	cbz	r0, 15f64 <bt_smp_encrypt_change+0x98>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   15f3c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   15f40:	071f      	lsls	r7, r3, #28
   15f42:	d507      	bpl.n	15f54 <bt_smp_encrypt_change+0x88>
   15f44:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   15f48:	071e      	lsls	r6, r3, #28
   15f4a:	d503      	bpl.n	15f54 <bt_smp_encrypt_change+0x88>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   15f4c:	2111      	movs	r1, #17
   15f4e:	4628      	mov	r0, r5
   15f50:	f007 f82e 	bl	1cfb0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   15f54:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   15f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   15f5c:	f023 0308 	bic.w	r3, r3, #8
   15f60:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   15f64:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   15f68:	07d8      	lsls	r0, r3, #31
   15f6a:	d579      	bpl.n	16060 <bt_smp_encrypt_change+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   15f6c:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15f6e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15f72:	f007 f81d 	bl	1cfb0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   15f76:	2102      	movs	r1, #2
   15f78:	4628      	mov	r0, r5
   15f7a:	f007 f819 	bl	1cfb0 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   15f7e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   15f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   15f84:	2b00      	cmp	r3, #0
   15f86:	d0d1      	beq.n	15f2c <bt_smp_encrypt_change+0x60>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15f88:	2105      	movs	r1, #5
   15f8a:	f007 f8e5 	bl	1d158 <atomic_test_bit>
   15f8e:	2800      	cmp	r0, #0
   15f90:	d160      	bne.n	16054 <bt_smp_encrypt_change+0x188>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   15f92:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   15f96:	07db      	lsls	r3, r3, #31
   15f98:	d55c      	bpl.n	16054 <bt_smp_encrypt_change+0x188>
	struct bt_keys *keys = conn->le.keys;
   15f9a:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15f9c:	211a      	movs	r1, #26
   15f9e:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   15fa0:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15fa4:	f001 fcea 	bl	1797c <bt_rand>
   15fa8:	4680      	mov	r8, r0
   15faa:	2800      	cmp	r0, #0
   15fac:	d152      	bne.n	16054 <bt_smp_encrypt_change+0x188>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   15fae:	2106      	movs	r1, #6
   15fb0:	4620      	mov	r0, r4
   15fb2:	f007 f8da 	bl	1d16a <smp_create_pdu.isra.0>
		if (!buf) {
   15fb6:	4607      	mov	r7, r0
   15fb8:	2800      	cmp	r0, #0
   15fba:	d04b      	beq.n	16054 <bt_smp_encrypt_change+0x188>
	return net_buf_simple_add(&buf->b, len);
   15fbc:	2110      	movs	r1, #16
   15fbe:	3008      	adds	r0, #8
   15fc0:	f007 fd9e 	bl	1db00 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   15fc4:	7b32      	ldrb	r2, [r6, #12]
   15fc6:	a901      	add	r1, sp, #4
   15fc8:	4681      	mov	r9, r0
   15fca:	f005 f825 	bl	1b018 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   15fce:	7b30      	ldrb	r0, [r6, #12]
   15fd0:	280f      	cmp	r0, #15
   15fd2:	d805      	bhi.n	15fe0 <bt_smp_encrypt_change+0x114>
			(void)memset(info->ltk + keys->enc_size, 0,
   15fd4:	f1c0 0210 	rsb	r2, r0, #16
   15fd8:	4641      	mov	r1, r8
   15fda:	4448      	add	r0, r9
   15fdc:	f005 f847 	bl	1b06e <memset>
		smp_send(smp, buf, NULL, NULL);
   15fe0:	4639      	mov	r1, r7
   15fe2:	2200      	movs	r2, #0
   15fe4:	4620      	mov	r0, r4
   15fe6:	f7ff f897 	bl	15118 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   15fea:	2107      	movs	r1, #7
   15fec:	4620      	mov	r0, r4
   15fee:	f007 f8bc 	bl	1d16a <smp_create_pdu.isra.0>
		if (!buf) {
   15ff2:	4607      	mov	r7, r0
   15ff4:	b370      	cbz	r0, 16054 <bt_smp_encrypt_change+0x188>
   15ff6:	210a      	movs	r1, #10
   15ff8:	3008      	adds	r0, #8
   15ffa:	f007 fd81 	bl	1db00 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   15ffe:	2208      	movs	r2, #8
   16000:	4680      	mov	r8, r0
   16002:	a905      	add	r1, sp, #20
   16004:	3002      	adds	r0, #2
   16006:	f005 f807 	bl	1b018 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1600a:	2202      	movs	r2, #2
   1600c:	a907      	add	r1, sp, #28
   1600e:	4640      	mov	r0, r8
   16010:	f005 f802 	bl	1b018 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   16014:	4639      	mov	r1, r7
   16016:	4620      	mov	r0, r4
   16018:	4a16      	ldr	r2, [pc, #88]	; (16074 <bt_smp_encrypt_change+0x1a8>)
   1601a:	f7ff f87d 	bl	15118 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1601e:	210d      	movs	r1, #13
   16020:	4628      	mov	r0, r5
   16022:	f007 f899 	bl	1d158 <atomic_test_bit>
   16026:	b1a8      	cbz	r0, 16054 <bt_smp_encrypt_change+0x188>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   16028:	2101      	movs	r1, #1
   1602a:	4630      	mov	r0, r6
   1602c:	f007 fcff 	bl	1da2e <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   16030:	2210      	movs	r2, #16
   16032:	a901      	add	r1, sp, #4
   16034:	f106 004a 	add.w	r0, r6, #74	; 0x4a
   16038:	f004 ffee 	bl	1b018 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1603c:	2208      	movs	r2, #8
   1603e:	a905      	add	r1, sp, #20
   16040:	f106 0040 	add.w	r0, r6, #64	; 0x40
   16044:	f004 ffe8 	bl	1b018 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   16048:	2202      	movs	r2, #2
   1604a:	a907      	add	r1, sp, #28
   1604c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   16050:	f004 ffe2 	bl	1b018 <memcpy>
	if (!smp->local_dist && !smp->remote_dist) {
   16054:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   16058:	2900      	cmp	r1, #0
   1605a:	f47f af67 	bne.w	15f2c <bt_smp_encrypt_change+0x60>
   1605e:	e757      	b.n	15f10 <bt_smp_encrypt_change+0x44>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   16060:	0799      	lsls	r1, r3, #30
   16062:	d501      	bpl.n	16068 <bt_smp_encrypt_change+0x19c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   16064:	2108      	movs	r1, #8
   16066:	e782      	b.n	15f6e <bt_smp_encrypt_change+0xa2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16068:	075a      	lsls	r2, r3, #29
   1606a:	d584      	bpl.n	15f76 <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1606c:	210a      	movs	r1, #10
   1606e:	e77e      	b.n	15f6e <bt_smp_encrypt_change+0xa2>
   16070:	0001f803 	.word	0x0001f803
   16074:	0001d8f7 	.word	0x0001d8f7

00016078 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   16078:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1607a:	4b07      	ldr	r3, [pc, #28]	; (16098 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1607c:	4807      	ldr	r0, [pc, #28]	; (1609c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1607e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   16082:	f003 0306 	and.w	r3, r3, #6
   16086:	1f9a      	subs	r2, r3, #6
   16088:	4253      	negs	r3, r2
   1608a:	4153      	adcs	r3, r2
   1608c:	4a04      	ldr	r2, [pc, #16]	; (160a0 <bt_smp_init+0x28>)
   1608e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   16090:	f7fc ff14 	bl	12ebc <bt_pub_key_gen>
	}

	return smp_self_test();
}
   16094:	2000      	movs	r0, #0
   16096:	bd08      	pop	{r3, pc}
   16098:	20000298 	.word	0x20000298
   1609c:	20000618 	.word	0x20000618
   160a0:	200021dc 	.word	0x200021dc

000160a4 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   160a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   160a6:	4c11      	ldr	r4, [pc, #68]	; (160ec <bt_keys_get_addr+0x48>)
   160a8:	7823      	ldrb	r3, [r4, #0]
   160aa:	4283      	cmp	r3, r0
{
   160ac:	4605      	mov	r5, r0
   160ae:	460e      	mov	r6, r1
   160b0:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   160b2:	d00b      	beq.n	160cc <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   160b4:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   160b6:	480e      	ldr	r0, [pc, #56]	; (160f0 <bt_keys_get_addr+0x4c>)
   160b8:	9400      	str	r4, [sp, #0]
   160ba:	2207      	movs	r2, #7
   160bc:	4669      	mov	r1, sp
   160be:	f8cd 4003 	str.w	r4, [sp, #3]
   160c2:	f004 ff99 	bl	1aff8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   160c6:	b140      	cbz	r0, 160da <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   160c8:	4620      	mov	r0, r4
   160ca:	e00d      	b.n	160e8 <bt_keys_get_addr+0x44>
   160cc:	2207      	movs	r2, #7
   160ce:	1c60      	adds	r0, r4, #1
   160d0:	f004 ff92 	bl	1aff8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   160d4:	2800      	cmp	r0, #0
   160d6:	d1ed      	bne.n	160b4 <bt_keys_get_addr+0x10>
   160d8:	e7f6      	b.n	160c8 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   160da:	4805      	ldr	r0, [pc, #20]	; (160f0 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   160dc:	703d      	strb	r5, [r7, #0]
   160de:	2207      	movs	r2, #7
   160e0:	4631      	mov	r1, r6
   160e2:	f004 ff99 	bl	1b018 <memcpy>
		return keys;
   160e6:	4801      	ldr	r0, [pc, #4]	; (160ec <bt_keys_get_addr+0x48>)
}
   160e8:	b003      	add	sp, #12
   160ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160ec:	20001f80 	.word	0x20001f80
   160f0:	20001f81 	.word	0x20001f81

000160f4 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   160f4:	460b      	mov	r3, r1
   160f6:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   160f8:	4a04      	ldr	r2, [pc, #16]	; (1610c <bt_keys_foreach+0x18>)
{
   160fa:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   160fc:	89d4      	ldrh	r4, [r2, #14]
   160fe:	4204      	tst	r4, r0
   16100:	d002      	beq.n	16108 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   16102:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   16104:	4610      	mov	r0, r2
   16106:	4718      	bx	r3
}
   16108:	bc10      	pop	{r4}
   1610a:	4770      	bx	lr
   1610c:	20001f80 	.word	0x20001f80

00016110 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   16110:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   16112:	4c09      	ldr	r4, [pc, #36]	; (16138 <bt_keys_find+0x28>)
{
   16114:	460b      	mov	r3, r1
   16116:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   16118:	89e2      	ldrh	r2, [r4, #14]
   1611a:	4202      	tst	r2, r0
   1611c:	d007      	beq.n	1612e <bt_keys_find+0x1e>
   1611e:	7822      	ldrb	r2, [r4, #0]
   16120:	429a      	cmp	r2, r3
   16122:	d104      	bne.n	1612e <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   16124:	2207      	movs	r2, #7
   16126:	1c60      	adds	r0, r4, #1
   16128:	f004 ff66 	bl	1aff8 <memcmp>
   1612c:	b108      	cbz	r0, 16132 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1612e:	2000      	movs	r0, #0
}
   16130:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   16132:	4620      	mov	r0, r4
   16134:	e7fc      	b.n	16130 <bt_keys_find+0x20>
   16136:	bf00      	nop
   16138:	20001f80 	.word	0x20001f80

0001613c <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   1613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1613e:	780b      	ldrb	r3, [r1, #0]
   16140:	2b01      	cmp	r3, #1
   16142:	4607      	mov	r7, r0
   16144:	460c      	mov	r4, r1
   16146:	d001      	beq.n	1614c <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   16148:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   1614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1614c:	798b      	ldrb	r3, [r1, #6]
   1614e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16152:	2b40      	cmp	r3, #64	; 0x40
   16154:	d1f8      	bne.n	16148 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   16156:	4d13      	ldr	r5, [pc, #76]	; (161a4 <bt_keys_find_irk+0x68>)
   16158:	89eb      	ldrh	r3, [r5, #14]
   1615a:	f013 0f02 	tst.w	r3, #2
   1615e:	462e      	mov	r6, r5
   16160:	d0f2      	beq.n	16148 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   16162:	7833      	ldrb	r3, [r6, #0]
   16164:	42bb      	cmp	r3, r7
   16166:	d10b      	bne.n	16180 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   16168:	2206      	movs	r2, #6
   1616a:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1616e:	1c60      	adds	r0, r4, #1
   16170:	f004 ff42 	bl	1aff8 <memcmp>
   16174:	b908      	cbnz	r0, 1617a <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   16176:	4628      	mov	r0, r5
   16178:	e7e7      	b.n	1614a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1617a:	89f3      	ldrh	r3, [r6, #14]
   1617c:	079b      	lsls	r3, r3, #30
   1617e:	d5e3      	bpl.n	16148 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   16180:	7833      	ldrb	r3, [r6, #0]
   16182:	42bb      	cmp	r3, r7
   16184:	d1e0      	bne.n	16148 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   16186:	3401      	adds	r4, #1
   16188:	4807      	ldr	r0, [pc, #28]	; (161a8 <bt_keys_find_irk+0x6c>)
   1618a:	4621      	mov	r1, r4
   1618c:	f004 ffd2 	bl	1b134 <bt_rpa_irk_matches>
   16190:	2800      	cmp	r0, #0
   16192:	d0d9      	beq.n	16148 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   16194:	4805      	ldr	r0, [pc, #20]	; (161ac <bt_keys_find_irk+0x70>)
   16196:	2206      	movs	r2, #6
   16198:	4621      	mov	r1, r4
   1619a:	f004 ff3d 	bl	1b018 <memcpy>
			return &key_pool[i];
   1619e:	4801      	ldr	r0, [pc, #4]	; (161a4 <bt_keys_find_irk+0x68>)
}
   161a0:	e7d3      	b.n	1614a <bt_keys_find_irk+0xe>
   161a2:	bf00      	nop
   161a4:	20001f80 	.word	0x20001f80
   161a8:	20001faa 	.word	0x20001faa
   161ac:	20001fba 	.word	0x20001fba

000161b0 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   161b0:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   161b2:	4c06      	ldr	r4, [pc, #24]	; (161cc <bt_keys_find_addr+0x1c>)
   161b4:	7823      	ldrb	r3, [r4, #0]
   161b6:	4283      	cmp	r3, r0
   161b8:	d104      	bne.n	161c4 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   161ba:	2207      	movs	r2, #7
   161bc:	1c60      	adds	r0, r4, #1
   161be:	f004 ff1b 	bl	1aff8 <memcmp>
   161c2:	b108      	cbz	r0, 161c8 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   161c4:	2000      	movs	r0, #0
}
   161c6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   161c8:	4620      	mov	r0, r4
   161ca:	e7fc      	b.n	161c6 <bt_keys_find_addr+0x16>
   161cc:	20001f80 	.word	0x20001f80

000161d0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   161d0:	4b02      	ldr	r3, [pc, #8]	; (161dc <net_buf_pool_get+0xc>)
   161d2:	2228      	movs	r2, #40	; 0x28
   161d4:	fb02 3000 	mla	r0, r2, r0, r3
   161d8:	4770      	bx	lr
   161da:	bf00      	nop
   161dc:	20000878 	.word	0x20000878

000161e0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   161e0:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   161e2:	4a05      	ldr	r2, [pc, #20]	; (161f8 <net_buf_id+0x18>)
   161e4:	2128      	movs	r1, #40	; 0x28
   161e6:	fb01 2303 	mla	r3, r1, r3, r2
   161ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   161ec:	1ac0      	subs	r0, r0, r3
}
   161ee:	4b03      	ldr	r3, [pc, #12]	; (161fc <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   161f0:	10c0      	asrs	r0, r0, #3
}
   161f2:	4358      	muls	r0, r3
   161f4:	4770      	bx	lr
   161f6:	bf00      	nop
   161f8:	20000878 	.word	0x20000878
   161fc:	aaaaaaab 	.word	0xaaaaaaab

00016200 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   16200:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16202:	4a0a      	ldr	r2, [pc, #40]	; (1622c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16204:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16206:	2428      	movs	r4, #40	; 0x28
   16208:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1620c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1620e:	6a1b      	ldr	r3, [r3, #32]
   16210:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   16212:	6823      	ldr	r3, [r4, #0]
   16214:	429a      	cmp	r2, r3
   16216:	bf94      	ite	ls
   16218:	600a      	strls	r2, [r1, #0]
   1621a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1621c:	f7ff ffe0 	bl	161e0 <net_buf_id>
   16220:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16224:	fb02 3000 	mla	r0, r2, r0, r3
   16228:	bd10      	pop	{r4, pc}
   1622a:	bf00      	nop
   1622c:	20000878 	.word	0x20000878

00016230 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   16230:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16234:	4605      	mov	r5, r0
   16236:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   16238:	4610      	mov	r0, r2
   1623a:	4619      	mov	r1, r3
{
   1623c:	4616      	mov	r6, r2
   1623e:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   16240:	f008 f93b 	bl	1e4ba <z_timeout_end_calc>
   16244:	4680      	mov	r8, r0
   16246:	4689      	mov	r9, r1
	__asm__ volatile(
   16248:	f04f 0340 	mov.w	r3, #64	; 0x40
   1624c:	f3ef 8a11 	mrs	sl, BASEPRI
   16250:	f383 8811 	msr	BASEPRI, r3
   16254:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16258:	8b6b      	ldrh	r3, [r5, #26]
   1625a:	2b00      	cmp	r3, #0
   1625c:	d054      	beq.n	16308 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1625e:	8b2a      	ldrh	r2, [r5, #24]
   16260:	429a      	cmp	r2, r3
   16262:	d93d      	bls.n	162e0 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   16264:	2200      	movs	r2, #0
   16266:	2300      	movs	r3, #0
   16268:	4628      	mov	r0, r5
   1626a:	f001 ff85 	bl	18178 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1626e:	4604      	mov	r4, r0
   16270:	2800      	cmp	r0, #0
   16272:	d035      	beq.n	162e0 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   16274:	f38a 8811 	msr	BASEPRI, sl
   16278:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1627c:	9b01      	ldr	r3, [sp, #4]
   1627e:	2b00      	cmp	r3, #0
   16280:	d052      	beq.n	16328 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16282:	ea56 0307 	orrs.w	r3, r6, r7
   16286:	d010      	beq.n	162aa <net_buf_alloc_len+0x7a>
   16288:	1c7b      	adds	r3, r7, #1
   1628a:	bf08      	it	eq
   1628c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   16290:	d00b      	beq.n	162aa <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   16292:	f002 fef1 	bl	19078 <z_tick_get>
   16296:	ebb8 0600 	subs.w	r6, r8, r0
   1629a:	eb69 0701 	sbc.w	r7, r9, r1
   1629e:	2e00      	cmp	r6, #0
   162a0:	f177 0300 	sbcs.w	r3, r7, #0
   162a4:	bfbc      	itt	lt
   162a6:	2600      	movlt	r6, #0
   162a8:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   162aa:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   162ac:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16340 <net_buf_alloc_len+0x110>
   162b0:	2228      	movs	r2, #40	; 0x28
   162b2:	fb02 8303 	mla	r3, r2, r3, r8
   162b6:	a901      	add	r1, sp, #4
   162b8:	6a1b      	ldr	r3, [r3, #32]
   162ba:	681b      	ldr	r3, [r3, #0]
   162bc:	4632      	mov	r2, r6
   162be:	681d      	ldr	r5, [r3, #0]
   162c0:	4620      	mov	r0, r4
   162c2:	463b      	mov	r3, r7
   162c4:	47a8      	blx	r5
   162c6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   162c8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   162ca:	bb70      	cbnz	r0, 1632a <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   162cc:	79a0      	ldrb	r0, [r4, #6]
   162ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   162d2:	4621      	mov	r1, r4
   162d4:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   162d8:	f007 fe6d 	bl	1dfb6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   162dc:	462c      	mov	r4, r5
}
   162de:	e01f      	b.n	16320 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   162e0:	8b68      	ldrh	r0, [r5, #26]
   162e2:	1e43      	subs	r3, r0, #1
   162e4:	836b      	strh	r3, [r5, #26]
   162e6:	f38a 8811 	msr	BASEPRI, sl
   162ea:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   162ee:	8b2c      	ldrh	r4, [r5, #24]
   162f0:	1a24      	subs	r4, r4, r0
   162f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   162f4:	2318      	movs	r3, #24
   162f6:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   162fa:	4811      	ldr	r0, [pc, #68]	; (16340 <net_buf_alloc_len+0x110>)
   162fc:	4b11      	ldr	r3, [pc, #68]	; (16344 <net_buf_alloc_len+0x114>)
   162fe:	1a2d      	subs	r5, r5, r0
   16300:	10ed      	asrs	r5, r5, #3
   16302:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16304:	71a5      	strb	r5, [r4, #6]
		goto success;
   16306:	e7b9      	b.n	1627c <net_buf_alloc_len+0x4c>
   16308:	f38a 8811 	msr	BASEPRI, sl
   1630c:	f3bf 8f6f 	isb	sy
   16310:	4632      	mov	r2, r6
   16312:	463b      	mov	r3, r7
   16314:	4628      	mov	r0, r5
   16316:	f001 ff2f 	bl	18178 <z_impl_k_queue_get>
	if (!buf) {
   1631a:	4604      	mov	r4, r0
   1631c:	2800      	cmp	r0, #0
   1631e:	d1ad      	bne.n	1627c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16320:	4620      	mov	r0, r4
   16322:	b002      	add	sp, #8
   16324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   16328:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1632a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1632c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1632e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16330:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16332:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16334:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16336:	6923      	ldr	r3, [r4, #16]
   16338:	81e2      	strh	r2, [r4, #14]
   1633a:	60a3      	str	r3, [r4, #8]
	return buf;
   1633c:	e7f0      	b.n	16320 <net_buf_alloc_len+0xf0>
   1633e:	bf00      	nop
   16340:	20000878 	.word	0x20000878
   16344:	cccccccd 	.word	0xcccccccd

00016348 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1634c:	4d17      	ldr	r5, [pc, #92]	; (163ac <net_buf_unref+0x64>)
   1634e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16350:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16352:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   16354:	b90c      	cbnz	r4, 1635a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1635a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1635c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16360:	3b01      	subs	r3, #1
   16362:	b2db      	uxtb	r3, r3
   16364:	7123      	strb	r3, [r4, #4]
   16366:	2b00      	cmp	r3, #0
   16368:	d1f5      	bne.n	16356 <net_buf_unref+0xe>
		if (buf->__buf) {
   1636a:	6921      	ldr	r1, [r4, #16]
   1636c:	b159      	cbz	r1, 16386 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1636e:	7963      	ldrb	r3, [r4, #5]
   16370:	079b      	lsls	r3, r3, #30
   16372:	d407      	bmi.n	16384 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   16374:	79a3      	ldrb	r3, [r4, #6]
   16376:	fb07 5303 	mla	r3, r7, r3, r5
   1637a:	4620      	mov	r0, r4
   1637c:	6a1b      	ldr	r3, [r3, #32]
   1637e:	681b      	ldr	r3, [r3, #0]
   16380:	689b      	ldr	r3, [r3, #8]
   16382:	4798      	blx	r3
			buf->__buf = NULL;
   16384:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16386:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16388:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1638a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1638e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16390:	69db      	ldr	r3, [r3, #28]
   16392:	b11b      	cbz	r3, 1639c <net_buf_unref+0x54>
			pool->destroy(buf);
   16394:	4620      	mov	r0, r4
   16396:	4798      	blx	r3
{
   16398:	4644      	mov	r4, r8
   1639a:	e7db      	b.n	16354 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1639c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163a0:	4621      	mov	r1, r4
   163a2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   163a6:	f007 fe06 	bl	1dfb6 <k_queue_prepend>
}
   163aa:	e7f5      	b.n	16398 <net_buf_unref+0x50>
   163ac:	20000878 	.word	0x20000878

000163b0 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   163b0:	4a05      	ldr	r2, [pc, #20]	; (163c8 <adc_context_start_sampling.isra.0+0x18>)
   163b2:	2301      	movs	r3, #1
   163b4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   163b8:	b108      	cbz	r0, 163be <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163ba:	60d3      	str	r3, [r2, #12]
}
   163bc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163be:	6013      	str	r3, [r2, #0]
   163c0:	4a02      	ldr	r2, [pc, #8]	; (163cc <adc_context_start_sampling.isra.0+0x1c>)
   163c2:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   163c4:	4770      	bx	lr
   163c6:	bf00      	nop
   163c8:	40007000 	.word	0x40007000
   163cc:	40007004 	.word	0x40007004

000163d0 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   163d0:	7908      	ldrb	r0, [r1, #4]
{
   163d2:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   163d4:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   163d8:	2c07      	cmp	r4, #7
   163da:	d81f      	bhi.n	1641c <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
   163dc:	780b      	ldrb	r3, [r1, #0]
   163de:	2b09      	cmp	r3, #9
   163e0:	d81c      	bhi.n	1641c <adc_nrfx_channel_setup+0x4c>
   163e2:	e8df f003 	tbb	[pc, r3]
   163e6:	0606      	.short	0x0606
   163e8:	1b060606 	.word	0x1b060606
   163ec:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
   163f0:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   163f2:	784a      	ldrb	r2, [r1, #1]
   163f4:	2a03      	cmp	r2, #3
   163f6:	d018      	beq.n	1642a <adc_nrfx_channel_setup+0x5a>
   163f8:	2a04      	cmp	r2, #4
   163fa:	d10f      	bne.n	1641c <adc_nrfx_channel_setup+0x4c>
   163fc:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   163fe:	884a      	ldrh	r2, [r1, #2]
   16400:	f244 060a 	movw	r6, #16394	; 0x400a
   16404:	42b2      	cmp	r2, r6
   16406:	d044      	beq.n	16492 <adc_nrfx_channel_setup+0xc2>
   16408:	d811      	bhi.n	1642e <adc_nrfx_channel_setup+0x5e>
   1640a:	f244 0603 	movw	r6, #16387	; 0x4003
   1640e:	42b2      	cmp	r2, r6
   16410:	d03b      	beq.n	1648a <adc_nrfx_channel_setup+0xba>
   16412:	f244 0605 	movw	r6, #16389	; 0x4005
   16416:	42b2      	cmp	r2, r6
   16418:	d039      	beq.n	1648e <adc_nrfx_channel_setup+0xbe>
   1641a:	b3d2      	cbz	r2, 16492 <adc_nrfx_channel_setup+0xc2>
   1641c:	f06f 0015 	mvn.w	r0, #21
   16420:	e032      	b.n	16488 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   16422:	2306      	movs	r3, #6
		break;
   16424:	e7e5      	b.n	163f2 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   16426:	2307      	movs	r3, #7
		break;
   16428:	e7e3      	b.n	163f2 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   1642a:	2501      	movs	r5, #1
   1642c:	e7e7      	b.n	163fe <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   1642e:	f244 0614 	movw	r6, #16404	; 0x4014
   16432:	42b2      	cmp	r2, r6
   16434:	d02f      	beq.n	16496 <adc_nrfx_channel_setup+0xc6>
   16436:	f244 0628 	movw	r6, #16424	; 0x4028
   1643a:	42b2      	cmp	r2, r6
   1643c:	d02d      	beq.n	1649a <adc_nrfx_channel_setup+0xca>
   1643e:	f244 060f 	movw	r6, #16399	; 0x400f
   16442:	42b2      	cmp	r2, r6
   16444:	d1ea      	bne.n	1641c <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   16446:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   16448:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1644c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1644e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   16452:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   16456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1645a:	0122      	lsls	r2, r4, #4
   1645c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16460:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   16464:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   16466:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1646a:	0123      	lsls	r3, r4, #4
   1646c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16470:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   16474:	798a      	ldrb	r2, [r1, #6]
   16476:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1647a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1647e:	4b08      	ldr	r3, [pc, #32]	; (164a0 <adc_nrfx_channel_setup+0xd0>)
   16480:	441c      	add	r4, r3
   16482:	794b      	ldrb	r3, [r1, #5]
   16484:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   16488:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   1648a:	2200      	movs	r2, #0
   1648c:	e7dc      	b.n	16448 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   1648e:	2201      	movs	r2, #1
   16490:	e7da      	b.n	16448 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   16492:	2202      	movs	r2, #2
   16494:	e7d8      	b.n	16448 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   16496:	2204      	movs	r2, #4
   16498:	e7d6      	b.n	16448 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1649a:	2205      	movs	r2, #5
   1649c:	e7d4      	b.n	16448 <adc_nrfx_channel_setup+0x78>
   1649e:	bf00      	nop
   164a0:	200003d8 	.word	0x200003d8

000164a4 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   164a4:	4b2f      	ldr	r3, [pc, #188]	; (16564 <saadc_irq_handler+0xc0>)
   164a6:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
   164a8:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   164aa:	2a00      	cmp	r2, #0
   164ac:	d04b      	beq.n	16546 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   164ae:	2200      	movs	r2, #0
   164b0:	601a      	str	r2, [r3, #0]
   164b2:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   164b4:	4c2c      	ldr	r4, [pc, #176]	; (16568 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   164b6:	4b2d      	ldr	r3, [pc, #180]	; (1656c <saadc_irq_handler+0xc8>)
   164b8:	2101      	movs	r1, #1
   164ba:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   164bc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   164c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   164c2:	b3db      	cbz	r3, 1653c <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
   164c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   164c8:	b143      	cbz	r3, 164dc <saadc_irq_handler+0x38>
			action = callback(dev,
   164ca:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   164ce:	f104 0174 	add.w	r1, r4, #116	; 0x74
   164d2:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   164d4:	2801      	cmp	r0, #1
   164d6:	d014      	beq.n	16502 <saadc_irq_handler+0x5e>
   164d8:	2802      	cmp	r0, #2
   164da:	d029      	beq.n	16530 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   164dc:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   164e0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   164e4:	429a      	cmp	r2, r3
   164e6:	d923      	bls.n	16530 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   164e8:	3301      	adds	r3, #1
   164ea:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   164ee:	4b20      	ldr	r3, [pc, #128]	; (16570 <saadc_irq_handler+0xcc>)
   164f0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   164f4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   164f8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   164fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   164fe:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   16502:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   16506:	b92b      	cbnz	r3, 16514 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   16508:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1650c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16510:	f7ff bf4e 	b.w	163b0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16514:	f3bf 8f5b 	dmb	ish
   16518:	e854 3f00 	ldrex	r3, [r4]
   1651c:	1e5a      	subs	r2, r3, #1
   1651e:	e844 2100 	strex	r1, r2, [r4]
   16522:	2900      	cmp	r1, #0
   16524:	d1f8      	bne.n	16518 <saadc_irq_handler+0x74>
   16526:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1652a:	2b01      	cmp	r3, #1
   1652c:	dcec      	bgt.n	16508 <saadc_irq_handler+0x64>
   1652e:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   16530:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   16534:	b113      	cbz	r3, 1653c <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
   16536:	480f      	ldr	r0, [pc, #60]	; (16574 <saadc_irq_handler+0xd0>)
   16538:	f007 ffe8 	bl	1e50c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1653c:	480e      	ldr	r0, [pc, #56]	; (16578 <saadc_irq_handler+0xd4>)
   1653e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16542:	f002 b983 	b.w	1884c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16546:	4b0d      	ldr	r3, [pc, #52]	; (1657c <saadc_irq_handler+0xd8>)
   16548:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1654a:	2900      	cmp	r1, #0
   1654c:	d0ef      	beq.n	1652e <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1654e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16550:	4a06      	ldr	r2, [pc, #24]	; (1656c <saadc_irq_handler+0xc8>)
   16552:	681b      	ldr	r3, [r3, #0]
   16554:	2301      	movs	r3, #1
   16556:	6013      	str	r3, [r2, #0]
   16558:	f842 3c08 	str.w	r3, [r2, #-8]
   1655c:	f842 3c04 	str.w	r3, [r2, #-4]
}
   16560:	e7e5      	b.n	1652e <saadc_irq_handler+0x8a>
   16562:	bf00      	nop
   16564:	40007104 	.word	0x40007104
   16568:	200003d8 	.word	0x200003d8
   1656c:	40007008 	.word	0x40007008
   16570:	40007000 	.word	0x40007000
   16574:	200003e0 	.word	0x200003e0
   16578:	20000430 	.word	0x20000430
   1657c:	40007110 	.word	0x40007110

00016580 <adc_nrfx_read>:
{
   16580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16582:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   16584:	485d      	ldr	r0, [pc, #372]	; (166fc <adc_nrfx_read+0x17c>)
   16586:	f04f 32ff 	mov.w	r2, #4294967295
   1658a:	f04f 33ff 	mov.w	r3, #4294967295
   1658e:	f002 f983 	bl	18898 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   16592:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   16594:	b910      	cbnz	r0, 1659c <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
   16596:	f06f 0415 	mvn.w	r4, #21
   1659a:	e098      	b.n	166ce <adc_nrfx_read+0x14e>
	if (!selected_channels ||
   1659c:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   165a0:	d1f9      	bne.n	16596 <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   165a2:	4c57      	ldr	r4, [pc, #348]	; (16700 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   165a4:	4f57      	ldr	r7, [pc, #348]	; (16704 <adc_nrfx_read+0x184>)
	active_channels = 0U;
   165a6:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   165a8:	fa20 f302 	lsr.w	r3, r0, r2
   165ac:	f013 0301 	ands.w	r3, r3, #1
   165b0:	d032      	beq.n	16618 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   165b2:	18bb      	adds	r3, r7, r2
   165b4:	f893 c0a0 	ldrb.w	ip, [r3, #160]	; 0xa0
   165b8:	f1bc 0f00 	cmp.w	ip, #0
   165bc:	d0eb      	beq.n	16596 <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   165be:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   165c2:	7c6e      	ldrb	r6, [r5, #17]
   165c4:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   165c8:	3e00      	subs	r6, #0
   165ca:	bf18      	it	ne
   165cc:	2601      	movne	r6, #1
   165ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   165d2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   165d6:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   165da:	f102 0351 	add.w	r3, r2, #81	; 0x51
   165de:	011b      	lsls	r3, r3, #4
			++active_channels;
   165e0:	3101      	adds	r1, #1
   165e2:	f844 c003 	str.w	ip, [r4, r3]
   165e6:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   165e8:	3201      	adds	r2, #1
   165ea:	2a08      	cmp	r2, #8
   165ec:	d1dc      	bne.n	165a8 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   165ee:	7c2b      	ldrb	r3, [r5, #16]
   165f0:	3b08      	subs	r3, #8
   165f2:	2b06      	cmp	r3, #6
   165f4:	d8cf      	bhi.n	16596 <adc_nrfx_read+0x16>
   165f6:	a201      	add	r2, pc, #4	; (adr r2, 165fc <adc_nrfx_read+0x7c>)
   165f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   165fc:	000166e3 	.word	0x000166e3
   16600:	00016597 	.word	0x00016597
   16604:	00016623 	.word	0x00016623
   16608:	00016597 	.word	0x00016597
   1660c:	000166db 	.word	0x000166db
   16610:	00016597 	.word	0x00016597
   16614:	000166df 	.word	0x000166df
   16618:	f102 0651 	add.w	r6, r2, #81	; 0x51
   1661c:	0136      	lsls	r6, r6, #4
   1661e:	51a3      	str	r3, [r4, r6]
}
   16620:	e7e2      	b.n	165e8 <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
   16622:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
   16624:	4b36      	ldr	r3, [pc, #216]	; (16700 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   16626:	2901      	cmp	r1, #1
   16628:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1662c:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1662e:	d95a      	bls.n	166e6 <adc_nrfx_read+0x166>
   16630:	2a00      	cmp	r2, #0
   16632:	d1b0      	bne.n	16596 <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   16634:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
   16638:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1663a:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   1663c:	b112      	cbz	r2, 16644 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1663e:	8992      	ldrh	r2, [r2, #12]
   16640:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   16644:	68ea      	ldr	r2, [r5, #12]
   16646:	429a      	cmp	r2, r3
   16648:	d355      	bcc.n	166f6 <adc_nrfx_read+0x176>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1664a:	4b2d      	ldr	r3, [pc, #180]	; (16700 <adc_nrfx_read+0x180>)
   1664c:	68aa      	ldr	r2, [r5, #8]
   1664e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
   16652:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   16654:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   16658:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1665a:	4c2a      	ldr	r4, [pc, #168]	; (16704 <adc_nrfx_read+0x184>)
   1665c:	f104 0674 	add.w	r6, r4, #116	; 0x74
   16660:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   16662:	683b      	ldr	r3, [r7, #0]
   16664:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
   16666:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   16668:	2600      	movs	r6, #0
   1666a:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   1666c:	2b00      	cmp	r3, #0
   1666e:	d03d      	beq.n	166ec <adc_nrfx_read+0x16c>
		ctx->options = *sequence->options;
   16670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   16672:	f104 0588 	add.w	r5, r4, #136	; 0x88
   16676:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1667a:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   1667c:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		if (ctx->options.interval_us != 0U) {
   16680:	b3a0      	cbz	r0, 166ec <adc_nrfx_read+0x16c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16682:	f3bf 8f5b 	dmb	ish
   16686:	e854 3f00 	ldrex	r3, [r4]
   1668a:	e844 6200 	strex	r2, r6, [r4]
   1668e:	2a00      	cmp	r2, #0
   16690:	d1f9      	bne.n	16686 <adc_nrfx_read+0x106>
   16692:	f3bf 8f5b 	dmb	ish
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   16696:	481c      	ldr	r0, [pc, #112]	; (16708 <adc_nrfx_read+0x188>)
   16698:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   1669c:	4a1b      	ldr	r2, [pc, #108]	; (1670c <adc_nrfx_read+0x18c>)
   1669e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   166a2:	2100      	movs	r1, #0
   166a4:	2300      	movs	r3, #0
   166a6:	fbe5 0106 	umlal	r0, r1, r5, r6
   166aa:	f7e9 ff9d 	bl	5e8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   166ae:	2200      	movs	r2, #0
   166b0:	e9cd 0100 	strd	r0, r1, [sp]
   166b4:	2300      	movs	r3, #0
   166b6:	f104 0008 	add.w	r0, r4, #8
   166ba:	f002 fd1f 	bl	190fc <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   166be:	4814      	ldr	r0, [pc, #80]	; (16710 <adc_nrfx_read+0x190>)
   166c0:	f04f 32ff 	mov.w	r2, #4294967295
   166c4:	f04f 33ff 	mov.w	r3, #4294967295
   166c8:	f002 f8e6 	bl	18898 <z_impl_k_sem_take>
	return ctx->status;
   166cc:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   166ce:	480b      	ldr	r0, [pc, #44]	; (166fc <adc_nrfx_read+0x17c>)
   166d0:	f002 f8bc 	bl	1884c <z_impl_k_sem_give>
}
   166d4:	4620      	mov	r0, r4
   166d6:	b003      	add	sp, #12
   166d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   166da:	2202      	movs	r2, #2
		break;
   166dc:	e7a2      	b.n	16624 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   166de:	2203      	movs	r2, #3
		break;
   166e0:	e7a0      	b.n	16624 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   166e2:	2200      	movs	r2, #0
   166e4:	e79e      	b.n	16624 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   166e6:	2a08      	cmp	r2, #8
   166e8:	d9a4      	bls.n	16634 <adc_nrfx_read+0xb4>
   166ea:	e754      	b.n	16596 <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
   166ec:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   166f0:	f7ff fe5e 	bl	163b0 <adc_context_start_sampling.isra.0>
   166f4:	e7e3      	b.n	166be <adc_nrfx_read+0x13e>
		return -ENOMEM;
   166f6:	f06f 040b 	mvn.w	r4, #11
   166fa:	e7e8      	b.n	166ce <adc_nrfx_read+0x14e>
   166fc:	20000418 	.word	0x20000418
   16700:	40007000 	.word	0x40007000
   16704:	200003d8 	.word	0x200003d8
   16708:	000f423f 	.word	0x000f423f
   1670c:	000f4240 	.word	0x000f4240
   16710:	20000430 	.word	0x20000430

00016714 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16714:	4b0d      	ldr	r3, [pc, #52]	; (1674c <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
   16716:	b510      	push	{r4, lr}
   16718:	2400      	movs	r4, #0
   1671a:	601c      	str	r4, [r3, #0]
   1671c:	681b      	ldr	r3, [r3, #0]
   1671e:	4b0c      	ldr	r3, [pc, #48]	; (16750 <init_saadc+0x3c>)
   16720:	601c      	str	r4, [r3, #0]
   16722:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   16724:	4b0b      	ldr	r3, [pc, #44]	; (16754 <init_saadc+0x40>)
   16726:	2212      	movs	r2, #18
   16728:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1672c:	2007      	movs	r0, #7
   1672e:	f7fa fbe1 	bl	10ef4 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16732:	4622      	mov	r2, r4
   16734:	2101      	movs	r1, #1
   16736:	2007      	movs	r0, #7
   16738:	f7fa fc0e 	bl	10f58 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
   1673c:	4806      	ldr	r0, [pc, #24]	; (16758 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
   1673e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16740:	b913      	cbnz	r3, 16748 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
   16742:	3040      	adds	r0, #64	; 0x40
   16744:	f002 f882 	bl	1884c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   16748:	2000      	movs	r0, #0
   1674a:	bd10      	pop	{r4, pc}
   1674c:	40007104 	.word	0x40007104
   16750:	40007110 	.word	0x40007110
   16754:	40007000 	.word	0x40007000
   16758:	200003d8 	.word	0x200003d8

0001675c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1675c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1675e:	4b09      	ldr	r3, [pc, #36]	; (16784 <gpio_nrfx_init+0x28>)
   16760:	781a      	ldrb	r2, [r3, #0]
   16762:	b96a      	cbnz	r2, 16780 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16764:	2101      	movs	r1, #1
   16766:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16768:	2006      	movs	r0, #6
   1676a:	2105      	movs	r1, #5
   1676c:	f7fa fbf4 	bl	10f58 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   16770:	2006      	movs	r0, #6
   16772:	f7fa fbbf 	bl	10ef4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16776:	4b04      	ldr	r3, [pc, #16]	; (16788 <gpio_nrfx_init+0x2c>)
   16778:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1677c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16780:	2000      	movs	r0, #0
   16782:	bd08      	pop	{r3, pc}
   16784:	200021dd 	.word	0x200021dd
   16788:	40006000 	.word	0x40006000

0001678c <gpio_nrfx_pin_interrupt_configure>:
{
   1678c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1678e:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16790:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   16792:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16794:	7a09      	ldrb	r1, [r1, #8]
   16796:	f005 041f 	and.w	r4, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1679a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1679e:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   167a2:	d10c      	bne.n	167be <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   167a4:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   167a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   167ac:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   167b0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   167b4:	07c8      	lsls	r0, r1, #31
   167b6:	d507      	bpl.n	167c8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   167b8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   167bc:	e093      	b.n	168e6 <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   167be:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   167c2:	68f1      	ldr	r1, [r6, #12]
   167c4:	f000 8091 	beq.w	168ea <gpio_nrfx_pin_interrupt_configure+0x15e>
   167c8:	68f0      	ldr	r0, [r6, #12]
   167ca:	2101      	movs	r1, #1
   167cc:	40a9      	lsls	r1, r5
   167ce:	4301      	orrs	r1, r0
   167d0:	6970      	ldr	r0, [r6, #20]
   167d2:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   167d4:	2101      	movs	r1, #1
   167d6:	40a9      	lsls	r1, r5
   167d8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   167dc:	69b2      	ldr	r2, [r6, #24]
   167de:	bf0c      	ite	eq
   167e0:	4308      	orreq	r0, r1
   167e2:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   167e4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   167e8:	bf0c      	ite	eq
   167ea:	430a      	orreq	r2, r1
   167ec:	438a      	bicne	r2, r1
   167ee:	61b2      	str	r2, [r6, #24]
   167f0:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   167f2:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   167f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   167f8:	bf0c      	ite	eq
   167fa:	4311      	orreq	r1, r2
   167fc:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16800:	4a46      	ldr	r2, [pc, #280]	; (1691c <gpio_nrfx_pin_interrupt_configure+0x190>)
   16802:	6131      	str	r1, [r6, #16]
   16804:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16808:	2000      	movs	r0, #0
   1680a:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1680c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   16810:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   16814:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16818:	428c      	cmp	r4, r1
   1681a:	d16b      	bne.n	168f4 <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
   1681c:	fa23 f100 	lsr.w	r1, r3, r0
   16820:	07c9      	lsls	r1, r1, #31
   16822:	d567      	bpl.n	168f4 <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16824:	0083      	lsls	r3, r0, #2
   16826:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1682a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1682e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16832:	f021 0101 	bic.w	r1, r1, #1
   16836:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1683a:	2301      	movs	r3, #1
   1683c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1683e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   16842:	b2c0      	uxtb	r0, r0
   16844:	f001 fa92 	bl	17d6c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16848:	4620      	mov	r0, r4
   1684a:	2100      	movs	r1, #0
   1684c:	f007 f9b2 	bl	1dbb4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16850:	68f0      	ldr	r0, [r6, #12]
   16852:	40e8      	lsrs	r0, r5
   16854:	f010 0001 	ands.w	r0, r0, #1
   16858:	d045      	beq.n	168e6 <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
   1685a:	6970      	ldr	r0, [r6, #20]
   1685c:	40e8      	lsrs	r0, r5
   1685e:	f010 0201 	ands.w	r2, r0, #1
   16862:	d04e      	beq.n	16902 <gpio_nrfx_pin_interrupt_configure+0x176>
			if (data->double_edge & BIT(pin)) {
   16864:	69b3      	ldr	r3, [r6, #24]
   16866:	40eb      	lsrs	r3, r5
   16868:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1686a:	bf5f      	itttt	pl
   1686c:	6931      	ldrpl	r1, [r6, #16]
   1686e:	fa21 f505 	lsrpl.w	r5, r1, r5
   16872:	f005 0501 	andpl.w	r5, r5, #1
   16876:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1687a:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1687e:	bf54      	ite	pl
   16880:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16882:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16884:	f001 fa94 	bl	17db0 <nrfx_gpiote_channel_alloc>
   16888:	4b25      	ldr	r3, [pc, #148]	; (16920 <gpio_nrfx_pin_interrupt_configure+0x194>)
   1688a:	4298      	cmp	r0, r3
   1688c:	d136      	bne.n	168fc <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1688e:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16892:	008b      	lsls	r3, r1, #2
   16894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16898:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1689c:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1689e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   168a2:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   168a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   168aa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   168ae:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   168b2:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   168b6:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   168b8:	008a      	lsls	r2, r1, #2
   168ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   168be:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   168c2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   168c6:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   168c8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   168cc:	6010      	str	r0, [r2, #0]
   168ce:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   168d0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   168d4:	f042 0201 	orr.w	r2, r2, #1
   168d8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   168dc:	4a0f      	ldr	r2, [pc, #60]	; (1691c <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   168de:	2301      	movs	r3, #1
   168e0:	408b      	lsls	r3, r1
   168e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   168e6:	b002      	add	sp, #8
   168e8:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   168ea:	2001      	movs	r0, #1
   168ec:	40a8      	lsls	r0, r5
   168ee:	ea21 0100 	bic.w	r1, r1, r0
   168f2:	e76d      	b.n	167d0 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   168f4:	3001      	adds	r0, #1
   168f6:	2808      	cmp	r0, #8
   168f8:	d188      	bne.n	1680c <gpio_nrfx_pin_interrupt_configure+0x80>
   168fa:	e7a5      	b.n	16848 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   168fc:	f06f 0012 	mvn.w	r0, #18
   16900:	e7f1      	b.n	168e6 <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16902:	6931      	ldr	r1, [r6, #16]
   16904:	40e9      	lsrs	r1, r5
   16906:	f001 0101 	and.w	r1, r1, #1
   1690a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1690e:	4620      	mov	r0, r4
   16910:	b2c9      	uxtb	r1, r1
   16912:	f007 f94f 	bl	1dbb4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   16916:	4610      	mov	r0, r2
   16918:	e7e5      	b.n	168e6 <gpio_nrfx_pin_interrupt_configure+0x15a>
   1691a:	bf00      	nop
   1691c:	40006000 	.word	0x40006000
   16920:	0bad0000 	.word	0x0bad0000

00016924 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16924:	4b2a      	ldr	r3, [pc, #168]	; (169d0 <gpio_nrfx_config+0xac>)
{
   16926:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16928:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1692a:	482a      	ldr	r0, [pc, #168]	; (169d4 <gpio_nrfx_config+0xb0>)
   1692c:	4013      	ands	r3, r2
   1692e:	4283      	cmp	r3, r0
   16930:	d03e      	beq.n	169b0 <gpio_nrfx_config+0x8c>
   16932:	d80d      	bhi.n	16950 <gpio_nrfx_config+0x2c>
   16934:	2b06      	cmp	r3, #6
   16936:	d015      	beq.n	16964 <gpio_nrfx_config+0x40>
   16938:	d805      	bhi.n	16946 <gpio_nrfx_config+0x22>
   1693a:	b19b      	cbz	r3, 16964 <gpio_nrfx_config+0x40>
   1693c:	2b02      	cmp	r3, #2
   1693e:	d039      	beq.n	169b4 <gpio_nrfx_config+0x90>
   16940:	f06f 0015 	mvn.w	r0, #21
   16944:	e033      	b.n	169ae <gpio_nrfx_config+0x8a>
   16946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1694a:	d1f9      	bne.n	16940 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1694c:	2301      	movs	r3, #1
   1694e:	e009      	b.n	16964 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16950:	4821      	ldr	r0, [pc, #132]	; (169d8 <gpio_nrfx_config+0xb4>)
   16952:	4283      	cmp	r3, r0
   16954:	d030      	beq.n	169b8 <gpio_nrfx_config+0x94>
   16956:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1695a:	d02f      	beq.n	169bc <gpio_nrfx_config+0x98>
   1695c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16960:	d1ee      	bne.n	16940 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   16962:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16964:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   16966:	bf54      	ite	pl
   16968:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1696c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1696e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   16972:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   16976:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1697a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1697e:	d007      	beq.n	16990 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16980:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16984:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16986:	d01b      	beq.n	169c0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16988:	2201      	movs	r2, #1
   1698a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1698c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   16990:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   16994:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   16998:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1699c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   169a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   169a4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   169a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   169ac:	2000      	movs	r0, #0
}
   169ae:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   169b0:	2307      	movs	r3, #7
   169b2:	e7d7      	b.n	16964 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   169b4:	2304      	movs	r3, #4
   169b6:	e7d5      	b.n	16964 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   169b8:	2305      	movs	r3, #5
   169ba:	e7d3      	b.n	16964 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   169bc:	2303      	movs	r3, #3
   169be:	e7d1      	b.n	16964 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   169c0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   169c2:	bf42      	ittt	mi
   169c4:	2201      	movmi	r2, #1
   169c6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   169c8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   169cc:	e7e0      	b.n	16990 <gpio_nrfx_config+0x6c>
   169ce:	bf00      	nop
   169d0:	00f00006 	.word	0x00f00006
   169d4:	00100006 	.word	0x00100006
   169d8:	00400002 	.word	0x00400002

000169dc <gpiote_event_handler>:
{
   169dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   169e0:	4d3f      	ldr	r5, [pc, #252]	; (16ae0 <gpiote_event_handler+0x104>)
   169e2:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   169e4:	2e00      	cmp	r6, #0
   169e6:	d04e      	beq.n	16a86 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   169e8:	4b3e      	ldr	r3, [pc, #248]	; (16ae4 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   169ea:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   169ee:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   169f0:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   169f2:	4301      	orrs	r1, r0
   169f4:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   169f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   169fc:	2701      	movs	r7, #1
   169fe:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16a02:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   16a04:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   16a08:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   16a0c:	bb72      	cbnz	r2, 16a6c <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16a0e:	602a      	str	r2, [r5, #0]
   16a10:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   16a12:	4835      	ldr	r0, [pc, #212]	; (16ae8 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16a14:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16a16:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16a18:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   16a1a:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   16a1e:	fa05 f103 	lsl.w	r1, r5, r3
   16a22:	4211      	tst	r1, r2
   16a24:	d011      	beq.n	16a4a <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a26:	009a      	lsls	r2, r3, #2
   16a28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16a2c:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   16a30:	6811      	ldr	r1, [r2, #0]
   16a32:	b151      	cbz	r1, 16a4a <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16a34:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   16a38:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16a3c:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16a3e:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16a42:	fa05 f101 	lsl.w	r1, r5, r1
   16a46:	6812      	ldr	r2, [r2, #0]
   16a48:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16a4a:	3301      	adds	r3, #1
   16a4c:	2b08      	cmp	r3, #8
   16a4e:	d1e4      	bne.n	16a1a <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   16a50:	b9dc      	cbnz	r4, 16a8a <gpiote_event_handler+0xae>
	if (port_event) {
   16a52:	b14e      	cbz	r6, 16a68 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   16a54:	4c23      	ldr	r4, [pc, #140]	; (16ae4 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   16a56:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   16a5a:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   16a5c:	4301      	orrs	r1, r0
   16a5e:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   16a62:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   16a64:	2600      	movs	r6, #0
	while (level_pins) {
   16a66:	bb42      	cbnz	r2, 16aba <gpiote_event_handler+0xde>
}
   16a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   16a6c:	423a      	tst	r2, r7
   16a6e:	d006      	beq.n	16a7e <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16a70:	2100      	movs	r1, #0
   16a72:	f008 001f 	and.w	r0, r8, #31
   16a76:	f007 f89d 	bl	1dbb4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   16a7a:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   16a7e:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   16a82:	007f      	lsls	r7, r7, #1
   16a84:	e7c2      	b.n	16a0c <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16a86:	4634      	mov	r4, r6
   16a88:	e7c3      	b.n	16a12 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16a8a:	4b16      	ldr	r3, [pc, #88]	; (16ae4 <gpiote_event_handler+0x108>)
   16a8c:	6859      	ldr	r1, [r3, #4]
   16a8e:	2900      	cmp	r1, #0
   16a90:	d0df      	beq.n	16a52 <gpiote_event_handler+0x76>
	return node->next;
   16a92:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   16a94:	4f15      	ldr	r7, [pc, #84]	; (16aec <gpiote_event_handler+0x110>)
   16a96:	2d00      	cmp	r5, #0
   16a98:	bf38      	it	cc
   16a9a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   16a9c:	688a      	ldr	r2, [r1, #8]
   16a9e:	4022      	ands	r2, r4
   16aa0:	d002      	beq.n	16aa8 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   16aa2:	684b      	ldr	r3, [r1, #4]
   16aa4:	4638      	mov	r0, r7
   16aa6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16aa8:	2d00      	cmp	r5, #0
   16aaa:	d0d2      	beq.n	16a52 <gpiote_event_handler+0x76>
   16aac:	682b      	ldr	r3, [r5, #0]
   16aae:	2b00      	cmp	r3, #0
   16ab0:	bf38      	it	cc
   16ab2:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16ab4:	4629      	mov	r1, r5
   16ab6:	461d      	mov	r5, r3
   16ab8:	e7f0      	b.n	16a9c <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   16aba:	4215      	tst	r5, r2
   16abc:	d00c      	beq.n	16ad8 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16abe:	6921      	ldr	r1, [r4, #16]
   16ac0:	40f1      	lsrs	r1, r6
   16ac2:	f001 0101 	and.w	r1, r1, #1
   16ac6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16aca:	b2c9      	uxtb	r1, r1
   16acc:	f006 001f 	and.w	r0, r6, #31
   16ad0:	f007 f870 	bl	1dbb4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   16ad4:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   16ad8:	3601      	adds	r6, #1
		bit <<= 1;
   16ada:	006d      	lsls	r5, r5, #1
   16adc:	e7c3      	b.n	16a66 <gpiote_event_handler+0x8a>
   16ade:	bf00      	nop
   16ae0:	4000617c 	.word	0x4000617c
   16ae4:	20001fe4 	.word	0x20001fe4
   16ae8:	40006000 	.word	0x40006000
   16aec:	20000764 	.word	0x20000764

00016af0 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16af0:	4b06      	ldr	r3, [pc, #24]	; (16b0c <uart_nrfx_poll_in+0x1c>)
   16af2:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   16af4:	b13a      	cbz	r2, 16b06 <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16af6:	2000      	movs	r0, #0
   16af8:	6018      	str	r0, [r3, #0]
   16afa:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   16afc:	4b04      	ldr	r3, [pc, #16]	; (16b10 <uart_nrfx_poll_in+0x20>)
   16afe:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   16b02:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   16b04:	4770      	bx	lr
		return -1;
   16b06:	f04f 30ff 	mov.w	r0, #4294967295
}
   16b0a:	4770      	bx	lr
   16b0c:	40002108 	.word	0x40002108
   16b10:	40002000 	.word	0x40002000

00016b14 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   16b14:	4b02      	ldr	r3, [pc, #8]	; (16b20 <uart_nrfx_err_check+0xc>)
   16b16:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   16b1a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   16b1e:	4770      	bx	lr
   16b20:	40002000 	.word	0x40002000

00016b24 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   16b24:	b510      	push	{r4, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   16b26:	794b      	ldrb	r3, [r1, #5]
   16b28:	2b01      	cmp	r3, #1
   16b2a:	d11c      	bne.n	16b66 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16b2c:	798b      	ldrb	r3, [r1, #6]
   16b2e:	2b03      	cmp	r3, #3
   16b30:	d119      	bne.n	16b66 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16b32:	79cb      	ldrb	r3, [r1, #7]
   16b34:	b9bb      	cbnz	r3, 16b66 <uart_nrfx_configure+0x42>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16b36:	790a      	ldrb	r2, [r1, #4]
   16b38:	b112      	cbz	r2, 16b40 <uart_nrfx_configure+0x1c>
   16b3a:	2a02      	cmp	r2, #2
   16b3c:	d113      	bne.n	16b66 <uart_nrfx_configure+0x42>
   16b3e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16b40:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   16b42:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   16b46:	d05e      	beq.n	16c06 <uart_nrfx_configure+0xe2>
   16b48:	d82b      	bhi.n	16ba2 <uart_nrfx_configure+0x7e>
   16b4a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16b4e:	d05c      	beq.n	16c0a <uart_nrfx_configure+0xe6>
   16b50:	d814      	bhi.n	16b7c <uart_nrfx_configure+0x58>
   16b52:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16b56:	d05a      	beq.n	16c0e <uart_nrfx_configure+0xea>
   16b58:	d808      	bhi.n	16b6c <uart_nrfx_configure+0x48>
   16b5a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16b5e:	d059      	beq.n	16c14 <uart_nrfx_configure+0xf0>
   16b60:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16b64:	d059      	beq.n	16c1a <uart_nrfx_configure+0xf6>
   16b66:	f06f 0022 	mvn.w	r0, #34	; 0x22
   16b6a:	e04b      	b.n	16c04 <uart_nrfx_configure+0xe0>
   16b6c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16b70:	d056      	beq.n	16c20 <uart_nrfx_configure+0xfc>
   16b72:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16b76:	d1f6      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   16b78:	4b33      	ldr	r3, [pc, #204]	; (16c48 <uart_nrfx_configure+0x124>)
   16b7a:	e039      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16b7c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16b80:	d051      	beq.n	16c26 <uart_nrfx_configure+0x102>
   16b82:	d807      	bhi.n	16b94 <uart_nrfx_configure+0x70>
   16b84:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16b88:	d04f      	beq.n	16c2a <uart_nrfx_configure+0x106>
   16b8a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16b8e:	d1ea      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   16b90:	4b2e      	ldr	r3, [pc, #184]	; (16c4c <uart_nrfx_configure+0x128>)
   16b92:	e02d      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16b94:	f647 2412 	movw	r4, #31250	; 0x7a12
   16b98:	42a3      	cmp	r3, r4
   16b9a:	d1e4      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   16b9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16ba0:	e026      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16ba2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16ba6:	d043      	beq.n	16c30 <uart_nrfx_configure+0x10c>
   16ba8:	d811      	bhi.n	16bce <uart_nrfx_configure+0xaa>
   16baa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16bae:	d041      	beq.n	16c34 <uart_nrfx_configure+0x110>
   16bb0:	d808      	bhi.n	16bc4 <uart_nrfx_configure+0xa0>
   16bb2:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   16bb6:	42a3      	cmp	r3, r4
   16bb8:	d03e      	beq.n	16c38 <uart_nrfx_configure+0x114>
   16bba:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16bbe:	d1d2      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   16bc0:	4b23      	ldr	r3, [pc, #140]	; (16c50 <uart_nrfx_configure+0x12c>)
   16bc2:	e015      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16bc4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16bc8:	d1cd      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   16bca:	4b22      	ldr	r3, [pc, #136]	; (16c54 <uart_nrfx_configure+0x130>)
   16bcc:	e010      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16bce:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16bd2:	d034      	beq.n	16c3e <uart_nrfx_configure+0x11a>
   16bd4:	d807      	bhi.n	16be6 <uart_nrfx_configure+0xc2>
   16bd6:	4c20      	ldr	r4, [pc, #128]	; (16c58 <uart_nrfx_configure+0x134>)
   16bd8:	42a3      	cmp	r3, r4
   16bda:	d032      	beq.n	16c42 <uart_nrfx_configure+0x11e>
   16bdc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16be0:	d1c1      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   16be2:	4b1e      	ldr	r3, [pc, #120]	; (16c5c <uart_nrfx_configure+0x138>)
   16be4:	e004      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16be6:	4c1e      	ldr	r4, [pc, #120]	; (16c60 <uart_nrfx_configure+0x13c>)
   16be8:	42a3      	cmp	r3, r4
   16bea:	d1bc      	bne.n	16b66 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   16bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16bf0:	4c1c      	ldr	r4, [pc, #112]	; (16c64 <uart_nrfx_configure+0x140>)
   16bf2:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16bf6:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16bfa:	6903      	ldr	r3, [r0, #16]
   16bfc:	c903      	ldmia	r1, {r0, r1}
   16bfe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16c02:	2000      	movs	r0, #0
}
   16c04:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   16c06:	4b18      	ldr	r3, [pc, #96]	; (16c68 <uart_nrfx_configure+0x144>)
   16c08:	e7f2      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   16c0a:	4b18      	ldr	r3, [pc, #96]	; (16c6c <uart_nrfx_configure+0x148>)
   16c0c:	e7f0      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   16c0e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16c12:	e7ed      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
   16c14:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16c18:	e7ea      	b.n	16bf0 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   16c1a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16c1e:	e7e7      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   16c20:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16c24:	e7e4      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   16c26:	4b12      	ldr	r3, [pc, #72]	; (16c70 <uart_nrfx_configure+0x14c>)
   16c28:	e7e2      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   16c2a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   16c2e:	e7df      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   16c30:	4b10      	ldr	r3, [pc, #64]	; (16c74 <uart_nrfx_configure+0x150>)
   16c32:	e7dd      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   16c34:	4b10      	ldr	r3, [pc, #64]	; (16c78 <uart_nrfx_configure+0x154>)
   16c36:	e7db      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   16c38:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16c3c:	e7d8      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   16c3e:	4b0f      	ldr	r3, [pc, #60]	; (16c7c <uart_nrfx_configure+0x158>)
   16c40:	e7d6      	b.n	16bf0 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   16c42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16c46:	e7d3      	b.n	16bf0 <uart_nrfx_configure+0xcc>
   16c48:	0013b000 	.word	0x0013b000
   16c4c:	004ea000 	.word	0x004ea000
   16c50:	00ebf000 	.word	0x00ebf000
   16c54:	01d7e000 	.word	0x01d7e000
   16c58:	0003d090 	.word	0x0003d090
   16c5c:	075f7000 	.word	0x075f7000
   16c60:	000f4240 	.word	0x000f4240
   16c64:	40002000 	.word	0x40002000
   16c68:	009d5000 	.word	0x009d5000
   16c6c:	00275000 	.word	0x00275000
   16c70:	0075f000 	.word	0x0075f000
   16c74:	03afb000 	.word	0x03afb000
   16c78:	013a9000 	.word	0x013a9000
   16c7c:	0ebed000 	.word	0x0ebed000

00016c80 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   16c80:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   16c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   16c86:	4c12      	ldr	r4, [pc, #72]	; (16cd0 <uart_nrfx_init+0x50>)
   16c88:	2200      	movs	r2, #0
   16c8a:	2140      	movs	r1, #64	; 0x40
   16c8c:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   16c90:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16c94:	2103      	movs	r1, #3
   16c96:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   16c9a:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->PSELRXD = pselrxd;
   16c9e:	2308      	movs	r3, #8
   16ca0:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   16ca4:	2306      	movs	r3, #6
   16ca6:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSELRTS = pselrts;
   16caa:	f04f 33ff 	mov.w	r3, #4294967295
   16cae:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16cb2:	6901      	ldr	r1, [r0, #16]
    p_reg->PSELCTS = pselcts;
   16cb4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   16cb8:	f7ff ff34 	bl	16b24 <uart_nrfx_configure>
	if (err) {
   16cbc:	b938      	cbnz	r0, 16cce <uart_nrfx_init+0x4e>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   16cbe:	2304      	movs	r3, #4
   16cc0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16cc4:	4b03      	ldr	r3, [pc, #12]	; (16cd4 <uart_nrfx_init+0x54>)
   16cc6:	6018      	str	r0, [r3, #0]
   16cc8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16cca:	2301      	movs	r3, #1
   16ccc:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   16cce:	bd10      	pop	{r4, pc}
   16cd0:	40002000 	.word	0x40002000
   16cd4:	40002108 	.word	0x40002108

00016cd8 <uart_nrfx_poll_out>:
{
   16cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cda:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   16cdc:	f007 fad9 	bl	1e292 <k_is_in_isr>
   16ce0:	4d19      	ldr	r5, [pc, #100]	; (16d48 <uart_nrfx_poll_out+0x70>)
   16ce2:	bb70      	cbnz	r0, 16d42 <uart_nrfx_poll_out+0x6a>
   16ce4:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16ce6:	2701      	movs	r7, #1
   16ce8:	f3bf 8f5b 	dmb	ish
   16cec:	e855 3f00 	ldrex	r3, [r5]
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d103      	bne.n	16cfc <uart_nrfx_poll_out+0x24>
   16cf4:	e845 7200 	strex	r2, r7, [r5]
   16cf8:	2a00      	cmp	r2, #0
   16cfa:	d1f7      	bne.n	16cec <uart_nrfx_poll_out+0x14>
   16cfc:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   16d00:	d007      	beq.n	16d12 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   16d02:	2021      	movs	r0, #33	; 0x21
   16d04:	2100      	movs	r1, #0
   16d06:	3c01      	subs	r4, #1
   16d08:	f001 fd04 	bl	18714 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   16d0c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   16d10:	d1ea      	bne.n	16ce8 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d12:	4c0e      	ldr	r4, [pc, #56]	; (16d4c <uart_nrfx_poll_out+0x74>)
   16d14:	2200      	movs	r2, #0
   16d16:	6022      	str	r2, [r4, #0]
   16d18:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d1a:	4a0d      	ldr	r2, [pc, #52]	; (16d50 <uart_nrfx_poll_out+0x78>)
   16d1c:	2101      	movs	r1, #1
   16d1e:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   16d20:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   16d24:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16d28:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   16d2a:	b923      	cbnz	r3, 16d36 <uart_nrfx_poll_out+0x5e>
   16d2c:	2001      	movs	r0, #1
   16d2e:	f007 f828 	bl	1dd82 <nrfx_busy_wait>
   16d32:	3e01      	subs	r6, #1
   16d34:	d1f8      	bne.n	16d28 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d36:	4b07      	ldr	r3, [pc, #28]	; (16d54 <uart_nrfx_poll_out+0x7c>)
   16d38:	2201      	movs	r2, #1
   16d3a:	601a      	str	r2, [r3, #0]
	*lock = 0;
   16d3c:	2300      	movs	r3, #0
   16d3e:	602b      	str	r3, [r5, #0]
}
   16d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   16d42:	2301      	movs	r3, #1
   16d44:	602b      	str	r3, [r5, #0]
   16d46:	e7e4      	b.n	16d12 <uart_nrfx_poll_out+0x3a>
   16d48:	20002004 	.word	0x20002004
   16d4c:	4000211c 	.word	0x4000211c
   16d50:	40002008 	.word	0x40002008
   16d54:	4000200c 	.word	0x4000200c

00016d58 <random_byte_get>:
	__asm__ volatile(
   16d58:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d5c:	f3ef 8211 	mrs	r2, BASEPRI
   16d60:	f383 8811 	msr	BASEPRI, r3
   16d64:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16d68:	4b08      	ldr	r3, [pc, #32]	; (16d8c <random_byte_get+0x34>)
   16d6a:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   16d6c:	b159      	cbz	r1, 16d86 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   16d6e:	4908      	ldr	r1, [pc, #32]	; (16d90 <random_byte_get+0x38>)
   16d70:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16d74:	2100      	movs	r1, #0
   16d76:	6019      	str	r1, [r3, #0]
   16d78:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   16d7a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   16d7c:	f382 8811 	msr	BASEPRI, r2
   16d80:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   16d84:	4770      	bx	lr
	int retval = -EAGAIN;
   16d86:	f06f 000a 	mvn.w	r0, #10
   16d8a:	e7f7      	b.n	16d7c <random_byte_get+0x24>
   16d8c:	4000d100 	.word	0x4000d100
   16d90:	4000d000 	.word	0x4000d000

00016d94 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   16d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d96:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   16d98:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   16d9a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   16d9c:	f04f 0540 	mov.w	r5, #64	; 0x40
   16da0:	f3ef 8011 	mrs	r0, BASEPRI
   16da4:	f385 8811 	msr	BASEPRI, r5
   16da8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   16dac:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   16dae:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   16db2:	1ba4      	subs	r4, r4, r6
   16db4:	403c      	ands	r4, r7
	if (available < len) {
   16db6:	42a2      	cmp	r2, r4
		len = available;
   16db8:	bf88      	it	hi
   16dba:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   16dbc:	eb06 0c02 	add.w	ip, r6, r2
   16dc0:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   16dc4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   16dc6:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   16dca:	f380 8811 	msr	BASEPRI, r0
   16dce:	f3bf 8f6f 	isb	sy
   16dd2:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   16dd4:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   16dd6:	4282      	cmp	r2, r0
   16dd8:	d119      	bne.n	16e0e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   16dda:	4576      	cmp	r6, lr
   16ddc:	d10d      	bne.n	16dfa <rng_pool_get+0x66>
	__asm__ volatile(
   16dde:	f04f 0540 	mov.w	r5, #64	; 0x40
   16de2:	f3ef 8211 	mrs	r2, BASEPRI
   16de6:	f385 8811 	msr	BASEPRI, r5
   16dea:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   16dee:	781d      	ldrb	r5, [r3, #0]
   16df0:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   16df2:	f382 8811 	msr	BASEPRI, r2
   16df6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   16dfa:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   16dfc:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   16dfe:	b288      	uxth	r0, r1
	available = available - len;
   16e00:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   16e02:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16e04:	bf22      	ittt	cs
   16e06:	4b06      	ldrcs	r3, [pc, #24]	; (16e20 <rng_pool_get+0x8c>)
   16e08:	2201      	movcs	r2, #1
   16e0a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   16e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   16e0e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   16e12:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   16e14:	f89c c005 	ldrb.w	ip, [ip, #5]
   16e18:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   16e1c:	403d      	ands	r5, r7
   16e1e:	e7da      	b.n	16dd6 <rng_pool_get+0x42>
   16e20:	4000d000 	.word	0x4000d000

00016e24 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16e24:	43db      	mvns	r3, r3
{
   16e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16e2a:	f013 0501 	ands.w	r5, r3, #1
{
   16e2e:	460e      	mov	r6, r1
   16e30:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16e32:	d004      	beq.n	16e3e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   16e34:	4821      	ldr	r0, [pc, #132]	; (16ebc <entropy_nrf5_get_entropy_isr+0x98>)
   16e36:	f7ff ffad 	bl	16d94 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   16e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   16e3e:	2a00      	cmp	r2, #0
   16e40:	d033      	beq.n	16eaa <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   16e42:	f04f 0340 	mov.w	r3, #64	; 0x40
   16e46:	f3ef 8811 	mrs	r8, BASEPRI
   16e4a:	f383 8811 	msr	BASEPRI, r3
   16e4e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   16e52:	200d      	movs	r0, #13
   16e54:	f7fa f872 	bl	10f3c <arch_irq_is_enabled>
   16e58:	4607      	mov	r7, r0
		irq_disable(IRQN);
   16e5a:	200d      	movs	r0, #13
   16e5c:	f7fa f85a 	bl	10f14 <arch_irq_disable>
	__asm__ volatile(
   16e60:	f388 8811 	msr	BASEPRI, r8
   16e64:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16e68:	4a15      	ldr	r2, [pc, #84]	; (16ec0 <entropy_nrf5_get_entropy_isr+0x9c>)
   16e6a:	6015      	str	r5, [r2, #0]
   16e6c:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16e6e:	4b15      	ldr	r3, [pc, #84]	; (16ec4 <entropy_nrf5_get_entropy_isr+0xa0>)
   16e70:	2101      	movs	r1, #1
   16e72:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16e74:	4914      	ldr	r1, [pc, #80]	; (16ec8 <entropy_nrf5_get_entropy_isr+0xa4>)
   16e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   16e7a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   16e7e:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16e80:	4691      	mov	r9, r2
   16e82:	468a      	mov	sl, r1
   16e84:	4698      	mov	r8, r3
   16e86:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   16e8a:	b183      	cbz	r3, 16eae <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   16e8c:	f7ff ff64 	bl	16d58 <random_byte_get>
			if (byte < 0) {
   16e90:	1e03      	subs	r3, r0, #0
   16e92:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   16e96:	dbf6      	blt.n	16e86 <entropy_nrf5_get_entropy_isr+0x62>
   16e98:	3d01      	subs	r5, #1
   16e9a:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   16e9c:	5573      	strb	r3, [r6, r5]
		} while (len);
   16e9e:	2d00      	cmp	r5, #0
   16ea0:	d1f1      	bne.n	16e86 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   16ea2:	b117      	cbz	r7, 16eaa <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   16ea4:	200d      	movs	r0, #13
   16ea6:	f7fa f825 	bl	10ef4 <arch_irq_enable>
	return cnt;
   16eaa:	4620      	mov	r0, r4
   16eac:	e7c5      	b.n	16e3a <entropy_nrf5_get_entropy_isr+0x16>
   16eae:	f3bf 8f4f 	dsb	sy
				__WFE();
   16eb2:	bf20      	wfe
				__SEV();
   16eb4:	bf40      	sev
				__WFE();
   16eb6:	bf20      	wfe
   16eb8:	e7e5      	b.n	16e86 <entropy_nrf5_get_entropy_isr+0x62>
   16eba:	bf00      	nop
   16ebc:	2000203c 	.word	0x2000203c
   16ec0:	4000d100 	.word	0x4000d100
   16ec4:	4000d000 	.word	0x4000d000
   16ec8:	e000e100 	.word	0xe000e100

00016ecc <entropy_nrf5_get_entropy>:
{
   16ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   16ed0:	4f13      	ldr	r7, [pc, #76]	; (16f20 <entropy_nrf5_get_entropy+0x54>)
   16ed2:	460d      	mov	r5, r1
   16ed4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   16ed6:	f107 0845 	add.w	r8, r7, #69	; 0x45
   16eda:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   16ede:	b914      	cbnz	r4, 16ee6 <entropy_nrf5_get_entropy+0x1a>
}
   16ee0:	4620      	mov	r0, r4
   16ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16ee6:	f04f 33ff 	mov.w	r3, #4294967295
   16eea:	f04f 32ff 	mov.w	r2, #4294967295
   16eee:	4638      	mov	r0, r7
   16ef0:	f001 fcd2 	bl	18898 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   16ef4:	4622      	mov	r2, r4
   16ef6:	4629      	mov	r1, r5
   16ef8:	4640      	mov	r0, r8
   16efa:	f7ff ff4b 	bl	16d94 <rng_pool_get>
   16efe:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   16f00:	4638      	mov	r0, r7
   16f02:	f001 fca3 	bl	1884c <z_impl_k_sem_give>
		if (bytes == 0U) {
   16f06:	b93e      	cbnz	r6, 16f18 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   16f08:	f04f 32ff 	mov.w	r2, #4294967295
   16f0c:	f04f 33ff 	mov.w	r3, #4294967295
   16f10:	4648      	mov	r0, r9
   16f12:	f001 fcc1 	bl	18898 <z_impl_k_sem_take>
			continue;
   16f16:	e7e2      	b.n	16ede <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   16f18:	1ba4      	subs	r4, r4, r6
   16f1a:	b2a4      	uxth	r4, r4
		buf += bytes;
   16f1c:	4435      	add	r5, r6
   16f1e:	e7de      	b.n	16ede <entropy_nrf5_get_entropy+0x12>
   16f20:	2000200c 	.word	0x2000200c

00016f24 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   16f24:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   16f26:	4c19      	ldr	r4, [pc, #100]	; (16f8c <entropy_nrf5_init+0x68>)
   16f28:	2201      	movs	r2, #1
   16f2a:	4611      	mov	r1, r2
   16f2c:	4620      	mov	r0, r4
   16f2e:	f007 f9a0 	bl	1e272 <z_impl_k_sem_init>
   16f32:	2201      	movs	r2, #1
   16f34:	2100      	movs	r1, #0
   16f36:	f104 0018 	add.w	r0, r4, #24
   16f3a:	f007 f99a 	bl	1e272 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   16f3e:	f240 4307 	movw	r3, #1031	; 0x407
   16f42:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   16f46:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16f4a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   16f4c:	230c      	movs	r3, #12
   16f4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   16f52:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   16f54:	4b0e      	ldr	r3, [pc, #56]	; (16f90 <entropy_nrf5_init+0x6c>)
   16f56:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   16f5a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   16f5e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   16f62:	f022 0201 	bic.w	r2, r2, #1
   16f66:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16f6a:	4a0a      	ldr	r2, [pc, #40]	; (16f94 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   16f6c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16f6e:	6015      	str	r5, [r2, #0]
   16f70:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   16f72:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   16f76:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16f78:	6019      	str	r1, [r3, #0]
   16f7a:	200d      	movs	r0, #13
   16f7c:	f7f9 ffec 	bl	10f58 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   16f80:	200d      	movs	r0, #13
   16f82:	f7f9 ffb7 	bl	10ef4 <arch_irq_enable>

	return 0;
}
   16f86:	4628      	mov	r0, r5
   16f88:	bd38      	pop	{r3, r4, r5, pc}
   16f8a:	bf00      	nop
   16f8c:	2000200c 	.word	0x2000200c
   16f90:	4000d000 	.word	0x4000d000
   16f94:	4000d100 	.word	0x4000d100

00016f98 <isr>:
{
   16f98:	b510      	push	{r4, lr}
	byte = random_byte_get();
   16f9a:	f7ff fedd 	bl	16d58 <random_byte_get>
	if (byte < 0) {
   16f9e:	2800      	cmp	r0, #0
   16fa0:	db20      	blt.n	16fe4 <isr+0x4c>
	uint8_t last  = rngp->last;
   16fa2:	4b17      	ldr	r3, [pc, #92]	; (17000 <isr+0x68>)
   16fa4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   16fa8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   16fac:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   16fb0:	1a51      	subs	r1, r2, r1
   16fb2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   16fb6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   16fb8:	d10d      	bne.n	16fd6 <isr+0x3e>
	uint8_t last  = rngp->last;
   16fba:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   16fbe:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   16fc2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   16fc6:	1a51      	subs	r1, r2, r1
   16fc8:	ea34 0101 	bics.w	r1, r4, r1
   16fcc:	d10b      	bne.n	16fe6 <isr+0x4e>
   16fce:	4b0d      	ldr	r3, [pc, #52]	; (17004 <isr+0x6c>)
   16fd0:	2201      	movs	r2, #1
   16fd2:	601a      	str	r2, [r3, #0]
}
   16fd4:	e00e      	b.n	16ff4 <isr+0x5c>
	rngp->buffer[last] = byte;
   16fd6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   16fd8:	3201      	adds	r2, #1
   16fda:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   16fdc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   16fe0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   16fe4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   16fe6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   16fe8:	3201      	adds	r2, #1
   16fea:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   16fec:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   16ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   16ff4:	4804      	ldr	r0, [pc, #16]	; (17008 <isr+0x70>)
}
   16ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16ffa:	f001 bc27 	b.w	1884c <z_impl_k_sem_give>
   16ffe:	bf00      	nop
   17000:	2000200c 	.word	0x2000200c
   17004:	4000d004 	.word	0x4000d004
   17008:	20002024 	.word	0x20002024

0001700c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1700c:	4602      	mov	r2, r0
   1700e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   17010:	4801      	ldr	r0, [pc, #4]	; (17018 <multithreading_lock_acquire+0xc>)
   17012:	f001 bc41 	b.w	18898 <z_impl_k_sem_take>
   17016:	bf00      	nop
   17018:	20000800 	.word	0x20000800

0001701c <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   1701c:	4801      	ldr	r0, [pc, #4]	; (17024 <multithreading_lock_release+0x8>)
   1701e:	f001 bc15 	b.w	1884c <z_impl_k_sem_give>
   17022:	bf00      	nop
   17024:	20000800 	.word	0x20000800

00017028 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   17028:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1702a:	4905      	ldr	r1, [pc, #20]	; (17040 <rand_prio_low_vector_get_blocking+0x18>)
{
   1702c:	b410      	push	{r4}
   1702e:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17030:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17032:	6881      	ldr	r1, [r0, #8]
   17034:	680c      	ldr	r4, [r1, #0]
   17036:	4619      	mov	r1, r3
   17038:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1703a:	bc10      	pop	{r4}
   1703c:	4718      	bx	r3
   1703e:	bf00      	nop
   17040:	20002060 	.word	0x20002060

00017044 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   17044:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   17046:	4804      	ldr	r0, [pc, #16]	; (17058 <hci_driver_init+0x14>)
   17048:	f7fb fb9c 	bl	12784 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1704c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   17050:	4802      	ldr	r0, [pc, #8]	; (1705c <hci_driver_init+0x18>)
   17052:	f7ec bf83 	b.w	3f5c <sdc_init>
   17056:	bf00      	nop
   17058:	0001f1bc 	.word	0x0001f1bc
   1705c:	0001dc8d 	.word	0x0001dc8d

00017060 <rand_prio_low_vector_get>:
{
   17060:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17062:	4b08      	ldr	r3, [pc, #32]	; (17084 <rand_prio_low_vector_get+0x24>)
{
   17064:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17066:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   17068:	6883      	ldr	r3, [r0, #8]
   1706a:	685d      	ldr	r5, [r3, #4]
   1706c:	460a      	mov	r2, r1
   1706e:	b135      	cbz	r5, 1707e <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17070:	2300      	movs	r3, #0
   17072:	4621      	mov	r1, r4
   17074:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   17076:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1707a:	b2c0      	uxtb	r0, r0
   1707c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1707e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17082:	e7f8      	b.n	17076 <rand_prio_low_vector_get+0x16>
   17084:	20002060 	.word	0x20002060

00017088 <hci_driver_open>:
{
   17088:	b530      	push	{r4, r5, lr}
   1708a:	b093      	sub	sp, #76	; 0x4c
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1708c:	2200      	movs	r2, #0
   1708e:	2300      	movs	r3, #0
   17090:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17094:	2400      	movs	r4, #0
   17096:	f06f 0309 	mvn.w	r3, #9
   1709a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1709e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   170a2:	4b42      	ldr	r3, [pc, #264]	; (171ac <hci_driver_open+0x124>)
   170a4:	4942      	ldr	r1, [pc, #264]	; (171b0 <hci_driver_open+0x128>)
   170a6:	9400      	str	r4, [sp, #0]
   170a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   170ac:	4841      	ldr	r0, [pc, #260]	; (171b4 <hci_driver_open+0x12c>)
   170ae:	f001 fc67 	bl	18980 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   170b2:	4941      	ldr	r1, [pc, #260]	; (171b8 <hci_driver_open+0x130>)
   170b4:	483f      	ldr	r0, [pc, #252]	; (171b4 <hci_driver_open+0x12c>)
   170b6:	f007 f8f6 	bl	1e2a6 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   170ba:	a80d      	add	r0, sp, #52	; 0x34
   170bc:	f7ec fee6 	bl	3e8c <sdc_build_revision_get>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   170c0:	aa09      	add	r2, sp, #36	; 0x24
   170c2:	2101      	movs	r1, #1
   170c4:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   170c6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   170ca:	f7ec feed 	bl	3ea8 <sdc_cfg_set>
	if (required_memory < 0) {
   170ce:	2800      	cmp	r0, #0
   170d0:	db30      	blt.n	17134 <hci_driver_open+0xac>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   170d2:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   170d4:	aa09      	add	r2, sp, #36	; 0x24
   170d6:	2102      	movs	r1, #2
   170d8:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   170da:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   170de:	f7ec fee3 	bl	3ea8 <sdc_cfg_set>
	if (required_memory < 0) {
   170e2:	2800      	cmp	r0, #0
   170e4:	db26      	blt.n	17134 <hci_driver_open+0xac>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   170e6:	4b35      	ldr	r3, [pc, #212]	; (171bc <hci_driver_open+0x134>)
   170e8:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   170ea:	aa09      	add	r2, sp, #36	; 0x24
   170ec:	2103      	movs	r1, #3
   170ee:	4620      	mov	r0, r4
   170f0:	f7ec feda 	bl	3ea8 <sdc_cfg_set>
	if (required_memory < 0) {
   170f4:	2800      	cmp	r0, #0
   170f6:	db1d      	blt.n	17134 <hci_driver_open+0xac>
	cfg.event_length.event_length_us =
   170f8:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   170fc:	aa09      	add	r2, sp, #36	; 0x24
   170fe:	2104      	movs	r1, #4
   17100:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   17102:	9309      	str	r3, [sp, #36]	; 0x24
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17104:	f7ec fed0 	bl	3ea8 <sdc_cfg_set>
	if (required_memory < 0) {
   17108:	2800      	cmp	r0, #0
   1710a:	db13      	blt.n	17134 <hci_driver_open+0xac>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1710c:	aa09      	add	r2, sp, #36	; 0x24
   1710e:	2105      	movs	r1, #5
   17110:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   17112:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17116:	f7ec fec7 	bl	3ea8 <sdc_cfg_set>
	if (required_memory < 0) {
   1711a:	2800      	cmp	r0, #0
   1711c:	db0a      	blt.n	17134 <hci_driver_open+0xac>
	if (required_memory > sizeof(sdc_mempool)) {
   1711e:	f5b0 7f6e 	cmp.w	r0, #952	; 0x3b8
   17122:	dd09      	ble.n	17138 <hci_driver_open+0xb0>
		k_panic();
   17124:	4040      	eors	r0, r0
   17126:	f380 8811 	msr	BASEPRI, r0
   1712a:	f04f 0004 	mov.w	r0, #4
   1712e:	df02      	svc	2
		return -ENOMEM;
   17130:	f06f 000b 	mvn.w	r0, #11
}
   17134:	b013      	add	sp, #76	; 0x4c
   17136:	bd30      	pop	{r4, r5, pc}
   17138:	4821      	ldr	r0, [pc, #132]	; (171c0 <hci_driver_open+0x138>)
   1713a:	f000 fe91 	bl	17e60 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1713e:	4b21      	ldr	r3, [pc, #132]	; (171c4 <hci_driver_open+0x13c>)
   17140:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   17142:	b360      	cbz	r0, 1719e <hci_driver_open+0x116>
	sdc_rand_source_t rand_functions = {
   17144:	4a20      	ldr	r2, [pc, #128]	; (171c8 <hci_driver_open+0x140>)
   17146:	ca07      	ldmia	r2, {r0, r1, r2}
   17148:	ab0a      	add	r3, sp, #40	; 0x28
   1714a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1714e:	4618      	mov	r0, r3
   17150:	f7ed f812 	bl	4178 <sdc_rand_source_register>
	if (err) {
   17154:	bb30      	cbnz	r0, 171a4 <hci_driver_open+0x11c>
			err = sdc_support_adv();
   17156:	f7ec ff7b 	bl	4050 <sdc_support_adv>
			if (err) {
   1715a:	b110      	cbz	r0, 17162 <hci_driver_open+0xda>
				return -ENOTSUP;
   1715c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17160:	e7e8      	b.n	17134 <hci_driver_open+0xac>
		err = sdc_support_slave();
   17162:	f7ec ff9f 	bl	40a4 <sdc_support_slave>
		if (err) {
   17166:	2800      	cmp	r0, #0
   17168:	d1f8      	bne.n	1715c <hci_driver_open+0xd4>
		err = sdc_support_dle();
   1716a:	f7ec ff7f 	bl	406c <sdc_support_dle>
		if (err) {
   1716e:	2800      	cmp	r0, #0
   17170:	d1f4      	bne.n	1715c <hci_driver_open+0xd4>
		err = sdc_support_le_2m_phy();
   17172:	f7ec ff89 	bl	4088 <sdc_support_le_2m_phy>
		if (err) {
   17176:	2800      	cmp	r0, #0
   17178:	d1f0      	bne.n	1715c <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1717a:	f04f 30ff 	mov.w	r0, #4294967295
   1717e:	f04f 31ff 	mov.w	r1, #4294967295
   17182:	f7ff ff43 	bl	1700c <multithreading_lock_acquire>
	if (!err) {
   17186:	4604      	mov	r4, r0
   17188:	b930      	cbnz	r0, 17198 <hci_driver_open+0x110>
		err = sdc_enable(host_signal, sdc_mempool);
   1718a:	4910      	ldr	r1, [pc, #64]	; (171cc <hci_driver_open+0x144>)
   1718c:	4810      	ldr	r0, [pc, #64]	; (171d0 <hci_driver_open+0x148>)
   1718e:	f7ec feb9 	bl	3f04 <sdc_enable>
   17192:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17194:	f7ff ff42 	bl	1701c <multithreading_lock_release>
	if (err < 0) {
   17198:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1719c:	e7ca      	b.n	17134 <hci_driver_open+0xac>
		return -ENODEV;
   1719e:	f06f 0012 	mvn.w	r0, #18
   171a2:	e7c7      	b.n	17134 <hci_driver_open+0xac>
		return -EINVAL;
   171a4:	f06f 0015 	mvn.w	r0, #21
   171a8:	e7c4      	b.n	17134 <hci_driver_open+0xac>
   171aa:	bf00      	nop
   171ac:	000171d5 	.word	0x000171d5
   171b0:	200035a8 	.word	0x200035a8
   171b4:	20001b58 	.word	0x20001b58
   171b8:	0001f859 	.word	0x0001f859
   171bc:	03031b1b 	.word	0x03031b1b
   171c0:	0001f855 	.word	0x0001f855
   171c4:	20002060 	.word	0x20002060
   171c8:	0001ea60 	.word	0x0001ea60
   171cc:	2000222a 	.word	0x2000222a
   171d0:	000172b5 	.word	0x000172b5

000171d4 <recv_thread>:
{
   171d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   171d6:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   171d8:	4f34      	ldr	r7, [pc, #208]	; (172ac <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   171da:	4c35      	ldr	r4, [pc, #212]	; (172b0 <recv_thread+0xdc>)
	bool received_evt = false;
   171dc:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   171de:	b93e      	cbnz	r6, 171f0 <recv_thread+0x1c>
   171e0:	b935      	cbnz	r5, 171f0 <recv_thread+0x1c>
   171e2:	f04f 32ff 	mov.w	r2, #4294967295
   171e6:	f04f 33ff 	mov.w	r3, #4294967295
   171ea:	4638      	mov	r0, r7
   171ec:	f001 fb54 	bl	18898 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   171f0:	f04f 30ff 	mov.w	r0, #4294967295
   171f4:	f04f 31ff 	mov.w	r1, #4294967295
   171f8:	f7ff ff08 	bl	1700c <multithreading_lock_acquire>
	if (!errcode) {
   171fc:	b158      	cbz	r0, 17216 <recv_thread+0x42>
		return false;
   171fe:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17200:	f04f 30ff 	mov.w	r0, #4294967295
   17204:	f04f 31ff 	mov.w	r1, #4294967295
   17208:	f7ff ff00 	bl	1700c <multithreading_lock_acquire>
	if (!errcode) {
   1720c:	b380      	cbz	r0, 17270 <recv_thread+0x9c>
		return false;
   1720e:	2500      	movs	r5, #0
	z_impl_k_yield();
   17210:	f001 fa2e 	bl	18670 <z_impl_k_yield>
}
   17214:	e7e3      	b.n	171de <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   17216:	4826      	ldr	r0, [pc, #152]	; (172b0 <recv_thread+0xdc>)
   17218:	f000 fb9e 	bl	17958 <hci_internal_evt_get>
   1721c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1721e:	f7ff fefd 	bl	1701c <multithreading_lock_release>
	if (errcode) {
   17222:	2d00      	cmp	r5, #0
   17224:	d1eb      	bne.n	171fe <recv_thread+0x2a>
	switch (hdr->evt) {
   17226:	7820      	ldrb	r0, [r4, #0]
   17228:	283e      	cmp	r0, #62	; 0x3e
   1722a:	d007      	beq.n	1723c <recv_thread+0x68>
   1722c:	28ff      	cmp	r0, #255	; 0xff
   1722e:	d01c      	beq.n	1726a <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17230:	f04f 32ff 	mov.w	r2, #4294967295
   17234:	f04f 33ff 	mov.w	r3, #4294967295
   17238:	2100      	movs	r1, #0
   1723a:	e007      	b.n	1724c <recv_thread+0x78>
		switch (me->subevent) {
   1723c:	78a3      	ldrb	r3, [r4, #2]
   1723e:	2b02      	cmp	r3, #2
   17240:	d001      	beq.n	17246 <recv_thread+0x72>
   17242:	2b0d      	cmp	r3, #13
		switch (subevent) {
   17244:	d1f4      	bne.n	17230 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17246:	2200      	movs	r2, #0
   17248:	2300      	movs	r3, #0
   1724a:	2101      	movs	r1, #1
   1724c:	f7fa fb56 	bl	118fc <bt_buf_get_evt>
	if (!evt_buf) {
   17250:	4605      	mov	r5, r0
   17252:	b140      	cbz	r0, 17266 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   17254:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17256:	4621      	mov	r1, r4
   17258:	3202      	adds	r2, #2
   1725a:	3008      	adds	r0, #8
   1725c:	f006 fc56 	bl	1db0c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   17260:	4628      	mov	r0, r5
   17262:	f7fb fa6d 	bl	12740 <bt_recv>
	return true;
   17266:	2601      	movs	r6, #1
   17268:	e7ca      	b.n	17200 <recv_thread+0x2c>
		switch (subevent) {
   1726a:	78a3      	ldrb	r3, [r4, #2]
   1726c:	2b80      	cmp	r3, #128	; 0x80
   1726e:	e7e9      	b.n	17244 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   17270:	480f      	ldr	r0, [pc, #60]	; (172b0 <recv_thread+0xdc>)
   17272:	f7f5 fae4 	bl	c83e <sdc_hci_data_get>
   17276:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17278:	f7ff fed0 	bl	1701c <multithreading_lock_release>
	if (errcode) {
   1727c:	2d00      	cmp	r5, #0
   1727e:	d1c6      	bne.n	1720e <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17280:	f04f 32ff 	mov.w	r2, #4294967295
   17284:	f04f 33ff 	mov.w	r3, #4294967295
   17288:	2003      	movs	r0, #3
   1728a:	f7fa fb01 	bl	11890 <bt_buf_get_rx>
	if (!data_buf) {
   1728e:	4605      	mov	r5, r0
   17290:	b908      	cbnz	r0, 17296 <recv_thread+0xc2>
	return true;
   17292:	2501      	movs	r5, #1
   17294:	e7bc      	b.n	17210 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   17296:	8862      	ldrh	r2, [r4, #2]
   17298:	4621      	mov	r1, r4
   1729a:	3204      	adds	r2, #4
   1729c:	3008      	adds	r0, #8
   1729e:	f006 fc35 	bl	1db0c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   172a2:	4628      	mov	r0, r5
   172a4:	f7fb fa4c 	bl	12740 <bt_recv>
   172a8:	e7f3      	b.n	17292 <recv_thread+0xbe>
   172aa:	bf00      	nop
   172ac:	20000830 	.word	0x20000830
   172b0:	200021de 	.word	0x200021de

000172b4 <host_signal>:
	z_impl_k_sem_give(sem);
   172b4:	4801      	ldr	r0, [pc, #4]	; (172bc <host_signal+0x8>)
   172b6:	f001 bac9 	b.w	1884c <z_impl_k_sem_give>
   172ba:	bf00      	nop
   172bc:	20000830 	.word	0x20000830

000172c0 <hci_driver_send>:
{
   172c0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   172c2:	8983      	ldrh	r3, [r0, #12]
{
   172c4:	4605      	mov	r5, r0
	if (!buf->len) {
   172c6:	b383      	cbz	r3, 1732a <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   172c8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   172ca:	b1ab      	cbz	r3, 172f8 <hci_driver_send+0x38>
   172cc:	2b02      	cmp	r3, #2
   172ce:	d12c      	bne.n	1732a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   172d0:	f04f 30ff 	mov.w	r0, #4294967295
   172d4:	f04f 31ff 	mov.w	r1, #4294967295
   172d8:	f7ff fe98 	bl	1700c <multithreading_lock_acquire>
	if (!errcode) {
   172dc:	4604      	mov	r4, r0
   172de:	b948      	cbnz	r0, 172f4 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   172e0:	68a8      	ldr	r0, [r5, #8]
   172e2:	f7f5 fab9 	bl	c858 <sdc_hci_data_put>
   172e6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   172e8:	f7ff fe98 	bl	1701c <multithreading_lock_release>
		if (errcode) {
   172ec:	b1c4      	cbz	r4, 17320 <hci_driver_send+0x60>
   172ee:	4810      	ldr	r0, [pc, #64]	; (17330 <hci_driver_send+0x70>)
   172f0:	f001 faac 	bl	1884c <z_impl_k_sem_give>
}
   172f4:	4620      	mov	r0, r4
   172f6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   172f8:	f04f 30ff 	mov.w	r0, #4294967295
   172fc:	f04f 31ff 	mov.w	r1, #4294967295
   17300:	f7ff fe84 	bl	1700c <multithreading_lock_acquire>
	if (!errcode) {
   17304:	4604      	mov	r4, r0
   17306:	2800      	cmp	r0, #0
   17308:	d1f4      	bne.n	172f4 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1730a:	68a8      	ldr	r0, [r5, #8]
   1730c:	f000 f812 	bl	17334 <hci_internal_cmd_put>
   17310:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17312:	f7ff fe83 	bl	1701c <multithreading_lock_release>
	if (errcode) {
   17316:	2c00      	cmp	r4, #0
   17318:	d1ec      	bne.n	172f4 <hci_driver_send+0x34>
   1731a:	4805      	ldr	r0, [pc, #20]	; (17330 <hci_driver_send+0x70>)
   1731c:	f001 fa96 	bl	1884c <z_impl_k_sem_give>
		net_buf_unref(buf);
   17320:	4628      	mov	r0, r5
   17322:	f7ff f811 	bl	16348 <net_buf_unref>
   17326:	2400      	movs	r4, #0
   17328:	e7e4      	b.n	172f4 <hci_driver_send+0x34>
	switch (type) {
   1732a:	f06f 0415 	mvn.w	r4, #21
   1732e:	e7e1      	b.n	172f4 <hci_driver_send+0x34>
   17330:	20000830 	.word	0x20000830

00017334 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   17334:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   17336:	4c8e      	ldr	r4, [pc, #568]	; (17570 <hci_internal_cmd_put+0x23c>)
   17338:	7823      	ldrb	r3, [r4, #0]
   1733a:	2b00      	cmp	r3, #0
   1733c:	f040 82f7 	bne.w	1792e <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   17340:	7843      	ldrb	r3, [r0, #1]
   17342:	7805      	ldrb	r5, [r0, #0]
   17344:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   17348:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1734c:	b22e      	sxth	r6, r5
   1734e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   17352:	d20d      	bcs.n	17370 <hci_internal_cmd_put+0x3c>
   17354:	b17b      	cbz	r3, 17376 <hci_internal_cmd_put+0x42>
   17356:	3b01      	subs	r3, #1
   17358:	2b07      	cmp	r3, #7
   1735a:	d80c      	bhi.n	17376 <hci_internal_cmd_put+0x42>
   1735c:	e8df f013 	tbh	[pc, r3, lsl #1]
   17360:	000b000e 	.word	0x000b000e
   17364:	0060002c 	.word	0x0060002c
   17368:	000b000b 	.word	0x000b000b
   1736c:	010c000b 	.word	0x010c000b
   17370:	2b3f      	cmp	r3, #63	; 0x3f
   17372:	f000 8233 	beq.w	177dc <hci_internal_cmd_put+0x4a8>
   17376:	2304      	movs	r3, #4
   17378:	2001      	movs	r0, #1
   1737a:	e26b      	b.n	17854 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   1737c:	f240 4306 	movw	r3, #1030	; 0x406
   17380:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17382:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   17386:	d005      	beq.n	17394 <hci_internal_cmd_put+0x60>
   17388:	f240 431d 	movw	r3, #1053	; 0x41d
   1738c:	429e      	cmp	r6, r3
   1738e:	d010      	beq.n	173b2 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   17390:	2001      	movs	r0, #1
   17392:	e001      	b.n	17398 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   17394:	f7f5 fb82 	bl	ca9c <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17398:	230f      	movs	r3, #15
   1739a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1739c:	2304      	movs	r3, #4
   1739e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   173a0:	2301      	movs	r3, #1
	evt_data->status = status_code;
   173a2:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   173a4:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   173a6:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   173aa:	2301      	movs	r3, #1
   173ac:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   173ae:	2000      	movs	r0, #0
}
   173b0:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   173b2:	f7f5 fb75 	bl	caa0 <sdc_hci_cmd_lc_read_remote_version_information>
   173b6:	e7ef      	b.n	17398 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   173b8:	f640 4363 	movw	r3, #3171	; 0xc63
   173bc:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   173be:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   173c2:	d025      	beq.n	17410 <hci_internal_cmd_put+0xdc>
   173c4:	dc0f      	bgt.n	173e6 <hci_internal_cmd_put+0xb2>
   173c6:	f640 4303 	movw	r3, #3075	; 0xc03
   173ca:	429e      	cmp	r6, r3
   173cc:	d018      	beq.n	17400 <hci_internal_cmd_put+0xcc>
   173ce:	f640 432d 	movw	r3, #3117	; 0xc2d
   173d2:	429e      	cmp	r6, r3
   173d4:	d017      	beq.n	17406 <hci_internal_cmd_put+0xd2>
   173d6:	f640 4301 	movw	r3, #3073	; 0xc01
   173da:	429e      	cmp	r6, r3
   173dc:	d1d8      	bne.n	17390 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   173de:	f7f5 fa57 	bl	c890 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   173e2:	2304      	movs	r3, #4
   173e4:	e0b8      	b.n	17558 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   173e6:	f640 437b 	movw	r3, #3195	; 0xc7b
   173ea:	429e      	cmp	r6, r3
   173ec:	d013      	beq.n	17416 <hci_internal_cmd_put+0xe2>
   173ee:	f640 437c 	movw	r3, #3196	; 0xc7c
   173f2:	429e      	cmp	r6, r3
   173f4:	d1cc      	bne.n	17390 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   173f6:	495f      	ldr	r1, [pc, #380]	; (17574 <hci_internal_cmd_put+0x240>)
   173f8:	f7f5 fa54 	bl	c8a4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   173fc:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   173fe:	e0ab      	b.n	17558 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   17400:	f7ec ffb6 	bl	4370 <sdc_hci_cmd_cb_reset>
   17404:	e7ed      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   17406:	495b      	ldr	r1, [pc, #364]	; (17574 <hci_internal_cmd_put+0x240>)
   17408:	f7f5 fa40 	bl	c88c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1740c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1740e:	e0a3      	b.n	17558 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   17410:	f7f5 fa43 	bl	c89a <sdc_hci_cmd_cb_set_event_mask_page_2>
   17414:	e7e5      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   17416:	4957      	ldr	r1, [pc, #348]	; (17574 <hci_internal_cmd_put+0x240>)
   17418:	f7f5 fa36 	bl	c888 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1741c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1741e:	e09b      	b.n	17558 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   17420:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   17424:	3e01      	subs	r6, #1
   17426:	2e08      	cmp	r6, #8
   17428:	d8b2      	bhi.n	17390 <hci_internal_cmd_put+0x5c>
   1742a:	a301      	add	r3, pc, #4	; (adr r3, 17430 <hci_internal_cmd_put+0xfc>)
   1742c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17430:	00017455 	.word	0x00017455
   17434:	0001745f 	.word	0x0001745f
   17438:	00017539 	.word	0x00017539
   1743c:	00017391 	.word	0x00017391
   17440:	00017391 	.word	0x00017391
   17444:	00017391 	.word	0x00017391
   17448:	00017391 	.word	0x00017391
   1744c:	00017391 	.word	0x00017391
   17450:	00017551 	.word	0x00017551
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   17454:	4847      	ldr	r0, [pc, #284]	; (17574 <hci_internal_cmd_put+0x240>)
   17456:	f7f5 fad6 	bl	ca06 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1745a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1745c:	e07c      	b.n	17558 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1745e:	4845      	ldr	r0, [pc, #276]	; (17574 <hci_internal_cmd_put+0x240>)
   17460:	222e      	movs	r2, #46	; 0x2e
   17462:	2100      	movs	r1, #0
   17464:	f003 fe03 	bl	1b06e <memset>
	cmds->hci_disconnect = 1;
   17468:	79e3      	ldrb	r3, [r4, #7]
   1746a:	f043 0320 	orr.w	r3, r3, #32
   1746e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   17470:	7a63      	ldrb	r3, [r4, #9]
   17472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17476:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   17478:	7b23      	ldrb	r3, [r4, #12]
   1747a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1747e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   17480:	7c63      	ldrb	r3, [r4, #17]
   17482:	f043 0304 	orr.w	r3, r3, #4
   17486:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   17488:	7d63      	ldrb	r3, [r4, #21]
   1748a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1748e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   17492:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   17494:	7da3      	ldrb	r3, [r4, #22]
   17496:	f043 0302 	orr.w	r3, r3, #2
   1749a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1749c:	7f63      	ldrb	r3, [r4, #29]
   1749e:	f043 0304 	orr.w	r3, r3, #4
   174a2:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   174a4:	f894 3020 	ldrb.w	r3, [r4, #32]
   174a8:	f063 0308 	orn	r3, r3, #8
   174ac:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   174b0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   174b4:	f063 033c 	orn	r3, r3, #60	; 0x3c
   174b8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   174bc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   174c0:	f063 030c 	orn	r3, r3, #12
   174c4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   174c8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   174cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   174d0:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   174d4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   174d8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   174dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   174e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   174e4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   174e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   174ec:	f063 033f 	orn	r3, r3, #63	; 0x3f
   174f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   174f4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   174f8:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   174fc:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   17500:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   17504:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   17508:	f063 0301 	orn	r3, r3, #1
   1750c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   17510:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   17514:	f043 0301 	orr.w	r3, r3, #1
   17518:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1751c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   17520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17524:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   17528:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1752c:	f043 0304 	orr.w	r3, r3, #4
   17530:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   17534:	2344      	movs	r3, #68	; 0x44
   17536:	e0de      	b.n	176f6 <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   17538:	480e      	ldr	r0, [pc, #56]	; (17574 <hci_internal_cmd_put+0x240>)
   1753a:	2208      	movs	r2, #8
   1753c:	2100      	movs	r1, #0
   1753e:	f003 fd96 	bl	1b06e <memset>
	features->bdedr_not_supported = 1;
   17542:	7ae3      	ldrb	r3, [r4, #11]
   17544:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   17548:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1754c:	72e3      	strb	r3, [r4, #11]
   1754e:	e0d1      	b.n	176f4 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   17550:	4808      	ldr	r0, [pc, #32]	; (17574 <hci_internal_cmd_put+0x240>)
   17552:	f7f5 fa56 	bl	ca02 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   17556:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   17558:	2801      	cmp	r0, #1
   1755a:	f43f af1d 	beq.w	17398 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1755e:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   17560:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   17562:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17564:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   17566:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   17568:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1756a:	71a0      	strb	r0, [r4, #6]
}
   1756c:	e71d      	b.n	173aa <hci_internal_cmd_put+0x76>
   1756e:	bf00      	nop
   17570:	200025e2 	.word	0x200025e2
   17574:	200025e9 	.word	0x200025e9
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17578:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1757c:	3e01      	subs	r6, #1
   1757e:	3003      	adds	r0, #3
	switch (opcode)	{
   17580:	2e4d      	cmp	r6, #77	; 0x4d
   17582:	f63f af05 	bhi.w	17390 <hci_internal_cmd_put+0x5c>
   17586:	a301      	add	r3, pc, #4	; (adr r3, 1758c <hci_internal_cmd_put+0x258>)
   17588:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1758c:	000176c5 	.word	0x000176c5
   17590:	000176cb 	.word	0x000176cb
   17594:	000176d3 	.word	0x000176d3
   17598:	00017391 	.word	0x00017391
   1759c:	000176fb 	.word	0x000176fb
   175a0:	00017701 	.word	0x00017701
   175a4:	00017707 	.word	0x00017707
   175a8:	00017711 	.word	0x00017711
   175ac:	00017717 	.word	0x00017717
   175b0:	0001771d 	.word	0x0001771d
   175b4:	00017391 	.word	0x00017391
   175b8:	00017391 	.word	0x00017391
   175bc:	00017391 	.word	0x00017391
   175c0:	00017391 	.word	0x00017391
   175c4:	00017723 	.word	0x00017723
   175c8:	0001772b 	.word	0x0001772b
   175cc:	00017731 	.word	0x00017731
   175d0:	00017737 	.word	0x00017737
   175d4:	00017391 	.word	0x00017391
   175d8:	00017391 	.word	0x00017391
   175dc:	0001773d 	.word	0x0001773d
   175e0:	00017747 	.word	0x00017747
   175e4:	0001774d 	.word	0x0001774d
   175e8:	00017757 	.word	0x00017757
   175ec:	00017391 	.word	0x00017391
   175f0:	0001775f 	.word	0x0001775f
   175f4:	00017767 	.word	0x00017767
   175f8:	0001776f 	.word	0x0001776f
   175fc:	00017391 	.word	0x00017391
   17600:	00017391 	.word	0x00017391
   17604:	00017391 	.word	0x00017391
   17608:	00017391 	.word	0x00017391
   1760c:	00017391 	.word	0x00017391
   17610:	00017777 	.word	0x00017777
   17614:	0001777f 	.word	0x0001777f
   17618:	00017787 	.word	0x00017787
   1761c:	00017391 	.word	0x00017391
   17620:	00017391 	.word	0x00017391
   17624:	0001778d 	.word	0x0001778d
   17628:	00017793 	.word	0x00017793
   1762c:	00017799 	.word	0x00017799
   17630:	0001779f 	.word	0x0001779f
   17634:	00017391 	.word	0x00017391
   17638:	00017391 	.word	0x00017391
   1763c:	000177a7 	.word	0x000177a7
   17640:	000177ad 	.word	0x000177ad
   17644:	000177b3 	.word	0x000177b3
   17648:	000177bb 	.word	0x000177bb
   1764c:	000177c3 	.word	0x000177c3
   17650:	000177c9 	.word	0x000177c9
   17654:	00017391 	.word	0x00017391
   17658:	00017391 	.word	0x00017391
   1765c:	00017391 	.word	0x00017391
   17660:	00017391 	.word	0x00017391
   17664:	00017391 	.word	0x00017391
   17668:	00017391 	.word	0x00017391
   1766c:	00017391 	.word	0x00017391
   17670:	00017391 	.word	0x00017391
   17674:	00017391 	.word	0x00017391
   17678:	00017391 	.word	0x00017391
   1767c:	00017391 	.word	0x00017391
   17680:	00017391 	.word	0x00017391
   17684:	00017391 	.word	0x00017391
   17688:	00017391 	.word	0x00017391
   1768c:	00017391 	.word	0x00017391
   17690:	00017391 	.word	0x00017391
   17694:	00017391 	.word	0x00017391
   17698:	00017391 	.word	0x00017391
   1769c:	00017391 	.word	0x00017391
   176a0:	00017391 	.word	0x00017391
   176a4:	00017391 	.word	0x00017391
   176a8:	00017391 	.word	0x00017391
   176ac:	00017391 	.word	0x00017391
   176b0:	00017391 	.word	0x00017391
   176b4:	000177cf 	.word	0x000177cf
   176b8:	00017391 	.word	0x00017391
   176bc:	00017391 	.word	0x00017391
   176c0:	000177d7 	.word	0x000177d7
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   176c4:	f7f5 f9d9 	bl	ca7a <sdc_hci_cmd_le_set_event_mask>
   176c8:	e68b      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   176ca:	48a2      	ldr	r0, [pc, #648]	; (17954 <hci_internal_cmd_put+0x620>)
   176cc:	f7f5 f9b3 	bl	ca36 <sdc_hci_cmd_le_read_buffer_size>
   176d0:	e69c      	b.n	1740c <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   176d2:	48a0      	ldr	r0, [pc, #640]	; (17954 <hci_internal_cmd_put+0x620>)
   176d4:	2205      	movs	r2, #5
   176d6:	2100      	movs	r1, #0
   176d8:	f003 fcc9 	bl	1b06e <memset>
	features->le_encryption = 1;
   176dc:	79e3      	ldrb	r3, [r4, #7]
   176de:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   176e2:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   176e6:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   176e8:	7a23      	ldrb	r3, [r4, #8]
   176ea:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   176ee:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   176f2:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   176f4:	230c      	movs	r3, #12
	switch (hci_opcode) {
   176f6:	2000      	movs	r0, #0
   176f8:	e731      	b.n	1755e <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   176fa:	f7f5 f9c7 	bl	ca8c <sdc_hci_cmd_le_set_random_address>
   176fe:	e670      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   17700:	f7f5 f9b5 	bl	ca6e <sdc_hci_cmd_le_set_adv_params>
   17704:	e66d      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   17706:	4893      	ldr	r0, [pc, #588]	; (17954 <hci_internal_cmd_put+0x620>)
   17708:	f7f5 f993 	bl	ca32 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1770c:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1770e:	e723      	b.n	17558 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   17710:	f7f5 f9a9 	bl	ca66 <sdc_hci_cmd_le_set_adv_data>
   17714:	e665      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   17716:	f7f5 f9bd 	bl	ca94 <sdc_hci_cmd_le_set_scan_response_data>
   1771a:	e662      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1771c:	f7f5 f9a5 	bl	ca6a <sdc_hci_cmd_le_set_adv_enable>
   17720:	e65f      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   17722:	488c      	ldr	r0, [pc, #560]	; (17954 <hci_internal_cmd_put+0x620>)
   17724:	f7f5 f997 	bl	ca56 <sdc_hci_cmd_le_read_white_list_size>
   17728:	e7f0      	b.n	1770c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1772a:	f7f5 f974 	bl	ca16 <sdc_hci_cmd_le_clear_white_list>
   1772e:	e658      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   17730:	f7f5 f96d 	bl	ca0e <sdc_hci_cmd_le_add_device_to_white_list>
   17734:	e655      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   17736:	f7f5 f992 	bl	ca5e <sdc_hci_cmd_le_remove_device_from_white_list>
   1773a:	e652      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1773c:	4985      	ldr	r1, [pc, #532]	; (17954 <hci_internal_cmd_put+0x620>)
   1773e:	f7f5 f97c 	bl	ca3a <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   17742:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17744:	e708      	b.n	17558 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   17746:	f7f5 f97e 	bl	ca46 <sdc_hci_cmd_le_read_remote_features>
   1774a:	e625      	b.n	17398 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1774c:	4981      	ldr	r1, [pc, #516]	; (17954 <hci_internal_cmd_put+0x620>)
   1774e:	f7f5 f964 	bl	ca1a <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   17752:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17754:	e700      	b.n	17558 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   17756:	487f      	ldr	r0, [pc, #508]	; (17954 <hci_internal_cmd_put+0x620>)
   17758:	f7f5 f969 	bl	ca2e <sdc_hci_cmd_le_rand>
   1775c:	e67d      	b.n	1745a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1775e:	497d      	ldr	r1, [pc, #500]	; (17954 <hci_internal_cmd_put+0x620>)
   17760:	f7f5 f961 	bl	ca26 <sdc_hci_cmd_le_long_term_key_request_reply>
   17764:	e64a      	b.n	173fc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   17766:	497b      	ldr	r1, [pc, #492]	; (17954 <hci_internal_cmd_put+0x620>)
   17768:	f7f5 f959 	bl	ca1e <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1776c:	e646      	b.n	173fc <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1776e:	238f      	movs	r3, #143	; 0x8f
   17770:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   17772:	23c0      	movs	r3, #192	; 0xc0
   17774:	e6ea      	b.n	1754c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   17776:	4977      	ldr	r1, [pc, #476]	; (17954 <hci_internal_cmd_put+0x620>)
   17778:	f7f5 f97b 	bl	ca72 <sdc_hci_cmd_le_set_data_length>
   1777c:	e63e      	b.n	173fc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1777e:	4875      	ldr	r0, [pc, #468]	; (17954 <hci_internal_cmd_put+0x620>)
   17780:	f7f5 f965 	bl	ca4e <sdc_hci_cmd_le_read_suggested_default_data_length>
   17784:	e64a      	b.n	1741c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   17786:	f7f5 f987 	bl	ca98 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1778a:	e62a      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1778c:	f7f5 f93d 	bl	ca0a <sdc_hci_cmd_le_add_device_to_resolving_list>
   17790:	e627      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   17792:	f7f5 f962 	bl	ca5a <sdc_hci_cmd_le_remove_device_from_resolving_list>
   17796:	e624      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   17798:	f7f5 f93b 	bl	ca12 <sdc_hci_cmd_le_clear_resolving_list>
   1779c:	e621      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1779e:	486d      	ldr	r0, [pc, #436]	; (17954 <hci_internal_cmd_put+0x620>)
   177a0:	f7f5 f953 	bl	ca4a <sdc_hci_cmd_le_read_resolving_list_size>
   177a4:	e7b2      	b.n	1770c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   177a6:	f7f5 f95c 	bl	ca62 <sdc_hci_cmd_le_set_address_resolution_enable>
   177aa:	e61a      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   177ac:	f7f5 f970 	bl	ca90 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   177b0:	e617      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   177b2:	4868      	ldr	r0, [pc, #416]	; (17954 <hci_internal_cmd_put+0x620>)
   177b4:	f7f5 f943 	bl	ca3e <sdc_hci_cmd_le_read_max_data_length>
   177b8:	e64f      	b.n	1745a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   177ba:	4966      	ldr	r1, [pc, #408]	; (17954 <hci_internal_cmd_put+0x620>)
   177bc:	f7f5 f941 	bl	ca42 <sdc_hci_cmd_le_read_phy>
   177c0:	e62c      	b.n	1741c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   177c2:	f7f5 f958 	bl	ca76 <sdc_hci_cmd_le_set_default_phy>
   177c6:	e60c      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   177c8:	f7f5 f95c 	bl	ca84 <sdc_hci_cmd_le_set_phy>
   177cc:	e5e4      	b.n	17398 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   177ce:	4861      	ldr	r0, [pc, #388]	; (17954 <hci_internal_cmd_put+0x620>)
   177d0:	f7f5 f93f 	bl	ca52 <sdc_hci_cmd_le_read_transmit_power>
   177d4:	e612      	b.n	173fc <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   177d6:	f7f5 f957 	bl	ca88 <sdc_hci_cmd_le_set_privacy_mode>
   177da:	e602      	b.n	173e2 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   177dc:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   177e0:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   177e2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   177e6:	d821      	bhi.n	1782c <hci_internal_cmd_put+0x4f8>
   177e8:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   177ec:	f43f add0 	beq.w	17390 <hci_internal_cmd_put+0x5c>
   177f0:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   177f4:	3b01      	subs	r3, #1
   177f6:	2b09      	cmp	r3, #9
   177f8:	f63f adca 	bhi.w	17390 <hci_internal_cmd_put+0x5c>
   177fc:	a201      	add	r2, pc, #4	; (adr r2, 17804 <hci_internal_cmd_put+0x4d0>)
   177fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17802:	bf00      	nop
   17804:	0001784d 	.word	0x0001784d
   17808:	0001787b 	.word	0x0001787b
   1780c:	00017391 	.word	0x00017391
   17810:	00017391 	.word	0x00017391
   17814:	00017391 	.word	0x00017391
   17818:	000178c7 	.word	0x000178c7
   1781c:	00017391 	.word	0x00017391
   17820:	00017391 	.word	0x00017391
   17824:	000178b3 	.word	0x000178b3
   17828:	000178bd 	.word	0x000178bd
   1782c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   17830:	b29b      	uxth	r3, r3
   17832:	2b05      	cmp	r3, #5
   17834:	f63f adac 	bhi.w	17390 <hci_internal_cmd_put+0x5c>
   17838:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1783c:	2b05      	cmp	r3, #5
   1783e:	f63f ada7 	bhi.w	17390 <hci_internal_cmd_put+0x5c>
   17842:	e8df f003 	tbb	[pc, r3]
   17846:	5044      	.short	0x5044
   17848:	5c595653 	.word	0x5c595653
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1784c:	4841      	ldr	r0, [pc, #260]	; (17954 <hci_internal_cmd_put+0x620>)
   1784e:	f7ec fda3 	bl	4398 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   17852:	2310      	movs	r3, #16
	switch (hci_opcode) {
   17854:	f242 0219 	movw	r2, #8217	; 0x2019
   17858:	4296      	cmp	r6, r2
   1785a:	dc60      	bgt.n	1791e <hci_internal_cmd_put+0x5ea>
   1785c:	f242 020c 	movw	r2, #8204	; 0x200c
   17860:	4296      	cmp	r6, r2
   17862:	dc4f      	bgt.n	17904 <hci_internal_cmd_put+0x5d0>
   17864:	f240 4206 	movw	r2, #1030	; 0x406
   17868:	4296      	cmp	r6, r2
   1786a:	f43f ad95 	beq.w	17398 <hci_internal_cmd_put+0x64>
   1786e:	f240 421d 	movw	r2, #1053	; 0x41d
   17872:	4296      	cmp	r6, r2
   17874:	f43f ad90 	beq.w	17398 <hci_internal_cmd_put+0x64>
   17878:	e66e      	b.n	17558 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1787a:	4836      	ldr	r0, [pc, #216]	; (17954 <hci_internal_cmd_put+0x620>)
   1787c:	2202      	movs	r2, #2
   1787e:	2100      	movs	r1, #0
   17880:	f003 fbf5 	bl	1b06e <memset>
	cmds->read_version_info = 1;
   17884:	79e3      	ldrb	r3, [r4, #7]
   17886:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1788a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1788e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   17890:	7a23      	ldrb	r3, [r4, #8]
   17892:	f023 0307 	bic.w	r3, r3, #7
   17896:	f043 0307 	orr.w	r3, r3, #7
   1789a:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1789c:	f242 0319 	movw	r3, #8217	; 0x2019
   178a0:	429e      	cmp	r6, r3
   178a2:	dd47      	ble.n	17934 <hci_internal_cmd_put+0x600>
   178a4:	f242 0332 	movw	r3, #8242	; 0x2032
   178a8:	429e      	cmp	r6, r3
   178aa:	d051      	beq.n	17950 <hci_internal_cmd_put+0x61c>
   178ac:	f242 0343 	movw	r3, #8259	; 0x2043
   178b0:	e04b      	b.n	1794a <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   178b2:	4828      	ldr	r0, [pc, #160]	; (17954 <hci_internal_cmd_put+0x620>)
   178b4:	f7f5 f858 	bl	c968 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   178b8:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   178ba:	e7cb      	b.n	17854 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   178bc:	4825      	ldr	r0, [pc, #148]	; (17954 <hci_internal_cmd_put+0x620>)
   178be:	f7f5 f806 	bl	c8ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   178c2:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   178c4:	e7c6      	b.n	17854 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   178c6:	f7f5 f89a 	bl	c9fe <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   178ca:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   178cc:	e7c2      	b.n	17854 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   178ce:	4821      	ldr	r0, [pc, #132]	; (17954 <hci_internal_cmd_put+0x620>)
   178d0:	2201      	movs	r2, #1
   178d2:	2100      	movs	r1, #0
   178d4:	f003 fbcb 	bl	1b06e <memset>
	cmds->read_supported_vs_commands = 1;
   178d8:	79e3      	ldrb	r3, [r4, #7]
   178da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   178de:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   178e2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   178e4:	e626      	b.n	17534 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   178e6:	f7f4 ffeb 	bl	c8c0 <sdc_hci_cmd_vs_llpm_mode_set>
   178ea:	e57a      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   178ec:	f7f4 ffe4 	bl	c8b8 <sdc_hci_cmd_vs_conn_update>
   178f0:	e577      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   178f2:	f7f4 ffd9 	bl	c8a8 <sdc_hci_cmd_vs_conn_event_extend>
   178f6:	e574      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   178f8:	f7f4 ffe4 	bl	c8c4 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   178fc:	e571      	b.n	173e2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   178fe:	f7f4 ffdd 	bl	c8bc <sdc_hci_cmd_vs_event_length_set>
   17902:	e56e      	b.n	173e2 <hci_internal_cmd_put+0xae>
   17904:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   17908:	3a0d      	subs	r2, #13
   1790a:	2101      	movs	r1, #1
   1790c:	b292      	uxth	r2, r2
   1790e:	fa01 f202 	lsl.w	r2, r1, r2
   17912:	f241 2141 	movw	r1, #4673	; 0x1241
   17916:	420a      	tst	r2, r1
   17918:	f43f ae1e 	beq.w	17558 <hci_internal_cmd_put+0x224>
   1791c:	e53c      	b.n	17398 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1791e:	f242 0232 	movw	r2, #8242	; 0x2032
   17922:	4296      	cmp	r6, r2
   17924:	f43f ad38 	beq.w	17398 <hci_internal_cmd_put+0x64>
   17928:	f242 0243 	movw	r2, #8259	; 0x2043
   1792c:	e7a1      	b.n	17872 <hci_internal_cmd_put+0x53e>
		return -NRF_EPERM;
   1792e:	f04f 30ff 	mov.w	r0, #4294967295
   17932:	e53d      	b.n	173b0 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   17934:	f242 030c 	movw	r3, #8204	; 0x200c
   17938:	429e      	cmp	r6, r3
   1793a:	f73f adfb 	bgt.w	17534 <hci_internal_cmd_put+0x200>
   1793e:	f240 4306 	movw	r3, #1030	; 0x406
   17942:	429e      	cmp	r6, r3
   17944:	d004      	beq.n	17950 <hci_internal_cmd_put+0x61c>
   17946:	f240 431d 	movw	r3, #1053	; 0x41d
   1794a:	429e      	cmp	r6, r3
   1794c:	f47f adf2 	bne.w	17534 <hci_internal_cmd_put+0x200>
   17950:	2000      	movs	r0, #0
   17952:	e521      	b.n	17398 <hci_internal_cmd_put+0x64>
   17954:	200025e9 	.word	0x200025e9

00017958 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   17958:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1795a:	4c07      	ldr	r4, [pc, #28]	; (17978 <hci_internal_evt_get+0x20>)
   1795c:	7823      	ldrb	r3, [r4, #0]
   1795e:	b13b      	cbz	r3, 17970 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   17960:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   17962:	1c61      	adds	r1, r4, #1
   17964:	3202      	adds	r2, #2
   17966:	f003 fb57 	bl	1b018 <memcpy>
		cmd_complete_or_status.occurred = false;
   1796a:	2000      	movs	r0, #0
   1796c:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1796e:	bd10      	pop	{r4, pc}
   17970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   17974:	f7f4 bf7b 	b.w	c86e <sdc_hci_evt_get>
   17978:	200025e2 	.word	0x200025e2

0001797c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   17980:	4c0b      	ldr	r4, [pc, #44]	; (179b0 <bt_rand+0x34>)
   17982:	6823      	ldr	r3, [r4, #0]
{
   17984:	4605      	mov	r5, r0
   17986:	460e      	mov	r6, r1
   17988:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1798a:	b13b      	cbz	r3, 1799c <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1798c:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   1798e:	6883      	ldr	r3, [r0, #8]
   17990:	b2b2      	uxth	r2, r6
   17992:	4629      	mov	r1, r5
   17994:	681b      	ldr	r3, [r3, #0]
}
   17996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1799a:	4718      	bx	r3
   1799c:	4805      	ldr	r0, [pc, #20]	; (179b4 <bt_rand+0x38>)
   1799e:	f000 fa5f 	bl	17e60 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   179a2:	6020      	str	r0, [r4, #0]
		if (!dev) {
   179a4:	2800      	cmp	r0, #0
   179a6:	d1f1      	bne.n	1798c <bt_rand+0x10>
}
   179a8:	f06f 0012 	mvn.w	r0, #18
   179ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179b0:	20002064 	.word	0x20002064
   179b4:	0001f855 	.word	0x0001f855

000179b8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   179b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   179ba:	2314      	movs	r3, #20
   179bc:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   179c0:	4a10      	ldr	r2, [pc, #64]	; (17a04 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   179c2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   179c4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   179c6:	2119      	movs	r1, #25
   179c8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   179ca:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   179ce:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   179d2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   179d6:	f7ec f8c3 	bl	3b60 <mpsl_init>
	if (err) {
   179da:	4604      	mov	r4, r0
   179dc:	b970      	cbnz	r0, 179fc <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   179de:	4601      	mov	r1, r0
   179e0:	462a      	mov	r2, r5
   179e2:	2008      	movs	r0, #8
   179e4:	f7f9 fab8 	bl	10f58 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   179e8:	462a      	mov	r2, r5
   179ea:	4621      	mov	r1, r4
   179ec:	200b      	movs	r0, #11
   179ee:	f7f9 fab3 	bl	10f58 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   179f2:	462a      	mov	r2, r5
   179f4:	4621      	mov	r1, r4
   179f6:	4628      	mov	r0, r5
   179f8:	f7f9 faae 	bl	10f58 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   179fc:	4620      	mov	r0, r4
   179fe:	b003      	add	sp, #12
   17a00:	bd30      	pop	{r4, r5, pc}
   17a02:	bf00      	nop
   17a04:	0001dd09 	.word	0x0001dd09

00017a08 <mpsl_low_prio_irq_handler>:
   17a08:	4801      	ldr	r0, [pc, #4]	; (17a10 <mpsl_low_prio_irq_handler+0x8>)
   17a0a:	f000 bf1f 	b.w	1884c <z_impl_k_sem_give>
   17a0e:	bf00      	nop
   17a10:	20000848 	.word	0x20000848

00017a14 <signal_thread>:
{
   17a14:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   17a16:	4c09      	ldr	r4, [pc, #36]	; (17a3c <signal_thread+0x28>)
   17a18:	f04f 32ff 	mov.w	r2, #4294967295
   17a1c:	f04f 33ff 	mov.w	r3, #4294967295
   17a20:	4620      	mov	r0, r4
   17a22:	f000 ff39 	bl	18898 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   17a26:	f04f 31ff 	mov.w	r1, #4294967295
   17a2a:	f04f 30ff 	mov.w	r0, #4294967295
   17a2e:	f7ff faed 	bl	1700c <multithreading_lock_acquire>
		mpsl_low_priority_process();
   17a32:	f7f4 facd 	bl	bfd0 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   17a36:	f7ff faf1 	bl	1701c <multithreading_lock_release>
	while (true) {
   17a3a:	e7ed      	b.n	17a18 <signal_thread+0x4>
   17a3c:	20000848 	.word	0x20000848

00017a40 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   17a40:	b530      	push	{r4, r5, lr}
   17a42:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17a44:	4d0f      	ldr	r5, [pc, #60]	; (17a84 <mpsl_signal_thread_init+0x44>)
   17a46:	4910      	ldr	r1, [pc, #64]	; (17a88 <mpsl_signal_thread_init+0x48>)
   17a48:	2200      	movs	r2, #0
   17a4a:	2300      	movs	r3, #0
   17a4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17a50:	2400      	movs	r4, #0
   17a52:	f06f 0309 	mvn.w	r3, #9
   17a56:	e9cd 3403 	strd	r3, r4, [sp, #12]
   17a5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17a5e:	4b0b      	ldr	r3, [pc, #44]	; (17a8c <mpsl_signal_thread_init+0x4c>)
   17a60:	9400      	str	r4, [sp, #0]
   17a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17a66:	4628      	mov	r0, r5
   17a68:	f000 ff8a 	bl	18980 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   17a6c:	4908      	ldr	r1, [pc, #32]	; (17a90 <mpsl_signal_thread_init+0x50>)
   17a6e:	4628      	mov	r0, r5
   17a70:	f006 fc19 	bl	1e2a6 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   17a74:	4622      	mov	r2, r4
   17a76:	2104      	movs	r1, #4
   17a78:	2019      	movs	r0, #25
   17a7a:	f7f9 fa6d 	bl	10f58 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   17a7e:	4620      	mov	r0, r4
   17a80:	b009      	add	sp, #36	; 0x24
   17a82:	bd30      	pop	{r4, r5, pc}
   17a84:	20001bd8 	.word	0x20001bd8
   17a88:	200039a8 	.word	0x200039a8
   17a8c:	00017a15 	.word	0x00017a15
   17a90:	0001f876 	.word	0x0001f876

00017a94 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   17a94:	4b01      	ldr	r3, [pc, #4]	; (17a9c <mpsl_hfclk_callback+0x8>)
   17a96:	2000      	movs	r0, #0
   17a98:	681b      	ldr	r3, [r3, #0]
   17a9a:	4718      	bx	r3
   17a9c:	20002068 	.word	0x20002068

00017aa0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   17aa0:	b120      	cbz	r0, 17aac <nrfx_clock_start+0xc>
   17aa2:	2801      	cmp	r0, #1
   17aa4:	d106      	bne.n	17ab4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   17aa6:	4804      	ldr	r0, [pc, #16]	; (17ab8 <nrfx_clock_start+0x18>)
   17aa8:	f7eb beba 	b.w	3820 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17aac:	4b03      	ldr	r3, [pc, #12]	; (17abc <nrfx_clock_start+0x1c>)
   17aae:	2001      	movs	r0, #1
   17ab0:	681b      	ldr	r3, [r3, #0]
   17ab2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   17ab4:	4770      	bx	lr
   17ab6:	bf00      	nop
   17ab8:	00017a95 	.word	0x00017a95
   17abc:	20002068 	.word	0x20002068

00017ac0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   17ac0:	4b01      	ldr	r3, [pc, #4]	; (17ac8 <nrfx_clock_init+0x8>)
   17ac2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   17ac4:	4801      	ldr	r0, [pc, #4]	; (17acc <nrfx_clock_init+0xc>)
   17ac6:	4770      	bx	lr
   17ac8:	20002068 	.word	0x20002068
   17acc:	0bad0000 	.word	0x0bad0000

00017ad0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   17ad0:	4b04      	ldr	r3, [pc, #16]	; (17ae4 <nrf52_errata_108+0x14>)
   17ad2:	6818      	ldr	r0, [r3, #0]
   17ad4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   17ad6:	bf04      	itt	eq
   17ad8:	4b03      	ldreq	r3, [pc, #12]	; (17ae8 <nrf52_errata_108+0x18>)
   17ada:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   17adc:	1f83      	subs	r3, r0, #6
   17ade:	4258      	negs	r0, r3
   17ae0:	4158      	adcs	r0, r3
   17ae2:	4770      	bx	lr
   17ae4:	10000130 	.word	0x10000130
   17ae8:	f0000fe0 	.word	0xf0000fe0

00017aec <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   17aec:	4b07      	ldr	r3, [pc, #28]	; (17b0c <nrf52_errata_16+0x20>)
   17aee:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   17af0:	2b06      	cmp	r3, #6
   17af2:	d109      	bne.n	17b08 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   17af4:	4b06      	ldr	r3, [pc, #24]	; (17b10 <nrf52_errata_16+0x24>)
   17af6:	681b      	ldr	r3, [r3, #0]
   17af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   17afc:	3b03      	subs	r3, #3
   17afe:	2b03      	cmp	r3, #3
   17b00:	d802      	bhi.n	17b08 <nrf52_errata_16+0x1c>
   17b02:	4a04      	ldr	r2, [pc, #16]	; (17b14 <nrf52_errata_16+0x28>)
   17b04:	5cd0      	ldrb	r0, [r2, r3]
   17b06:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   17b08:	2000      	movs	r0, #0
    #endif
}
   17b0a:	4770      	bx	lr
   17b0c:	f0000fe0 	.word	0xf0000fe0
   17b10:	f0000fe8 	.word	0xf0000fe8
   17b14:	0001f88a 	.word	0x0001f88a

00017b18 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   17b18:	4a02      	ldr	r2, [pc, #8]	; (17b24 <nvmc_wait+0xc>)
   17b1a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17b1e:	2b00      	cmp	r3, #0
   17b20:	d0fb      	beq.n	17b1a <nvmc_wait+0x2>
}
   17b22:	4770      	bx	lr
   17b24:	4001e000 	.word	0x4001e000

00017b28 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   17b28:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   17b2a:	f7ff ffd1 	bl	17ad0 <nrf52_errata_108>
   17b2e:	b128      	cbz	r0, 17b3c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   17b30:	4b77      	ldr	r3, [pc, #476]	; (17d10 <SystemInit+0x1e8>)
   17b32:	4a78      	ldr	r2, [pc, #480]	; (17d14 <SystemInit+0x1ec>)
   17b34:	681b      	ldr	r3, [r3, #0]
   17b36:	f3c3 2304 	ubfx	r3, r3, #8, #5
   17b3a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   17b3c:	f7ff ffd6 	bl	17aec <nrf52_errata_16>
   17b40:	b110      	cbz	r0, 17b48 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   17b42:	4b75      	ldr	r3, [pc, #468]	; (17d18 <SystemInit+0x1f0>)
   17b44:	4a75      	ldr	r2, [pc, #468]	; (17d1c <SystemInit+0x1f4>)
   17b46:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   17b48:	f7ff ffc2 	bl	17ad0 <nrf52_errata_108>
   17b4c:	b128      	cbz	r0, 17b5a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   17b4e:	4b74      	ldr	r3, [pc, #464]	; (17d20 <SystemInit+0x1f8>)
   17b50:	4a74      	ldr	r2, [pc, #464]	; (17d24 <SystemInit+0x1fc>)
   17b52:	681b      	ldr	r3, [r3, #0]
   17b54:	f3c3 3342 	ubfx	r3, r3, #13, #3
   17b58:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   17b5a:	f7ff ffc7 	bl	17aec <nrf52_errata_16>
   17b5e:	b120      	cbz	r0, 17b6a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   17b60:	4a71      	ldr	r2, [pc, #452]	; (17d28 <SystemInit+0x200>)
   17b62:	68d3      	ldr	r3, [r2, #12]
   17b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17b68:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   17b6a:	f7ff ffb1 	bl	17ad0 <nrf52_errata_108>
   17b6e:	b140      	cbz	r0, 17b82 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   17b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b74:	2200      	movs	r2, #0
   17b76:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   17b7a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   17b7e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   17b82:	f7ff ffb3 	bl	17aec <nrf52_errata_16>
   17b86:	b110      	cbz	r0, 17b8e <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   17b88:	4b68      	ldr	r3, [pc, #416]	; (17d2c <SystemInit+0x204>)
   17b8a:	2203      	movs	r2, #3
   17b8c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   17b8e:	f7ff ffad 	bl	17aec <nrf52_errata_16>
   17b92:	b140      	cbz	r0, 17ba6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   17b94:	4b66      	ldr	r3, [pc, #408]	; (17d30 <SystemInit+0x208>)
   17b96:	2205      	movs	r2, #5
   17b98:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   17b9a:	2201      	movs	r2, #1
   17b9c:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   17b9e:	2200      	movs	r2, #0
   17ba0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   17ba2:	223f      	movs	r2, #63	; 0x3f
   17ba4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   17ba6:	4b63      	ldr	r3, [pc, #396]	; (17d34 <SystemInit+0x20c>)
   17ba8:	681a      	ldr	r2, [r3, #0]
   17baa:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   17bac:	bf0b      	itete	eq
   17bae:	4b62      	ldreq	r3, [pc, #392]	; (17d38 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   17bb0:	4b62      	ldrne	r3, [pc, #392]	; (17d3c <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   17bb2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   17bb4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   17bb6:	bf02      	ittt	eq
   17bb8:	3308      	addeq	r3, #8
   17bba:	681b      	ldreq	r3, [r3, #0]
   17bbc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   17bc0:	2a06      	cmp	r2, #6
   17bc2:	d14d      	bne.n	17c60 <SystemInit+0x138>
            {
                switch(var2)
   17bc4:	3b03      	subs	r3, #3
   17bc6:	2b03      	cmp	r3, #3
   17bc8:	d803      	bhi.n	17bd2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   17bca:	4a5d      	ldr	r2, [pc, #372]	; (17d40 <SystemInit+0x218>)
   17bcc:	5cd3      	ldrb	r3, [r2, r3]
   17bce:	2b00      	cmp	r3, #0
   17bd0:	d046      	beq.n	17c60 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   17bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17bd6:	4b5b      	ldr	r3, [pc, #364]	; (17d44 <SystemInit+0x21c>)
   17bd8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   17bdc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   17be0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   17be4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   17be8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   17bec:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   17bf0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   17bf4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   17bf8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   17bfc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   17c00:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   17c04:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   17c08:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   17c0c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   17c10:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   17c14:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   17c18:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   17c1c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   17c20:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   17c24:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   17c28:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   17c2c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   17c30:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   17c34:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   17c38:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   17c3c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   17c40:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   17c44:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   17c48:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   17c4c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   17c50:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   17c54:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   17c58:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   17c5c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   17c60:	f7ff ff36 	bl	17ad0 <nrf52_errata_108>
   17c64:	b128      	cbz	r0, 17c72 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   17c66:	4b38      	ldr	r3, [pc, #224]	; (17d48 <SystemInit+0x220>)
   17c68:	4a38      	ldr	r2, [pc, #224]	; (17d4c <SystemInit+0x224>)
   17c6a:	681b      	ldr	r3, [r3, #0]
   17c6c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   17c70:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   17c72:	f7ff ff2d 	bl	17ad0 <nrf52_errata_108>
   17c76:	b148      	cbz	r0, 17c8c <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   17c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17c7c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   17c80:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   17c82:	bf44      	itt	mi
   17c84:	f06f 0201 	mvnmi.w	r2, #1
   17c88:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17c8c:	4b29      	ldr	r3, [pc, #164]	; (17d34 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   17c8e:	681b      	ldr	r3, [r3, #0]
   17c90:	2b06      	cmp	r3, #6
   17c92:	d10c      	bne.n	17cae <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17c94:	4b29      	ldr	r3, [pc, #164]	; (17d3c <SystemInit+0x214>)
   17c96:	681b      	ldr	r3, [r3, #0]
   17c98:	3b03      	subs	r3, #3
   17c9a:	2b03      	cmp	r3, #3
   17c9c:	d802      	bhi.n	17ca4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   17c9e:	4a2c      	ldr	r2, [pc, #176]	; (17d50 <SystemInit+0x228>)
   17ca0:	5cd3      	ldrb	r3, [r2, r3]
   17ca2:	b123      	cbz	r3, 17cae <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   17ca4:	4a2b      	ldr	r2, [pc, #172]	; (17d54 <SystemInit+0x22c>)
   17ca6:	6813      	ldr	r3, [r2, #0]
   17ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   17cac:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   17cae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17cb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   17cb6:	2a00      	cmp	r2, #0
   17cb8:	db03      	blt.n	17cc2 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   17cba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   17cbe:	2b00      	cmp	r3, #0
   17cc0:	da22      	bge.n	17d08 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17cc2:	4925      	ldr	r1, [pc, #148]	; (17d58 <SystemInit+0x230>)
   17cc4:	2301      	movs	r3, #1
   17cc6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   17cca:	f7ff ff25 	bl	17b18 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   17cce:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   17cd2:	2415      	movs	r4, #21
   17cd4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   17cd8:	f7ff ff1e 	bl	17b18 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   17cdc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   17ce0:	f7ff ff1a 	bl	17b18 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17ce4:	2300      	movs	r3, #0
   17ce6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   17cea:	f7ff ff15 	bl	17b18 <nvmc_wait>
   17cee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17cf2:	491a      	ldr	r1, [pc, #104]	; (17d5c <SystemInit+0x234>)
   17cf4:	4b1a      	ldr	r3, [pc, #104]	; (17d60 <SystemInit+0x238>)
   17cf6:	68ca      	ldr	r2, [r1, #12]
   17cf8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17cfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17cfe:	60cb      	str	r3, [r1, #12]
   17d00:	f3bf 8f4f 	dsb	sy
    __NOP();
   17d04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17d06:	e7fd      	b.n	17d04 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   17d08:	4b16      	ldr	r3, [pc, #88]	; (17d64 <SystemInit+0x23c>)
   17d0a:	4a17      	ldr	r2, [pc, #92]	; (17d68 <SystemInit+0x240>)
   17d0c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   17d0e:	bd10      	pop	{r4, pc}
   17d10:	10000324 	.word	0x10000324
   17d14:	40013540 	.word	0x40013540
   17d18:	4007c074 	.word	0x4007c074
   17d1c:	baadf00d 	.word	0xbaadf00d
   17d20:	10000244 	.word	0x10000244
   17d24:	4000053c 	.word	0x4000053c
   17d28:	e000edf0 	.word	0xe000edf0
   17d2c:	400005a0 	.word	0x400005a0
   17d30:	40005610 	.word	0x40005610
   17d34:	10000130 	.word	0x10000130
   17d38:	f0000fe0 	.word	0xf0000fe0
   17d3c:	10000134 	.word	0x10000134
   17d40:	0001f882 	.word	0x0001f882
   17d44:	4000c000 	.word	0x4000c000
   17d48:	10000258 	.word	0x10000258
   17d4c:	40000ee4 	.word	0x40000ee4
   17d50:	0001f886 	.word	0x0001f886
   17d54:	4000173c 	.word	0x4000173c
   17d58:	4001e000 	.word	0x4001e000
   17d5c:	e000ed00 	.word	0xe000ed00
   17d60:	05fa0004 	.word	0x05fa0004
   17d64:	20000628 	.word	0x20000628
   17d68:	03d09000 	.word	0x03d09000

00017d6c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   17d6c:	2301      	movs	r3, #1
   17d6e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   17d72:	f010 0fff 	tst.w	r0, #255	; 0xff
   17d76:	d012      	beq.n	17d9e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   17d78:	f04f 0340 	mov.w	r3, #64	; 0x40
   17d7c:	f3ef 8111 	mrs	r1, BASEPRI
   17d80:	f383 8811 	msr	BASEPRI, r3
   17d84:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   17d88:	4a06      	ldr	r2, [pc, #24]	; (17da4 <nrfx_gpiote_channel_free+0x38>)
   17d8a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   17d8c:	ea23 0000 	bic.w	r0, r3, r0
   17d90:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   17d92:	f381 8811 	msr	BASEPRI, r1
   17d96:	f3bf 8f6f 	isb	sy
   17d9a:	4803      	ldr	r0, [pc, #12]	; (17da8 <nrfx_gpiote_channel_free+0x3c>)
   17d9c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   17d9e:	4803      	ldr	r0, [pc, #12]	; (17dac <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17da0:	4770      	bx	lr
   17da2:	bf00      	nop
   17da4:	2000206c 	.word	0x2000206c
   17da8:	0bad0000 	.word	0x0bad0000
   17dac:	0bad0004 	.word	0x0bad0004

00017db0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   17db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17db4:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   17db6:	f8df e060 	ldr.w	lr, [pc, #96]	; 17e18 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   17dba:	4816      	ldr	r0, [pc, #88]	; (17e14 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   17dbc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17e1c <nrfx_gpiote_channel_alloc+0x6c>
{
   17dc0:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   17dc2:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   17dc4:	2601      	movs	r6, #1
   17dc6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   17dc8:	f04f 0140 	mov.w	r1, #64	; 0x40
   17dcc:	f3ef 8c11 	mrs	ip, BASEPRI
   17dd0:	f381 8811 	msr	BASEPRI, r1
   17dd4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17dd8:	fa22 f103 	lsr.w	r1, r2, r3
   17ddc:	07c9      	lsls	r1, r1, #31
   17dde:	d50a      	bpl.n	17df6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   17de0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   17de4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17de8:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   17dea:	bf01      	itttt	eq
   17dec:	4339      	orreq	r1, r7
   17dee:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   17df2:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   17df4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   17df6:	f38c 8811 	msr	BASEPRI, ip
   17dfa:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   17dfe:	4540      	cmp	r0, r8
   17e00:	d005      	beq.n	17e0e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   17e02:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   17e06:	439a      	bics	r2, r3
   17e08:	f104 0401 	add.w	r4, r4, #1
   17e0c:	d1db      	bne.n	17dc6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e12:	bf00      	nop
   17e14:	0bad0002 	.word	0x0bad0002
   17e18:	2000206c 	.word	0x2000206c
   17e1c:	0bad0000 	.word	0x0bad0000

00017e20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17e20:	4b0e      	ldr	r3, [pc, #56]	; (17e5c <z_sys_init_run_level+0x3c>)
{
   17e22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17e24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17e28:	3001      	adds	r0, #1
   17e2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17e2e:	42a6      	cmp	r6, r4
   17e30:	d800      	bhi.n	17e34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   17e32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   17e34:	e9d4 3500 	ldrd	r3, r5, [r4]
   17e38:	4628      	mov	r0, r5
   17e3a:	4798      	blx	r3
		if (dev != NULL) {
   17e3c:	b165      	cbz	r5, 17e58 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   17e3e:	68eb      	ldr	r3, [r5, #12]
   17e40:	b130      	cbz	r0, 17e50 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   17e42:	2800      	cmp	r0, #0
   17e44:	bfb8      	it	lt
   17e46:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   17e48:	28ff      	cmp	r0, #255	; 0xff
   17e4a:	bfa8      	it	ge
   17e4c:	20ff      	movge	r0, #255	; 0xff
   17e4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   17e50:	785a      	ldrb	r2, [r3, #1]
   17e52:	f042 0201 	orr.w	r2, r2, #1
   17e56:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17e58:	3408      	adds	r4, #8
   17e5a:	e7e8      	b.n	17e2e <z_sys_init_run_level+0xe>
   17e5c:	0001f1d0 	.word	0x0001f1d0

00017e60 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   17e60:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (*name == 0)) {
   17e62:	4605      	mov	r5, r0
   17e64:	b910      	cbnz	r0, 17e6c <z_impl_device_get_binding+0xc>
		return NULL;
   17e66:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   17e68:	4620      	mov	r0, r4
   17e6a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (*name == 0)) {
   17e6c:	7803      	ldrb	r3, [r0, #0]
   17e6e:	2b00      	cmp	r3, #0
   17e70:	d0f9      	beq.n	17e66 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   17e72:	4a0f      	ldr	r2, [pc, #60]	; (17eb0 <z_impl_device_get_binding+0x50>)
   17e74:	4c0f      	ldr	r4, [pc, #60]	; (17eb4 <z_impl_device_get_binding+0x54>)
   17e76:	4616      	mov	r6, r2
   17e78:	4294      	cmp	r4, r2
   17e7a:	d108      	bne.n	17e8e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   17e7c:	4c0d      	ldr	r4, [pc, #52]	; (17eb4 <z_impl_device_get_binding+0x54>)
   17e7e:	42b4      	cmp	r4, r6
   17e80:	d0f1      	beq.n	17e66 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17e82:	4620      	mov	r0, r4
   17e84:	f005 ff80 	bl	1dd88 <z_device_ready>
   17e88:	b950      	cbnz	r0, 17ea0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   17e8a:	3418      	adds	r4, #24
   17e8c:	e7f7      	b.n	17e7e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   17e8e:	4620      	mov	r0, r4
   17e90:	f005 ff7a 	bl	1dd88 <z_device_ready>
   17e94:	b110      	cbz	r0, 17e9c <z_impl_device_get_binding+0x3c>
   17e96:	6823      	ldr	r3, [r4, #0]
   17e98:	42ab      	cmp	r3, r5
   17e9a:	d0e5      	beq.n	17e68 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   17e9c:	3418      	adds	r4, #24
   17e9e:	e7eb      	b.n	17e78 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17ea0:	6821      	ldr	r1, [r4, #0]
   17ea2:	4628      	mov	r0, r5
   17ea4:	f003 f89c 	bl	1afe0 <strcmp>
   17ea8:	2800      	cmp	r0, #0
   17eaa:	d1ee      	bne.n	17e8a <z_impl_device_get_binding+0x2a>
   17eac:	e7dc      	b.n	17e68 <z_impl_device_get_binding+0x8>
   17eae:	bf00      	nop
   17eb0:	20000794 	.word	0x20000794
   17eb4:	20000704 	.word	0x20000704

00017eb8 <z_pm_save_idle_exit>:
	}
#endif
}

void z_pm_save_idle_exit(int32_t ticks)
{
   17eb8:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   17eba:	4b04      	ldr	r3, [pc, #16]	; (17ecc <z_pm_save_idle_exit+0x14>)
   17ebc:	781b      	ldrb	r3, [r3, #0]
   17ebe:	b10b      	cbz	r3, 17ec4 <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   17ec0:	f7f8 fb60 	bl	10584 <pm_system_resume>
	}
#endif
	z_clock_idle_exit();
}
   17ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   17ec8:	f001 bf97 	b.w	19dfa <z_clock_idle_exit>
   17ecc:	2000262f 	.word	0x2000262f

00017ed0 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   17ed0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   17ed2:	4d0b      	ldr	r5, [pc, #44]	; (17f00 <idle+0x30>)
	pm_idle_exit_notify = 1U;
   17ed4:	4c0b      	ldr	r4, [pc, #44]	; (17f04 <idle+0x34>)
   17ed6:	2601      	movs	r6, #1
	__asm__ volatile(
   17ed8:	f04f 0240 	mov.w	r2, #64	; 0x40
   17edc:	f3ef 8311 	mrs	r3, BASEPRI
   17ee0:	f382 8811 	msr	BASEPRI, r2
   17ee4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   17ee8:	f006 fab9 	bl	1e45e <z_get_next_timeout_expiry>
	pm_idle_exit_notify = 1U;
   17eec:	7026      	strb	r6, [r4, #0]
	_kernel.idle = ticks;
   17eee:	6228      	str	r0, [r5, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   17ef0:	f7f8 fb0c 	bl	1050c <pm_system_suspend>
   17ef4:	2800      	cmp	r0, #0
   17ef6:	d1ef      	bne.n	17ed8 <idle+0x8>
		pm_idle_exit_notify = 0U;
   17ef8:	7020      	strb	r0, [r4, #0]
	arch_cpu_idle();
   17efa:	f7f9 f88f 	bl	1101c <arch_cpu_idle>
}
   17efe:	e7eb      	b.n	17ed8 <idle+0x8>
   17f00:	200020bc 	.word	0x200020bc
   17f04:	2000262f 	.word	0x2000262f

00017f08 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17f08:	4802      	ldr	r0, [pc, #8]	; (17f14 <z_bss_zero+0xc>)
   17f0a:	4a03      	ldr	r2, [pc, #12]	; (17f18 <z_bss_zero+0x10>)
   17f0c:	2100      	movs	r1, #0
   17f0e:	1a12      	subs	r2, r2, r0
   17f10:	f003 b8ad 	b.w	1b06e <memset>
   17f14:	20000968 	.word	0x20000968
   17f18:	20002634 	.word	0x20002634

00017f1c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   17f1c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   17f1e:	4b0a      	ldr	r3, [pc, #40]	; (17f48 <bg_thread_main+0x2c>)
   17f20:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17f22:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17f24:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17f26:	f7ff ff7b 	bl	17e20 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17f2a:	f000 ff33 	bl	18d94 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17f2e:	2003      	movs	r0, #3
   17f30:	f7ff ff76 	bl	17e20 <z_sys_init_run_level>

	z_init_static_threads();
   17f34:	f000 fd50 	bl	189d8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17f38:	f7f7 fbac 	bl	f694 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17f3c:	4a03      	ldr	r2, [pc, #12]	; (17f4c <bg_thread_main+0x30>)
   17f3e:	7b13      	ldrb	r3, [r2, #12]
   17f40:	f023 0301 	bic.w	r3, r3, #1
   17f44:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17f46:	bd08      	pop	{r3, pc}
   17f48:	20002630 	.word	0x20002630
   17f4c:	20001cd8 	.word	0x20001cd8

00017f50 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17f50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   17f54:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 18050 <z_cstart+0x100>
   17f58:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17f5a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   17f5e:	4d34      	ldr	r5, [pc, #208]	; (18030 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   17f60:	4e34      	ldr	r6, [pc, #208]	; (18034 <z_cstart+0xe4>)
   17f62:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17f64:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 18054 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   17f68:	4f33      	ldr	r7, [pc, #204]	; (18038 <z_cstart+0xe8>)
   17f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17f6e:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17f70:	23e0      	movs	r3, #224	; 0xe0
   17f72:	2400      	movs	r4, #0
   17f74:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17f78:	2320      	movs	r3, #32
   17f7a:	77eb      	strb	r3, [r5, #31]
   17f7c:	762c      	strb	r4, [r5, #24]
   17f7e:	766c      	strb	r4, [r5, #25]
   17f80:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17f82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17f84:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17f88:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17f8a:	f7f9 f98b 	bl	112a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17f8e:	f7f9 f83f 	bl	11010 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17f92:	f04f 33ff 	mov.w	r3, #4294967295
   17f96:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17f98:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17f9a:	4d28      	ldr	r5, [pc, #160]	; (1803c <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   17f9c:	f240 1301 	movw	r3, #257	; 0x101
   17fa0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17fa4:	ab06      	add	r3, sp, #24
   17fa6:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   17fa8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   17fac:	f005 feeb 	bl	1dd86 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17fb0:	4620      	mov	r0, r4
   17fb2:	f7ff ff35 	bl	17e20 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17fb6:	2001      	movs	r0, #1
   17fb8:	f7ff ff32 	bl	17e20 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17fbc:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   17fc0:	f000 fb4a 	bl	18658 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17fc4:	4b1e      	ldr	r3, [pc, #120]	; (18040 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   17fc6:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17fc8:	491e      	ldr	r1, [pc, #120]	; (18044 <z_cstart+0xf4>)
   17fca:	9305      	str	r3, [sp, #20]
   17fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17fd0:	4653      	mov	r3, sl
   17fd2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17fd6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17fda:	9400      	str	r4, [sp, #0]
   17fdc:	4630      	mov	r0, r6
   17fde:	f000 fc9f 	bl	18920 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17fe2:	7b73      	ldrb	r3, [r6, #13]
   17fe4:	4680      	mov	r8, r0
   17fe6:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17fea:	4630      	mov	r0, r6
   17fec:	7373      	strb	r3, [r6, #13]
   17fee:	f006 f8b4 	bl	1e15a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17ff2:	230f      	movs	r3, #15
   17ff4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17ff8:	4913      	ldr	r1, [pc, #76]	; (18048 <z_cstart+0xf8>)
   17ffa:	4b14      	ldr	r3, [pc, #80]	; (1804c <z_cstart+0xfc>)
   17ffc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18000:	e9cd b404 	strd	fp, r4, [sp, #16]
   18004:	e9cd 5400 	strd	r5, r4, [sp]
   18008:	4638      	mov	r0, r7
   1800a:	f000 fc89 	bl	18920 <z_setup_new_thread>
   1800e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   18010:	60ef      	str	r7, [r5, #12]
   18012:	f023 0304 	bic.w	r3, r3, #4
   18016:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18018:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1801c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   18020:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   18022:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   18026:	4652      	mov	r2, sl
   18028:	4641      	mov	r1, r8
   1802a:	4630      	mov	r0, r6
   1802c:	f7f8 ffd8 	bl	10fe0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18030:	e000ed00 	.word	0xe000ed00
   18034:	20001cd8 	.word	0x20001cd8
   18038:	20001c58 	.word	0x20001c58
   1803c:	200020bc 	.word	0x200020bc
   18040:	0001f88e 	.word	0x0001f88e
   18044:	20003da8 	.word	0x20003da8
   18048:	200041a8 	.word	0x200041a8
   1804c:	00017ed1 	.word	0x00017ed1
   18050:	20004ae8 	.word	0x20004ae8
   18054:	00017f1d 	.word	0x00017f1d

00018058 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   18058:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1805a:	4c06      	ldr	r4, [pc, #24]	; (18074 <statics_init+0x1c>)
   1805c:	4d06      	ldr	r5, [pc, #24]	; (18078 <statics_init+0x20>)
   1805e:	42ac      	cmp	r4, r5
   18060:	d301      	bcc.n	18066 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   18062:	2000      	movs	r0, #0
   18064:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18066:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1806a:	4620      	mov	r0, r4
   1806c:	f005 feb0 	bl	1ddd0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18070:	3414      	adds	r4, #20
   18072:	e7f4      	b.n	1805e <statics_init+0x6>
   18074:	200007e8 	.word	0x200007e8
   18078:	200007e8 	.word	0x200007e8

0001807c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1807c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1807e:	4b0e      	ldr	r3, [pc, #56]	; (180b8 <init_mem_slab_module+0x3c>)
   18080:	4c0e      	ldr	r4, [pc, #56]	; (180bc <init_mem_slab_module+0x40>)
   18082:	42a3      	cmp	r3, r4
   18084:	d301      	bcc.n	1808a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   18086:	2000      	movs	r0, #0
	return rc;
}
   18088:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1808a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1808e:	ea41 0200 	orr.w	r2, r1, r0
   18092:	f012 0203 	ands.w	r2, r2, #3
   18096:	d10b      	bne.n	180b0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   18098:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1809a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1809c:	42aa      	cmp	r2, r5
   1809e:	d101      	bne.n	180a4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   180a0:	331c      	adds	r3, #28
   180a2:	e7ee      	b.n	18082 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   180a4:	695e      	ldr	r6, [r3, #20]
   180a6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   180a8:	3201      	adds	r2, #1
		slab->free_list = p;
   180aa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   180ac:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   180ae:	e7f5      	b.n	1809c <init_mem_slab_module+0x20>
		return -EINVAL;
   180b0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   180b4:	e7e8      	b.n	18088 <init_mem_slab_module+0xc>
   180b6:	bf00      	nop
   180b8:	20000794 	.word	0x20000794
   180bc:	200007e8 	.word	0x200007e8

000180c0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   180c0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   180c2:	460c      	mov	r4, r1
   180c4:	4616      	mov	r6, r2
   180c6:	461f      	mov	r7, r3
   180c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   180cc:	f3ef 8111 	mrs	r1, BASEPRI
   180d0:	f383 8811 	msr	BASEPRI, r3
   180d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   180d8:	6943      	ldr	r3, [r0, #20]
   180da:	b15b      	cbz	r3, 180f4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   180dc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   180de:	681b      	ldr	r3, [r3, #0]
   180e0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   180e2:	6983      	ldr	r3, [r0, #24]
   180e4:	3301      	adds	r3, #1
   180e6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   180e8:	2000      	movs	r0, #0
	__asm__ volatile(
   180ea:	f381 8811 	msr	BASEPRI, r1
   180ee:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   180f2:	e011      	b.n	18118 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   180f4:	ea56 0207 	orrs.w	r2, r6, r7
   180f8:	d103      	bne.n	18102 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   180fa:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   180fc:	f06f 000b 	mvn.w	r0, #11
   18100:	e7f3      	b.n	180ea <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   18102:	4602      	mov	r2, r0
   18104:	e9cd 6700 	strd	r6, r7, [sp]
   18108:	4804      	ldr	r0, [pc, #16]	; (1811c <k_mem_slab_alloc+0x5c>)
   1810a:	f000 f933 	bl	18374 <z_pend_curr>
		if (result == 0) {
   1810e:	b918      	cbnz	r0, 18118 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   18110:	4b03      	ldr	r3, [pc, #12]	; (18120 <k_mem_slab_alloc+0x60>)
   18112:	689b      	ldr	r3, [r3, #8]
   18114:	695b      	ldr	r3, [r3, #20]
   18116:	6023      	str	r3, [r4, #0]
}
   18118:	b002      	add	sp, #8
   1811a:	bdd0      	pop	{r4, r6, r7, pc}
   1811c:	20002631 	.word	0x20002631
   18120:	200020bc 	.word	0x200020bc

00018124 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18126:	4604      	mov	r4, r0
   18128:	460d      	mov	r5, r1
	__asm__ volatile(
   1812a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1812e:	f3ef 8611 	mrs	r6, BASEPRI
   18132:	f383 8811 	msr	BASEPRI, r3
   18136:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1813a:	6947      	ldr	r7, [r0, #20]
   1813c:	b96f      	cbnz	r7, 1815a <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1813e:	f006 f853 	bl	1e1e8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   18142:	b150      	cbz	r0, 1815a <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18144:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18146:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18148:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1814a:	f006 f806 	bl	1e15a <z_ready_thread>
			z_reschedule(&lock, key);
   1814e:	4631      	mov	r1, r6
   18150:	4808      	ldr	r0, [pc, #32]	; (18174 <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   18152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   18156:	f000 b88b 	b.w	18270 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1815a:	682b      	ldr	r3, [r5, #0]
   1815c:	6962      	ldr	r2, [r4, #20]
   1815e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   18160:	682b      	ldr	r3, [r5, #0]
   18162:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   18164:	69a3      	ldr	r3, [r4, #24]
   18166:	3b01      	subs	r3, #1
   18168:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1816a:	f386 8811 	msr	BASEPRI, r6
   1816e:	f3bf 8f6f 	isb	sy
}
   18172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18174:	20002631 	.word	0x20002631

00018178 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1817a:	4616      	mov	r6, r2
   1817c:	461f      	mov	r7, r3
	__asm__ volatile(
   1817e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18182:	f3ef 8511 	mrs	r5, BASEPRI
   18186:	f383 8811 	msr	BASEPRI, r3
   1818a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1818e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18190:	b19c      	cbz	r4, 181ba <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18192:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18194:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18196:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1819a:	4294      	cmp	r4, r2
	list->head = node;
   1819c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1819e:	bf08      	it	eq
   181a0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   181a2:	2101      	movs	r1, #1
   181a4:	4620      	mov	r0, r4
   181a6:	f005 fee3 	bl	1df70 <z_queue_node_peek>
   181aa:	4604      	mov	r4, r0
	__asm__ volatile(
   181ac:	f385 8811 	msr	BASEPRI, r5
   181b0:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   181b4:	4620      	mov	r0, r4
   181b6:	b003      	add	sp, #12
   181b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   181ba:	ea56 0307 	orrs.w	r3, r6, r7
   181be:	d0f5      	beq.n	181ac <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   181c0:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   181c4:	e9cd 6700 	strd	r6, r7, [sp]
   181c8:	4629      	mov	r1, r5
   181ca:	4610      	mov	r0, r2
   181cc:	f000 f8d2 	bl	18374 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   181d0:	2800      	cmp	r0, #0
   181d2:	d1ef      	bne.n	181b4 <z_impl_k_queue_get+0x3c>
   181d4:	4b01      	ldr	r3, [pc, #4]	; (181dc <z_impl_k_queue_get+0x64>)
   181d6:	689b      	ldr	r3, [r3, #8]
   181d8:	695c      	ldr	r4, [r3, #20]
   181da:	e7eb      	b.n	181b4 <z_impl_k_queue_get+0x3c>
   181dc:	200020bc 	.word	0x200020bc

000181e0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   181e0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   181e2:	4c08      	ldr	r4, [pc, #32]	; (18204 <z_reset_time_slice+0x24>)
   181e4:	6823      	ldr	r3, [r4, #0]
   181e6:	b15b      	cbz	r3, 18200 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   181e8:	f7f8 fc8a 	bl	10b00 <z_clock_elapsed>
   181ec:	4603      	mov	r3, r0
   181ee:	6820      	ldr	r0, [r4, #0]
   181f0:	4a05      	ldr	r2, [pc, #20]	; (18208 <z_reset_time_slice+0x28>)
   181f2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   181f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   181f8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   181fa:	2100      	movs	r1, #0
   181fc:	f006 b93f 	b.w	1e47e <z_set_timeout_expiry>
}
   18200:	bd10      	pop	{r4, pc}
   18202:	bf00      	nop
   18204:	200020f4 	.word	0x200020f4
   18208:	200020bc 	.word	0x200020bc

0001820c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1820e:	4604      	mov	r4, r0
   18210:	460d      	mov	r5, r1
	__asm__ volatile(
   18212:	f04f 0340 	mov.w	r3, #64	; 0x40
   18216:	f3ef 8611 	mrs	r6, BASEPRI
   1821a:	f383 8811 	msr	BASEPRI, r3
   1821e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   18222:	4b10      	ldr	r3, [pc, #64]	; (18264 <k_sched_time_slice_set+0x58>)
   18224:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   18226:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1822a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1822e:	2100      	movs	r1, #0
   18230:	611a      	str	r2, [r3, #16]
   18232:	fbe7 0104 	umlal	r0, r1, r7, r4
   18236:	2300      	movs	r3, #0
   18238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1823c:	f7e8 f9d4 	bl	5e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   18240:	2c00      	cmp	r4, #0
   18242:	4b09      	ldr	r3, [pc, #36]	; (18268 <k_sched_time_slice_set+0x5c>)
   18244:	dc09      	bgt.n	1825a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   18246:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   18248:	4b08      	ldr	r3, [pc, #32]	; (1826c <k_sched_time_slice_set+0x60>)
   1824a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1824c:	f7ff ffc8 	bl	181e0 <z_reset_time_slice>
	__asm__ volatile(
   18250:	f386 8811 	msr	BASEPRI, r6
   18254:	f3bf 8f6f 	isb	sy
	}
}
   18258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1825a:	2802      	cmp	r0, #2
   1825c:	bfb8      	it	lt
   1825e:	2002      	movlt	r0, #2
   18260:	e7f1      	b.n	18246 <k_sched_time_slice_set+0x3a>
   18262:	bf00      	nop
   18264:	200020bc 	.word	0x200020bc
   18268:	200020f4 	.word	0x200020f4
   1826c:	200020f0 	.word	0x200020f0

00018270 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18270:	b949      	cbnz	r1, 18286 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18272:	f3ef 8005 	mrs	r0, IPSR
   18276:	b930      	cbnz	r0, 18286 <z_reschedule+0x16>
	return true;
#else
	struct k_thread *new_thread;

	/* Check if the next ready thread is the same as the current thread */
	new_thread = _kernel.ready_q.cache;
   18278:	4b05      	ldr	r3, [pc, #20]	; (18290 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1827a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1827c:	689b      	ldr	r3, [r3, #8]
   1827e:	429a      	cmp	r2, r3
   18280:	d001      	beq.n	18286 <z_reschedule+0x16>
	ret = arch_swap(key);
   18282:	f7f8 bde9 	b.w	10e58 <arch_swap>
   18286:	f381 8811 	msr	BASEPRI, r1
   1828a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1828e:	4770      	bx	lr
   18290:	200020bc 	.word	0x200020bc

00018294 <k_sched_lock>:
	__asm__ volatile(
   18294:	f04f 0340 	mov.w	r3, #64	; 0x40
   18298:	f3ef 8111 	mrs	r1, BASEPRI
   1829c:	f383 8811 	msr	BASEPRI, r3
   182a0:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   182a4:	4b04      	ldr	r3, [pc, #16]	; (182b8 <k_sched_lock+0x24>)
   182a6:	689a      	ldr	r2, [r3, #8]
   182a8:	7bd3      	ldrb	r3, [r2, #15]
   182aa:	3b01      	subs	r3, #1
   182ac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   182ae:	f381 8811 	msr	BASEPRI, r1
   182b2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   182b6:	4770      	bx	lr
   182b8:	200020bc 	.word	0x200020bc

000182bc <update_cache>:
{
   182bc:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
   182be:	4c0d      	ldr	r4, [pc, #52]	; (182f4 <update_cache+0x38>)
{
   182c0:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   182c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   182c6:	f005 ff11 	bl	1e0ec <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   182ca:	4605      	mov	r5, r0
   182cc:	b900      	cbnz	r0, 182d0 <update_cache+0x14>
   182ce:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   182d0:	68a3      	ldr	r3, [r4, #8]
   182d2:	b94a      	cbnz	r2, 182e8 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   182d4:	7b5a      	ldrb	r2, [r3, #13]
   182d6:	06d2      	lsls	r2, r2, #27
   182d8:	d106      	bne.n	182e8 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   182da:	69aa      	ldr	r2, [r5, #24]
   182dc:	b922      	cbnz	r2, 182e8 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   182de:	89da      	ldrh	r2, [r3, #14]
   182e0:	2a7f      	cmp	r2, #127	; 0x7f
   182e2:	d901      	bls.n	182e8 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   182e4:	6263      	str	r3, [r4, #36]	; 0x24
}
   182e6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   182e8:	429d      	cmp	r5, r3
   182ea:	d001      	beq.n	182f0 <update_cache+0x34>
			z_reset_time_slice();
   182ec:	f7ff ff78 	bl	181e0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   182f0:	6265      	str	r5, [r4, #36]	; 0x24
}
   182f2:	e7f8      	b.n	182e6 <update_cache+0x2a>
   182f4:	200020bc 	.word	0x200020bc

000182f8 <unready_thread>:
{
   182f8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   182fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   182fe:	7b43      	ldrb	r3, [r0, #13]
   18300:	2a00      	cmp	r2, #0
{
   18302:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18304:	da04      	bge.n	18310 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1830a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1830c:	f005 fe99 	bl	1e042 <sys_dlist_remove>
	update_cache(thread == _current);
   18310:	4b04      	ldr	r3, [pc, #16]	; (18324 <unready_thread+0x2c>)
   18312:	6898      	ldr	r0, [r3, #8]
   18314:	1a43      	subs	r3, r0, r1
   18316:	4258      	negs	r0, r3
   18318:	4158      	adcs	r0, r3
}
   1831a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1831e:	f7ff bfcd 	b.w	182bc <update_cache>
   18322:	bf00      	nop
   18324:	200020bc 	.word	0x200020bc

00018328 <pend>:
{
   18328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1832c:	4606      	mov	r6, r0
   1832e:	4614      	mov	r4, r2
   18330:	461d      	mov	r5, r3
	__asm__ volatile(
   18332:	f04f 0340 	mov.w	r3, #64	; 0x40
   18336:	f3ef 8711 	mrs	r7, BASEPRI
   1833a:	f383 8811 	msr	BASEPRI, r3
   1833e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   18342:	f005 fedd 	bl	1e100 <add_to_waitq_locked>
	__asm__ volatile(
   18346:	f387 8811 	msr	BASEPRI, r7
   1834a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1834e:	1c6b      	adds	r3, r5, #1
   18350:	bf08      	it	eq
   18352:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   18356:	d008      	beq.n	1836a <pend+0x42>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18358:	4622      	mov	r2, r4
   1835a:	462b      	mov	r3, r5
   1835c:	f106 0018 	add.w	r0, r6, #24
   18360:	4903      	ldr	r1, [pc, #12]	; (18370 <pend+0x48>)
}
   18362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18366:	f000 bd8b 	b.w	18e80 <z_add_timeout>
   1836a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1836e:	bf00      	nop
   18370:	0001e17b 	.word	0x0001e17b

00018374 <z_pend_curr>:
{
   18374:	b510      	push	{r4, lr}
	pending_current = _current;
   18376:	4b07      	ldr	r3, [pc, #28]	; (18394 <z_pend_curr+0x20>)
   18378:	6898      	ldr	r0, [r3, #8]
   1837a:	4b07      	ldr	r3, [pc, #28]	; (18398 <z_pend_curr+0x24>)
{
   1837c:	460c      	mov	r4, r1
	pending_current = _current;
   1837e:	6018      	str	r0, [r3, #0]
{
   18380:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   18382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18386:	f7ff ffcf 	bl	18328 <pend>
   1838a:	4620      	mov	r0, r4
}
   1838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18390:	f7f8 bd62 	b.w	10e58 <arch_swap>
   18394:	200020bc 	.word	0x200020bc
   18398:	200020ec 	.word	0x200020ec

0001839c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183a0:	4605      	mov	r5, r0
   183a2:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   183a4:	f006 f885 	bl	1e4b2 <z_tick_get_32>
   183a8:	4604      	mov	r4, r0
	__asm__ volatile(
   183aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   183ae:	f3ef 8811 	mrs	r8, BASEPRI
   183b2:	f383 8811 	msr	BASEPRI, r3
   183b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   183ba:	4e12      	ldr	r6, [pc, #72]	; (18404 <z_tick_sleep.part.0+0x68>)
   183bc:	4b12      	ldr	r3, [pc, #72]	; (18408 <z_tick_sleep.part.0+0x6c>)
   183be:	68b0      	ldr	r0, [r6, #8]
   183c0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   183c2:	f7ff ff99 	bl	182f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   183c6:	68b0      	ldr	r0, [r6, #8]
   183c8:	4910      	ldr	r1, [pc, #64]	; (1840c <z_tick_sleep.part.0+0x70>)
   183ca:	462a      	mov	r2, r5
   183cc:	463b      	mov	r3, r7
   183ce:	3018      	adds	r0, #24
   183d0:	f000 fd56 	bl	18e80 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   183d4:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   183d6:	7b53      	ldrb	r3, [r2, #13]
   183d8:	f043 0310 	orr.w	r3, r3, #16
   183dc:	7353      	strb	r3, [r2, #13]
   183de:	4640      	mov	r0, r8
   183e0:	f7f8 fd3a 	bl	10e58 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   183e4:	f006 f865 	bl	1e4b2 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   183e8:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   183ea:	1a24      	subs	r4, r4, r0
   183ec:	f04f 0500 	mov.w	r5, #0
   183f0:	f165 0500 	sbc.w	r5, r5, #0
   183f4:	2c00      	cmp	r4, #0
   183f6:	f175 0300 	sbcs.w	r3, r5, #0
   183fa:	bfb8      	it	lt
   183fc:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   183fe:	4620      	mov	r0, r4
   18400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18404:	200020bc 	.word	0x200020bc
   18408:	200020ec 	.word	0x200020ec
   1840c:	0001e17b 	.word	0x0001e17b

00018410 <z_impl_k_thread_suspend>:
{
   18410:	b570      	push	{r4, r5, r6, lr}
   18412:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18414:	3018      	adds	r0, #24
   18416:	f006 f80c 	bl	1e432 <z_abort_timeout>
   1841a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1841e:	f3ef 8611 	mrs	r6, BASEPRI
   18422:	f383 8811 	msr	BASEPRI, r3
   18426:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1842a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1842e:	7b63      	ldrb	r3, [r4, #13]
   18430:	2a00      	cmp	r2, #0
   18432:	da05      	bge.n	18440 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18438:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1843a:	4620      	mov	r0, r4
   1843c:	f005 fe01 	bl	1e042 <sys_dlist_remove>
		update_cache(thread == _current);
   18440:	4d0b      	ldr	r5, [pc, #44]	; (18470 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18442:	7b63      	ldrb	r3, [r4, #13]
   18444:	68a8      	ldr	r0, [r5, #8]
   18446:	f043 0310 	orr.w	r3, r3, #16
   1844a:	7363      	strb	r3, [r4, #13]
   1844c:	1b03      	subs	r3, r0, r4
   1844e:	4258      	negs	r0, r3
   18450:	4158      	adcs	r0, r3
   18452:	f7ff ff33 	bl	182bc <update_cache>
	__asm__ volatile(
   18456:	f386 8811 	msr	BASEPRI, r6
   1845a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1845e:	68ab      	ldr	r3, [r5, #8]
   18460:	42a3      	cmp	r3, r4
   18462:	d103      	bne.n	1846c <z_impl_k_thread_suspend+0x5c>
}
   18464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18468:	f005 be36 	b.w	1e0d8 <z_reschedule_unlocked>
}
   1846c:	bd70      	pop	{r4, r5, r6, pc}
   1846e:	bf00      	nop
   18470:	200020bc 	.word	0x200020bc

00018474 <k_sched_unlock>:
{
   18474:	b510      	push	{r4, lr}
	__asm__ volatile(
   18476:	f04f 0340 	mov.w	r3, #64	; 0x40
   1847a:	f3ef 8411 	mrs	r4, BASEPRI
   1847e:	f383 8811 	msr	BASEPRI, r3
   18482:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   18486:	4b08      	ldr	r3, [pc, #32]	; (184a8 <k_sched_unlock+0x34>)
   18488:	689a      	ldr	r2, [r3, #8]
   1848a:	7bd3      	ldrb	r3, [r2, #15]
   1848c:	3301      	adds	r3, #1
   1848e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18490:	2000      	movs	r0, #0
   18492:	f7ff ff13 	bl	182bc <update_cache>
	__asm__ volatile(
   18496:	f384 8811 	msr	BASEPRI, r4
   1849a:	f3bf 8f6f 	isb	sy
}
   1849e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   184a2:	f005 be19 	b.w	1e0d8 <z_reschedule_unlocked>
   184a6:	bf00      	nop
   184a8:	200020bc 	.word	0x200020bc

000184ac <move_thread_to_end_of_prio_q>:
{
   184ac:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   184ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   184b2:	7b43      	ldrb	r3, [r0, #13]
   184b4:	2a00      	cmp	r2, #0
{
   184b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   184b8:	da04      	bge.n	184c4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   184ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   184be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   184c0:	f005 fdbf 	bl	1e042 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   184c4:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   184c6:	4a17      	ldr	r2, [pc, #92]	; (18524 <move_thread_to_end_of_prio_q+0x78>)
   184c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   184cc:	4610      	mov	r0, r2
   184ce:	734b      	strb	r3, [r1, #13]
   184d0:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   184d4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   184d6:	4283      	cmp	r3, r0
   184d8:	bf08      	it	eq
   184da:	2300      	moveq	r3, #0
   184dc:	2b00      	cmp	r3, #0
   184de:	bf38      	it	cc
   184e0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   184e2:	b1cb      	cbz	r3, 18518 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   184e4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   184e8:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   184ec:	42a6      	cmp	r6, r4
   184ee:	d00f      	beq.n	18510 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   184f0:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   184f2:	2c00      	cmp	r4, #0
   184f4:	dd0c      	ble.n	18510 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   184f6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   184f8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   184fc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   184fe:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   18500:	6890      	ldr	r0, [r2, #8]
   18502:	1a43      	subs	r3, r0, r1
   18504:	4258      	negs	r0, r3
}
   18506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1850a:	4158      	adcs	r0, r3
   1850c:	f7ff bed6 	b.w	182bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18510:	42ab      	cmp	r3, r5
   18512:	d001      	beq.n	18518 <move_thread_to_end_of_prio_q+0x6c>
   18514:	681b      	ldr	r3, [r3, #0]
   18516:	e7e4      	b.n	184e2 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   18518:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1851c:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1851e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   18520:	e7ee      	b.n	18500 <move_thread_to_end_of_prio_q+0x54>
   18522:	bf00      	nop
   18524:	200020bc 	.word	0x200020bc

00018528 <z_time_slice>:
{
   18528:	b570      	push	{r4, r5, r6, lr}
   1852a:	4601      	mov	r1, r0
	__asm__ volatile(
   1852c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18530:	f3ef 8411 	mrs	r4, BASEPRI
   18534:	f383 8811 	msr	BASEPRI, r3
   18538:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1853c:	4b16      	ldr	r3, [pc, #88]	; (18598 <z_time_slice+0x70>)
   1853e:	4a17      	ldr	r2, [pc, #92]	; (1859c <z_time_slice+0x74>)
   18540:	6898      	ldr	r0, [r3, #8]
   18542:	6815      	ldr	r5, [r2, #0]
   18544:	42a8      	cmp	r0, r5
   18546:	461d      	mov	r5, r3
   18548:	d106      	bne.n	18558 <z_time_slice+0x30>
			z_reset_time_slice();
   1854a:	f7ff fe49 	bl	181e0 <z_reset_time_slice>
	__asm__ volatile(
   1854e:	f384 8811 	msr	BASEPRI, r4
   18552:	f3bf 8f6f 	isb	sy
}
   18556:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   18558:	2600      	movs	r6, #0
   1855a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1855c:	4a10      	ldr	r2, [pc, #64]	; (185a0 <z_time_slice+0x78>)
   1855e:	6812      	ldr	r2, [r2, #0]
   18560:	b1ba      	cbz	r2, 18592 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18562:	89c2      	ldrh	r2, [r0, #14]
   18564:	2a7f      	cmp	r2, #127	; 0x7f
   18566:	d814      	bhi.n	18592 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   18568:	7b42      	ldrb	r2, [r0, #13]
   1856a:	06d2      	lsls	r2, r2, #27
   1856c:	d111      	bne.n	18592 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1856e:	4a0d      	ldr	r2, [pc, #52]	; (185a4 <z_time_slice+0x7c>)
   18570:	f990 600e 	ldrsb.w	r6, [r0, #14]
   18574:	6812      	ldr	r2, [r2, #0]
   18576:	4296      	cmp	r6, r2
   18578:	db0b      	blt.n	18592 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1857a:	4a0b      	ldr	r2, [pc, #44]	; (185a8 <z_time_slice+0x80>)
   1857c:	4290      	cmp	r0, r2
   1857e:	d008      	beq.n	18592 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18580:	691a      	ldr	r2, [r3, #16]
   18582:	428a      	cmp	r2, r1
   18584:	dc02      	bgt.n	1858c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   18586:	f7ff ff91 	bl	184ac <move_thread_to_end_of_prio_q>
   1858a:	e7de      	b.n	1854a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1858c:	1a52      	subs	r2, r2, r1
   1858e:	611a      	str	r2, [r3, #16]
   18590:	e7dd      	b.n	1854e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   18592:	2300      	movs	r3, #0
   18594:	612b      	str	r3, [r5, #16]
   18596:	e7da      	b.n	1854e <z_time_slice+0x26>
   18598:	200020bc 	.word	0x200020bc
   1859c:	200020ec 	.word	0x200020ec
   185a0:	200020f4 	.word	0x200020f4
   185a4:	200020f0 	.word	0x200020f0
   185a8:	20001c58 	.word	0x20001c58

000185ac <ready_thread>:
{
   185ac:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   185ae:	f990 300d 	ldrsb.w	r3, [r0, #13]
   185b2:	7b42      	ldrb	r2, [r0, #13]
   185b4:	2b00      	cmp	r3, #0
   185b6:	db2d      	blt.n	18614 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   185b8:	06d3      	lsls	r3, r2, #27
   185ba:	d12b      	bne.n	18614 <ready_thread+0x68>
	return !sys_dnode_is_linked(&t->node);
   185bc:	6983      	ldr	r3, [r0, #24]
   185be:	bb4b      	cbnz	r3, 18614 <ready_thread+0x68>
	return list->head == list;
   185c0:	4915      	ldr	r1, [pc, #84]	; (18618 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   185c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   185c6:	7342      	strb	r2, [r0, #13]
   185c8:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   185ca:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   185cc:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   185d0:	4294      	cmp	r4, r2
   185d2:	bf18      	it	ne
   185d4:	4623      	movne	r3, r4
   185d6:	2b00      	cmp	r3, #0
   185d8:	bf38      	it	cc
   185da:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   185dc:	b1ab      	cbz	r3, 1860a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   185de:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   185e2:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   185e6:	42a6      	cmp	r6, r4
   185e8:	d00b      	beq.n	18602 <ready_thread+0x56>
		return b2 - b1;
   185ea:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   185ec:	2c00      	cmp	r4, #0
   185ee:	dd08      	ble.n	18602 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   185f0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   185f2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   185f6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   185f8:	6058      	str	r0, [r3, #4]
}
   185fa:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   185fc:	2000      	movs	r0, #0
   185fe:	f7ff be5d 	b.w	182bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18602:	42ab      	cmp	r3, r5
   18604:	d001      	beq.n	1860a <ready_thread+0x5e>
   18606:	681b      	ldr	r3, [r3, #0]
   18608:	e7e8      	b.n	185dc <ready_thread+0x30>
	node->prev = tail;
   1860a:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1860e:	6028      	str	r0, [r5, #0]
	list->tail = node;
   18610:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   18612:	e7f2      	b.n	185fa <ready_thread+0x4e>
}
   18614:	bc70      	pop	{r4, r5, r6}
   18616:	4770      	bx	lr
   18618:	200020bc 	.word	0x200020bc

0001861c <z_sched_start>:
{
   1861c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1861e:	f04f 0240 	mov.w	r2, #64	; 0x40
   18622:	f3ef 8411 	mrs	r4, BASEPRI
   18626:	f382 8811 	msr	BASEPRI, r2
   1862a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1862e:	7b42      	ldrb	r2, [r0, #13]
   18630:	0751      	lsls	r1, r2, #29
   18632:	d404      	bmi.n	1863e <z_sched_start+0x22>
	__asm__ volatile(
   18634:	f384 8811 	msr	BASEPRI, r4
   18638:	f3bf 8f6f 	isb	sy
}
   1863c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1863e:	f022 0204 	bic.w	r2, r2, #4
   18642:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18644:	f7ff ffb2 	bl	185ac <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18648:	4621      	mov	r1, r4
   1864a:	4802      	ldr	r0, [pc, #8]	; (18654 <z_sched_start+0x38>)
}
   1864c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18650:	f7ff be0e 	b.w	18270 <z_reschedule>
   18654:	20002631 	.word	0x20002631

00018658 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   18658:	4b04      	ldr	r3, [pc, #16]	; (1866c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1865a:	2100      	movs	r1, #0
   1865c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   18660:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   18664:	4608      	mov	r0, r1
   18666:	f7ff bdd1 	b.w	1820c <k_sched_time_slice_set>
   1866a:	bf00      	nop
   1866c:	200020bc 	.word	0x200020bc

00018670 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   18670:	4926      	ldr	r1, [pc, #152]	; (1870c <z_impl_k_yield+0x9c>)
{
   18672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   18674:	688a      	ldr	r2, [r1, #8]
   18676:	4b26      	ldr	r3, [pc, #152]	; (18710 <z_impl_k_yield+0xa0>)
   18678:	429a      	cmp	r2, r3
   1867a:	d03d      	beq.n	186f8 <z_impl_k_yield+0x88>
	__asm__ volatile(
   1867c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18680:	f3ef 8511 	mrs	r5, BASEPRI
   18684:	f383 8811 	msr	BASEPRI, r3
   18688:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   1868c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1868e:	7b43      	ldrb	r3, [r0, #13]
   18690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18694:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18696:	f005 fcd4 	bl	1e042 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   1869a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1869c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1869e:	4608      	mov	r0, r1
   186a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   186a4:	7353      	strb	r3, [r2, #13]
   186a6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   186aa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186ac:	4283      	cmp	r3, r0
   186ae:	bf08      	it	eq
   186b0:	2300      	moveq	r3, #0
   186b2:	2b00      	cmp	r3, #0
   186b4:	bf38      	it	cc
   186b6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186b8:	b1cb      	cbz	r3, 186ee <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   186ba:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   186be:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   186c2:	42a7      	cmp	r7, r4
   186c4:	d00f      	beq.n	186e6 <z_impl_k_yield+0x76>
		return b2 - b1;
   186c6:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   186c8:	2c00      	cmp	r4, #0
   186ca:	dd0c      	ble.n	186e6 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   186cc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   186ce:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   186d2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   186d4:	605a      	str	r2, [r3, #4]
		update_cache(1);
   186d6:	2001      	movs	r0, #1
   186d8:	f7ff fdf0 	bl	182bc <update_cache>
   186dc:	4628      	mov	r0, r5
}
   186de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   186e2:	f7f8 bbb9 	b.w	10e58 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   186e6:	42b3      	cmp	r3, r6
   186e8:	d001      	beq.n	186ee <z_impl_k_yield+0x7e>
   186ea:	681b      	ldr	r3, [r3, #0]
   186ec:	e7e4      	b.n	186b8 <z_impl_k_yield+0x48>
	node->prev = tail;
   186ee:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   186f2:	6032      	str	r2, [r6, #0]
	list->tail = node;
   186f4:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   186f6:	e7ee      	b.n	186d6 <z_impl_k_yield+0x66>
   186f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   186fc:	f3ef 8011 	mrs	r0, BASEPRI
   18700:	f383 8811 	msr	BASEPRI, r3
   18704:	f3bf 8f6f 	isb	sy
   18708:	e7e9      	b.n	186de <z_impl_k_yield+0x6e>
   1870a:	bf00      	nop
   1870c:	200020bc 	.word	0x200020bc
   18710:	20001c58 	.word	0x20001c58

00018714 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18714:	f1b1 3fff 	cmp.w	r1, #4294967295
   18718:	bf08      	it	eq
   1871a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1871e:	b508      	push	{r3, lr}
   18720:	4602      	mov	r2, r0
   18722:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18724:	d106      	bne.n	18734 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   18726:	4b0b      	ldr	r3, [pc, #44]	; (18754 <z_impl_k_sleep+0x40>)
   18728:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1872a:	f7ff fe71 	bl	18410 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1872e:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   18732:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   18734:	4313      	orrs	r3, r2
   18736:	d10a      	bne.n	1874e <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   18738:	f7ff ff9a 	bl	18670 <z_impl_k_yield>
		return 0;
   1873c:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1873e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18742:	fb80 2303 	smull	r2, r3, r0, r3
   18746:	0bd0      	lsrs	r0, r2, #15
   18748:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1874c:	e7f1      	b.n	18732 <z_impl_k_sleep+0x1e>
   1874e:	f7ff fe25 	bl	1839c <z_tick_sleep.part.0>
   18752:	e7f4      	b.n	1873e <z_impl_k_sleep+0x2a>
   18754:	200020bc 	.word	0x200020bc

00018758 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18758:	4b01      	ldr	r3, [pc, #4]	; (18760 <z_impl_k_current_get+0x8>)
   1875a:	6898      	ldr	r0, [r3, #8]
   1875c:	4770      	bx	lr
   1875e:	bf00      	nop
   18760:	200020bc 	.word	0x200020bc

00018764 <z_impl_k_is_preempt_thread>:
   18764:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   18768:	b93b      	cbnz	r3, 1877a <z_impl_k_is_preempt_thread+0x16>
   1876a:	4b05      	ldr	r3, [pc, #20]	; (18780 <z_impl_k_is_preempt_thread+0x1c>)
   1876c:	689b      	ldr	r3, [r3, #8]
   1876e:	89d8      	ldrh	r0, [r3, #14]
   18770:	287f      	cmp	r0, #127	; 0x7f
   18772:	bf8c      	ite	hi
   18774:	2000      	movhi	r0, #0
   18776:	2001      	movls	r0, #1
   18778:	4770      	bx	lr
   1877a:	2000      	movs	r0, #0
}
   1877c:	4770      	bx	lr
   1877e:	bf00      	nop
   18780:	200020bc 	.word	0x200020bc

00018784 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   18784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18788:	4604      	mov	r4, r0
   1878a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1878e:	f3ef 8611 	mrs	r6, BASEPRI
   18792:	f383 8811 	msr	BASEPRI, r3
   18796:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (thread->base.thread_state & _THREAD_DEAD) {
   1879a:	7b43      	ldrb	r3, [r0, #13]
   1879c:	071a      	lsls	r2, r3, #28
   1879e:	d505      	bpl.n	187ac <z_thread_abort+0x28>
	__asm__ volatile(
   187a0:	f386 8811 	msr	BASEPRI, r6
   187a4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   187a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   187ac:	f023 0220 	bic.w	r2, r3, #32
   187b0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   187b4:	09d2      	lsrs	r2, r2, #7
   187b6:	d120      	bne.n	187fa <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   187b8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   187ba:	68a3      	ldr	r3, [r4, #8]
   187bc:	b113      	cbz	r3, 187c4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   187be:	4620      	mov	r0, r4
   187c0:	f005 fc47 	bl	1e052 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   187c4:	f104 0018 	add.w	r0, r4, #24
   187c8:	f005 fe33 	bl	1e432 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   187cc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   187d0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   187d4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   187d6:	42bd      	cmp	r5, r7
   187d8:	d000      	beq.n	187dc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   187da:	b9b5      	cbnz	r5, 1880a <z_thread_abort+0x86>
		update_cache(1);
   187dc:	2001      	movs	r0, #1
   187de:	f7ff fd6d 	bl	182bc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   187e2:	4b10      	ldr	r3, [pc, #64]	; (18824 <z_thread_abort+0xa0>)
   187e4:	689b      	ldr	r3, [r3, #8]
   187e6:	42a3      	cmp	r3, r4
   187e8:	d1da      	bne.n	187a0 <z_thread_abort+0x1c>
   187ea:	f3ef 8305 	mrs	r3, IPSR
   187ee:	2b00      	cmp	r3, #0
   187f0:	d1d6      	bne.n	187a0 <z_thread_abort+0x1c>
   187f2:	4630      	mov	r0, r6
   187f4:	f7f8 fb30 	bl	10e58 <arch_swap>
	return ret;
   187f8:	e7d2      	b.n	187a0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   187fa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   187fe:	f043 0308 	orr.w	r3, r3, #8
   18802:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18804:	f005 fc1d 	bl	1e042 <sys_dlist_remove>
}
   18808:	e7d7      	b.n	187ba <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1880a:	4628      	mov	r0, r5
   1880c:	f005 fc21 	bl	1e052 <unpend_thread_no_timeout>
   18810:	f105 0018 	add.w	r0, r5, #24
   18814:	f005 fe0d 	bl	1e432 <z_abort_timeout>
   18818:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1881c:	4628      	mov	r0, r5
   1881e:	f7ff fec5 	bl	185ac <ready_thread>
   18822:	e7d7      	b.n	187d4 <z_thread_abort+0x50>
   18824:	200020bc 	.word	0x200020bc

00018828 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   18828:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1882a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1882e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18830:	e9cd 6700 	strd	r6, r7, [sp]
   18834:	f7ff fd9e 	bl	18374 <z_pend_curr>

	if (data != NULL) {
   18838:	b11c      	cbz	r4, 18842 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1883a:	4b03      	ldr	r3, [pc, #12]	; (18848 <z_sched_wait+0x20>)
   1883c:	689b      	ldr	r3, [r3, #8]
   1883e:	695b      	ldr	r3, [r3, #20]
   18840:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   18842:	b002      	add	sp, #8
   18844:	bdd0      	pop	{r4, r6, r7, pc}
   18846:	bf00      	nop
   18848:	200020bc 	.word	0x200020bc

0001884c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1884c:	b538      	push	{r3, r4, r5, lr}
   1884e:	4604      	mov	r4, r0
	__asm__ volatile(
   18850:	f04f 0340 	mov.w	r3, #64	; 0x40
   18854:	f3ef 8511 	mrs	r5, BASEPRI
   18858:	f383 8811 	msr	BASEPRI, r3
   1885c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   18860:	f005 fcc2 	bl	1e1e8 <z_unpend_first_thread>

	if (thread != NULL) {
   18864:	b148      	cbz	r0, 1887a <z_impl_k_sem_give+0x2e>
   18866:	2200      	movs	r2, #0
   18868:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1886a:	f005 fc76 	bl	1e15a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1886e:	4629      	mov	r1, r5
   18870:	4808      	ldr	r0, [pc, #32]	; (18894 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   18872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18876:	f7ff bcfb 	b.w	18270 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1887a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1887e:	429a      	cmp	r2, r3
   18880:	bf18      	it	ne
   18882:	3301      	addne	r3, #1
   18884:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18886:	2102      	movs	r1, #2
   18888:	f104 0010 	add.w	r0, r4, #16
   1888c:	f005 ff87 	bl	1e79e <z_handle_obj_poll_events>
}
   18890:	e7ed      	b.n	1886e <z_impl_k_sem_give+0x22>
   18892:	bf00      	nop
   18894:	20002631 	.word	0x20002631

00018898 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18898:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1889a:	4614      	mov	r4, r2
   1889c:	461d      	mov	r5, r3
   1889e:	f04f 0340 	mov.w	r3, #64	; 0x40
   188a2:	f3ef 8111 	mrs	r1, BASEPRI
   188a6:	f383 8811 	msr	BASEPRI, r3
   188aa:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   188ae:	6883      	ldr	r3, [r0, #8]
   188b0:	b143      	cbz	r3, 188c4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   188b2:	3b01      	subs	r3, #1
   188b4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   188b6:	f381 8811 	msr	BASEPRI, r1
   188ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   188be:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   188c0:	b003      	add	sp, #12
   188c2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   188c4:	ea54 0305 	orrs.w	r3, r4, r5
   188c8:	d106      	bne.n	188d8 <z_impl_k_sem_take+0x40>
   188ca:	f381 8811 	msr	BASEPRI, r1
   188ce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   188d2:	f06f 000f 	mvn.w	r0, #15
   188d6:	e7f3      	b.n	188c0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   188d8:	4602      	mov	r2, r0
   188da:	e9cd 4500 	strd	r4, r5, [sp]
   188de:	4802      	ldr	r0, [pc, #8]	; (188e8 <z_impl_k_sem_take+0x50>)
   188e0:	f7ff fd48 	bl	18374 <z_pend_curr>
	return ret;
   188e4:	e7ec      	b.n	188c0 <z_impl_k_sem_take+0x28>
   188e6:	bf00      	nop
   188e8:	20002631 	.word	0x20002631

000188ec <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   188ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   188ee:	4b09      	ldr	r3, [pc, #36]	; (18914 <k_sys_work_q_init+0x28>)
   188f0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   188f2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   188f4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   188f6:	9300      	str	r3, [sp, #0]
   188f8:	4907      	ldr	r1, [pc, #28]	; (18918 <k_sys_work_q_init+0x2c>)
   188fa:	4808      	ldr	r0, [pc, #32]	; (1891c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   188fc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18900:	f04f 33ff 	mov.w	r3, #4294967295
   18904:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18908:	f000 f9de 	bl	18cc8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1890c:	4620      	mov	r0, r4
   1890e:	b004      	add	sp, #16
   18910:	bd10      	pop	{r4, pc}
   18912:	bf00      	nop
   18914:	0001f893 	.word	0x0001f893
   18918:	20004ae8 	.word	0x20004ae8
   1891c:	20001d58 	.word	0x20001d58

00018920 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   18924:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   18926:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18928:	2604      	movs	r6, #4
   1892a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1892c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1892e:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
   18930:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18934:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
   18936:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1893a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1893c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1893e:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   18942:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   18946:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1894a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1894c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1894e:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18950:	9202      	str	r2, [sp, #8]
   18952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18954:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   18956:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1895a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1895c:	9200      	str	r2, [sp, #0]
   1895e:	4642      	mov	r2, r8
{
   18960:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18962:	f7f8 fb21 	bl	10fa8 <arch_new_thread>
	if (!_current) {
   18966:	4b05      	ldr	r3, [pc, #20]	; (1897c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   18968:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1896a:	689b      	ldr	r3, [r3, #8]
   1896c:	b103      	cbz	r3, 18970 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   18970:	6763      	str	r3, [r4, #116]	; 0x74
}
   18972:	4640      	mov	r0, r8
   18974:	b004      	add	sp, #16
   18976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1897a:	bf00      	nop
   1897c:	200020bc 	.word	0x200020bc

00018980 <z_impl_k_thread_create>:
{
   18980:	b5f0      	push	{r4, r5, r6, r7, lr}
   18982:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18984:	2500      	movs	r5, #0
   18986:	9505      	str	r5, [sp, #20]
   18988:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1898a:	9504      	str	r5, [sp, #16]
   1898c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1898e:	9503      	str	r5, [sp, #12]
   18990:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18992:	9502      	str	r5, [sp, #8]
{
   18994:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18998:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1899a:	9501      	str	r5, [sp, #4]
   1899c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1899e:	9500      	str	r5, [sp, #0]
{
   189a0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   189a2:	f7ff ffbd 	bl	18920 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   189a6:	1c7b      	adds	r3, r7, #1
   189a8:	bf08      	it	eq
   189aa:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   189ae:	d005      	beq.n	189bc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   189b0:	ea56 0307 	orrs.w	r3, r6, r7
   189b4:	d105      	bne.n	189c2 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   189b6:	4620      	mov	r0, r4
   189b8:	f7ff fe30 	bl	1861c <z_sched_start>
}
   189bc:	4620      	mov	r0, r4
   189be:	b007      	add	sp, #28
   189c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   189c2:	4904      	ldr	r1, [pc, #16]	; (189d4 <z_impl_k_thread_create+0x54>)
   189c4:	4632      	mov	r2, r6
   189c6:	463b      	mov	r3, r7
   189c8:	f104 0018 	add.w	r0, r4, #24
   189cc:	f000 fa58 	bl	18e80 <z_add_timeout>
   189d0:	e7f4      	b.n	189bc <z_impl_k_thread_create+0x3c>
   189d2:	bf00      	nop
   189d4:	0001e17b 	.word	0x0001e17b

000189d8 <z_init_static_threads>:
{
   189d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   189dc:	4e2a      	ldr	r6, [pc, #168]	; (18a88 <z_init_static_threads+0xb0>)
   189de:	4d2b      	ldr	r5, [pc, #172]	; (18a8c <z_init_static_threads+0xb4>)
{
   189e0:	b086      	sub	sp, #24
   189e2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   189e4:	42b5      	cmp	r5, r6
   189e6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   189ea:	d310      	bcc.n	18a0e <z_init_static_threads+0x36>
	k_sched_lock();
   189ec:	f7ff fc52 	bl	18294 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   189f0:	4c26      	ldr	r4, [pc, #152]	; (18a8c <z_init_static_threads+0xb4>)
   189f2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 18a90 <z_init_static_threads+0xb8>
   189f6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   189fa:	f240 36e7 	movw	r6, #999	; 0x3e7
   189fe:	2700      	movs	r7, #0
   18a00:	4544      	cmp	r4, r8
   18a02:	d321      	bcc.n	18a48 <z_init_static_threads+0x70>
}
   18a04:	b006      	add	sp, #24
   18a06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   18a0a:	f7ff bd33 	b.w	18474 <k_sched_unlock>
		z_setup_new_thread(
   18a0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18a12:	9305      	str	r3, [sp, #20]
   18a14:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18a18:	9304      	str	r3, [sp, #16]
   18a1a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18a1e:	9303      	str	r3, [sp, #12]
   18a20:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18a24:	9302      	str	r3, [sp, #8]
   18a26:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18a2a:	9301      	str	r3, [sp, #4]
   18a2c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18a30:	9300      	str	r3, [sp, #0]
   18a32:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18a36:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18a3a:	f7ff ff71 	bl	18920 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18a3e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18a42:	655d      	str	r5, [r3, #84]	; 0x54
   18a44:	4625      	mov	r5, r4
   18a46:	e7cd      	b.n	189e4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18a4a:	1c5a      	adds	r2, r3, #1
   18a4c:	d00d      	beq.n	18a6a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   18a4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18a52:	4630      	mov	r0, r6
   18a54:	4639      	mov	r1, r7
   18a56:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a5a:	42b9      	cmp	r1, r7
   18a5c:	bf08      	it	eq
   18a5e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   18a60:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a62:	d104      	bne.n	18a6e <z_init_static_threads+0x96>
	z_sched_start(thread);
   18a64:	4628      	mov	r0, r5
   18a66:	f7ff fdd9 	bl	1861c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a6a:	3430      	adds	r4, #48	; 0x30
   18a6c:	e7c8      	b.n	18a00 <z_init_static_threads+0x28>
   18a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a72:	2300      	movs	r3, #0
   18a74:	f7e7 fdb8 	bl	5e8 <__aeabi_uldivmod>
   18a78:	4602      	mov	r2, r0
   18a7a:	460b      	mov	r3, r1
   18a7c:	f105 0018 	add.w	r0, r5, #24
   18a80:	4651      	mov	r1, sl
   18a82:	f000 f9fd 	bl	18e80 <z_add_timeout>
   18a86:	e7f0      	b.n	18a6a <z_init_static_threads+0x92>
   18a88:	20000794 	.word	0x20000794
   18a8c:	20000794 	.word	0x20000794
   18a90:	0001e17b 	.word	0x0001e17b

00018a94 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   18a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18a96:	68c3      	ldr	r3, [r0, #12]
   18a98:	079a      	lsls	r2, r3, #30
{
   18a9a:	4604      	mov	r4, r0
   18a9c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18a9e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   18aa2:	d41f      	bmi.n	18ae4 <submit_to_queue_locked+0x50>
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18aa4:	075f      	lsls	r7, r3, #29
   18aa6:	d41f      	bmi.n	18ae8 <submit_to_queue_locked+0x54>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   18aa8:	680a      	ldr	r2, [r1, #0]
   18aaa:	b90a      	cbnz	r2, 18ab0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18aac:	6882      	ldr	r2, [r0, #8]
   18aae:	600a      	str	r2, [r1, #0]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18ab0:	07d8      	lsls	r0, r3, #31
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   18ab2:	bf44      	itt	mi
   18ab4:	68a3      	ldrmi	r3, [r4, #8]
   18ab6:	6033      	strmi	r3, [r6, #0]
			ret = 2;
		}

		int rc = queue_submit_locked(*queuep, work);
   18ab8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   18aba:	bf4c      	ite	mi
   18abc:	2502      	movmi	r5, #2
		ret = 1;
   18abe:	2501      	movpl	r5, #1
	if (queue == NULL) {
   18ac0:	b37f      	cbz	r7, 18b22 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18ac2:	4b1b      	ldr	r3, [pc, #108]	; (18b30 <submit_to_queue_locked+0x9c>)
   18ac4:	689b      	ldr	r3, [r3, #8]
   18ac6:	42bb      	cmp	r3, r7
   18ac8:	d111      	bne.n	18aee <submit_to_queue_locked+0x5a>
   18aca:	f005 fbe2 	bl	1e292 <k_is_in_isr>
   18ace:	f080 0001 	eor.w	r0, r0, #1
   18ad2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   18ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18ad8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18ada:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18ade:	d523      	bpl.n	18b28 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   18ae0:	b13a      	cbz	r2, 18af2 <submit_to_queue_locked+0x5e>
   18ae2:	b940      	cbnz	r0, 18af6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   18ae4:	f06f 050f 	mvn.w	r5, #15
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
		*queuep = NULL;
   18ae8:	2300      	movs	r3, #0
   18aea:	6033      	str	r3, [r6, #0]
	}

	return ret;
   18aec:	e013      	b.n	18b16 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18aee:	2000      	movs	r0, #0
   18af0:	e7f0      	b.n	18ad4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   18af2:	071b      	lsls	r3, r3, #28
   18af4:	d4f6      	bmi.n	18ae4 <submit_to_queue_locked+0x50>
	parent->next = child;
   18af6:	2300      	movs	r3, #0
   18af8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   18afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   18afe:	b963      	cbnz	r3, 18b1a <submit_to_queue_locked+0x86>
	list->head = node;
   18b00:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   18b04:	4638      	mov	r0, r7
   18b06:	f005 fbd3 	bl	1e2b0 <notify_queue_locked>
	*flagp |= BIT(bit);
   18b0a:	68e3      	ldr	r3, [r4, #12]
   18b0c:	f043 0304 	orr.w	r3, r3, #4
   18b10:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18b12:	6833      	ldr	r3, [r6, #0]
   18b14:	60a3      	str	r3, [r4, #8]
}
   18b16:	4628      	mov	r0, r5
   18b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18b1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b1c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   18b20:	e7f0      	b.n	18b04 <submit_to_queue_locked+0x70>
		return -EINVAL;
   18b22:	f06f 0515 	mvn.w	r5, #21
   18b26:	e7df      	b.n	18ae8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   18b28:	f06f 0512 	mvn.w	r5, #18
   18b2c:	e7dc      	b.n	18ae8 <submit_to_queue_locked+0x54>
   18b2e:	bf00      	nop
   18b30:	200020bc 	.word	0x200020bc

00018b34 <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
   18b34:	68c3      	ldr	r3, [r0, #12]
{
   18b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18b3a:	4c17      	ldr	r4, [pc, #92]	; (18b98 <finalize_cancel_locked+0x64>)
	*flagp &= ~BIT(bit);
   18b3c:	f023 0302 	bic.w	r3, r3, #2
{
   18b40:	4607      	mov	r7, r0
	*flagp &= ~BIT(bit);
   18b42:	60c3      	str	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18b44:	6820      	ldr	r0, [r4, #0]
   18b46:	b320      	cbz	r0, 18b92 <finalize_cancel_locked+0x5e>
	return node->next;
   18b48:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18b4a:	2600      	movs	r6, #0
   18b4c:	2d00      	cmp	r5, #0
   18b4e:	bf38      	it	cc
   18b50:	2500      	movcc	r5, #0
	parent->next = child;
   18b52:	46b0      	mov	r8, r6
		if (wc->work == work) {
   18b54:	6842      	ldr	r2, [r0, #4]
   18b56:	42ba      	cmp	r2, r7
   18b58:	4603      	mov	r3, r0
   18b5a:	d10b      	bne.n	18b74 <finalize_cancel_locked+0x40>
Z_GENLIST_REMOVE(slist, snode)
   18b5c:	6803      	ldr	r3, [r0, #0]
   18b5e:	b996      	cbnz	r6, 18b86 <finalize_cancel_locked+0x52>
   18b60:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   18b62:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   18b64:	4290      	cmp	r0, r2
   18b66:	d100      	bne.n	18b6a <finalize_cancel_locked+0x36>
	list->tail = node;
   18b68:	6063      	str	r3, [r4, #4]
	parent->next = child;
   18b6a:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
   18b6e:	f7ff fe6d 	bl	1884c <z_impl_k_sem_give>
}
   18b72:	4633      	mov	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18b74:	b16d      	cbz	r5, 18b92 <finalize_cancel_locked+0x5e>
	return node->next;
   18b76:	682a      	ldr	r2, [r5, #0]
   18b78:	2a00      	cmp	r2, #0
   18b7a:	bf38      	it	cc
   18b7c:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18b7e:	4628      	mov	r0, r5
   18b80:	461e      	mov	r6, r3
   18b82:	4615      	mov	r5, r2
   18b84:	e7e6      	b.n	18b54 <finalize_cancel_locked+0x20>
	parent->next = child;
   18b86:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18b88:	6863      	ldr	r3, [r4, #4]
   18b8a:	4298      	cmp	r0, r3
	list->tail = node;
   18b8c:	bf08      	it	eq
   18b8e:	6066      	streq	r6, [r4, #4]
}
   18b90:	e7eb      	b.n	18b6a <finalize_cancel_locked+0x36>
}
   18b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b96:	bf00      	nop
   18b98:	200020f8 	.word	0x200020f8

00018b9c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18ba0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 18cc4 <work_queue_main+0x128>
{
   18ba4:	b087      	sub	sp, #28
   18ba6:	4604      	mov	r4, r0
					   K_FOREVER, NULL);
   18ba8:	f04f 36ff 	mov.w	r6, #4294967295
   18bac:	f04f 37ff 	mov.w	r7, #4294967295
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18bb0:	f100 0888 	add.w	r8, r0, #136	; 0x88
	__asm__ volatile(
   18bb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   18bb8:	f3ef 8a11 	mrs	sl, BASEPRI
   18bbc:	f383 8811 	msr	BASEPRI, r3
   18bc0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   18bc4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   18bc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   18bcc:	b9c5      	cbnz	r5, 18c00 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
   18bce:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   18bd2:	0759      	lsls	r1, r3, #29
	*flagp &= ~BIT(bit);
   18bd4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   18bd8:	d508      	bpl.n	18bec <work_queue_main+0x50>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18bda:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18bde:	2200      	movs	r2, #0
   18be0:	2101      	movs	r1, #1
   18be2:	4628      	mov	r0, r5
   18be4:	f005 fb28 	bl	1e238 <z_sched_wake>
   18be8:	2800      	cmp	r0, #0
   18bea:	d1f8      	bne.n	18bde <work_queue_main+0x42>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18bec:	2300      	movs	r3, #0
   18bee:	e9cd 6700 	strd	r6, r7, [sp]
   18bf2:	9302      	str	r3, [sp, #8]
   18bf4:	4642      	mov	r2, r8
   18bf6:	4651      	mov	r1, sl
   18bf8:	4648      	mov	r0, r9
   18bfa:	f7ff fe15 	bl	18828 <z_sched_wait>
			continue;
   18bfe:	e7d9      	b.n	18bb4 <work_queue_main+0x18>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18c00:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   18c04:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   18c06:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18c0a:	4295      	cmp	r5, r2
   18c0c:	d101      	bne.n	18c12 <work_queue_main+0x76>
	list->tail = node;
   18c0e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   18c12:	f043 0302 	orr.w	r3, r3, #2
   18c16:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   18c1a:	f38a 8811 	msr	BASEPRI, sl
   18c1e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
   18c22:	f8d5 a004 	ldr.w	sl, [r5, #4]
	__asm__ volatile(
   18c26:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c2a:	f3ef 8b11 	mrs	fp, BASEPRI
   18c2e:	f383 8811 	msr	BASEPRI, r3
   18c32:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18c36:	68eb      	ldr	r3, [r5, #12]
   18c38:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
   18c3c:	f3c3 0140 	ubfx	r1, r3, #1, #1
	*flagp &= ~BIT(bit);
   18c40:	60eb      	str	r3, [r5, #12]
	if (ret) {
   18c42:	f081 0201 	eor.w	r2, r1, #1
   18c46:	b129      	cbz	r1, 18c54 <work_queue_main+0xb8>
		finalize_cancel_locked(work);
   18c48:	4628      	mov	r0, r5
   18c4a:	9205      	str	r2, [sp, #20]
   18c4c:	f7ff ff72 	bl	18b34 <finalize_cancel_locked>
   18c50:	9a05      	ldr	r2, [sp, #20]
   18c52:	e002      	b.n	18c5a <work_queue_main+0xbe>
	*flagp |= BIT(bit);
   18c54:	f043 0301 	orr.w	r3, r3, #1
   18c58:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
   18c5a:	f38b 8811 	msr	BASEPRI, fp
   18c5e:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
   18c62:	b9b2      	cbnz	r2, 18c92 <work_queue_main+0xf6>
	__asm__ volatile(
   18c64:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c68:	f3ef 8211 	mrs	r2, BASEPRI
   18c6c:	f383 8811 	msr	BASEPRI, r3
   18c70:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18c74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18c78:	f023 0302 	bic.w	r3, r3, #2
   18c7c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   18c80:	f382 8811 	msr	BASEPRI, r2
   18c84:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   18c88:	05db      	lsls	r3, r3, #23
   18c8a:	d493      	bmi.n	18bb4 <work_queue_main+0x18>
	z_impl_k_yield();
   18c8c:	f7ff fcf0 	bl	18670 <z_impl_k_yield>
}
   18c90:	e790      	b.n	18bb4 <work_queue_main+0x18>
				handler(work);
   18c92:	4628      	mov	r0, r5
   18c94:	47d0      	blx	sl
	__asm__ volatile(
   18c96:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c9a:	f3ef 8a11 	mrs	sl, BASEPRI
   18c9e:	f383 8811 	msr	BASEPRI, r3
   18ca2:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18ca6:	68eb      	ldr	r3, [r5, #12]
   18ca8:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18cac:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
   18cae:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18cb0:	d502      	bpl.n	18cb8 <work_queue_main+0x11c>
		finalize_cancel_locked(work);
   18cb2:	4628      	mov	r0, r5
   18cb4:	f7ff ff3e 	bl	18b34 <finalize_cancel_locked>
	__asm__ volatile(
   18cb8:	f38a 8811 	msr	BASEPRI, sl
   18cbc:	f3bf 8f6f 	isb	sy
}
   18cc0:	e7d0      	b.n	18c64 <work_queue_main+0xc8>
   18cc2:	bf00      	nop
   18cc4:	20002631 	.word	0x20002631

00018cc8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   18cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cca:	b089      	sub	sp, #36	; 0x24
   18ccc:	4604      	mov	r4, r0
	list->head = NULL;
   18cce:	2000      	movs	r0, #0
	list->tail = NULL;
   18cd0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   18cd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18cd6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   18cda:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18cde:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18ce2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   18ce6:	b31d      	cbz	r5, 18d30 <k_work_queue_start+0x68>
   18ce8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   18cea:	2800      	cmp	r0, #0
   18cec:	f240 1001 	movw	r0, #257	; 0x101
   18cf0:	bf08      	it	eq
   18cf2:	2001      	moveq	r0, #1
	*flagp = flags;
   18cf4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18cf8:	2000      	movs	r0, #0
   18cfa:	f04f 36ff 	mov.w	r6, #4294967295
   18cfe:	f04f 37ff 	mov.w	r7, #4294967295
   18d02:	e9cd 3003 	strd	r3, r0, [sp, #12]
   18d06:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18d0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18d0e:	4b09      	ldr	r3, [pc, #36]	; (18d34 <k_work_queue_start+0x6c>)
   18d10:	9400      	str	r4, [sp, #0]
   18d12:	4620      	mov	r0, r4
   18d14:	f7ff fe34 	bl	18980 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   18d18:	b125      	cbz	r5, 18d24 <k_work_queue_start+0x5c>
   18d1a:	6829      	ldr	r1, [r5, #0]
   18d1c:	b111      	cbz	r1, 18d24 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread_id, value);
   18d1e:	4620      	mov	r0, r4
   18d20:	f005 fac1 	bl	1e2a6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18d24:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
   18d26:	b009      	add	sp, #36	; 0x24
   18d28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18d2c:	f005 babe 	b.w	1e2ac <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   18d30:	2001      	movs	r0, #1
   18d32:	e7df      	b.n	18cf4 <k_work_queue_start+0x2c>
   18d34:	00018b9d 	.word	0x00018b9d

00018d38 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   18d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18d3a:	460c      	mov	r4, r1
   18d3c:	9001      	str	r0, [sp, #4]
   18d3e:	4616      	mov	r6, r2
   18d40:	461f      	mov	r7, r3
	__asm__ volatile(
   18d42:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d46:	f3ef 8511 	mrs	r5, BASEPRI
   18d4a:	f383 8811 	msr	BASEPRI, r3
   18d4e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   18d52:	4608      	mov	r0, r1
   18d54:	f005 fab3 	bl	1e2be <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18d58:	ea56 0307 	orrs.w	r3, r6, r7
   18d5c:	d109      	bne.n	18d72 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   18d5e:	a901      	add	r1, sp, #4
   18d60:	4620      	mov	r0, r4
   18d62:	f7ff fe97 	bl	18a94 <submit_to_queue_locked>
	__asm__ volatile(
   18d66:	f385 8811 	msr	BASEPRI, r5
   18d6a:	f3bf 8f6f 	isb	sy
	ret = schedule_for_queue_locked(&queue, dwork, delay);

	k_spin_unlock(&lock, key);

	return ret;
}
   18d6e:	b003      	add	sp, #12
   18d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   18d72:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18d74:	4906      	ldr	r1, [pc, #24]	; (18d90 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   18d76:	f043 0308 	orr.w	r3, r3, #8
   18d7a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   18d7c:	9b01      	ldr	r3, [sp, #4]
   18d7e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18d80:	f104 0010 	add.w	r0, r4, #16
   18d84:	4632      	mov	r2, r6
   18d86:	463b      	mov	r3, r7
   18d88:	f000 f87a 	bl	18e80 <z_add_timeout>
	return ret;
   18d8c:	2001      	movs	r0, #1
   18d8e:	e7ea      	b.n	18d66 <k_work_reschedule_for_queue+0x2e>
   18d90:	0001e341 	.word	0x0001e341

00018d94 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   18d94:	4a02      	ldr	r2, [pc, #8]	; (18da0 <boot_banner+0xc>)
   18d96:	4903      	ldr	r1, [pc, #12]	; (18da4 <boot_banner+0x10>)
   18d98:	4803      	ldr	r0, [pc, #12]	; (18da8 <boot_banner+0x14>)
   18d9a:	f000 bb98 	b.w	194ce <printk>
   18d9e:	bf00      	nop
   18da0:	0001f3b2 	.word	0x0001f3b2
   18da4:	0001f89c 	.word	0x0001f89c
   18da8:	0001f8bc 	.word	0x0001f8bc

00018dac <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18dac:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   18dae:	4806      	ldr	r0, [pc, #24]	; (18dc8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   18db0:	4a06      	ldr	r2, [pc, #24]	; (18dcc <z_data_copy+0x20>)
   18db2:	4907      	ldr	r1, [pc, #28]	; (18dd0 <z_data_copy+0x24>)
   18db4:	1a12      	subs	r2, r2, r0
   18db6:	f002 f92f 	bl	1b018 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   18dbe:	4a05      	ldr	r2, [pc, #20]	; (18dd4 <z_data_copy+0x28>)
   18dc0:	4905      	ldr	r1, [pc, #20]	; (18dd8 <z_data_copy+0x2c>)
   18dc2:	4806      	ldr	r0, [pc, #24]	; (18ddc <z_data_copy+0x30>)
   18dc4:	f002 b928 	b.w	1b018 <memcpy>
   18dc8:	20000000 	.word	0x20000000
   18dcc:	20000968 	.word	0x20000968
   18dd0:	0001f8e4 	.word	0x0001f8e4
   18dd4:	00000000 	.word	0x00000000
   18dd8:	0001f8e4 	.word	0x0001f8e4
   18ddc:	20000000 	.word	0x20000000

00018de0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   18de0:	4b03      	ldr	r3, [pc, #12]	; (18df0 <elapsed+0x10>)
   18de2:	681b      	ldr	r3, [r3, #0]
   18de4:	b90b      	cbnz	r3, 18dea <elapsed+0xa>
   18de6:	f7f7 be8b 	b.w	10b00 <z_clock_elapsed>
}
   18dea:	2000      	movs	r0, #0
   18dec:	4770      	bx	lr
   18dee:	bf00      	nop
   18df0:	20002100 	.word	0x20002100

00018df4 <remove_timeout>:
{
   18df4:	b530      	push	{r4, r5, lr}
   18df6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18df8:	b168      	cbz	r0, 18e16 <remove_timeout+0x22>
   18dfa:	4a0a      	ldr	r2, [pc, #40]	; (18e24 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   18dfc:	6852      	ldr	r2, [r2, #4]
   18dfe:	4290      	cmp	r0, r2
   18e00:	d009      	beq.n	18e16 <remove_timeout+0x22>
	if (next(t) != NULL) {
   18e02:	b143      	cbz	r3, 18e16 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18e04:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18e08:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18e0c:	1912      	adds	r2, r2, r4
   18e0e:	eb45 0101 	adc.w	r1, r5, r1
   18e12:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   18e16:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   18e18:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18e1a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18e1c:	2300      	movs	r3, #0
	node->prev = NULL;
   18e1e:	e9c0 3300 	strd	r3, r3, [r0]
}
   18e22:	bd30      	pop	{r4, r5, pc}
   18e24:	2000062c 	.word	0x2000062c

00018e28 <next_timeout>:

static int32_t next_timeout(void)
{
   18e28:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   18e2a:	4b13      	ldr	r3, [pc, #76]	; (18e78 <next_timeout+0x50>)
   18e2c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e2e:	429c      	cmp	r4, r3
   18e30:	bf08      	it	eq
   18e32:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18e34:	f7ff ffd4 	bl	18de0 <elapsed>
   18e38:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   18e3a:	b1bc      	cbz	r4, 18e6c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18e3c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   18e40:	1b40      	subs	r0, r0, r5
   18e42:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   18e46:	2801      	cmp	r0, #1
   18e48:	f171 0300 	sbcs.w	r3, r1, #0
   18e4c:	db11      	blt.n	18e72 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18e4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18e52:	2300      	movs	r3, #0
   18e54:	4282      	cmp	r2, r0
   18e56:	eb73 0401 	sbcs.w	r4, r3, r1
   18e5a:	da00      	bge.n	18e5e <next_timeout+0x36>
   18e5c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18e5e:	4b07      	ldr	r3, [pc, #28]	; (18e7c <next_timeout+0x54>)
   18e60:	691b      	ldr	r3, [r3, #16]
   18e62:	b113      	cbz	r3, 18e6a <next_timeout+0x42>
   18e64:	4298      	cmp	r0, r3
   18e66:	bfa8      	it	ge
   18e68:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18e6a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   18e6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18e70:	e7f5      	b.n	18e5e <next_timeout+0x36>
   18e72:	2000      	movs	r0, #0
   18e74:	e7f3      	b.n	18e5e <next_timeout+0x36>
   18e76:	bf00      	nop
   18e78:	2000062c 	.word	0x2000062c
   18e7c:	200020bc 	.word	0x200020bc

00018e80 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   18e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18e84:	f1b3 3fff 	cmp.w	r3, #4294967295
   18e88:	bf08      	it	eq
   18e8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18e8e:	b085      	sub	sp, #20
   18e90:	4604      	mov	r4, r0
   18e92:	4692      	mov	sl, r2
   18e94:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18e96:	d070      	beq.n	18f7a <z_add_timeout+0xfa>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   18e98:	1c56      	adds	r6, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18e9a:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
   18e9e:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18ea2:	f04f 33ff 	mov.w	r3, #4294967295
   18ea6:	ebb5 0806 	subs.w	r8, r5, r6
   18eaa:	eb63 0907 	sbc.w	r9, r3, r7
   18eae:	f1b8 0f00 	cmp.w	r8, #0
   18eb2:	f179 0300 	sbcs.w	r3, r9, #0
   18eb6:	db16      	blt.n	18ee6 <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
   18eb8:	4e36      	ldr	r6, [pc, #216]	; (18f94 <z_add_timeout+0x114>)
   18eba:	9103      	str	r1, [sp, #12]
   18ebc:	f7ff ff90 	bl	18de0 <elapsed>
   18ec0:	e9d6 2600 	ldrd	r2, r6, [r6]
   18ec4:	f04f 33ff 	mov.w	r3, #4294967295
   18ec8:	1aad      	subs	r5, r5, r2
   18eca:	eb63 0306 	sbc.w	r3, r3, r6
   18ece:	ebb5 020a 	subs.w	r2, r5, sl
   18ed2:	eb63 030b 	sbc.w	r3, r3, fp
   18ed6:	9200      	str	r2, [sp, #0]
   18ed8:	9301      	str	r3, [sp, #4]
   18eda:	e9dd 6700 	ldrd	r6, r7, [sp]
   18ede:	9903      	ldr	r1, [sp, #12]
   18ee0:	1a36      	subs	r6, r6, r0
   18ee2:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   18ee6:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
   18ee8:	f04f 0340 	mov.w	r3, #64	; 0x40
   18eec:	f3ef 8511 	mrs	r5, BASEPRI
   18ef0:	f383 8811 	msr	BASEPRI, r3
   18ef4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18ef8:	f7ff ff72 	bl	18de0 <elapsed>
	ticks = MAX(1, ticks);
   18efc:	2e01      	cmp	r6, #1
	return list->head == list;
   18efe:	4a26      	ldr	r2, [pc, #152]	; (18f98 <z_add_timeout+0x118>)
   18f00:	f177 0300 	sbcs.w	r3, r7, #0
   18f04:	bfb8      	it	lt
   18f06:	2601      	movlt	r6, #1
   18f08:	6813      	ldr	r3, [r2, #0]
   18f0a:	bfb8      	it	lt
   18f0c:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
   18f0e:	1836      	adds	r6, r6, r0
   18f10:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f14:	4293      	cmp	r3, r2
   18f16:	e9c4 6704 	strd	r6, r7, [r4, #16]
   18f1a:	d002      	beq.n	18f22 <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18f1c:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   18f20:	b92b      	cbnz	r3, 18f2e <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
   18f22:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
   18f24:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
   18f28:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f2a:	6054      	str	r4, [r2, #4]
}
   18f2c:	e012      	b.n	18f54 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   18f2e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   18f32:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   18f36:	4546      	cmp	r6, r8
   18f38:	eb77 0109 	sbcs.w	r1, r7, r9
   18f3c:	da20      	bge.n	18f80 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
   18f3e:	ebb8 0006 	subs.w	r0, r8, r6
   18f42:	eb69 0107 	sbc.w	r1, r9, r7
   18f46:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   18f4a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18f4c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   18f50:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18f52:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18f54:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f56:	4293      	cmp	r3, r2
   18f58:	d00b      	beq.n	18f72 <z_add_timeout+0xf2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18f5a:	429c      	cmp	r4, r3
   18f5c:	d109      	bne.n	18f72 <z_add_timeout+0xf2>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18f5e:	f7ff ff63 	bl	18e28 <next_timeout>

			if (next_time == 0 ||
   18f62:	b118      	cbz	r0, 18f6c <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
   18f64:	4b0d      	ldr	r3, [pc, #52]	; (18f9c <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   18f66:	691b      	ldr	r3, [r3, #16]
   18f68:	4283      	cmp	r3, r0
   18f6a:	d002      	beq.n	18f72 <z_add_timeout+0xf2>
				z_clock_set_timeout(next_time, false);
   18f6c:	2100      	movs	r1, #0
   18f6e:	f7f7 fd95 	bl	10a9c <z_clock_set_timeout>
	__asm__ volatile(
   18f72:	f385 8811 	msr	BASEPRI, r5
   18f76:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18f7a:	b005      	add	sp, #20
   18f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   18f80:	ebb6 0008 	subs.w	r0, r6, r8
   18f84:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   18f88:	4563      	cmp	r3, ip
   18f8a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   18f8e:	d0c8      	beq.n	18f22 <z_add_timeout+0xa2>
   18f90:	681b      	ldr	r3, [r3, #0]
   18f92:	e7c5      	b.n	18f20 <z_add_timeout+0xa0>
   18f94:	20001df8 	.word	0x20001df8
   18f98:	2000062c 	.word	0x2000062c
   18f9c:	200020bc 	.word	0x200020bc

00018fa0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   18fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fa4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18fa6:	f7ff fabf 	bl	18528 <z_time_slice>
	__asm__ volatile(
   18faa:	f04f 0340 	mov.w	r3, #64	; 0x40
   18fae:	f3ef 8411 	mrs	r4, BASEPRI
   18fb2:	f383 8811 	msr	BASEPRI, r3
   18fb6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   18fba:	4d2c      	ldr	r5, [pc, #176]	; (1906c <z_clock_announce+0xcc>)
   18fbc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 19070 <z_clock_announce+0xd0>
	return list->head == list;
   18fc0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 19074 <z_clock_announce+0xd4>
   18fc4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   18fc6:	4651      	mov	r1, sl
   18fc8:	f8d5 c000 	ldr.w	ip, [r5]
   18fcc:	f8db 0000 	ldr.w	r0, [fp]
   18fd0:	4662      	mov	r2, ip
   18fd2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18fd4:	4558      	cmp	r0, fp
   18fd6:	e9da 8900 	ldrd	r8, r9, [sl]
   18fda:	e9cd 2300 	strd	r2, r3, [sp]
   18fde:	d00d      	beq.n	18ffc <z_clock_announce+0x5c>
   18fe0:	b160      	cbz	r0, 18ffc <z_clock_announce+0x5c>
   18fe2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   18fe6:	45b4      	cmp	ip, r6
   18fe8:	41bb      	sbcs	r3, r7
   18fea:	da1e      	bge.n	1902a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18fec:	9b00      	ldr	r3, [sp, #0]
   18fee:	ebb6 0c03 	subs.w	ip, r6, r3
   18ff2:	9b01      	ldr	r3, [sp, #4]
   18ff4:	eb67 0603 	sbc.w	r6, r7, r3
   18ff8:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   18ffc:	9b00      	ldr	r3, [sp, #0]
   18ffe:	eb13 0208 	adds.w	r2, r3, r8
   19002:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   19004:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   19008:	eb43 0309 	adc.w	r3, r3, r9
   1900c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   19010:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   19012:	f7ff ff09 	bl	18e28 <next_timeout>
   19016:	4631      	mov	r1, r6
   19018:	f7f7 fd40 	bl	10a9c <z_clock_set_timeout>
	__asm__ volatile(
   1901c:	f384 8811 	msr	BASEPRI, r4
   19020:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19024:	b003      	add	sp, #12
   19026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1902a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1902e:	f04f 0200 	mov.w	r2, #0
   19032:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   19036:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1903a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1903e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   19042:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   19046:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   19048:	f7ff fed4 	bl	18df4 <remove_timeout>
   1904c:	f384 8811 	msr	BASEPRI, r4
   19050:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19054:	6883      	ldr	r3, [r0, #8]
   19056:	4798      	blx	r3
	__asm__ volatile(
   19058:	f04f 0340 	mov.w	r3, #64	; 0x40
   1905c:	f3ef 8411 	mrs	r4, BASEPRI
   19060:	f383 8811 	msr	BASEPRI, r3
   19064:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   19068:	4901      	ldr	r1, [pc, #4]	; (19070 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1906a:	e7ad      	b.n	18fc8 <z_clock_announce+0x28>
   1906c:	20002100 	.word	0x20002100
   19070:	20001df8 	.word	0x20001df8
   19074:	2000062c 	.word	0x2000062c

00019078 <z_tick_get>:

int64_t z_tick_get(void)
{
   19078:	b510      	push	{r4, lr}
   1907a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1907e:	f3ef 8411 	mrs	r4, BASEPRI
   19082:	f383 8811 	msr	BASEPRI, r3
   19086:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1908a:	f7f7 fd39 	bl	10b00 <z_clock_elapsed>
   1908e:	4b06      	ldr	r3, [pc, #24]	; (190a8 <z_tick_get+0x30>)
   19090:	e9d3 2300 	ldrd	r2, r3, [r3]
   19094:	1812      	adds	r2, r2, r0
   19096:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1909a:	f384 8811 	msr	BASEPRI, r4
   1909e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   190a2:	4610      	mov	r0, r2
   190a4:	4619      	mov	r1, r3
   190a6:	bd10      	pop	{r4, pc}
   190a8:	20001df8 	.word	0x20001df8

000190ac <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   190ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   190ae:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   190b2:	1c56      	adds	r6, r2, #1
   190b4:	f143 0700 	adc.w	r7, r3, #0
   190b8:	2f00      	cmp	r7, #0
   190ba:	bf08      	it	eq
   190bc:	2e02      	cmpeq	r6, #2
{
   190be:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   190c0:	d302      	bcc.n	190c8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   190c2:	490d      	ldr	r1, [pc, #52]	; (190f8 <z_timer_expiration_handler+0x4c>)
   190c4:	f7ff fedc 	bl	18e80 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   190c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   190ca:	3301      	adds	r3, #1
   190cc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   190ce:	6a23      	ldr	r3, [r4, #32]
   190d0:	b10b      	cbz	r3, 190d6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   190d2:	4620      	mov	r0, r4
   190d4:	4798      	blx	r3
	return list->head == list;
   190d6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190da:	42a5      	cmp	r5, r4
   190dc:	d00a      	beq.n	190f4 <z_timer_expiration_handler+0x48>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   190de:	b14d      	cbz	r5, 190f4 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   190e0:	4628      	mov	r0, r5
   190e2:	f004 ffc9 	bl	1e078 <z_unpend_thread_no_timeout>
   190e6:	2300      	movs	r3, #0
   190e8:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   190ea:	4628      	mov	r0, r5
}
   190ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   190f0:	f005 b833 	b.w	1e15a <z_ready_thread>
}
   190f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   190f6:	bf00      	nop
   190f8:	000190ad 	.word	0x000190ad

000190fc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   190fc:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   19100:	4619      	mov	r1, r3
   19102:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19104:	1c4c      	adds	r4, r1, #1
{
   19106:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19108:	bf08      	it	eq
   1910a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1910e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   19112:	4680      	mov	r8, r0
   19114:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19116:	d047      	beq.n	191a8 <z_impl_k_timer_start+0xac>
   19118:	4614      	mov	r4, r2
   1911a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1911c:	ea54 0305 	orrs.w	r3, r4, r5
   19120:	d016      	beq.n	19150 <z_impl_k_timer_start+0x54>
   19122:	f06f 0301 	mvn.w	r3, #1
   19126:	ebb3 0a02 	subs.w	sl, r3, r2
   1912a:	f04f 33ff 	mov.w	r3, #4294967295
   1912e:	eb63 0b05 	sbc.w	fp, r3, r5
   19132:	f1ba 0f00 	cmp.w	sl, #0
   19136:	f17b 0300 	sbcs.w	r3, fp, #0
   1913a:	da09      	bge.n	19150 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1913c:	f112 34ff 	adds.w	r4, r2, #4294967295
   19140:	f145 35ff 	adc.w	r5, r5, #4294967295
   19144:	2c01      	cmp	r4, #1
   19146:	f175 0300 	sbcs.w	r3, r5, #0
   1914a:	bfbc      	itt	lt
   1914c:	2401      	movlt	r4, #1
   1914e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   19150:	f06f 0301 	mvn.w	r3, #1
   19154:	1a1b      	subs	r3, r3, r0
   19156:	9300      	str	r3, [sp, #0]
   19158:	f04f 33ff 	mov.w	r3, #4294967295
   1915c:	eb63 0301 	sbc.w	r3, r3, r1
   19160:	9301      	str	r3, [sp, #4]
   19162:	e9dd 2300 	ldrd	r2, r3, [sp]
   19166:	2a00      	cmp	r2, #0
   19168:	f173 0300 	sbcs.w	r3, r3, #0
   1916c:	da0c      	bge.n	19188 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1916e:	f110 38ff 	adds.w	r8, r0, #4294967295
   19172:	f141 39ff 	adc.w	r9, r1, #4294967295
   19176:	f1b8 0f00 	cmp.w	r8, #0
   1917a:	f179 0300 	sbcs.w	r3, r9, #0
   1917e:	bfbc      	itt	lt
   19180:	f04f 0800 	movlt.w	r8, #0
   19184:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   19188:	4630      	mov	r0, r6
   1918a:	f005 f952 	bl	1e432 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1918e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19190:	4907      	ldr	r1, [pc, #28]	; (191b0 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   19192:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19194:	4642      	mov	r2, r8
   19196:	464b      	mov	r3, r9
   19198:	4630      	mov	r0, r6
	timer->period = period;
   1919a:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1919e:	b002      	add	sp, #8
   191a0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   191a4:	f7ff be6c 	b.w	18e80 <z_add_timeout>
}
   191a8:	b002      	add	sp, #8
   191aa:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   191ae:	bf00      	nop
   191b0:	000190ad 	.word	0x000190ad

000191b4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   191b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   191b8:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   191ba:	4b29      	ldr	r3, [pc, #164]	; (19260 <z_impl_k_poll+0xac>)
   191bc:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   191be:	2301      	movs	r3, #1
   191c0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   191c4:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   191c8:	ea52 0307 	orrs.w	r3, r2, r7
{
   191cc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   191ce:	bf0c      	ite	eq
   191d0:	2301      	moveq	r3, #1
   191d2:	2300      	movne	r3, #0
   191d4:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   191d8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   191da:	f005 fa14 	bl	1e606 <register_events>
   191de:	4681      	mov	r9, r0
	__asm__ volatile(
   191e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   191e4:	f3ef 8a11 	mrs	sl, BASEPRI
   191e8:	f383 8811 	msr	BASEPRI, r3
   191ec:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   191f0:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   191f4:	b964      	cbnz	r4, 19210 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   191f6:	4601      	mov	r1, r0
   191f8:	4652      	mov	r2, sl
   191fa:	4640      	mov	r0, r8
   191fc:	f005 f9a3 	bl	1e546 <clear_event_registrations>
	__asm__ volatile(
   19200:	f38a 8811 	msr	BASEPRI, sl
   19204:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   19208:	4620      	mov	r0, r4
   1920a:	b002      	add	sp, #8
   1920c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   19210:	2300      	movs	r3, #0
   19212:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19216:	ea56 0307 	orrs.w	r3, r6, r7
   1921a:	d106      	bne.n	1922a <z_impl_k_poll+0x76>
   1921c:	f38a 8811 	msr	BASEPRI, sl
   19220:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19224:	f06f 040a 	mvn.w	r4, #10
   19228:	e7ee      	b.n	19208 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1922a:	e9cd 6700 	strd	r6, r7, [sp]
   1922e:	4a0d      	ldr	r2, [pc, #52]	; (19264 <z_impl_k_poll+0xb0>)
   19230:	480d      	ldr	r0, [pc, #52]	; (19268 <z_impl_k_poll+0xb4>)
   19232:	4651      	mov	r1, sl
   19234:	f7ff f89e 	bl	18374 <z_pend_curr>
   19238:	4604      	mov	r4, r0
	__asm__ volatile(
   1923a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1923e:	f3ef 8511 	mrs	r5, BASEPRI
   19242:	f383 8811 	msr	BASEPRI, r3
   19246:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1924a:	462a      	mov	r2, r5
   1924c:	4649      	mov	r1, r9
   1924e:	4640      	mov	r0, r8
   19250:	f005 f979 	bl	1e546 <clear_event_registrations>
	__asm__ volatile(
   19254:	f385 8811 	msr	BASEPRI, r5
   19258:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1925c:	e7d4      	b.n	19208 <z_impl_k_poll+0x54>
   1925e:	bf00      	nop
   19260:	200020bc 	.word	0x200020bc
   19264:	20000634 	.word	0x20000634
   19268:	20002631 	.word	0x20002631

0001926c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1926c:	b538      	push	{r3, r4, r5, lr}
   1926e:	4603      	mov	r3, r0
	__asm__ volatile(
   19270:	f04f 0240 	mov.w	r2, #64	; 0x40
   19274:	f3ef 8511 	mrs	r5, BASEPRI
   19278:	f382 8811 	msr	BASEPRI, r2
   1927c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   19280:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   19282:	2101      	movs	r1, #1
   19284:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19286:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19288:	4283      	cmp	r3, r0
   1928a:	d106      	bne.n	1929a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1928c:	f385 8811 	msr	BASEPRI, r5
   19290:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   19294:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   19296:	4620      	mov	r0, r4
   19298:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1929a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1929e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   192a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   192a2:	2300      	movs	r3, #0
	node->prev = NULL;
   192a4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   192a8:	f005 fa0e 	bl	1e6c8 <signal_poll_event>
	z_reschedule(&lock, key);
   192ac:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   192ae:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   192b0:	4801      	ldr	r0, [pc, #4]	; (192b8 <z_impl_k_poll_signal_raise+0x4c>)
   192b2:	f7fe ffdd 	bl	18270 <z_reschedule>
	return rc;
   192b6:	e7ee      	b.n	19296 <z_impl_k_poll_signal_raise+0x2a>
   192b8:	20002631 	.word	0x20002631

000192bc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   192bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   192be:	4606      	mov	r6, r0
   192c0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   192c2:	f004 ffe6 	bl	1e292 <k_is_in_isr>
   192c6:	b980      	cbnz	r0, 192ea <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   192c8:	4b0b      	ldr	r3, [pc, #44]	; (192f8 <z_thread_aligned_alloc+0x3c>)
   192ca:	689b      	ldr	r3, [r3, #8]
   192cc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap) {
   192ce:	b184      	cbz	r4, 192f2 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   192d0:	2204      	movs	r2, #4
   192d2:	18aa      	adds	r2, r5, r2
   192d4:	d209      	bcs.n	192ea <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   192d6:	2000      	movs	r0, #0
   192d8:	2100      	movs	r1, #0
   192da:	e9cd 0100 	strd	r0, r1, [sp]
   192de:	f046 0104 	orr.w	r1, r6, #4
   192e2:	4620      	mov	r0, r4
   192e4:	f004 fd7c 	bl	1dde0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   192e8:	b908      	cbnz	r0, 192ee <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   192ea:	2400      	movs	r4, #0
	}

	return ret;
   192ec:	e001      	b.n	192f2 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   192ee:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   192f0:	1d04      	adds	r4, r0, #4
}
   192f2:	4620      	mov	r0, r4
   192f4:	b002      	add	sp, #8
   192f6:	bd70      	pop	{r4, r5, r6, pc}
   192f8:	200020bc 	.word	0x200020bc

000192fc <read_temp_trigger_setting>:
{
   192fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct flow_sensor *sensor = attr->user_data;
   19300:	68cc      	ldr	r4, [r1, #12]
	switch (sensor->condition) {
   19302:	79a5      	ldrb	r5, [r4, #6]
{
   19304:	b086      	sub	sp, #24
	switch (sensor->condition) {
   19306:	2d02      	cmp	r5, #2
{
   19308:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   1930c:	4684      	mov	ip, r0
   1930e:	460e      	mov	r6, r1
   19310:	4696      	mov	lr, r2
   19312:	4698      	mov	r8, r3
	switch (sensor->condition) {
   19314:	d812      	bhi.n	1933c <read_temp_trigger_setting+0x40>
   19316:	b19d      	cbz	r5, 19340 <read_temp_trigger_setting+0x44>
			rp.condition = sensor->condition;
   19318:	f88d 5014 	strb.w	r5, [sp, #20]
			sys_put_le24(sensor->milliseconds, rp.millisec);
   1931c:	68a4      	ldr	r4, [r4, #8]
	dst[0] = val;
   1931e:	f88d 4015 	strb.w	r4, [sp, #21]
	dst[1] = val >> 8;
   19322:	f3c4 2507 	ubfx	r5, r4, #8, #8
	dst[2] = val >> 16;
   19326:	0c24      	lsrs	r4, r4, #16
   19328:	f88d 4017 	strb.w	r4, [sp, #23]
	dst[1] = val >> 8;
   1932c:	f88d 5016 	strb.w	r5, [sp, #22]
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   19330:	2404      	movs	r4, #4
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   19332:	9402      	str	r4, [sp, #8]
   19334:	ac05      	add	r4, sp, #20
   19336:	e9cd 7400 	strd	r7, r4, [sp]
   1933a:	e00a      	b.n	19352 <read_temp_trigger_setting+0x56>
	switch (sensor->condition) {
   1933c:	2d03      	cmp	r5, #3
   1933e:	d10d      	bne.n	1935c <read_temp_trigger_setting+0x60>
					 &sensor->condition,
   19340:	3406      	adds	r4, #6
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   19342:	e9cd 7400 	strd	r7, r4, [sp]
   19346:	2301      	movs	r3, #1
   19348:	9302      	str	r3, [sp, #8]
   1934a:	4672      	mov	r2, lr
   1934c:	4643      	mov	r3, r8
   1934e:	4631      	mov	r1, r6
   19350:	4660      	mov	r0, ip
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   19352:	f003 fd2b 	bl	1cdac <bt_gatt_attr_read>
}
   19356:	b006      	add	sp, #24
   19358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rp.condition = sensor->condition;
   1935c:	f88d 5014 	strb.w	r5, [sp, #20]
			rp.ref_val = sys_cpu_to_le16(sensor->ref_val);
   19360:	8924      	ldrh	r4, [r4, #8]
   19362:	f8ad 4015 	strh.w	r4, [sp, #21]
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   19366:	2403      	movs	r4, #3
   19368:	e7e3      	b.n	19332 <read_temp_trigger_setting+0x36>

0001936a <read_flow_valid_range>:
{
   1936a:	b530      	push	{r4, r5, lr}
	const struct flow_sensor *sensor = attr->user_data;
   1936c:	68cc      	ldr	r4, [r1, #12]
{
   1936e:	b087      	sub	sp, #28
	uint16_t tmp[] = {sys_cpu_to_le16(sensor->lower_limit),
   19370:	8865      	ldrh	r5, [r4, #2]
   19372:	88a4      	ldrh	r4, [r4, #4]
   19374:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, tmp,
   19378:	2404      	movs	r4, #4
   1937a:	9402      	str	r4, [sp, #8]
   1937c:	ac05      	add	r4, sp, #20
   1937e:	9401      	str	r4, [sp, #4]
   19380:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
   19384:	9400      	str	r4, [sp, #0]
	uint16_t tmp[] = {sys_cpu_to_le16(sensor->lower_limit),
   19386:	f8ad 5014 	strh.w	r5, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, tmp,
   1938a:	f003 fd0f 	bl	1cdac <bt_gatt_attr_read>
}
   1938e:	b007      	add	sp, #28
   19390:	bd30      	pop	{r4, r5, pc}

00019392 <read_u16>:
{
   19392:	b510      	push	{r4, lr}
    uint16_t value = sys_cpu_to_le16(*u16);
   19394:	68cc      	ldr	r4, [r1, #12]
{
   19396:	b086      	sub	sp, #24
    uint16_t value = sys_cpu_to_le16(*u16);
   19398:	8824      	ldrh	r4, [r4, #0]
   1939a:	f8ad 4016 	strh.w	r4, [sp, #22]
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1939e:	2402      	movs	r4, #2
   193a0:	9402      	str	r4, [sp, #8]
   193a2:	f10d 0416 	add.w	r4, sp, #22
   193a6:	9401      	str	r4, [sp, #4]
   193a8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   193ac:	9400      	str	r4, [sp, #0]
   193ae:	f003 fcfd 	bl	1cdac <bt_gatt_attr_read>
}
   193b2:	b006      	add	sp, #24
   193b4:	bd10      	pop	{r4, pc}

000193b6 <read_es_measurement>:
{
   193b6:	b570      	push	{r4, r5, r6, lr}
	const struct es_measurement *value = attr->user_data;
   193b8:	68cc      	ldr	r4, [r1, #12]
{
   193ba:	b088      	sub	sp, #32
	rsp.flags = sys_cpu_to_le16(value->flags);
   193bc:	8825      	ldrh	r5, [r4, #0]
   193be:	f8ad 5014 	strh.w	r5, [sp, #20]
	rsp.sampling_function = value->sampling_func;
   193c2:	78a5      	ldrb	r5, [r4, #2]
   193c4:	f88d 5016 	strb.w	r5, [sp, #22]
	sys_put_le24(value->meas_period, rsp.measurement_period);
   193c8:	6865      	ldr	r5, [r4, #4]
	dst[0] = val;
   193ca:	f88d 5017 	strb.w	r5, [sp, #23]
	dst[1] = val >> 8;
   193ce:	f3c5 2607 	ubfx	r6, r5, #8, #8
	dst[2] = val >> 16;
   193d2:	0c2d      	lsrs	r5, r5, #16
   193d4:	f88d 5019 	strb.w	r5, [sp, #25]
	dst[0] = val;
   193d8:	8925      	ldrh	r5, [r4, #8]
   193da:	f8ad 501a 	strh.w	r5, [sp, #26]
	dst[2] = val >> 16;
   193de:	8965      	ldrh	r5, [r4, #10]
   193e0:	f88d 501c 	strb.w	r5, [sp, #28]
	rsp.application = value->application;
   193e4:	7b25      	ldrb	r5, [r4, #12]
	rsp.measurement_uncertainty = value->meas_uncertainty;
   193e6:	7b64      	ldrb	r4, [r4, #13]
   193e8:	f88d 401e 	strb.w	r4, [sp, #30]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &rsp,
   193ec:	240b      	movs	r4, #11
   193ee:	9402      	str	r4, [sp, #8]
   193f0:	ac05      	add	r4, sp, #20
   193f2:	9401      	str	r4, [sp, #4]
   193f4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
   193f8:	9400      	str	r4, [sp, #0]
	dst[1] = val >> 8;
   193fa:	f88d 6018 	strb.w	r6, [sp, #24]
	rsp.application = value->application;
   193fe:	f88d 501d 	strb.w	r5, [sp, #29]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &rsp,
   19402:	f003 fcd3 	bl	1cdac <bt_gatt_attr_read>
}
   19406:	b008      	add	sp, #32
   19408:	bd70      	pop	{r4, r5, r6, pc}

0001940a <adc_channel_setup>:
	return api->channel_setup(dev, channel_cfg);
   1940a:	6883      	ldr	r3, [r0, #8]
   1940c:	681b      	ldr	r3, [r3, #0]
   1940e:	4718      	bx	r3

00019410 <gpio_pin_set_raw>:
	if (value != 0)	{
   19410:	2301      	movs	r3, #1
{
   19412:	b410      	push	{r4}
   19414:	fa03 f101 	lsl.w	r1, r3, r1
	if (value != 0)	{
   19418:	b11a      	cbz	r2, 19422 <gpio_pin_set_raw+0x12>
	return api->port_set_bits_raw(port, pins);
   1941a:	6883      	ldr	r3, [r0, #8]
   1941c:	68db      	ldr	r3, [r3, #12]
}
   1941e:	bc10      	pop	{r4}
	return api->port_clear_bits_raw(port, pins);
   19420:	4718      	bx	r3
   19422:	6883      	ldr	r3, [r0, #8]
   19424:	691b      	ldr	r3, [r3, #16]
   19426:	e7fa      	b.n	1941e <gpio_pin_set_raw+0xe>

00019428 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   19428:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   1942a:	6905      	ldr	r5, [r0, #16]
static inline int gpio_pin_configure(const struct device *port,
   1942c:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   1942e:	6883      	ldr	r3, [r0, #8]
   19430:	f44f 6220 	mov.w	r2, #2560	; 0xa00
   19434:	681b      	ldr	r3, [r3, #0]
   19436:	4798      	blx	r3
	if (ret != 0) {
   19438:	b930      	cbnz	r0, 19448 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1943a:	2301      	movs	r3, #1
   1943c:	fa03 f104 	lsl.w	r1, r3, r4
   19440:	682b      	ldr	r3, [r5, #0]
   19442:	ea23 0301 	bic.w	r3, r3, r1
   19446:	602b      	str	r3, [r5, #0]
}
   19448:	bd38      	pop	{r3, r4, r5, pc}

0001944a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1944a:	4603      	mov	r3, r0
   1944c:	b140      	cbz	r0, 19460 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1944e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19450:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19454:	2a02      	cmp	r2, #2
   19456:	d006      	beq.n	19466 <sys_notify_validate+0x1c>
   19458:	2a03      	cmp	r2, #3
   1945a:	d004      	beq.n	19466 <sys_notify_validate+0x1c>
   1945c:	2a01      	cmp	r2, #1
   1945e:	d005      	beq.n	1946c <sys_notify_validate+0x22>
		return -EINVAL;
   19460:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   19464:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19466:	681a      	ldr	r2, [r3, #0]
   19468:	2a00      	cmp	r2, #0
   1946a:	d0f9      	beq.n	19460 <sys_notify_validate+0x16>
		notify->result = 0;
   1946c:	2000      	movs	r0, #0
   1946e:	6098      	str	r0, [r3, #8]
   19470:	4770      	bx	lr

00019472 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19472:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19474:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   19478:	2a02      	cmp	r2, #2
{
   1947a:	b510      	push	{r4, lr}
   1947c:	4603      	mov	r3, r0
	notify->result = res;
   1947e:	6081      	str	r1, [r0, #8]
	switch (method) {
   19480:	d00a      	beq.n	19498 <sys_notify_finalize+0x26>
   19482:	2a03      	cmp	r2, #3
   19484:	d10b      	bne.n	1949e <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   19486:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   19488:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1948a:	2200      	movs	r2, #0
   1948c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1948e:	b108      	cbz	r0, 19494 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   19490:	f7ff feec 	bl	1926c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19494:	4620      	mov	r0, r4
   19496:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   19498:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1949a:	2400      	movs	r4, #0
		break;
   1949c:	e7f5      	b.n	1948a <sys_notify_finalize+0x18>
	switch (method) {
   1949e:	2400      	movs	r4, #0
   194a0:	4620      	mov	r0, r4
   194a2:	e7f2      	b.n	1948a <sys_notify_finalize+0x18>

000194a4 <arch_printk_char_out>:
}
   194a4:	2000      	movs	r0, #0
   194a6:	4770      	bx	lr

000194a8 <str_out>:
{
   194a8:	b530      	push	{r4, r5, lr}
   194aa:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   194ac:	680c      	ldr	r4, [r1, #0]
   194ae:	1c55      	adds	r5, r2, #1
   194b0:	b114      	cbz	r4, 194b8 <str_out+0x10>
   194b2:	684b      	ldr	r3, [r1, #4]
   194b4:	4293      	cmp	r3, r2
   194b6:	dc01      	bgt.n	194bc <str_out+0x14>
		ctx->count++;
   194b8:	608d      	str	r5, [r1, #8]
}
   194ba:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   194bc:	3b01      	subs	r3, #1
   194be:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   194c0:	bf08      	it	eq
   194c2:	2200      	moveq	r2, #0
   194c4:	608d      	str	r5, [r1, #8]
   194c6:	bf0c      	ite	eq
   194c8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   194ca:	54a0      	strbne	r0, [r4, r2]
   194cc:	e7f5      	b.n	194ba <str_out+0x12>

000194ce <printk>:
{
   194ce:	b40f      	push	{r0, r1, r2, r3}
   194d0:	b507      	push	{r0, r1, r2, lr}
   194d2:	a904      	add	r1, sp, #16
   194d4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   194d8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   194da:	f7f6 fae7 	bl	faac <vprintk>
}
   194de:	b003      	add	sp, #12
   194e0:	f85d eb04 	ldr.w	lr, [sp], #4
   194e4:	b004      	add	sp, #16
   194e6:	4770      	bx	lr

000194e8 <snprintk>:
{
   194e8:	b40c      	push	{r2, r3}
   194ea:	b507      	push	{r0, r1, r2, lr}
   194ec:	ab04      	add	r3, sp, #16
   194ee:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   194f2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   194f4:	f7f6 fae8 	bl	fac8 <vsnprintk>
}
   194f8:	b003      	add	sp, #12
   194fa:	f85d eb04 	ldr.w	lr, [sp], #4
   194fe:	b002      	add	sp, #8
   19500:	4770      	bx	lr

00019502 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19502:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   19504:	f013 0307 	ands.w	r3, r3, #7
   19508:	d105      	bne.n	19516 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1950a:	6803      	ldr	r3, [r0, #0]
   1950c:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1950e:	bf0c      	ite	eq
   19510:	2000      	moveq	r0, #0
   19512:	2003      	movne	r0, #3
   19514:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19516:	2b02      	cmp	r3, #2
   19518:	d105      	bne.n	19526 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1951a:	8b43      	ldrh	r3, [r0, #26]
   1951c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1951e:	bf14      	ite	ne
   19520:	2000      	movne	r0, #0
   19522:	2004      	moveq	r0, #4
   19524:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19526:	2b01      	cmp	r3, #1
   19528:	d105      	bne.n	19536 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1952a:	6803      	ldr	r3, [r0, #0]
   1952c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1952e:	bf0c      	ite	eq
   19530:	2000      	moveq	r0, #0
   19532:	2005      	movne	r0, #5
   19534:	4770      	bx	lr
	int evt = EVT_NOP;
   19536:	2000      	movs	r0, #0
}
   19538:	4770      	bx	lr

0001953a <notify_one>:
{
   1953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1953e:	460d      	mov	r5, r1
   19540:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19542:	4619      	mov	r1, r3
   19544:	1d28      	adds	r0, r5, #4
{
   19546:	4690      	mov	r8, r2
   19548:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1954a:	f7ff ff92 	bl	19472 <sys_notify_finalize>
	if (cb) {
   1954e:	4604      	mov	r4, r0
   19550:	b138      	cbz	r0, 19562 <notify_one+0x28>
		cb(mgr, cli, state, res);
   19552:	4633      	mov	r3, r6
   19554:	4642      	mov	r2, r8
   19556:	4629      	mov	r1, r5
   19558:	4638      	mov	r0, r7
   1955a:	46a4      	mov	ip, r4
}
   1955c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19560:	4760      	bx	ip
}
   19562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019566 <transition_complete>:
{
   19566:	b410      	push	{r4}
	__asm__ volatile(
   19568:	f04f 0440 	mov.w	r4, #64	; 0x40
   1956c:	f3ef 8211 	mrs	r2, BASEPRI
   19570:	f384 8811 	msr	BASEPRI, r4
   19574:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19578:	6141      	str	r1, [r0, #20]
}
   1957a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1957c:	2101      	movs	r1, #1
   1957e:	f7f6 bab7 	b.w	faf0 <process_event>

00019582 <validate_args>:
{
   19582:	b510      	push	{r4, lr}
   19584:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19586:	b140      	cbz	r0, 1959a <validate_args+0x18>
   19588:	b139      	cbz	r1, 1959a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1958a:	1d08      	adds	r0, r1, #4
   1958c:	f7ff ff5d 	bl	1944a <sys_notify_validate>
	if ((rv == 0)
   19590:	b928      	cbnz	r0, 1959e <validate_args+0x1c>
	    && ((cli->notify.flags
   19592:	68a3      	ldr	r3, [r4, #8]
   19594:	f033 0303 	bics.w	r3, r3, #3
   19598:	d001      	beq.n	1959e <validate_args+0x1c>
		rv = -EINVAL;
   1959a:	f06f 0015 	mvn.w	r0, #21
}
   1959e:	bd10      	pop	{r4, pc}

000195a0 <onoff_manager_init>:
{
   195a0:	b538      	push	{r3, r4, r5, lr}
   195a2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   195a4:	4605      	mov	r5, r0
   195a6:	b158      	cbz	r0, 195c0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   195a8:	b151      	cbz	r1, 195c0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   195aa:	680b      	ldr	r3, [r1, #0]
   195ac:	b143      	cbz	r3, 195c0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   195ae:	684b      	ldr	r3, [r1, #4]
   195b0:	b133      	cbz	r3, 195c0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   195b2:	221c      	movs	r2, #28
   195b4:	2100      	movs	r1, #0
   195b6:	f001 fd5a 	bl	1b06e <memset>
   195ba:	612c      	str	r4, [r5, #16]
	return 0;
   195bc:	2000      	movs	r0, #0
}
   195be:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   195c0:	f06f 0015 	mvn.w	r0, #21
   195c4:	e7fb      	b.n	195be <onoff_manager_init+0x1e>

000195c6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   195c6:	b570      	push	{r4, r5, r6, lr}
   195c8:	4604      	mov	r4, r0
   195ca:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   195cc:	f7ff ffd9 	bl	19582 <validate_args>

	if (rv < 0) {
   195d0:	1e05      	subs	r5, r0, #0
   195d2:	db31      	blt.n	19638 <onoff_request+0x72>
   195d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   195d8:	f3ef 8111 	mrs	r1, BASEPRI
   195dc:	f383 8811 	msr	BASEPRI, r3
   195e0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   195e4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   195e6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   195e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
   195ec:	42ab      	cmp	r3, r5
   195ee:	f000 0207 	and.w	r2, r0, #7
   195f2:	d02e      	beq.n	19652 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   195f4:	2a02      	cmp	r2, #2
   195f6:	d10e      	bne.n	19616 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   195f8:	3301      	adds	r3, #1
   195fa:	8363      	strh	r3, [r4, #26]
	rv = state;
   195fc:	4615      	mov	r5, r2
		notify = true;
   195fe:	2301      	movs	r3, #1
	__asm__ volatile(
   19600:	f381 8811 	msr	BASEPRI, r1
   19604:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   19608:	b1b3      	cbz	r3, 19638 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1960a:	2300      	movs	r3, #0
   1960c:	4631      	mov	r1, r6
   1960e:	4620      	mov	r0, r4
   19610:	f7ff ff93 	bl	1953a <notify_one>
   19614:	e010      	b.n	19638 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   19616:	0783      	lsls	r3, r0, #30
   19618:	d001      	beq.n	1961e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1961a:	2a06      	cmp	r2, #6
   1961c:	d10e      	bne.n	1963c <onoff_request+0x76>
	parent->next = child;
   1961e:	2300      	movs	r3, #0
   19620:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   19622:	6863      	ldr	r3, [r4, #4]
   19624:	b993      	cbnz	r3, 1964c <onoff_request+0x86>
	list->head = node;
   19626:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1962a:	4615      	mov	r5, r2
   1962c:	b962      	cbnz	r2, 19648 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1962e:	460a      	mov	r2, r1
   19630:	4620      	mov	r0, r4
   19632:	2102      	movs	r1, #2
   19634:	f7f6 fa5c 	bl	faf0 <process_event>
		}
	}

	return rv;
}
   19638:	4628      	mov	r0, r5
   1963a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1963c:	2a05      	cmp	r2, #5
   1963e:	bf0c      	ite	eq
   19640:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   19644:	f06f 0504 	mvnne.w	r5, #4
   19648:	2300      	movs	r3, #0
   1964a:	e7d9      	b.n	19600 <onoff_request+0x3a>
	parent->next = child;
   1964c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1964e:	6066      	str	r6, [r4, #4]
}
   19650:	e7eb      	b.n	1962a <onoff_request+0x64>
		rv = -EAGAIN;
   19652:	f06f 050a 	mvn.w	r5, #10
   19656:	e7f7      	b.n	19648 <onoff_request+0x82>

00019658 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19658:	4604      	mov	r4, r0
   1965a:	b508      	push	{r3, lr}
   1965c:	4608      	mov	r0, r1
   1965e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19660:	461a      	mov	r2, r3
   19662:	47a0      	blx	r4
	return z_impl_k_current_get();
   19664:	f7ff f878 	bl	18758 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19668:	f7f7 fe3e 	bl	112e8 <z_impl_k_thread_abort>

0001966c <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1966c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1966e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19676:	bf2c      	ite	cs
   19678:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1967c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   19680:	4770      	bx	lr

00019682 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   19682:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   19686:	6880      	ldr	r0, [r0, #8]
   19688:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1968c:	bf2c      	ite	cs
   1968e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   19692:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   19696:	4770      	bx	lr

00019698 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   19698:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1969a:	2201      	movs	r2, #1
   1969c:	f7ff ffe6 	bl	1966c <chunk_field>
}
   196a0:	0840      	lsrs	r0, r0, #1
   196a2:	bd08      	pop	{r3, pc}

000196a4 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   196a4:	6883      	ldr	r3, [r0, #8]
   196a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   196aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   196ae:	d308      	bcc.n	196c2 <set_chunk_used+0x1e>
		if (used) {
   196b0:	684b      	ldr	r3, [r1, #4]
   196b2:	b11a      	cbz	r2, 196bc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   196b4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   196b8:	604b      	str	r3, [r1, #4]
   196ba:	4770      	bx	lr
   196bc:	f023 0301 	bic.w	r3, r3, #1
   196c0:	e7fa      	b.n	196b8 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   196c2:	884b      	ldrh	r3, [r1, #2]
   196c4:	b11a      	cbz	r2, 196ce <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   196c6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   196ca:	804b      	strh	r3, [r1, #2]
		}
	}
}
   196cc:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   196ce:	f023 0301 	bic.w	r3, r3, #1
   196d2:	e7fa      	b.n	196ca <set_chunk_used+0x26>

000196d4 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   196d4:	0053      	lsls	r3, r2, #1
   196d6:	2201      	movs	r2, #1
   196d8:	f7ff bfd3 	b.w	19682 <chunk_set>

000196dc <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   196dc:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   196de:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   196e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   196e4:	bf2c      	ite	cs
   196e6:	2002      	movcs	r0, #2
   196e8:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   196ea:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   196ec:	fab0 f080 	clz	r0, r0
}
   196f0:	f1c0 001f 	rsb	r0, r0, #31
   196f4:	4770      	bx	lr

000196f6 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   196f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196fa:	4616      	mov	r6, r2
   196fc:	4604      	mov	r4, r0
   196fe:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19700:	f7ff ffca 	bl	19698 <chunk_size>
   19704:	4631      	mov	r1, r6
   19706:	4605      	mov	r5, r0
   19708:	4620      	mov	r0, r4
   1970a:	f7ff ffc5 	bl	19698 <chunk_size>
   1970e:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   19710:	462a      	mov	r2, r5
   19712:	4639      	mov	r1, r7
   19714:	4620      	mov	r0, r4
   19716:	f7ff ffdd 	bl	196d4 <set_chunk_size>
	return c + chunk_size(h, c);
   1971a:	4631      	mov	r1, r6
   1971c:	4620      	mov	r0, r4
   1971e:	f7ff ffbb 	bl	19698 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19722:	462b      	mov	r3, r5
   19724:	1831      	adds	r1, r6, r0
   19726:	2200      	movs	r2, #0
   19728:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1972a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1972e:	f7ff bfa8 	b.w	19682 <chunk_set>

00019732 <split_chunks>:
{
   19732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19736:	4614      	mov	r4, r2
   19738:	4605      	mov	r5, r0
   1973a:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1973c:	f7ff ffac 	bl	19698 <chunk_size>
	size_t lsz = rc - lc;
   19740:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   19744:	1b37      	subs	r7, r6, r4
   19746:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   19748:	4642      	mov	r2, r8
   1974a:	4631      	mov	r1, r6
   1974c:	4628      	mov	r0, r5
   1974e:	f7ff ffc1 	bl	196d4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   19752:	463a      	mov	r2, r7
   19754:	4621      	mov	r1, r4
   19756:	4628      	mov	r0, r5
   19758:	f7ff ffbc 	bl	196d4 <set_chunk_size>
   1975c:	4643      	mov	r3, r8
   1975e:	2200      	movs	r2, #0
   19760:	4621      	mov	r1, r4
   19762:	4628      	mov	r0, r5
   19764:	f7ff ff8d 	bl	19682 <chunk_set>
	return c + chunk_size(h, c);
   19768:	4621      	mov	r1, r4
   1976a:	4628      	mov	r0, r5
   1976c:	f7ff ff94 	bl	19698 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19770:	463b      	mov	r3, r7
   19772:	1821      	adds	r1, r4, r0
   19774:	2200      	movs	r2, #0
   19776:	4628      	mov	r0, r5
}
   19778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1977c:	f7ff bf81 	b.w	19682 <chunk_set>

00019780 <free_list_remove_bidx>:
{
   19780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19784:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   19786:	2203      	movs	r2, #3
   19788:	460e      	mov	r6, r1
   1978a:	4604      	mov	r4, r0
   1978c:	f7ff ff6e 	bl	1966c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   19790:	4286      	cmp	r6, r0
   19792:	4605      	mov	r5, r0
   19794:	f107 0804 	add.w	r8, r7, #4
   19798:	d10b      	bne.n	197b2 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1979a:	2301      	movs	r3, #1
   1979c:	fa03 f707 	lsl.w	r7, r3, r7
   197a0:	68e3      	ldr	r3, [r4, #12]
   197a2:	ea23 0307 	bic.w	r3, r3, r7
   197a6:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   197a8:	2300      	movs	r3, #0
   197aa:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   197ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   197b2:	4631      	mov	r1, r6
   197b4:	2202      	movs	r2, #2
   197b6:	4620      	mov	r0, r4
   197b8:	f7ff ff58 	bl	1966c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   197bc:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   197be:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   197c0:	4601      	mov	r1, r0
		b->next = second;
   197c2:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   197c6:	4620      	mov	r0, r4
   197c8:	2203      	movs	r2, #3
   197ca:	f7ff ff5a 	bl	19682 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   197ce:	4633      	mov	r3, r6
   197d0:	4629      	mov	r1, r5
   197d2:	4620      	mov	r0, r4
   197d4:	2202      	movs	r2, #2
}
   197d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   197da:	f7ff bf52 	b.w	19682 <chunk_set>

000197de <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   197de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197e2:	4604      	mov	r4, r0
   197e4:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   197e6:	f7ff ff79 	bl	196dc <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   197ea:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   197ec:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   197ee:	4620      	mov	r0, r4
   197f0:	f7ff ff74 	bl	196dc <bucket_idx>
   197f4:	42a8      	cmp	r0, r5
   197f6:	da03      	bge.n	19800 <alloc_chunk+0x22>
		return 0;
   197f8:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   197fa:	4630      	mov	r0, r6
   197fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19800:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19804:	f8da 9010 	ldr.w	r9, [sl, #16]
   19808:	f1b9 0f00 	cmp.w	r9, #0
   1980c:	d019      	beq.n	19842 <alloc_chunk+0x64>
   1980e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   19810:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19814:	4620      	mov	r0, r4
   19816:	4631      	mov	r1, r6
   19818:	f7ff ff3e 	bl	19698 <chunk_size>
   1981c:	4540      	cmp	r0, r8
   1981e:	d305      	bcc.n	1982c <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   19820:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   19822:	4631      	mov	r1, r6
   19824:	4620      	mov	r0, r4
   19826:	f7ff ffab 	bl	19780 <free_list_remove_bidx>
		return c;
   1982a:	e7e6      	b.n	197fa <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1982c:	2203      	movs	r2, #3
   1982e:	4631      	mov	r1, r6
   19830:	4620      	mov	r0, r4
   19832:	f7ff ff1b 	bl	1966c <chunk_field>
		} while (--i && b->next != first);
   19836:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   19838:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1983c:	d001      	beq.n	19842 <alloc_chunk+0x64>
   1983e:	4581      	cmp	r9, r0
   19840:	d1e6      	bne.n	19810 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19842:	68e3      	ldr	r3, [r4, #12]
   19844:	3501      	adds	r5, #1
   19846:	f04f 32ff 	mov.w	r2, #4294967295
   1984a:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1984c:	401a      	ands	r2, r3
   1984e:	d0d3      	beq.n	197f8 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   19850:	fa92 f2a2 	rbit	r2, r2
   19854:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19858:	1d13      	adds	r3, r2, #4
   1985a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1985e:	e7e0      	b.n	19822 <alloc_chunk+0x44>

00019860 <free_list_add>:
{
   19860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19864:	4604      	mov	r4, r0
   19866:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   19868:	f7ff ff16 	bl	19698 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1986c:	68a3      	ldr	r3, [r4, #8]
   1986e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19872:	4601      	mov	r1, r0
   19874:	d301      	bcc.n	1987a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19876:	2801      	cmp	r0, #1
   19878:	d035      	beq.n	198e6 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1987a:	4620      	mov	r0, r4
   1987c:	f7ff ff2e 	bl	196dc <bucket_idx>
	if (b->next == 0U) {
   19880:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19884:	6916      	ldr	r6, [r2, #16]
   19886:	b99e      	cbnz	r6, 198b0 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19888:	2301      	movs	r3, #1
   1988a:	fa03 f000 	lsl.w	r0, r3, r0
   1988e:	68e3      	ldr	r3, [r4, #12]
   19890:	4303      	orrs	r3, r0
   19892:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19894:	4629      	mov	r1, r5
		b->next = c;
   19896:	6115      	str	r5, [r2, #16]
   19898:	462b      	mov	r3, r5
   1989a:	2202      	movs	r2, #2
   1989c:	4620      	mov	r0, r4
   1989e:	f7ff fef0 	bl	19682 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   198a2:	2203      	movs	r2, #3
   198a4:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   198a6:	4620      	mov	r0, r4
}
   198a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   198ac:	f7ff bee9 	b.w	19682 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   198b0:	2202      	movs	r2, #2
   198b2:	4631      	mov	r1, r6
   198b4:	4620      	mov	r0, r4
   198b6:	f7ff fed9 	bl	1966c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   198ba:	2202      	movs	r2, #2
   198bc:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   198be:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   198c0:	4629      	mov	r1, r5
   198c2:	4620      	mov	r0, r4
   198c4:	f7ff fedd 	bl	19682 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   198c8:	4633      	mov	r3, r6
   198ca:	2203      	movs	r2, #3
   198cc:	4629      	mov	r1, r5
   198ce:	4620      	mov	r0, r4
   198d0:	f7ff fed7 	bl	19682 <chunk_set>
   198d4:	2203      	movs	r2, #3
   198d6:	4639      	mov	r1, r7
   198d8:	462b      	mov	r3, r5
   198da:	4620      	mov	r0, r4
   198dc:	f7ff fed1 	bl	19682 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   198e0:	2202      	movs	r2, #2
   198e2:	4631      	mov	r1, r6
   198e4:	e7df      	b.n	198a6 <free_list_add+0x46>
   198e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000198ea <free_list_remove>:
{
   198ea:	b538      	push	{r3, r4, r5, lr}
   198ec:	4604      	mov	r4, r0
   198ee:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   198f0:	f7ff fed2 	bl	19698 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   198f4:	68a3      	ldr	r3, [r4, #8]
   198f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   198fa:	4601      	mov	r1, r0
   198fc:	d301      	bcc.n	19902 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   198fe:	2801      	cmp	r0, #1
   19900:	d009      	beq.n	19916 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19902:	4620      	mov	r0, r4
   19904:	f7ff feea 	bl	196dc <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   19908:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1990a:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1990c:	4620      	mov	r0, r4
}
   1990e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   19912:	f7ff bf35 	b.w	19780 <free_list_remove_bidx>
}
   19916:	bd38      	pop	{r3, r4, r5, pc}

00019918 <free_chunk>:
{
   19918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1991a:	460c      	mov	r4, r1
   1991c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1991e:	f7ff febb 	bl	19698 <chunk_size>
   19922:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19924:	2201      	movs	r2, #1
   19926:	4631      	mov	r1, r6
   19928:	4628      	mov	r0, r5
   1992a:	f7ff fe9f 	bl	1966c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1992e:	07c3      	lsls	r3, r0, #31
   19930:	d40c      	bmi.n	1994c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   19932:	4631      	mov	r1, r6
   19934:	4628      	mov	r0, r5
   19936:	f7ff ffd8 	bl	198ea <free_list_remove>
	return c + chunk_size(h, c);
   1993a:	4621      	mov	r1, r4
   1993c:	4628      	mov	r0, r5
   1993e:	f7ff feab 	bl	19698 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19942:	4621      	mov	r1, r4
   19944:	1822      	adds	r2, r4, r0
   19946:	4628      	mov	r0, r5
   19948:	f7ff fed5 	bl	196f6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1994c:	2200      	movs	r2, #0
   1994e:	4621      	mov	r1, r4
   19950:	4628      	mov	r0, r5
   19952:	f7ff fe8b 	bl	1966c <chunk_field>
   19956:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19958:	2201      	movs	r2, #1
   1995a:	4639      	mov	r1, r7
   1995c:	4628      	mov	r0, r5
   1995e:	f7ff fe85 	bl	1966c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19962:	f010 0601 	ands.w	r6, r0, #1
   19966:	d113      	bne.n	19990 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   19968:	4639      	mov	r1, r7
   1996a:	4628      	mov	r0, r5
   1996c:	f7ff ffbd 	bl	198ea <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   19970:	4621      	mov	r1, r4
   19972:	4632      	mov	r2, r6
   19974:	4628      	mov	r0, r5
   19976:	f7ff fe79 	bl	1966c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1997a:	4622      	mov	r2, r4
   1997c:	1a21      	subs	r1, r4, r0
   1997e:	4628      	mov	r0, r5
   19980:	f7ff feb9 	bl	196f6 <merge_chunks>
   19984:	4621      	mov	r1, r4
   19986:	4632      	mov	r2, r6
   19988:	4628      	mov	r0, r5
   1998a:	f7ff fe6f 	bl	1966c <chunk_field>
   1998e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   19990:	4621      	mov	r1, r4
   19992:	4628      	mov	r0, r5
}
   19994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   19998:	f7ff bf62 	b.w	19860 <free_list_add>

0001999c <sys_heap_free>:
{
   1999c:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1999e:	b191      	cbz	r1, 199c6 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   199a0:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   199a2:	6883      	ldr	r3, [r0, #8]
   199a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   199a8:	bf2c      	ite	cs
   199aa:	2408      	movcs	r4, #8
   199ac:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   199ae:	1b0c      	subs	r4, r1, r4
   199b0:	1a24      	subs	r4, r4, r0
   199b2:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   199b4:	4621      	mov	r1, r4
   199b6:	2200      	movs	r2, #0
   199b8:	f7ff fe74 	bl	196a4 <set_chunk_used>
	free_chunk(h, c);
   199bc:	4621      	mov	r1, r4
}
   199be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   199c2:	f7ff bfa9 	b.w	19918 <free_chunk>
}
   199c6:	bd10      	pop	{r4, pc}

000199c8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   199c8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   199ca:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   199cc:	b909      	cbnz	r1, 199d2 <sys_heap_alloc+0xa>
		return NULL;
   199ce:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   199d0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   199d2:	68ab      	ldr	r3, [r5, #8]
   199d4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   199d8:	d9f9      	bls.n	199ce <sys_heap_alloc+0x6>
   199da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   199de:	bf2c      	ite	cs
   199e0:	2208      	movcs	r2, #8
   199e2:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   199e4:	1dcc      	adds	r4, r1, #7
   199e6:	4414      	add	r4, r2
   199e8:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   199ea:	4621      	mov	r1, r4
   199ec:	4628      	mov	r0, r5
   199ee:	f7ff fef6 	bl	197de <alloc_chunk>
	if (c == 0U) {
   199f2:	4606      	mov	r6, r0
   199f4:	2800      	cmp	r0, #0
   199f6:	d0ea      	beq.n	199ce <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   199f8:	4601      	mov	r1, r0
   199fa:	4628      	mov	r0, r5
   199fc:	f7ff fe4c 	bl	19698 <chunk_size>
   19a00:	42a0      	cmp	r0, r4
   19a02:	d909      	bls.n	19a18 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   19a04:	4434      	add	r4, r6
   19a06:	4631      	mov	r1, r6
   19a08:	4628      	mov	r0, r5
   19a0a:	4622      	mov	r2, r4
   19a0c:	f7ff fe91 	bl	19732 <split_chunks>
		free_list_add(h, c + chunk_sz);
   19a10:	4621      	mov	r1, r4
   19a12:	4628      	mov	r0, r5
   19a14:	f7ff ff24 	bl	19860 <free_list_add>
	set_chunk_used(h, c, true);
   19a18:	4628      	mov	r0, r5
   19a1a:	2201      	movs	r2, #1
   19a1c:	4631      	mov	r1, r6
   19a1e:	f7ff fe41 	bl	196a4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19a22:	68ab      	ldr	r3, [r5, #8]
   19a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19a28:	bf2c      	ite	cs
   19a2a:	2008      	movcs	r0, #8
   19a2c:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19a2e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   19a32:	4428      	add	r0, r5
	return chunk_mem(h, c);
   19a34:	e7cc      	b.n	199d0 <sys_heap_alloc+0x8>

00019a36 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   19a36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   19a3a:	6806      	ldr	r6, [r0, #0]
{
   19a3c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   19a3e:	424a      	negs	r2, r1
   19a40:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   19a44:	ea31 0202 	bics.w	r2, r1, r2
   19a48:	68b5      	ldr	r5, [r6, #8]
{
   19a4a:	460b      	mov	r3, r1
	if (align != rewind) {
   19a4c:	d00f      	beq.n	19a6e <sys_heap_aligned_alloc+0x38>
   19a4e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   19a52:	bf34      	ite	cc
   19a54:	2104      	movcc	r1, #4
   19a56:	2108      	movcs	r1, #8
   19a58:	42b9      	cmp	r1, r7
   19a5a:	460a      	mov	r2, r1
   19a5c:	46b9      	mov	r9, r7
   19a5e:	bf28      	it	cs
   19a60:	463a      	movcs	r2, r7
		align -= rewind;
   19a62:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   19a64:	b994      	cbnz	r4, 19a8c <sys_heap_aligned_alloc+0x56>
		return NULL;
   19a66:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   19a68:	4628      	mov	r0, r5
   19a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19a6e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   19a72:	bf34      	ite	cc
   19a74:	2204      	movcc	r2, #4
   19a76:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   19a78:	4291      	cmp	r1, r2
   19a7a:	d804      	bhi.n	19a86 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   19a7c:	4621      	mov	r1, r4
}
   19a7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   19a82:	f7ff bfa1 	b.w	199c8 <sys_heap_alloc>
		rewind = 0;
   19a86:	f04f 0900 	mov.w	r9, #0
   19a8a:	e7eb      	b.n	19a64 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   19a8c:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   19a90:	d9e9      	bls.n	19a66 <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   19a92:	1de1      	adds	r1, r4, #7
   19a94:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   19a98:	4439      	add	r1, r7
   19a9a:	bf2c      	ite	cs
   19a9c:	2308      	movcs	r3, #8
   19a9e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19aa0:	1a89      	subs	r1, r1, r2
   19aa2:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   19aa4:	08c9      	lsrs	r1, r1, #3
   19aa6:	4630      	mov	r0, r6
   19aa8:	f7ff fe99 	bl	197de <alloc_chunk>
	if (c0 == 0) {
   19aac:	4680      	mov	r8, r0
   19aae:	2800      	cmp	r0, #0
   19ab0:	d0d9      	beq.n	19a66 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   19ab2:	68b3      	ldr	r3, [r6, #8]
   19ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19ab8:	bf2c      	ite	cs
   19aba:	2308      	movcs	r3, #8
   19abc:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   19abe:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   19ac2:	441d      	add	r5, r3
   19ac4:	1e7a      	subs	r2, r7, #1
   19ac6:	4435      	add	r5, r6
   19ac8:	427f      	negs	r7, r7
   19aca:	4415      	add	r5, r2
   19acc:	403d      	ands	r5, r7
   19ace:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19ad2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19ad4:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19ad6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19ad8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19ada:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   19ade:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   19ae0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19ae4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   19ae8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   19aec:	d208      	bcs.n	19b00 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   19aee:	4601      	mov	r1, r0
   19af0:	463a      	mov	r2, r7
   19af2:	4630      	mov	r0, r6
   19af4:	f7ff fe1d 	bl	19732 <split_chunks>
		free_list_add(h, c0);
   19af8:	4641      	mov	r1, r8
   19afa:	4630      	mov	r0, r6
   19afc:	f7ff feb0 	bl	19860 <free_list_add>
	return c + chunk_size(h, c);
   19b00:	4639      	mov	r1, r7
   19b02:	4630      	mov	r0, r6
   19b04:	f7ff fdc8 	bl	19698 <chunk_size>
   19b08:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   19b0a:	4284      	cmp	r4, r0
   19b0c:	d208      	bcs.n	19b20 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   19b0e:	4639      	mov	r1, r7
   19b10:	4630      	mov	r0, r6
   19b12:	4622      	mov	r2, r4
   19b14:	f7ff fe0d 	bl	19732 <split_chunks>
		free_list_add(h, c_end);
   19b18:	4621      	mov	r1, r4
   19b1a:	4630      	mov	r0, r6
   19b1c:	f7ff fea0 	bl	19860 <free_list_add>
	set_chunk_used(h, c, true);
   19b20:	2201      	movs	r2, #1
   19b22:	4639      	mov	r1, r7
   19b24:	4630      	mov	r0, r6
   19b26:	f7ff fdbd 	bl	196a4 <set_chunk_used>
	return mem;
   19b2a:	e79d      	b.n	19a68 <sys_heap_aligned_alloc+0x32>

00019b2c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   19b2c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   19b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b32:	bf2c      	ite	cs
   19b34:	2508      	movcs	r5, #8
   19b36:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   19b38:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19b3a:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19b3c:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19b3e:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19b42:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   19b46:	2200      	movs	r2, #0
   19b48:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   19b4a:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   19b4c:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   19b4e:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   19b50:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   19b54:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19b56:	4629      	mov	r1, r5
	h->len = buf_sz;
   19b58:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   19b5a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19b5c:	4620      	mov	r0, r4
   19b5e:	f7ff fdbd 	bl	196dc <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   19b62:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19b64:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19b66:	1c41      	adds	r1, r0, #1
   19b68:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   19b6a:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   19b6e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   19b70:	428b      	cmp	r3, r1
   19b72:	db29      	blt.n	19bc8 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   19b74:	4632      	mov	r2, r6
   19b76:	4620      	mov	r0, r4
   19b78:	2100      	movs	r1, #0
   19b7a:	f7ff fdab 	bl	196d4 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   19b7e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   19b80:	4620      	mov	r0, r4
   19b82:	2201      	movs	r2, #1
   19b84:	2100      	movs	r1, #0
   19b86:	f7ff fd8d 	bl	196a4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   19b8a:	463a      	mov	r2, r7
   19b8c:	4631      	mov	r1, r6
   19b8e:	f7ff fda1 	bl	196d4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19b92:	4633      	mov	r3, r6
   19b94:	4631      	mov	r1, r6
   19b96:	4620      	mov	r0, r4
   19b98:	2200      	movs	r2, #0
   19b9a:	f7ff fd72 	bl	19682 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   19b9e:	4629      	mov	r1, r5
   19ba0:	4620      	mov	r0, r4
   19ba2:	2200      	movs	r2, #0
   19ba4:	f7ff fd96 	bl	196d4 <set_chunk_size>
   19ba8:	463b      	mov	r3, r7
   19baa:	4629      	mov	r1, r5
   19bac:	4620      	mov	r0, r4
   19bae:	2200      	movs	r2, #0
   19bb0:	f7ff fd67 	bl	19682 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   19bb4:	4629      	mov	r1, r5
   19bb6:	4620      	mov	r0, r4
   19bb8:	2201      	movs	r2, #1
   19bba:	f7ff fd73 	bl	196a4 <set_chunk_used>

	free_list_add(h, chunk0_size);
   19bbe:	4631      	mov	r1, r6
}
   19bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   19bc4:	f7ff be4c 	b.w	19860 <free_list_add>
		h->buckets[i].next = 0;
   19bc8:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   19bcc:	3301      	adds	r3, #1
   19bce:	e7cf      	b.n	19b70 <sys_heap_init+0x44>

00019bd0 <encode_uint>:
{
   19bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bd4:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   19bd6:	78d3      	ldrb	r3, [r2, #3]
{
   19bd8:	4614      	mov	r4, r2
	switch (specifier) {
   19bda:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19bdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   19be0:	4606      	mov	r6, r0
   19be2:	460f      	mov	r7, r1
   19be4:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   19be6:	d02d      	beq.n	19c44 <encode_uint+0x74>
   19be8:	d828      	bhi.n	19c3c <encode_uint+0x6c>
		return 16;
   19bea:	2b58      	cmp	r3, #88	; 0x58
   19bec:	bf14      	ite	ne
   19bee:	250a      	movne	r5, #10
   19bf0:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   19bf2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   19bf6:	46aa      	mov	sl, r5
   19bf8:	f04f 0b00 	mov.w	fp, #0
   19bfc:	4652      	mov	r2, sl
   19bfe:	465b      	mov	r3, fp
   19c00:	4630      	mov	r0, r6
   19c02:	4639      	mov	r1, r7
   19c04:	f7e6 fcf0 	bl	5e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19c08:	2a09      	cmp	r2, #9
   19c0a:	b2d3      	uxtb	r3, r2
   19c0c:	d81f      	bhi.n	19c4e <encode_uint+0x7e>
   19c0e:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19c10:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19c12:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   19c14:	bf08      	it	eq
   19c16:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19c18:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   19c1c:	d301      	bcc.n	19c22 <encode_uint+0x52>
   19c1e:	45c8      	cmp	r8, r9
   19c20:	d812      	bhi.n	19c48 <encode_uint+0x78>
	if (conv->flag_hash) {
   19c22:	7823      	ldrb	r3, [r4, #0]
   19c24:	069b      	lsls	r3, r3, #26
   19c26:	d505      	bpl.n	19c34 <encode_uint+0x64>
		if (radix == 8) {
   19c28:	2d08      	cmp	r5, #8
   19c2a:	d116      	bne.n	19c5a <encode_uint+0x8a>
			conv->altform_0 = true;
   19c2c:	78a3      	ldrb	r3, [r4, #2]
   19c2e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19c32:	70a3      	strb	r3, [r4, #2]
}
   19c34:	4640      	mov	r0, r8
   19c36:	b003      	add	sp, #12
   19c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19c3c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19c40:	2b70      	cmp	r3, #112	; 0x70
   19c42:	e7d3      	b.n	19bec <encode_uint+0x1c>
	switch (specifier) {
   19c44:	2508      	movs	r5, #8
   19c46:	e7d4      	b.n	19bf2 <encode_uint+0x22>
		value /= radix;
   19c48:	4606      	mov	r6, r0
   19c4a:	460f      	mov	r7, r1
   19c4c:	e7d6      	b.n	19bfc <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19c4e:	9a01      	ldr	r2, [sp, #4]
   19c50:	2a19      	cmp	r2, #25
   19c52:	bf94      	ite	ls
   19c54:	3337      	addls	r3, #55	; 0x37
   19c56:	3357      	addhi	r3, #87	; 0x57
   19c58:	e7da      	b.n	19c10 <encode_uint+0x40>
		} else if (radix == 16) {
   19c5a:	2d10      	cmp	r5, #16
   19c5c:	d1ea      	bne.n	19c34 <encode_uint+0x64>
			conv->altform_0c = true;
   19c5e:	78a3      	ldrb	r3, [r4, #2]
   19c60:	f043 0310 	orr.w	r3, r3, #16
   19c64:	e7e5      	b.n	19c32 <encode_uint+0x62>

00019c66 <outs>:
{
   19c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c6a:	4607      	mov	r7, r0
   19c6c:	4688      	mov	r8, r1
   19c6e:	4615      	mov	r5, r2
   19c70:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19c72:	4614      	mov	r4, r2
   19c74:	42b4      	cmp	r4, r6
   19c76:	eba4 0005 	sub.w	r0, r4, r5
   19c7a:	d302      	bcc.n	19c82 <outs+0x1c>
   19c7c:	b93e      	cbnz	r6, 19c8e <outs+0x28>
   19c7e:	7823      	ldrb	r3, [r4, #0]
   19c80:	b12b      	cbz	r3, 19c8e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19c82:	f814 0b01 	ldrb.w	r0, [r4], #1
   19c86:	4641      	mov	r1, r8
   19c88:	47b8      	blx	r7
		if (rc < 0) {
   19c8a:	2800      	cmp	r0, #0
   19c8c:	daf2      	bge.n	19c74 <outs+0xe>
}
   19c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019c92 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19c92:	4770      	bx	lr

00019c94 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   19c94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19c98:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   19c9c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   19c9e:	4640      	mov	r0, r8
{
   19ca0:	461f      	mov	r7, r3
   19ca2:	460c      	mov	r4, r1
   19ca4:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   19ca6:	f001 f98b 	bl	1afc0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19caa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19cae:	9300      	str	r3, [sp, #0]
   19cb0:	b280      	uxth	r0, r0
   19cb2:	e9cd 8001 	strd	r8, r0, [sp, #4]
   19cb6:	463b      	mov	r3, r7
   19cb8:	4632      	mov	r2, r6
   19cba:	4621      	mov	r1, r4
   19cbc:	4628      	mov	r0, r5
   19cbe:	f003 f875 	bl	1cdac <bt_gatt_attr_read>
}
   19cc2:	b004      	add	sp, #16
   19cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019cc8 <blvl_ccc_cfg_changed>:
}
   19cc8:	4770      	bx	lr

00019cca <bas_init>:
}
   19cca:	2000      	movs	r0, #0
   19ccc:	4770      	bx	lr

00019cce <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   19cce:	2200      	movs	r2, #0
   19cd0:	8002      	strh	r2, [r0, #0]
   19cd2:	6042      	str	r2, [r0, #4]
}
   19cd4:	4770      	bx	lr

00019cd6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19cd6:	6902      	ldr	r2, [r0, #16]
   19cd8:	b2cb      	uxtb	r3, r1
   19cda:	210c      	movs	r1, #12
   19cdc:	fb03 2101 	mla	r1, r3, r1, r2
   19ce0:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   19ce2:	f000 0007 	and.w	r0, r0, #7
   19ce6:	4770      	bx	lr

00019ce8 <set_off_state>:
	__asm__ volatile(
   19ce8:	f04f 0340 	mov.w	r3, #64	; 0x40
   19cec:	f3ef 8211 	mrs	r2, BASEPRI
   19cf0:	f383 8811 	msr	BASEPRI, r3
   19cf4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19cf8:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19cfa:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   19cfe:	d001      	beq.n	19d04 <set_off_state+0x1c>
   19d00:	428b      	cmp	r3, r1
   19d02:	d107      	bne.n	19d14 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19d04:	2301      	movs	r3, #1
   19d06:	6003      	str	r3, [r0, #0]
	int err = 0;
   19d08:	2000      	movs	r0, #0
	__asm__ volatile(
   19d0a:	f382 8811 	msr	BASEPRI, r2
   19d0e:	f3bf 8f6f 	isb	sy
}
   19d12:	4770      	bx	lr
		err = -EPERM;
   19d14:	f04f 30ff 	mov.w	r0, #4294967295
   19d18:	e7f7      	b.n	19d0a <set_off_state+0x22>

00019d1a <set_starting_state>:
{
   19d1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   19d1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d20:	f3ef 8211 	mrs	r2, BASEPRI
   19d24:	f383 8811 	msr	BASEPRI, r3
   19d28:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19d2c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19d2e:	f003 0407 	and.w	r4, r3, #7
   19d32:	2c01      	cmp	r4, #1
   19d34:	d106      	bne.n	19d44 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   19d36:	6001      	str	r1, [r0, #0]
	int err = 0;
   19d38:	2000      	movs	r0, #0
	__asm__ volatile(
   19d3a:	f382 8811 	msr	BASEPRI, r2
   19d3e:	f3bf 8f6f 	isb	sy
}
   19d42:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   19d44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   19d48:	428b      	cmp	r3, r1
		err = -EALREADY;
   19d4a:	bf14      	ite	ne
   19d4c:	f04f 30ff 	movne.w	r0, #4294967295
   19d50:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   19d54:	e7f1      	b.n	19d3a <set_starting_state+0x20>

00019d56 <set_on_state>:
	__asm__ volatile(
   19d56:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d5a:	f3ef 8211 	mrs	r2, BASEPRI
   19d5e:	f383 8811 	msr	BASEPRI, r3
   19d62:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   19d66:	6803      	ldr	r3, [r0, #0]
   19d68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19d6c:	f043 0302 	orr.w	r3, r3, #2
   19d70:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19d72:	f382 8811 	msr	BASEPRI, r2
   19d76:	f3bf 8f6f 	isb	sy
}
   19d7a:	4770      	bx	lr

00019d7c <onoff_started_callback>:
	return &data->mgr[type];
   19d7c:	6900      	ldr	r0, [r0, #16]
{
   19d7e:	b410      	push	{r4}
	return &data->mgr[type];
   19d80:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19d82:	241c      	movs	r4, #28
   19d84:	fb03 0004 	mla	r0, r3, r4, r0
   19d88:	2100      	movs	r1, #0
}
   19d8a:	bc10      	pop	{r4}
	notify(mgr, 0);
   19d8c:	4710      	bx	r2

00019d8e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19d8e:	2000      	movs	r0, #0
   19d90:	f003 bfee 	b.w	1dd70 <nrfx_clock_stop>

00019d94 <blocking_start_callback>:
{
   19d94:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19d96:	f7fe bd59 	b.w	1884c <z_impl_k_sem_give>

00019d9a <api_stop>:
{
   19d9a:	b538      	push	{r3, r4, r5, lr}
   19d9c:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   19d9e:	230c      	movs	r3, #12
{
   19da0:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   19da2:	4363      	muls	r3, r4
   19da4:	6900      	ldr	r0, [r0, #16]
   19da6:	3340      	adds	r3, #64	; 0x40
   19da8:	2180      	movs	r1, #128	; 0x80
   19daa:	4418      	add	r0, r3
   19dac:	f7ff ff9c 	bl	19ce8 <set_off_state>
	if (err < 0) {
   19db0:	2800      	cmp	r0, #0
   19db2:	db05      	blt.n	19dc0 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   19db4:	6869      	ldr	r1, [r5, #4]
   19db6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   19dba:	6863      	ldr	r3, [r4, #4]
   19dbc:	4798      	blx	r3
	return 0;
   19dbe:	2000      	movs	r0, #0
}
   19dc0:	bd38      	pop	{r3, r4, r5, pc}

00019dc2 <api_start>:
{
   19dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19dc6:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   19dc8:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   19dca:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   19dcc:	436f      	muls	r7, r5
{
   19dce:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   19dd0:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19dd4:	2180      	movs	r1, #128	; 0x80
   19dd6:	4420      	add	r0, r4
{
   19dd8:	4690      	mov	r8, r2
   19dda:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   19ddc:	f7ff ff9d 	bl	19d1a <set_starting_state>
	if (err < 0) {
   19de0:	2800      	cmp	r0, #0
   19de2:	db07      	blt.n	19df4 <api_start+0x32>
	subdata->cb = cb;
   19de4:	443c      	add	r4, r7
	subdata->user_data = user_data;
   19de6:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19dea:	6873      	ldr	r3, [r6, #4]
   19dec:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   19df0:	4798      	blx	r3
	return 0;
   19df2:	2000      	movs	r0, #0
}
   19df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019df8 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   19df8:	4770      	bx	lr

00019dfa <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   19dfa:	4770      	bx	lr

00019dfc <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   19dfc:	b538      	push	{r3, r4, r5, lr}
   19dfe:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   19e00:	42ab      	cmp	r3, r5
{
   19e02:	4611      	mov	r1, r2
   19e04:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   19e06:	d804      	bhi.n	19e12 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   19e08:	461a      	mov	r2, r3
   19e0a:	f001 f905 	bl	1b018 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   19e0e:	4620      	mov	r0, r4
   19e10:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19e12:	2400      	movs	r4, #0
   19e14:	e7fb      	b.n	19e0e <_copy+0x12>

00019e16 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   19e16:	f001 b92a 	b.w	1b06e <memset>

00019e1a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   19e1a:	09c3      	lsrs	r3, r0, #7
   19e1c:	005a      	lsls	r2, r3, #1
   19e1e:	4413      	add	r3, r2
   19e20:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19e24:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   19e28:	b2c0      	uxtb	r0, r0
   19e2a:	4770      	bx	lr

00019e2c <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   19e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e30:	4606      	mov	r6, r0
   19e32:	b0a9      	sub	sp, #164	; 0xa4
   19e34:	4688      	mov	r8, r1
   19e36:	4614      	mov	r4, r2
   19e38:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   19e3a:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   19e3e:	f7f6 fe79 	bl	10b34 <uECC_get_rng>
		if (!rng_function ||
   19e42:	4603      	mov	r3, r0
   19e44:	2800      	cmp	r0, #0
   19e46:	d03e      	beq.n	19ec6 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   19e48:	2140      	movs	r1, #64	; 0x40
   19e4a:	a808      	add	r0, sp, #32
   19e4c:	4798      	blx	r3
		if (!rng_function ||
   19e4e:	b3d0      	cbz	r0, 19ec6 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   19e50:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   19e54:	f112 031f 	adds.w	r3, r2, #31
   19e58:	bf48      	it	mi
   19e5a:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   19e5e:	466d      	mov	r5, sp
   19e60:	464a      	mov	r2, r9
   19e62:	a908      	add	r1, sp, #32
   19e64:	4628      	mov	r0, r5
   19e66:	f343 1347 	sbfx	r3, r3, #5, #8
   19e6a:	f000 fa03 	bl	1a274 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   19e6e:	4622      	mov	r2, r4
   19e70:	4629      	mov	r1, r5
   19e72:	a818      	add	r0, sp, #96	; 0x60
   19e74:	f000 fe19 	bl	1aaaa <EccPoint_compute_public_key>
   19e78:	b318      	cbz	r0, 19ec2 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   19e7a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   19e7e:	1dd9      	adds	r1, r3, #7
   19e80:	bf48      	it	mi
   19e82:	f103 010e 	addmi.w	r1, r3, #14
   19e86:	462a      	mov	r2, r5
   19e88:	4640      	mov	r0, r8
   19e8a:	10c9      	asrs	r1, r1, #3
   19e8c:	f000 fe35 	bl	1aafa <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   19e90:	f994 1001 	ldrsb.w	r1, [r4, #1]
   19e94:	aa18      	add	r2, sp, #96	; 0x60
   19e96:	4630      	mov	r0, r6
   19e98:	f000 fe2f 	bl	1aafa <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   19e9c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   19ea0:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   19ea4:	ab18      	add	r3, sp, #96	; 0x60
   19ea6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   19eaa:	1870      	adds	r0, r6, r1
   19eac:	f000 fe25 	bl	1aafa <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   19eb0:	2220      	movs	r2, #32
   19eb2:	2100      	movs	r1, #0
   19eb4:	4628      	mov	r0, r5
   19eb6:	f001 f8da 	bl	1b06e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   19eba:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   19ebc:	b029      	add	sp, #164	; 0xa4
   19ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   19ec2:	3f01      	subs	r7, #1
   19ec4:	d1bb      	bne.n	19e3e <uECC_make_key+0x12>
        		return 0;
   19ec6:	2000      	movs	r0, #0
   19ec8:	e7f8      	b.n	19ebc <uECC_make_key+0x90>

00019eca <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   19eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ece:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   19ed0:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   19ed4:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   19ed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   19edc:	b0a4      	sub	sp, #144	; 0x90
   19ede:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   19ee0:	1dda      	adds	r2, r3, #7
   19ee2:	bf48      	it	mi
   19ee4:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   19ee8:	ad04      	add	r5, sp, #16
{
   19eea:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   19eec:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   19eee:	4628      	mov	r0, r5
   19ef0:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   19ef2:	9502      	str	r5, [sp, #8]
   19ef4:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   19ef6:	f000 fe14 	bl	1ab22 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   19efa:	463a      	mov	r2, r7
   19efc:	4649      	mov	r1, r9
   19efe:	a814      	add	r0, sp, #80	; 0x50
   19f00:	f000 fe0f 	bl	1ab22 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   19f04:	ab14      	add	r3, sp, #80	; 0x50
   19f06:	eb09 0107 	add.w	r1, r9, r7
   19f0a:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   19f0e:	463a      	mov	r2, r7
   19f10:	f000 fe07 	bl	1ab22 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   19f14:	4623      	mov	r3, r4
   19f16:	4632      	mov	r2, r6
   19f18:	4629      	mov	r1, r5
   19f1a:	4628      	mov	r0, r5
   19f1c:	f000 fd99 	bl	1aa52 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   19f20:	fab0 f080 	clz	r0, r0
   19f24:	9401      	str	r4, [sp, #4]
   19f26:	ab24      	add	r3, sp, #144	; 0x90
   19f28:	0940      	lsrs	r0, r0, #5
   19f2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19f2e:	8863      	ldrh	r3, [r4, #2]
   19f30:	3301      	adds	r3, #1
   19f32:	b21b      	sxth	r3, r3
   19f34:	9300      	str	r3, [sp, #0]
   19f36:	a914      	add	r1, sp, #80	; 0x50
   19f38:	2300      	movs	r3, #0
   19f3a:	f850 2c88 	ldr.w	r2, [r0, #-136]
   19f3e:	4608      	mov	r0, r1
   19f40:	f000 fcb8 	bl	1a8b4 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   19f44:	aa14      	add	r2, sp, #80	; 0x50
   19f46:	4639      	mov	r1, r7
   19f48:	4640      	mov	r0, r8
   19f4a:	f000 fdd6 	bl	1aafa <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   19f4e:	4621      	mov	r1, r4
   19f50:	a814      	add	r0, sp, #80	; 0x50
   19f52:	f000 fc24 	bl	1a79e <EccPoint_isZero>
   19f56:	af02      	add	r7, sp, #8
   19f58:	4604      	mov	r4, r0
   19f5a:	2208      	movs	r2, #8
   19f5c:	2100      	movs	r1, #0
   19f5e:	4638      	mov	r0, r7
   19f60:	f001 f885 	bl	1b06e <memset>
   19f64:	2220      	movs	r2, #32
   19f66:	2100      	movs	r1, #0
   19f68:	4630      	mov	r0, r6
   19f6a:	f001 f880 	bl	1b06e <memset>
   19f6e:	2220      	movs	r2, #32
   19f70:	2100      	movs	r1, #0
   19f72:	4628      	mov	r0, r5
   19f74:	f001 f87b 	bl	1b06e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   19f78:	fab4 f084 	clz	r0, r4
   19f7c:	0940      	lsrs	r0, r0, #5
   19f7e:	b024      	add	sp, #144	; 0x90
   19f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019f84 <uECC_vli_add>:
{
   19f84:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   19f86:	2400      	movs	r4, #0
{
   19f88:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   19f8a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   19f8c:	b265      	sxtb	r5, r4
   19f8e:	42ab      	cmp	r3, r5
   19f90:	dc00      	bgt.n	19f94 <uECC_vli_add+0x10>
}
   19f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   19f94:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   19f98:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   19f9c:	443d      	add	r5, r7
   19f9e:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   19fa0:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   19fa2:	bf8c      	ite	hi
   19fa4:	2701      	movhi	r7, #1
   19fa6:	2700      	movls	r7, #0
		result[i] = sum;
   19fa8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   19fac:	bf18      	it	ne
   19fae:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   19fb0:	3401      	adds	r4, #1
   19fb2:	e7eb      	b.n	19f8c <uECC_vli_add+0x8>

00019fb4 <uECC_vli_rshift1>:
	vli += num_words;
   19fb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   19fb8:	2300      	movs	r3, #0
	while (vli-- > end) {
   19fba:	4288      	cmp	r0, r1
   19fbc:	d300      	bcc.n	19fc0 <uECC_vli_rshift1+0xc>
}
   19fbe:	4770      	bx	lr
		uECC_word_t temp = *vli;
   19fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   19fc4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   19fc8:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   19fca:	07d3      	lsls	r3, r2, #31
   19fcc:	e7f5      	b.n	19fba <uECC_vli_rshift1+0x6>

00019fce <vli_modInv_update>:
	if (!EVEN(uv)) {
   19fce:	6803      	ldr	r3, [r0, #0]
{
   19fd0:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   19fd2:	f013 0601 	ands.w	r6, r3, #1
{
   19fd6:	4605      	mov	r5, r0
   19fd8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   19fda:	d005      	beq.n	19fe8 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   19fdc:	4613      	mov	r3, r2
   19fde:	460a      	mov	r2, r1
   19fe0:	4601      	mov	r1, r0
   19fe2:	f7ff ffcf 	bl	19f84 <uECC_vli_add>
   19fe6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   19fe8:	4621      	mov	r1, r4
   19fea:	4628      	mov	r0, r5
   19fec:	f7ff ffe2 	bl	19fb4 <uECC_vli_rshift1>
	if (carry) {
   19ff0:	b146      	cbz	r6, 1a004 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   19ff2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   19ff6:	3a01      	subs	r2, #1
   19ff8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   19ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a000:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1a004:	bd70      	pop	{r4, r5, r6, pc}

0001a006 <uECC_vli_mult>:
{
   1a006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1a00a:	2500      	movs	r5, #0
{
   1a00c:	b087      	sub	sp, #28
   1a00e:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1a012:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1a014:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1a016:	fa4f f885 	sxtb.w	r8, r5
   1a01a:	4543      	cmp	r3, r8
   1a01c:	dc16      	bgt.n	1a04c <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1a01e:	f04f 35ff 	mov.w	r5, #4294967295
   1a022:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1a026:	9502      	str	r5, [sp, #8]
   1a028:	f04f 0a00 	mov.w	sl, #0
   1a02c:	9e02      	ldr	r6, [sp, #8]
   1a02e:	fa53 fe8a 	uxtab	lr, r3, sl
   1a032:	fa4f fe8e 	sxtb.w	lr, lr
   1a036:	45b6      	cmp	lr, r6
   1a038:	fa5f f58a 	uxtb.w	r5, sl
   1a03c:	db2d      	blt.n	1a09a <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1a03e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1a042:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1a046:	b007      	add	sp, #28
   1a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a04c:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1a04e:	f04f 0c00 	mov.w	ip, #0
   1a052:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1a056:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1a058:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1a05c:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1a05e:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1a062:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1a066:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1a06a:	fba7 ab06 	umull	sl, fp, r7, r6
   1a06e:	eb1a 0601 	adds.w	r6, sl, r1
   1a072:	f10c 0c01 	add.w	ip, ip, #1
   1a076:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1a07a:	fa4f fa8c 	sxtb.w	sl, ip
   1a07e:	bf2c      	ite	cs
   1a080:	2201      	movcs	r2, #1
   1a082:	2200      	movcc	r2, #0
   1a084:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1a086:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1a088:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1a08a:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1a08c:	dde4      	ble.n	1a058 <uECC_vli_mult+0x52>
		result[k] = r0;
   1a08e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1a092:	463a      	mov	r2, r7
   1a094:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1a096:	4674      	mov	r4, lr
   1a098:	e7bd      	b.n	1a016 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1a09a:	3501      	adds	r5, #1
   1a09c:	9900      	ldr	r1, [sp, #0]
   1a09e:	9e01      	ldr	r6, [sp, #4]
   1a0a0:	fa4f fc85 	sxtb.w	ip, r5
   1a0a4:	ebae 0b0c 	sub.w	fp, lr, ip
   1a0a8:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1a0ac:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1a0b0:	4621      	mov	r1, r4
   1a0b2:	2400      	movs	r4, #0
   1a0b4:	459c      	cmp	ip, r3
   1a0b6:	db05      	blt.n	1a0c4 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1a0b8:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1a0bc:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1a0c0:	460a      	mov	r2, r1
   1a0c2:	e7b3      	b.n	1a02c <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1a0c4:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1a0c8:	f855 7b04 	ldr.w	r7, [r5], #4
   1a0cc:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1a0d0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1a0d4:	fba7 6706 	umull	r6, r7, r7, r6
   1a0d8:	eb16 0801 	adds.w	r8, r6, r1
   1a0dc:	eb57 0902 	adcs.w	r9, r7, r2
   1a0e0:	bf2c      	ite	cs
   1a0e2:	2201      	movcs	r2, #1
   1a0e4:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1a0e6:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1a0ea:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1a0ec:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1a0ee:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1a0f0:	fa4f fc8c 	sxtb.w	ip, ip
   1a0f4:	e7de      	b.n	1a0b4 <uECC_vli_mult+0xae>

0001a0f6 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1a0f6:	2300      	movs	r3, #0
{
   1a0f8:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1a0fa:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1a0fc:	b25a      	sxtb	r2, r3
   1a0fe:	4291      	cmp	r1, r2
   1a100:	dc00      	bgt.n	1a104 <uECC_vli_clear+0xe>
}
   1a102:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1a104:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1a108:	3301      	adds	r3, #1
   1a10a:	e7f7      	b.n	1a0fc <uECC_vli_clear+0x6>

0001a10c <uECC_vli_isZero>:
{
   1a10c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1a10e:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1a110:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1a112:	b25c      	sxtb	r4, r3
   1a114:	42a1      	cmp	r1, r4
   1a116:	dc03      	bgt.n	1a120 <uECC_vli_isZero+0x14>
}
   1a118:	fab2 f082 	clz	r0, r2
   1a11c:	0940      	lsrs	r0, r0, #5
   1a11e:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1a120:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1a124:	3301      	adds	r3, #1
   1a126:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1a128:	e7f3      	b.n	1a112 <uECC_vli_isZero+0x6>

0001a12a <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a12a:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1a12c:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a12e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1a132:	f001 011f 	and.w	r1, r1, #31
   1a136:	fa03 f101 	lsl.w	r1, r3, r1
}
   1a13a:	4008      	ands	r0, r1
   1a13c:	4770      	bx	lr

0001a13e <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1a13e:	3901      	subs	r1, #1
   1a140:	b24b      	sxtb	r3, r1
{
   1a142:	4602      	mov	r2, r0
   1a144:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1a148:	2b00      	cmp	r3, #0
   1a14a:	da03      	bge.n	1a154 <uECC_vli_numBits+0x16>
	return (i + 1);
   1a14c:	3301      	adds	r3, #1
   1a14e:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1a150:	b938      	cbnz	r0, 1a162 <uECC_vli_numBits+0x24>
   1a152:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1a154:	f851 0904 	ldr.w	r0, [r1], #-4
   1a158:	2800      	cmp	r0, #0
   1a15a:	d1f7      	bne.n	1a14c <uECC_vli_numBits+0xe>
   1a15c:	3b01      	subs	r3, #1
   1a15e:	b25b      	sxtb	r3, r3
   1a160:	e7f2      	b.n	1a148 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1a162:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1a166:	3b01      	subs	r3, #1
   1a168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1a16c:	2300      	movs	r3, #0
   1a16e:	b922      	cbnz	r2, 1a17a <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1a170:	3801      	subs	r0, #1
   1a172:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a176:	b200      	sxth	r0, r0
}
   1a178:	4770      	bx	lr
		digit >>= 1;
   1a17a:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1a17c:	3301      	adds	r3, #1
   1a17e:	e7f6      	b.n	1a16e <uECC_vli_numBits+0x30>

0001a180 <uECC_vli_set>:
{
   1a180:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1a182:	2300      	movs	r3, #0
   1a184:	b25c      	sxtb	r4, r3
   1a186:	42a2      	cmp	r2, r4
   1a188:	dc00      	bgt.n	1a18c <uECC_vli_set+0xc>
}
   1a18a:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1a18c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1a190:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1a194:	3301      	adds	r3, #1
   1a196:	e7f5      	b.n	1a184 <uECC_vli_set+0x4>

0001a198 <uECC_vli_cmp_unsafe>:
{
   1a198:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1a19a:	3a01      	subs	r2, #1
   1a19c:	b253      	sxtb	r3, r2
   1a19e:	009a      	lsls	r2, r3, #2
   1a1a0:	2b00      	cmp	r3, #0
   1a1a2:	da01      	bge.n	1a1a8 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1a1a4:	2000      	movs	r0, #0
}
   1a1a6:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1a1a8:	5885      	ldr	r5, [r0, r2]
   1a1aa:	588c      	ldr	r4, [r1, r2]
   1a1ac:	42a5      	cmp	r5, r4
   1a1ae:	d805      	bhi.n	1a1bc <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1a1b0:	f1a2 0204 	sub.w	r2, r2, #4
   1a1b4:	d304      	bcc.n	1a1c0 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1a1b6:	3b01      	subs	r3, #1
   1a1b8:	b25b      	sxtb	r3, r3
   1a1ba:	e7f1      	b.n	1a1a0 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1a1bc:	2001      	movs	r0, #1
   1a1be:	e7f2      	b.n	1a1a6 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1a1c0:	f04f 30ff 	mov.w	r0, #4294967295
   1a1c4:	e7ef      	b.n	1a1a6 <uECC_vli_cmp_unsafe+0xe>

0001a1c6 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1a1c6:	3a01      	subs	r2, #1
   1a1c8:	b253      	sxtb	r3, r2
{
   1a1ca:	b570      	push	{r4, r5, r6, lr}
   1a1cc:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1a1ce:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1a1d0:	2b00      	cmp	r3, #0
   1a1d2:	da03      	bge.n	1a1dc <uECC_vli_equal+0x16>
}
   1a1d4:	1e20      	subs	r0, r4, #0
   1a1d6:	bf18      	it	ne
   1a1d8:	2001      	movne	r0, #1
   1a1da:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1a1dc:	5885      	ldr	r5, [r0, r2]
   1a1de:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1a1e0:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1a1e2:	4075      	eors	r5, r6
   1a1e4:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1a1e6:	b25b      	sxtb	r3, r3
   1a1e8:	3a04      	subs	r2, #4
   1a1ea:	e7f1      	b.n	1a1d0 <uECC_vli_equal+0xa>

0001a1ec <uECC_vli_sub>:
{
   1a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1a1ee:	2400      	movs	r4, #0
{
   1a1f0:	4606      	mov	r6, r0
   1a1f2:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1a1f4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1a1f6:	b265      	sxtb	r5, r4
   1a1f8:	45ac      	cmp	ip, r5
   1a1fa:	dc00      	bgt.n	1a1fe <uECC_vli_sub+0x12>
}
   1a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1a1fe:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1a202:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1a206:	1a3d      	subs	r5, r7, r0
   1a208:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1a20a:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1a20c:	bf34      	ite	cc
   1a20e:	2701      	movcc	r7, #1
   1a210:	2700      	movcs	r7, #0
		result[i] = diff;
   1a212:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1a216:	bf18      	it	ne
   1a218:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1a21a:	3401      	adds	r4, #1
   1a21c:	e7eb      	b.n	1a1f6 <uECC_vli_sub+0xa>

0001a21e <uECC_vli_modAdd>:
{
   1a21e:	b570      	push	{r4, r5, r6, lr}
   1a220:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1a224:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1a226:	4633      	mov	r3, r6
{
   1a228:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1a22a:	f7ff feab 	bl	19f84 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1a22e:	b930      	cbnz	r0, 1a23e <uECC_vli_modAdd+0x20>
   1a230:	4632      	mov	r2, r6
   1a232:	4621      	mov	r1, r4
   1a234:	4628      	mov	r0, r5
   1a236:	f7ff ffaf 	bl	1a198 <uECC_vli_cmp_unsafe>
   1a23a:	2801      	cmp	r0, #1
   1a23c:	d007      	beq.n	1a24e <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1a23e:	4633      	mov	r3, r6
   1a240:	462a      	mov	r2, r5
   1a242:	4621      	mov	r1, r4
   1a244:	4620      	mov	r0, r4
}
   1a246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1a24a:	f7ff bfcf 	b.w	1a1ec <uECC_vli_sub>
}
   1a24e:	bd70      	pop	{r4, r5, r6, pc}

0001a250 <uECC_vli_modSub>:
{
   1a250:	b570      	push	{r4, r5, r6, lr}
   1a252:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1a256:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1a258:	4633      	mov	r3, r6
{
   1a25a:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1a25c:	f7ff ffc6 	bl	1a1ec <uECC_vli_sub>
	if (l_borrow) {
   1a260:	b138      	cbz	r0, 1a272 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1a262:	4633      	mov	r3, r6
   1a264:	462a      	mov	r2, r5
   1a266:	4621      	mov	r1, r4
   1a268:	4620      	mov	r0, r4
}
   1a26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1a26e:	f7ff be89 	b.w	19f84 <uECC_vli_add>
}
   1a272:	bd70      	pop	{r4, r5, r6, pc}

0001a274 <uECC_vli_mmod>:
{
   1a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a278:	b0a5      	sub	sp, #148	; 0x94
   1a27a:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1a27c:	ab14      	add	r3, sp, #80	; 0x50
   1a27e:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1a282:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1a284:	4629      	mov	r1, r5
   1a286:	4610      	mov	r0, r2
{
   1a288:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1a28a:	f7ff ff58 	bl	1a13e <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1a28e:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1a292:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1a294:	2c00      	cmp	r4, #0
   1a296:	4621      	mov	r1, r4
   1a298:	bfb8      	it	lt
   1a29a:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1a29e:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1a2a0:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1a2a4:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1a2a8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1a2aa:	f004 071f 	and.w	r7, r4, #31
   1a2ae:	bf58      	it	pl
   1a2b0:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1a2b2:	f7ff ff20 	bl	1a0f6 <uECC_vli_clear>
	if (bit_shift > 0) {
   1a2b6:	2f00      	cmp	r7, #0
   1a2b8:	b208      	sxth	r0, r1
   1a2ba:	dd2b      	ble.n	1a314 <uECC_vli_mmod+0xa0>
   1a2bc:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1a2be:	2200      	movs	r2, #0
   1a2c0:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1a2c4:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1a2c8:	4613      	mov	r3, r2
   1a2ca:	429d      	cmp	r5, r3
   1a2cc:	d817      	bhi.n	1a2fe <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1a2ce:	006b      	lsls	r3, r5, #1
   1a2d0:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1a2d2:	ab04      	add	r3, sp, #16
   1a2d4:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1a2d8:	1e6f      	subs	r7, r5, #1
   1a2da:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1a2dc:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1a2de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1a2e2:	2c00      	cmp	r4, #0
   1a2e4:	da54      	bge.n	1a390 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1a2e6:	ab24      	add	r3, sp, #144	; 0x90
   1a2e8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1a2ec:	462a      	mov	r2, r5
   1a2ee:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1a2f2:	4640      	mov	r0, r8
   1a2f4:	f7ff ff44 	bl	1a180 <uECC_vli_set>
}
   1a2f8:	b025      	add	sp, #148	; 0x94
   1a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1a2fe:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1a302:	fa0c f007 	lsl.w	r0, ip, r7
   1a306:	4302      	orrs	r2, r0
   1a308:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1a30c:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1a30e:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1a312:	e7da      	b.n	1a2ca <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1a314:	ab04      	add	r3, sp, #16
   1a316:	462a      	mov	r2, r5
   1a318:	4631      	mov	r1, r6
   1a31a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1a31e:	f7ff ff2f 	bl	1a180 <uECC_vli_set>
   1a322:	e7d4      	b.n	1a2ce <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1a324:	fa0f fe82 	sxth.w	lr, r2
   1a328:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1a32c:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1a330:	ab24      	add	r3, sp, #144	; 0x90
   1a332:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1a336:	3001      	adds	r0, #1
   1a338:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1a33c:	440b      	add	r3, r1
   1a33e:	ebbb 0303 	subs.w	r3, fp, r3
   1a342:	bf34      	ite	cc
   1a344:	2201      	movcc	r2, #1
   1a346:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1a348:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1a34a:	bf18      	it	ne
   1a34c:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1a34e:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1a352:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1a356:	9b01      	ldr	r3, [sp, #4]
   1a358:	b242      	sxtb	r2, r0
   1a35a:	429a      	cmp	r2, r3
   1a35c:	dbe2      	blt.n	1a324 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1a35e:	1a73      	subs	r3, r6, r1
   1a360:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1a362:	4629      	mov	r1, r5
   1a364:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1a366:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1a368:	f7ff fe24 	bl	19fb4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1a36c:	ab24      	add	r3, sp, #144	; 0x90
   1a36e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1a372:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1a374:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1a378:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1a37c:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1a37e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1a382:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1a384:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1a388:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1a38a:	f7ff fe13 	bl	19fb4 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1a38e:	e7a8      	b.n	1a2e2 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1a390:	ab24      	add	r3, sp, #144	; 0x90
   1a392:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1a394:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1a398:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1a39a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1a39e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1a3a2:	e7d8      	b.n	1a356 <uECC_vli_mmod+0xe2>

0001a3a4 <uECC_vli_modMult_fast>:
{
   1a3a4:	b530      	push	{r4, r5, lr}
   1a3a6:	461c      	mov	r4, r3
   1a3a8:	b091      	sub	sp, #68	; 0x44
   1a3aa:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1a3ac:	f993 3000 	ldrsb.w	r3, [r3]
   1a3b0:	4668      	mov	r0, sp
   1a3b2:	f7ff fe28 	bl	1a006 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1a3b6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1a3ba:	4669      	mov	r1, sp
   1a3bc:	4628      	mov	r0, r5
   1a3be:	4798      	blx	r3
}
   1a3c0:	b011      	add	sp, #68	; 0x44
   1a3c2:	bd30      	pop	{r4, r5, pc}

0001a3c4 <uECC_vli_modSquare_fast>:
{
   1a3c4:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1a3c6:	460a      	mov	r2, r1
   1a3c8:	f7ff bfec 	b.w	1a3a4 <uECC_vli_modMult_fast>

0001a3cc <double_jacobian_default>:
{
   1a3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1a3d0:	f993 6000 	ldrsb.w	r6, [r3]
{
   1a3d4:	b092      	sub	sp, #72	; 0x48
   1a3d6:	4604      	mov	r4, r0
   1a3d8:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1a3da:	4610      	mov	r0, r2
   1a3dc:	4631      	mov	r1, r6
{
   1a3de:	4615      	mov	r5, r2
   1a3e0:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1a3e2:	f7ff fe93 	bl	1a10c <uECC_vli_isZero>
   1a3e6:	2800      	cmp	r0, #0
   1a3e8:	f040 8091 	bne.w	1a50e <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1a3ec:	463a      	mov	r2, r7
   1a3ee:	4649      	mov	r1, r9
   1a3f0:	a802      	add	r0, sp, #8
   1a3f2:	f7ff ffe7 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1a3f6:	463b      	mov	r3, r7
   1a3f8:	aa02      	add	r2, sp, #8
   1a3fa:	4621      	mov	r1, r4
   1a3fc:	a80a      	add	r0, sp, #40	; 0x28
   1a3fe:	f7ff ffd1 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1a402:	a902      	add	r1, sp, #8
   1a404:	4608      	mov	r0, r1
   1a406:	463a      	mov	r2, r7
   1a408:	f7ff ffdc 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1a40c:	463b      	mov	r3, r7
   1a40e:	462a      	mov	r2, r5
   1a410:	4649      	mov	r1, r9
   1a412:	4648      	mov	r0, r9
   1a414:	f7ff ffc6 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1a418:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1a41c:	463a      	mov	r2, r7
   1a41e:	4629      	mov	r1, r5
   1a420:	4628      	mov	r0, r5
   1a422:	f7ff ffcf 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1a426:	4643      	mov	r3, r8
   1a428:	462a      	mov	r2, r5
   1a42a:	4621      	mov	r1, r4
   1a42c:	4620      	mov	r0, r4
   1a42e:	9600      	str	r6, [sp, #0]
   1a430:	f7ff fef5 	bl	1a21e <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1a434:	4643      	mov	r3, r8
   1a436:	462a      	mov	r2, r5
   1a438:	4629      	mov	r1, r5
   1a43a:	4628      	mov	r0, r5
   1a43c:	9600      	str	r6, [sp, #0]
   1a43e:	f7ff feee 	bl	1a21e <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1a442:	4643      	mov	r3, r8
   1a444:	462a      	mov	r2, r5
   1a446:	4621      	mov	r1, r4
   1a448:	4628      	mov	r0, r5
   1a44a:	9600      	str	r6, [sp, #0]
   1a44c:	f7ff ff00 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1a450:	463b      	mov	r3, r7
   1a452:	462a      	mov	r2, r5
   1a454:	4621      	mov	r1, r4
   1a456:	4620      	mov	r0, r4
   1a458:	f7ff ffa4 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1a45c:	4643      	mov	r3, r8
   1a45e:	4622      	mov	r2, r4
   1a460:	4621      	mov	r1, r4
   1a462:	4628      	mov	r0, r5
   1a464:	9600      	str	r6, [sp, #0]
   1a466:	f7ff feda 	bl	1a21e <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1a46a:	4643      	mov	r3, r8
   1a46c:	9600      	str	r6, [sp, #0]
   1a46e:	462a      	mov	r2, r5
   1a470:	4621      	mov	r1, r4
   1a472:	4620      	mov	r0, r4
   1a474:	f7ff fed3 	bl	1a21e <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a478:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1a47a:	07db      	lsls	r3, r3, #31
   1a47c:	d54a      	bpl.n	1a514 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1a47e:	4633      	mov	r3, r6
   1a480:	4642      	mov	r2, r8
   1a482:	4621      	mov	r1, r4
   1a484:	4620      	mov	r0, r4
   1a486:	f7ff fd7d 	bl	19f84 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1a48a:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1a48c:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1a48e:	4620      	mov	r0, r4
   1a490:	f7ff fd90 	bl	19fb4 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1a494:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1a498:	3b01      	subs	r3, #1
   1a49a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1a49e:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1a4a2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1a4a6:	463a      	mov	r2, r7
   1a4a8:	4621      	mov	r1, r4
   1a4aa:	4628      	mov	r0, r5
   1a4ac:	f7ff ff8a 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1a4b0:	4643      	mov	r3, r8
   1a4b2:	aa0a      	add	r2, sp, #40	; 0x28
   1a4b4:	4629      	mov	r1, r5
   1a4b6:	4628      	mov	r0, r5
   1a4b8:	9600      	str	r6, [sp, #0]
   1a4ba:	f7ff fec9 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1a4be:	4643      	mov	r3, r8
   1a4c0:	aa0a      	add	r2, sp, #40	; 0x28
   1a4c2:	4629      	mov	r1, r5
   1a4c4:	4628      	mov	r0, r5
   1a4c6:	9600      	str	r6, [sp, #0]
   1a4c8:	f7ff fec2 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1a4cc:	a90a      	add	r1, sp, #40	; 0x28
   1a4ce:	4608      	mov	r0, r1
   1a4d0:	4643      	mov	r3, r8
   1a4d2:	462a      	mov	r2, r5
   1a4d4:	9600      	str	r6, [sp, #0]
   1a4d6:	f7ff febb 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1a4da:	463b      	mov	r3, r7
   1a4dc:	aa0a      	add	r2, sp, #40	; 0x28
   1a4de:	4621      	mov	r1, r4
   1a4e0:	4620      	mov	r0, r4
   1a4e2:	f7ff ff5f 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1a4e6:	aa02      	add	r2, sp, #8
   1a4e8:	4643      	mov	r3, r8
   1a4ea:	4610      	mov	r0, r2
   1a4ec:	4621      	mov	r1, r4
   1a4ee:	9600      	str	r6, [sp, #0]
   1a4f0:	f7ff feae 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1a4f4:	4632      	mov	r2, r6
   1a4f6:	4629      	mov	r1, r5
   1a4f8:	4620      	mov	r0, r4
   1a4fa:	f7ff fe41 	bl	1a180 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1a4fe:	4649      	mov	r1, r9
   1a500:	4628      	mov	r0, r5
   1a502:	f7ff fe3d 	bl	1a180 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1a506:	a902      	add	r1, sp, #8
   1a508:	4648      	mov	r0, r9
   1a50a:	f7ff fe39 	bl	1a180 <uECC_vli_set>
}
   1a50e:	b012      	add	sp, #72	; 0x48
   1a510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1a514:	4631      	mov	r1, r6
   1a516:	4620      	mov	r0, r4
   1a518:	f7ff fd4c 	bl	19fb4 <uECC_vli_rshift1>
   1a51c:	e7c3      	b.n	1a4a6 <double_jacobian_default+0xda>

0001a51e <x_side_default>:
{
   1a51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a522:	4615      	mov	r5, r2
   1a524:	b08a      	sub	sp, #40	; 0x28
   1a526:	4604      	mov	r4, r0
   1a528:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1a52a:	221c      	movs	r2, #28
   1a52c:	2100      	movs	r1, #0
   1a52e:	a803      	add	r0, sp, #12
   1a530:	f000 fd9d 	bl	1b06e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1a534:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1a536:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1a53a:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1a53c:	462a      	mov	r2, r5
   1a53e:	4631      	mov	r1, r6
   1a540:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1a542:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1a544:	f7ff ff3e 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1a548:	463b      	mov	r3, r7
   1a54a:	aa02      	add	r2, sp, #8
   1a54c:	4621      	mov	r1, r4
   1a54e:	4620      	mov	r0, r4
   1a550:	f8cd 8000 	str.w	r8, [sp]
   1a554:	f7ff fe7c 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1a558:	462b      	mov	r3, r5
   1a55a:	4632      	mov	r2, r6
   1a55c:	4621      	mov	r1, r4
   1a55e:	4620      	mov	r0, r4
   1a560:	f7ff ff20 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1a564:	f8cd 8000 	str.w	r8, [sp]
   1a568:	463b      	mov	r3, r7
   1a56a:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1a56e:	4621      	mov	r1, r4
   1a570:	4620      	mov	r0, r4
   1a572:	f7ff fe54 	bl	1a21e <uECC_vli_modAdd>
}
   1a576:	b00a      	add	sp, #40	; 0x28
   1a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a57c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1a57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a580:	b09a      	sub	sp, #104	; 0x68
   1a582:	4616      	mov	r6, r2
   1a584:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1a588:	4644      	mov	r4, r8
{
   1a58a:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1a58c:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1a590:	9500      	str	r5, [sp, #0]
{
   1a592:	4607      	mov	r7, r0
   1a594:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1a596:	4623      	mov	r3, r4
   1a598:	4602      	mov	r2, r0
   1a59a:	4631      	mov	r1, r6
   1a59c:	a802      	add	r0, sp, #8
   1a59e:	f7ff fe57 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1a5a2:	a902      	add	r1, sp, #8
   1a5a4:	4642      	mov	r2, r8
   1a5a6:	4608      	mov	r0, r1
   1a5a8:	f7ff ff0c 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1a5ac:	4643      	mov	r3, r8
   1a5ae:	aa02      	add	r2, sp, #8
   1a5b0:	4639      	mov	r1, r7
   1a5b2:	4638      	mov	r0, r7
   1a5b4:	f7ff fef6 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1a5b8:	4643      	mov	r3, r8
   1a5ba:	aa02      	add	r2, sp, #8
   1a5bc:	4631      	mov	r1, r6
   1a5be:	4630      	mov	r0, r6
   1a5c0:	f7ff fef0 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1a5c4:	4623      	mov	r3, r4
   1a5c6:	4652      	mov	r2, sl
   1a5c8:	4649      	mov	r1, r9
   1a5ca:	a802      	add	r0, sp, #8
   1a5cc:	9500      	str	r5, [sp, #0]
   1a5ce:	f7ff fe26 	bl	1a21e <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1a5d2:	4623      	mov	r3, r4
   1a5d4:	4652      	mov	r2, sl
   1a5d6:	4649      	mov	r1, r9
   1a5d8:	4648      	mov	r0, r9
   1a5da:	9500      	str	r5, [sp, #0]
   1a5dc:	f7ff fe38 	bl	1a250 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1a5e0:	4623      	mov	r3, r4
   1a5e2:	463a      	mov	r2, r7
   1a5e4:	4631      	mov	r1, r6
   1a5e6:	a80a      	add	r0, sp, #40	; 0x28
   1a5e8:	9500      	str	r5, [sp, #0]
   1a5ea:	f7ff fe31 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1a5ee:	4643      	mov	r3, r8
   1a5f0:	aa0a      	add	r2, sp, #40	; 0x28
   1a5f2:	4651      	mov	r1, sl
   1a5f4:	4650      	mov	r0, sl
   1a5f6:	f7ff fed5 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1a5fa:	4623      	mov	r3, r4
   1a5fc:	4632      	mov	r2, r6
   1a5fe:	4639      	mov	r1, r7
   1a600:	a80a      	add	r0, sp, #40	; 0x28
   1a602:	9500      	str	r5, [sp, #0]
   1a604:	f7ff fe0b 	bl	1a21e <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1a608:	4642      	mov	r2, r8
   1a60a:	4649      	mov	r1, r9
   1a60c:	4630      	mov	r0, r6
   1a60e:	f7ff fed9 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1a612:	4623      	mov	r3, r4
   1a614:	aa0a      	add	r2, sp, #40	; 0x28
   1a616:	4631      	mov	r1, r6
   1a618:	4630      	mov	r0, r6
   1a61a:	9500      	str	r5, [sp, #0]
   1a61c:	f7ff fe18 	bl	1a250 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1a620:	4623      	mov	r3, r4
   1a622:	4632      	mov	r2, r6
   1a624:	4639      	mov	r1, r7
   1a626:	a812      	add	r0, sp, #72	; 0x48
   1a628:	9500      	str	r5, [sp, #0]
   1a62a:	f7ff fe11 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1a62e:	4643      	mov	r3, r8
   1a630:	aa12      	add	r2, sp, #72	; 0x48
   1a632:	4649      	mov	r1, r9
   1a634:	4648      	mov	r0, r9
   1a636:	f7ff feb5 	bl	1a3a4 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1a63a:	4623      	mov	r3, r4
   1a63c:	4652      	mov	r2, sl
   1a63e:	4649      	mov	r1, r9
   1a640:	4648      	mov	r0, r9
   1a642:	9500      	str	r5, [sp, #0]
   1a644:	f7ff fe04 	bl	1a250 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1a648:	4642      	mov	r2, r8
   1a64a:	a902      	add	r1, sp, #8
   1a64c:	a812      	add	r0, sp, #72	; 0x48
   1a64e:	f7ff feb9 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1a652:	a912      	add	r1, sp, #72	; 0x48
   1a654:	4623      	mov	r3, r4
   1a656:	aa0a      	add	r2, sp, #40	; 0x28
   1a658:	4608      	mov	r0, r1
   1a65a:	9500      	str	r5, [sp, #0]
   1a65c:	f7ff fdf8 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1a660:	4623      	mov	r3, r4
   1a662:	463a      	mov	r2, r7
   1a664:	a912      	add	r1, sp, #72	; 0x48
   1a666:	a80a      	add	r0, sp, #40	; 0x28
   1a668:	9500      	str	r5, [sp, #0]
   1a66a:	f7ff fdf1 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1a66e:	a90a      	add	r1, sp, #40	; 0x28
   1a670:	4643      	mov	r3, r8
   1a672:	aa02      	add	r2, sp, #8
   1a674:	4608      	mov	r0, r1
   1a676:	f7ff fe95 	bl	1a3a4 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1a67a:	4623      	mov	r3, r4
   1a67c:	4652      	mov	r2, sl
   1a67e:	a90a      	add	r1, sp, #40	; 0x28
   1a680:	4650      	mov	r0, sl
   1a682:	9500      	str	r5, [sp, #0]
   1a684:	f7ff fde4 	bl	1a250 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1a688:	462a      	mov	r2, r5
   1a68a:	a912      	add	r1, sp, #72	; 0x48
   1a68c:	4638      	mov	r0, r7
   1a68e:	f7ff fd77 	bl	1a180 <uECC_vli_set>
}
   1a692:	b01a      	add	sp, #104	; 0x68
   1a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a698 <uECC_vli_modInv>:
{
   1a698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a69a:	460f      	mov	r7, r1
   1a69c:	b0a1      	sub	sp, #132	; 0x84
   1a69e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1a6a0:	4619      	mov	r1, r3
   1a6a2:	4638      	mov	r0, r7
{
   1a6a4:	4615      	mov	r5, r2
   1a6a6:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1a6a8:	f7ff fd30 	bl	1a10c <uECC_vli_isZero>
   1a6ac:	b120      	cbz	r0, 1a6b8 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1a6ae:	4630      	mov	r0, r6
   1a6b0:	f7ff fd21 	bl	1a0f6 <uECC_vli_clear>
}
   1a6b4:	b021      	add	sp, #132	; 0x84
   1a6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1a6b8:	4622      	mov	r2, r4
   1a6ba:	4639      	mov	r1, r7
   1a6bc:	4668      	mov	r0, sp
   1a6be:	f7ff fd5f 	bl	1a180 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1a6c2:	4629      	mov	r1, r5
   1a6c4:	a808      	add	r0, sp, #32
   1a6c6:	f7ff fd5b 	bl	1a180 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1a6ca:	a810      	add	r0, sp, #64	; 0x40
   1a6cc:	4621      	mov	r1, r4
   1a6ce:	f7ff fd12 	bl	1a0f6 <uECC_vli_clear>
	u[0] = 1;
   1a6d2:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1a6d4:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1a6d6:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1a6d8:	f7ff fd0d 	bl	1a0f6 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1a6dc:	4622      	mov	r2, r4
   1a6de:	a908      	add	r1, sp, #32
   1a6e0:	4668      	mov	r0, sp
   1a6e2:	f7ff fd59 	bl	1a198 <uECC_vli_cmp_unsafe>
   1a6e6:	b928      	cbnz	r0, 1a6f4 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1a6e8:	4622      	mov	r2, r4
   1a6ea:	a910      	add	r1, sp, #64	; 0x40
   1a6ec:	4630      	mov	r0, r6
   1a6ee:	f7ff fd47 	bl	1a180 <uECC_vli_set>
   1a6f2:	e7df      	b.n	1a6b4 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1a6f4:	9b00      	ldr	r3, [sp, #0]
   1a6f6:	07da      	lsls	r2, r3, #31
   1a6f8:	d409      	bmi.n	1a70e <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1a6fa:	4621      	mov	r1, r4
   1a6fc:	4668      	mov	r0, sp
   1a6fe:	f7ff fc59 	bl	19fb4 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1a702:	4622      	mov	r2, r4
   1a704:	4629      	mov	r1, r5
   1a706:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1a708:	f7ff fc61 	bl	19fce <vli_modInv_update>
   1a70c:	e7e6      	b.n	1a6dc <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1a70e:	9b08      	ldr	r3, [sp, #32]
   1a710:	07db      	lsls	r3, r3, #31
   1a712:	d407      	bmi.n	1a724 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1a714:	4621      	mov	r1, r4
   1a716:	a808      	add	r0, sp, #32
   1a718:	f7ff fc4c 	bl	19fb4 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1a71c:	4622      	mov	r2, r4
   1a71e:	4629      	mov	r1, r5
   1a720:	a818      	add	r0, sp, #96	; 0x60
   1a722:	e7f1      	b.n	1a708 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1a724:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1a726:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1a728:	dd1c      	ble.n	1a764 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1a72a:	aa08      	add	r2, sp, #32
   1a72c:	4669      	mov	r1, sp
   1a72e:	4668      	mov	r0, sp
   1a730:	f7ff fd5c 	bl	1a1ec <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1a734:	4621      	mov	r1, r4
   1a736:	4668      	mov	r0, sp
   1a738:	f7ff fc3c 	bl	19fb4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1a73c:	4622      	mov	r2, r4
   1a73e:	a918      	add	r1, sp, #96	; 0x60
   1a740:	a810      	add	r0, sp, #64	; 0x40
   1a742:	f7ff fd29 	bl	1a198 <uECC_vli_cmp_unsafe>
   1a746:	2800      	cmp	r0, #0
   1a748:	da05      	bge.n	1a756 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1a74a:	a910      	add	r1, sp, #64	; 0x40
   1a74c:	4623      	mov	r3, r4
   1a74e:	462a      	mov	r2, r5
   1a750:	4608      	mov	r0, r1
   1a752:	f7ff fc17 	bl	19f84 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1a756:	a910      	add	r1, sp, #64	; 0x40
   1a758:	4623      	mov	r3, r4
   1a75a:	aa18      	add	r2, sp, #96	; 0x60
   1a75c:	4608      	mov	r0, r1
   1a75e:	f7ff fd45 	bl	1a1ec <uECC_vli_sub>
   1a762:	e7ce      	b.n	1a702 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1a764:	a908      	add	r1, sp, #32
   1a766:	466a      	mov	r2, sp
   1a768:	4608      	mov	r0, r1
   1a76a:	f7ff fd3f 	bl	1a1ec <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1a76e:	4621      	mov	r1, r4
   1a770:	a808      	add	r0, sp, #32
   1a772:	f7ff fc1f 	bl	19fb4 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1a776:	4622      	mov	r2, r4
   1a778:	a910      	add	r1, sp, #64	; 0x40
   1a77a:	a818      	add	r0, sp, #96	; 0x60
   1a77c:	f7ff fd0c 	bl	1a198 <uECC_vli_cmp_unsafe>
   1a780:	2800      	cmp	r0, #0
   1a782:	da05      	bge.n	1a790 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1a784:	a918      	add	r1, sp, #96	; 0x60
   1a786:	4623      	mov	r3, r4
   1a788:	462a      	mov	r2, r5
   1a78a:	4608      	mov	r0, r1
   1a78c:	f7ff fbfa 	bl	19f84 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1a790:	a918      	add	r1, sp, #96	; 0x60
   1a792:	4623      	mov	r3, r4
   1a794:	aa10      	add	r2, sp, #64	; 0x40
   1a796:	4608      	mov	r0, r1
   1a798:	f7ff fd28 	bl	1a1ec <uECC_vli_sub>
   1a79c:	e7be      	b.n	1a71c <uECC_vli_modInv+0x84>

0001a79e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1a79e:	7809      	ldrb	r1, [r1, #0]
   1a7a0:	0049      	lsls	r1, r1, #1
   1a7a2:	b249      	sxtb	r1, r1
   1a7a4:	f7ff bcb2 	b.w	1a10c <uECC_vli_isZero>

0001a7a8 <apply_z>:
{
   1a7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7aa:	4615      	mov	r5, r2
   1a7ac:	b089      	sub	sp, #36	; 0x24
   1a7ae:	461c      	mov	r4, r3
   1a7b0:	4607      	mov	r7, r0
   1a7b2:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1a7b4:	461a      	mov	r2, r3
   1a7b6:	4629      	mov	r1, r5
   1a7b8:	4668      	mov	r0, sp
   1a7ba:	f7ff fe03 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1a7be:	4623      	mov	r3, r4
   1a7c0:	466a      	mov	r2, sp
   1a7c2:	4639      	mov	r1, r7
   1a7c4:	4638      	mov	r0, r7
   1a7c6:	f7ff fded 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1a7ca:	4623      	mov	r3, r4
   1a7cc:	462a      	mov	r2, r5
   1a7ce:	4669      	mov	r1, sp
   1a7d0:	4668      	mov	r0, sp
   1a7d2:	f7ff fde7 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1a7d6:	4623      	mov	r3, r4
   1a7d8:	466a      	mov	r2, sp
   1a7da:	4631      	mov	r1, r6
   1a7dc:	4630      	mov	r0, r6
   1a7de:	f7ff fde1 	bl	1a3a4 <uECC_vli_modMult_fast>
}
   1a7e2:	b009      	add	sp, #36	; 0x24
   1a7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a7e6 <XYcZ_add>:
{
   1a7e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a7ea:	b08a      	sub	sp, #40	; 0x28
   1a7ec:	4614      	mov	r4, r2
   1a7ee:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1a7f2:	4655      	mov	r5, sl
{
   1a7f4:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1a7f6:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1a7fa:	9600      	str	r6, [sp, #0]
{
   1a7fc:	4680      	mov	r8, r0
   1a7fe:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1a800:	462b      	mov	r3, r5
   1a802:	4602      	mov	r2, r0
   1a804:	4621      	mov	r1, r4
   1a806:	a802      	add	r0, sp, #8
   1a808:	f7ff fd22 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1a80c:	a902      	add	r1, sp, #8
   1a80e:	4652      	mov	r2, sl
   1a810:	4608      	mov	r0, r1
   1a812:	f7ff fdd7 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1a816:	4653      	mov	r3, sl
   1a818:	aa02      	add	r2, sp, #8
   1a81a:	4641      	mov	r1, r8
   1a81c:	4640      	mov	r0, r8
   1a81e:	f7ff fdc1 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1a822:	4653      	mov	r3, sl
   1a824:	aa02      	add	r2, sp, #8
   1a826:	4621      	mov	r1, r4
   1a828:	4620      	mov	r0, r4
   1a82a:	f7ff fdbb 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1a82e:	462b      	mov	r3, r5
   1a830:	464a      	mov	r2, r9
   1a832:	4639      	mov	r1, r7
   1a834:	4638      	mov	r0, r7
   1a836:	9600      	str	r6, [sp, #0]
   1a838:	f7ff fd0a 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1a83c:	4652      	mov	r2, sl
   1a83e:	4639      	mov	r1, r7
   1a840:	a802      	add	r0, sp, #8
   1a842:	f7ff fdbf 	bl	1a3c4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1a846:	a902      	add	r1, sp, #8
   1a848:	462b      	mov	r3, r5
   1a84a:	4642      	mov	r2, r8
   1a84c:	4608      	mov	r0, r1
   1a84e:	9600      	str	r6, [sp, #0]
   1a850:	f7ff fcfe 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1a854:	a902      	add	r1, sp, #8
   1a856:	462b      	mov	r3, r5
   1a858:	4622      	mov	r2, r4
   1a85a:	4608      	mov	r0, r1
   1a85c:	9600      	str	r6, [sp, #0]
   1a85e:	f7ff fcf7 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1a862:	462b      	mov	r3, r5
   1a864:	4642      	mov	r2, r8
   1a866:	4621      	mov	r1, r4
   1a868:	4620      	mov	r0, r4
   1a86a:	9600      	str	r6, [sp, #0]
   1a86c:	f7ff fcf0 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1a870:	4653      	mov	r3, sl
   1a872:	4622      	mov	r2, r4
   1a874:	4649      	mov	r1, r9
   1a876:	4648      	mov	r0, r9
   1a878:	f7ff fd94 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1a87c:	462b      	mov	r3, r5
   1a87e:	aa02      	add	r2, sp, #8
   1a880:	4641      	mov	r1, r8
   1a882:	4620      	mov	r0, r4
   1a884:	9600      	str	r6, [sp, #0]
   1a886:	f7ff fce3 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1a88a:	4653      	mov	r3, sl
   1a88c:	4622      	mov	r2, r4
   1a88e:	4639      	mov	r1, r7
   1a890:	4638      	mov	r0, r7
   1a892:	f7ff fd87 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1a896:	462b      	mov	r3, r5
   1a898:	464a      	mov	r2, r9
   1a89a:	4639      	mov	r1, r7
   1a89c:	4638      	mov	r0, r7
   1a89e:	9600      	str	r6, [sp, #0]
   1a8a0:	f7ff fcd6 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1a8a4:	4632      	mov	r2, r6
   1a8a6:	a902      	add	r1, sp, #8
   1a8a8:	4620      	mov	r0, r4
   1a8aa:	f7ff fc69 	bl	1a180 <uECC_vli_set>
}
   1a8ae:	b00a      	add	sp, #40	; 0x28
   1a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a8b4 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8b8:	b0b1      	sub	sp, #196	; 0xc4
   1a8ba:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1a8be:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1a8c0:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1a8c4:	a818      	add	r0, sp, #96	; 0x60
{
   1a8c6:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1a8c8:	463a      	mov	r2, r7
{
   1a8ca:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1a8cc:	f7ff fc58 	bl	1a180 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1a8d0:	00bb      	lsls	r3, r7, #2
   1a8d2:	9305      	str	r3, [sp, #20]
   1a8d4:	9b04      	ldr	r3, [sp, #16]
   1a8d6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1a8da:	4619      	mov	r1, r3
   1a8dc:	a828      	add	r0, sp, #160	; 0xa0
   1a8de:	9302      	str	r3, [sp, #8]
   1a8e0:	f7ff fc4e 	bl	1a180 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1a8e4:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1a8e8:	2e00      	cmp	r6, #0
   1a8ea:	f000 8088 	beq.w	1a9fe <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1a8ee:	462a      	mov	r2, r5
   1a8f0:	4631      	mov	r1, r6
   1a8f2:	a808      	add	r0, sp, #32
   1a8f4:	f7ff fc44 	bl	1a180 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1a8f8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a8fc:	462a      	mov	r2, r5
   1a8fe:	a918      	add	r1, sp, #96	; 0x60
   1a900:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1a902:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1a906:	f7ff fc3b 	bl	1a180 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1a90a:	a928      	add	r1, sp, #160	; 0xa0
   1a90c:	4648      	mov	r0, r9
   1a90e:	f7ff fc37 	bl	1a180 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1a912:	4623      	mov	r3, r4
   1a914:	aa08      	add	r2, sp, #32
   1a916:	a928      	add	r1, sp, #160	; 0xa0
   1a918:	a818      	add	r0, sp, #96	; 0x60
   1a91a:	f7ff ff45 	bl	1a7a8 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1a91e:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1a922:	4623      	mov	r3, r4
   1a924:	aa08      	add	r2, sp, #32
   1a926:	a928      	add	r1, sp, #160	; 0xa0
   1a928:	a818      	add	r0, sp, #96	; 0x60
   1a92a:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1a92c:	4623      	mov	r3, r4
   1a92e:	aa08      	add	r2, sp, #32
   1a930:	4649      	mov	r1, r9
   1a932:	4640      	mov	r0, r8
   1a934:	f7ff ff38 	bl	1a7a8 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1a938:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1a93c:	3d02      	subs	r5, #2
   1a93e:	b22d      	sxth	r5, r5
   1a940:	2d00      	cmp	r5, #0
   1a942:	dc63      	bgt.n	1aa0c <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a944:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a948:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a94a:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a94e:	ab10      	add	r3, sp, #64	; 0x40
   1a950:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1a954:	43ed      	mvns	r5, r5
   1a956:	ab20      	add	r3, sp, #128	; 0x80
   1a958:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1a95c:	f005 0501 	and.w	r5, r5, #1
   1a960:	ab10      	add	r3, sp, #64	; 0x40
   1a962:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1a966:	ab20      	add	r3, sp, #128	; 0x80
   1a968:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1a96c:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a970:	462b      	mov	r3, r5
   1a972:	464a      	mov	r2, r9
   1a974:	4631      	mov	r1, r6
   1a976:	4640      	mov	r0, r8
   1a978:	f7ff fe00 	bl	1a57c <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1a97c:	4653      	mov	r3, sl
   1a97e:	aa10      	add	r2, sp, #64	; 0x40
   1a980:	a918      	add	r1, sp, #96	; 0x60
   1a982:	a808      	add	r0, sp, #32
   1a984:	9700      	str	r7, [sp, #0]
   1a986:	f7ff fc63 	bl	1a250 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1a98a:	a908      	add	r1, sp, #32
   1a98c:	4623      	mov	r3, r4
   1a98e:	4632      	mov	r2, r6
   1a990:	4608      	mov	r0, r1
   1a992:	f7ff fd07 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1a996:	a908      	add	r1, sp, #32
   1a998:	9a04      	ldr	r2, [sp, #16]
   1a99a:	4623      	mov	r3, r4
   1a99c:	4608      	mov	r0, r1
   1a99e:	f7ff fd01 	bl	1a3a4 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1a9a2:	a908      	add	r1, sp, #32
   1a9a4:	463b      	mov	r3, r7
   1a9a6:	4652      	mov	r2, sl
   1a9a8:	4608      	mov	r0, r1
   1a9aa:	f7ff fe75 	bl	1a698 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1a9ae:	a908      	add	r1, sp, #32
   1a9b0:	9a02      	ldr	r2, [sp, #8]
   1a9b2:	4623      	mov	r3, r4
   1a9b4:	4608      	mov	r0, r1
   1a9b6:	f7ff fcf5 	bl	1a3a4 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1a9ba:	a908      	add	r1, sp, #32
   1a9bc:	4623      	mov	r3, r4
   1a9be:	4642      	mov	r2, r8
   1a9c0:	4608      	mov	r0, r1
   1a9c2:	f7ff fcef 	bl	1a3a4 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1a9c6:	9400      	str	r4, [sp, #0]
   1a9c8:	4633      	mov	r3, r6
   1a9ca:	4642      	mov	r2, r8
   1a9cc:	4629      	mov	r1, r5
   1a9ce:	4648      	mov	r0, r9
   1a9d0:	f7ff ff09 	bl	1a7e6 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1a9d4:	4623      	mov	r3, r4
   1a9d6:	aa08      	add	r2, sp, #32
   1a9d8:	a920      	add	r1, sp, #128	; 0x80
   1a9da:	a810      	add	r0, sp, #64	; 0x40
   1a9dc:	f7ff fee4 	bl	1a7a8 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1a9e0:	9803      	ldr	r0, [sp, #12]
   1a9e2:	463a      	mov	r2, r7
   1a9e4:	a910      	add	r1, sp, #64	; 0x40
   1a9e6:	f7ff fbcb 	bl	1a180 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1a9ea:	9b03      	ldr	r3, [sp, #12]
   1a9ec:	9c05      	ldr	r4, [sp, #20]
   1a9ee:	4423      	add	r3, r4
   1a9f0:	a920      	add	r1, sp, #128	; 0x80
   1a9f2:	4618      	mov	r0, r3
   1a9f4:	f7ff fbc4 	bl	1a180 <uECC_vli_set>
}
   1a9f8:	b031      	add	sp, #196	; 0xc4
   1a9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1a9fe:	4629      	mov	r1, r5
   1aa00:	a808      	add	r0, sp, #32
   1aa02:	f7ff fb78 	bl	1a0f6 <uECC_vli_clear>
		z[0] = 1;
   1aa06:	2301      	movs	r3, #1
   1aa08:	9308      	str	r3, [sp, #32]
   1aa0a:	e775      	b.n	1a8f8 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1aa0c:	4629      	mov	r1, r5
   1aa0e:	4650      	mov	r0, sl
   1aa10:	f7ff fb8b 	bl	1a12a <uECC_vli_testBit>
   1aa14:	fab0 f680 	clz	r6, r0
   1aa18:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1aa1a:	f1c6 0101 	rsb	r1, r6, #1
   1aa1e:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1aa22:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1aa26:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1aa2a:	4633      	mov	r3, r6
   1aa2c:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1aa30:	465a      	mov	r2, fp
   1aa32:	9400      	str	r4, [sp, #0]
   1aa34:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aa38:	f7ff fda0 	bl	1a57c <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1aa3c:	9907      	ldr	r1, [sp, #28]
   1aa3e:	9806      	ldr	r0, [sp, #24]
   1aa40:	9400      	str	r4, [sp, #0]
   1aa42:	460b      	mov	r3, r1
   1aa44:	4602      	mov	r2, r0
   1aa46:	4631      	mov	r1, r6
   1aa48:	4658      	mov	r0, fp
   1aa4a:	f7ff fecc 	bl	1a7e6 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1aa4e:	3d01      	subs	r5, #1
   1aa50:	e775      	b.n	1a93e <EccPoint_mult+0x8a>

0001aa52 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1aa52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1aa56:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1aa5a:	f119 081f 	adds.w	r8, r9, #31
{
   1aa5e:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1aa60:	bf48      	it	mi
   1aa62:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1aa66:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1aa68:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1aa6c:	3524      	adds	r5, #36	; 0x24
   1aa6e:	4601      	mov	r1, r0
{
   1aa70:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1aa72:	4643      	mov	r3, r8
   1aa74:	462a      	mov	r2, r5
   1aa76:	4630      	mov	r0, r6
   1aa78:	f7ff fa84 	bl	19f84 <uECC_vli_add>
   1aa7c:	4604      	mov	r4, r0
   1aa7e:	b990      	cbnz	r0, 1aaa6 <regularize_k+0x54>
   1aa80:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1aa84:	da06      	bge.n	1aa94 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1aa86:	4649      	mov	r1, r9
   1aa88:	4630      	mov	r0, r6
   1aa8a:	f7ff fb4e 	bl	1a12a <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1aa8e:	1e04      	subs	r4, r0, #0
   1aa90:	bf18      	it	ne
   1aa92:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1aa94:	4643      	mov	r3, r8
   1aa96:	462a      	mov	r2, r5
   1aa98:	4631      	mov	r1, r6
   1aa9a:	4638      	mov	r0, r7
   1aa9c:	f7ff fa72 	bl	19f84 <uECC_vli_add>

	return carry;
}
   1aaa0:	4620      	mov	r0, r4
   1aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1aaa6:	2401      	movs	r4, #1
   1aaa8:	e7f4      	b.n	1aa94 <regularize_k+0x42>

0001aaaa <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1aaaa:	b530      	push	{r4, r5, lr}
   1aaac:	4614      	mov	r4, r2
   1aaae:	b095      	sub	sp, #84	; 0x54
   1aab0:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1aab2:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1aab4:	4623      	mov	r3, r4
{
   1aab6:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1aab8:	a904      	add	r1, sp, #16
   1aaba:	9102      	str	r1, [sp, #8]
   1aabc:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1aabe:	f7ff ffc8 	bl	1aa52 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1aac2:	fab0 f380 	clz	r3, r0
   1aac6:	095b      	lsrs	r3, r3, #5
   1aac8:	aa14      	add	r2, sp, #80	; 0x50
   1aaca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1aace:	8863      	ldrh	r3, [r4, #2]
   1aad0:	9401      	str	r4, [sp, #4]
   1aad2:	3301      	adds	r3, #1
   1aad4:	b21b      	sxth	r3, r3
   1aad6:	9300      	str	r3, [sp, #0]
   1aad8:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1aadc:	2300      	movs	r3, #0
   1aade:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1aae2:	4628      	mov	r0, r5
   1aae4:	f7ff fee6 	bl	1a8b4 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1aae8:	4621      	mov	r1, r4
   1aaea:	4628      	mov	r0, r5
   1aaec:	f7ff fe57 	bl	1a79e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1aaf0:	fab0 f080 	clz	r0, r0
   1aaf4:	0940      	lsrs	r0, r0, #5
   1aaf6:	b015      	add	sp, #84	; 0x54
   1aaf8:	bd30      	pop	{r4, r5, pc}

0001aafa <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1aafa:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1aafc:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1aafe:	1e4f      	subs	r7, r1, #1
   1ab00:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1ab02:	428c      	cmp	r4, r1
   1ab04:	f105 0501 	add.w	r5, r5, #1
   1ab08:	db00      	blt.n	1ab0c <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1ab0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1ab0c:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1ab0e:	f023 0603 	bic.w	r6, r3, #3
   1ab12:	f003 0303 	and.w	r3, r3, #3
   1ab16:	5996      	ldr	r6, [r2, r6]
   1ab18:	00db      	lsls	r3, r3, #3
   1ab1a:	fa26 f303 	lsr.w	r3, r6, r3
   1ab1e:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1ab20:	e7ee      	b.n	1ab00 <uECC_vli_nativeToBytes+0x6>

0001ab22 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1ab22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab24:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1ab26:	1cd1      	adds	r1, r2, #3
   1ab28:	bf48      	it	mi
   1ab2a:	1d91      	addmi	r1, r2, #6
   1ab2c:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1ab30:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1ab32:	f7ff fae0 	bl	1a0f6 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1ab36:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1ab38:	1e67      	subs	r7, r4, #1
   1ab3a:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1ab3c:	42a2      	cmp	r2, r4
   1ab3e:	f105 0501 	add.w	r5, r5, #1
   1ab42:	db00      	blt.n	1ab46 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1ab44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1ab46:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1ab48:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1ab4c:	5cb2      	ldrb	r2, [r6, r2]
   1ab4e:	f003 0303 	and.w	r3, r3, #3
   1ab52:	00db      	lsls	r3, r3, #3
   1ab54:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1ab58:	5842      	ldr	r2, [r0, r1]
   1ab5a:	431a      	orrs	r2, r3
   1ab5c:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1ab5e:	e7ec      	b.n	1ab3a <uECC_vli_bytesToNative+0x18>

0001ab60 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab62:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1ab64:	f991 6000 	ldrsb.w	r6, [r1]
{
   1ab68:	4605      	mov	r5, r0
   1ab6a:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1ab6c:	f7ff fe17 	bl	1a79e <EccPoint_isZero>
   1ab70:	bb28      	cbnz	r0, 1abbe <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1ab72:	1d27      	adds	r7, r4, #4
   1ab74:	4632      	mov	r2, r6
   1ab76:	4629      	mov	r1, r5
   1ab78:	4638      	mov	r0, r7
   1ab7a:	f7ff fb0d 	bl	1a198 <uECC_vli_cmp_unsafe>
   1ab7e:	2801      	cmp	r0, #1
   1ab80:	d120      	bne.n	1abc4 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1ab82:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1ab86:	4632      	mov	r2, r6
   1ab88:	4638      	mov	r0, r7
   1ab8a:	f7ff fb05 	bl	1a198 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1ab8e:	2801      	cmp	r0, #1
   1ab90:	d118      	bne.n	1abc4 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1ab92:	4622      	mov	r2, r4
   1ab94:	4668      	mov	r0, sp
   1ab96:	f7ff fc15 	bl	1a3c4 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1ab9a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1ab9e:	4622      	mov	r2, r4
   1aba0:	4629      	mov	r1, r5
   1aba2:	a808      	add	r0, sp, #32
   1aba4:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1aba6:	4632      	mov	r2, r6
   1aba8:	a908      	add	r1, sp, #32
   1abaa:	4668      	mov	r0, sp
   1abac:	f7ff fb0b 	bl	1a1c6 <uECC_vli_equal>
   1abb0:	2800      	cmp	r0, #0
		return -3;
   1abb2:	bf0c      	ite	eq
   1abb4:	2000      	moveq	r0, #0
   1abb6:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1abba:	b011      	add	sp, #68	; 0x44
   1abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1abbe:	f04f 30ff 	mov.w	r0, #4294967295
   1abc2:	e7fa      	b.n	1abba <uECC_valid_point+0x5a>
		return -2;
   1abc4:	f06f 0001 	mvn.w	r0, #1
   1abc8:	e7f7      	b.n	1abba <uECC_valid_point+0x5a>

0001abca <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1abca:	b570      	push	{r4, r5, r6, lr}
   1abcc:	460c      	mov	r4, r1
   1abce:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1abd0:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1abd2:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1abd6:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1abd8:	4601      	mov	r1, r0
   1abda:	4668      	mov	r0, sp
   1abdc:	f7ff ffa1 	bl	1ab22 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1abe0:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1abe4:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1abe8:	18a9      	adds	r1, r5, r2
   1abea:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1abee:	f7ff ff98 	bl	1ab22 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1abf2:	2210      	movs	r2, #16
   1abf4:	4631      	mov	r1, r6
   1abf6:	4668      	mov	r0, sp
   1abf8:	f7ff face 	bl	1a198 <uECC_vli_cmp_unsafe>
   1abfc:	b128      	cbz	r0, 1ac0a <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1abfe:	4621      	mov	r1, r4
   1ac00:	4668      	mov	r0, sp
   1ac02:	f7ff ffad 	bl	1ab60 <uECC_valid_point>
}
   1ac06:	b010      	add	sp, #64	; 0x40
   1ac08:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1ac0a:	f06f 0003 	mvn.w	r0, #3
   1ac0e:	e7fa      	b.n	1ac06 <uECC_valid_public_key+0x3c>

0001ac10 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1ac10:	78cb      	ldrb	r3, [r1, #3]
   1ac12:	7802      	ldrb	r2, [r0, #0]
   1ac14:	4053      	eors	r3, r2
   1ac16:	7003      	strb	r3, [r0, #0]
   1ac18:	884b      	ldrh	r3, [r1, #2]
   1ac1a:	7842      	ldrb	r2, [r0, #1]
   1ac1c:	4053      	eors	r3, r2
   1ac1e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1ac20:	680a      	ldr	r2, [r1, #0]
   1ac22:	7883      	ldrb	r3, [r0, #2]
   1ac24:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ac28:	7083      	strb	r3, [r0, #2]
   1ac2a:	680a      	ldr	r2, [r1, #0]
   1ac2c:	78c3      	ldrb	r3, [r0, #3]
   1ac2e:	4053      	eors	r3, r2
   1ac30:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1ac32:	79cb      	ldrb	r3, [r1, #7]
   1ac34:	7902      	ldrb	r2, [r0, #4]
   1ac36:	4053      	eors	r3, r2
   1ac38:	7103      	strb	r3, [r0, #4]
   1ac3a:	88cb      	ldrh	r3, [r1, #6]
   1ac3c:	7942      	ldrb	r2, [r0, #5]
   1ac3e:	4053      	eors	r3, r2
   1ac40:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1ac42:	684a      	ldr	r2, [r1, #4]
   1ac44:	7983      	ldrb	r3, [r0, #6]
   1ac46:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ac4a:	7183      	strb	r3, [r0, #6]
   1ac4c:	684a      	ldr	r2, [r1, #4]
   1ac4e:	79c3      	ldrb	r3, [r0, #7]
   1ac50:	4053      	eors	r3, r2
   1ac52:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1ac54:	7acb      	ldrb	r3, [r1, #11]
   1ac56:	7a02      	ldrb	r2, [r0, #8]
   1ac58:	4053      	eors	r3, r2
   1ac5a:	7203      	strb	r3, [r0, #8]
   1ac5c:	7a42      	ldrb	r2, [r0, #9]
   1ac5e:	894b      	ldrh	r3, [r1, #10]
   1ac60:	4053      	eors	r3, r2
   1ac62:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1ac64:	688a      	ldr	r2, [r1, #8]
   1ac66:	7a83      	ldrb	r3, [r0, #10]
   1ac68:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ac6c:	7283      	strb	r3, [r0, #10]
   1ac6e:	688a      	ldr	r2, [r1, #8]
   1ac70:	7ac3      	ldrb	r3, [r0, #11]
   1ac72:	4053      	eors	r3, r2
   1ac74:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1ac76:	7bcb      	ldrb	r3, [r1, #15]
   1ac78:	7b02      	ldrb	r2, [r0, #12]
   1ac7a:	4053      	eors	r3, r2
   1ac7c:	7303      	strb	r3, [r0, #12]
   1ac7e:	89cb      	ldrh	r3, [r1, #14]
   1ac80:	7b42      	ldrb	r2, [r0, #13]
   1ac82:	4053      	eors	r3, r2
   1ac84:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1ac86:	68ca      	ldr	r2, [r1, #12]
   1ac88:	7b83      	ldrb	r3, [r0, #14]
   1ac8a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ac8e:	7383      	strb	r3, [r0, #14]
   1ac90:	68ca      	ldr	r2, [r1, #12]
   1ac92:	7bc3      	ldrb	r3, [r0, #15]
   1ac94:	4053      	eors	r3, r2
   1ac96:	73c3      	strb	r3, [r0, #15]
}
   1ac98:	4770      	bx	lr

0001ac9a <shift_rows>:
{
   1ac9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1ac9c:	7802      	ldrb	r2, [r0, #0]
   1ac9e:	f88d 2000 	strb.w	r2, [sp]
   1aca2:	7942      	ldrb	r2, [r0, #5]
   1aca4:	f88d 2001 	strb.w	r2, [sp, #1]
   1aca8:	7a82      	ldrb	r2, [r0, #10]
   1acaa:	f88d 2002 	strb.w	r2, [sp, #2]
   1acae:	7bc2      	ldrb	r2, [r0, #15]
   1acb0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1acb4:	7902      	ldrb	r2, [r0, #4]
   1acb6:	f88d 2004 	strb.w	r2, [sp, #4]
   1acba:	7a42      	ldrb	r2, [r0, #9]
   1acbc:	f88d 2005 	strb.w	r2, [sp, #5]
   1acc0:	7b82      	ldrb	r2, [r0, #14]
   1acc2:	f88d 2006 	strb.w	r2, [sp, #6]
   1acc6:	78c2      	ldrb	r2, [r0, #3]
   1acc8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1accc:	7a02      	ldrb	r2, [r0, #8]
   1acce:	f88d 2008 	strb.w	r2, [sp, #8]
   1acd2:	7b42      	ldrb	r2, [r0, #13]
   1acd4:	f88d 2009 	strb.w	r2, [sp, #9]
   1acd8:	7882      	ldrb	r2, [r0, #2]
   1acda:	f88d 200a 	strb.w	r2, [sp, #10]
   1acde:	79c2      	ldrb	r2, [r0, #7]
   1ace0:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1ace4:	7b02      	ldrb	r2, [r0, #12]
   1ace6:	f88d 200c 	strb.w	r2, [sp, #12]
   1acea:	7842      	ldrb	r2, [r0, #1]
   1acec:	7ac3      	ldrb	r3, [r0, #11]
   1acee:	f88d 200d 	strb.w	r2, [sp, #13]
   1acf2:	7982      	ldrb	r2, [r0, #6]
   1acf4:	f88d 200e 	strb.w	r2, [sp, #14]
   1acf8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1acfc:	2310      	movs	r3, #16
   1acfe:	466a      	mov	r2, sp
   1ad00:	4619      	mov	r1, r3
   1ad02:	f7ff f87b 	bl	19dfc <_copy>
}
   1ad06:	b005      	add	sp, #20
   1ad08:	f85d fb04 	ldr.w	pc, [sp], #4

0001ad0c <mult_row_column>:
{
   1ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad0e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ad10:	7808      	ldrb	r0, [r1, #0]
{
   1ad12:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ad14:	f7ff f881 	bl	19e1a <_double_byte>
   1ad18:	4605      	mov	r5, r0
   1ad1a:	7860      	ldrb	r0, [r4, #1]
   1ad1c:	f7ff f87d 	bl	19e1a <_double_byte>
   1ad20:	78a2      	ldrb	r2, [r4, #2]
   1ad22:	7863      	ldrb	r3, [r4, #1]
   1ad24:	4053      	eors	r3, r2
   1ad26:	78e2      	ldrb	r2, [r4, #3]
   1ad28:	4053      	eors	r3, r2
   1ad2a:	405d      	eors	r5, r3
   1ad2c:	4045      	eors	r5, r0
   1ad2e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1ad30:	7860      	ldrb	r0, [r4, #1]
   1ad32:	7827      	ldrb	r7, [r4, #0]
   1ad34:	f7ff f871 	bl	19e1a <_double_byte>
   1ad38:	4605      	mov	r5, r0
   1ad3a:	78a0      	ldrb	r0, [r4, #2]
   1ad3c:	f7ff f86d 	bl	19e1a <_double_byte>
   1ad40:	78a3      	ldrb	r3, [r4, #2]
   1ad42:	405f      	eors	r7, r3
   1ad44:	78e3      	ldrb	r3, [r4, #3]
   1ad46:	405f      	eors	r7, r3
   1ad48:	407d      	eors	r5, r7
   1ad4a:	4045      	eors	r5, r0
   1ad4c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1ad4e:	78a0      	ldrb	r0, [r4, #2]
   1ad50:	7865      	ldrb	r5, [r4, #1]
   1ad52:	7827      	ldrb	r7, [r4, #0]
   1ad54:	f7ff f861 	bl	19e1a <_double_byte>
   1ad58:	406f      	eors	r7, r5
   1ad5a:	4605      	mov	r5, r0
   1ad5c:	78e0      	ldrb	r0, [r4, #3]
   1ad5e:	f7ff f85c 	bl	19e1a <_double_byte>
   1ad62:	78e3      	ldrb	r3, [r4, #3]
   1ad64:	405f      	eors	r7, r3
   1ad66:	407d      	eors	r5, r7
   1ad68:	4045      	eors	r5, r0
   1ad6a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ad6c:	7820      	ldrb	r0, [r4, #0]
   1ad6e:	f7ff f854 	bl	19e1a <_double_byte>
   1ad72:	7863      	ldrb	r3, [r4, #1]
   1ad74:	7825      	ldrb	r5, [r4, #0]
   1ad76:	405d      	eors	r5, r3
   1ad78:	78a3      	ldrb	r3, [r4, #2]
   1ad7a:	405d      	eors	r5, r3
   1ad7c:	4045      	eors	r5, r0
   1ad7e:	78e0      	ldrb	r0, [r4, #3]
   1ad80:	f7ff f84b 	bl	19e1a <_double_byte>
   1ad84:	b2ed      	uxtb	r5, r5
   1ad86:	4045      	eors	r5, r0
   1ad88:	70f5      	strb	r5, [r6, #3]
}
   1ad8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ad8c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1ad8c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ad8e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1ad90:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ad92:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	bfb4      	ite	lt
   1ad9a:	2387      	movlt	r3, #135	; 0x87
   1ad9c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1ad9e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ada2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1ada6:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1ada8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1adac:	d002      	beq.n	1adb4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1adae:	7813      	ldrb	r3, [r2, #0]
   1adb0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1adb2:	e7f4      	b.n	1ad9e <gf_double+0x12>
	}
}
   1adb4:	bd10      	pop	{r4, pc}

0001adb6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1adb6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1adb8:	b120      	cbz	r0, 1adc4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1adba:	2258      	movs	r2, #88	; 0x58
   1adbc:	2100      	movs	r1, #0
   1adbe:	f7ff f82a 	bl	19e16 <_set>
   1adc2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1adc4:	bd08      	pop	{r3, pc}

0001adc6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1adc6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1adc8:	4604      	mov	r4, r0
   1adca:	b188      	cbz	r0, 1adf0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1adcc:	2210      	movs	r2, #16
   1adce:	2100      	movs	r1, #0
   1add0:	f7ff f821 	bl	19e16 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1add4:	2210      	movs	r2, #16
   1add6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1adda:	2100      	movs	r1, #0
   1addc:	f7ff f81b 	bl	19e16 <_set>
	s->leftover_offset = 0;
   1ade0:	2300      	movs	r3, #0
   1ade2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1ade4:	2200      	movs	r2, #0
   1ade6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1adea:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1adee:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1adf0:	bd10      	pop	{r4, pc}

0001adf2 <tc_cmac_setup>:
{
   1adf2:	b570      	push	{r4, r5, r6, lr}
   1adf4:	460d      	mov	r5, r1
   1adf6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1adf8:	4604      	mov	r4, r0
   1adfa:	b310      	cbz	r0, 1ae42 <tc_cmac_setup+0x50>
   1adfc:	b311      	cbz	r1, 1ae44 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1adfe:	2258      	movs	r2, #88	; 0x58
   1ae00:	2100      	movs	r1, #0
   1ae02:	f7ff f808 	bl	19e16 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1ae06:	4629      	mov	r1, r5
	s->sched = sched;
   1ae08:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1ae0a:	4630      	mov	r0, r6
   1ae0c:	f7f5 ff68 	bl	10ce0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ae10:	2210      	movs	r2, #16
   1ae12:	2100      	movs	r1, #0
   1ae14:	4620      	mov	r0, r4
   1ae16:	f7fe fffe 	bl	19e16 <_set>
	gf_double (s->K1, s->iv);
   1ae1a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ae1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ae20:	4621      	mov	r1, r4
   1ae22:	4620      	mov	r0, r4
   1ae24:	f7f5 ffae 	bl	10d84 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1ae28:	4621      	mov	r1, r4
   1ae2a:	4628      	mov	r0, r5
   1ae2c:	f7ff ffae 	bl	1ad8c <gf_double>
	gf_double (s->K2, s->K1);
   1ae30:	4629      	mov	r1, r5
   1ae32:	f104 0020 	add.w	r0, r4, #32
   1ae36:	f7ff ffa9 	bl	1ad8c <gf_double>
	tc_cmac_init(s);
   1ae3a:	4620      	mov	r0, r4
   1ae3c:	f7ff ffc3 	bl	1adc6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1ae40:	2001      	movs	r0, #1
}
   1ae42:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ae44:	4608      	mov	r0, r1
   1ae46:	e7fc      	b.n	1ae42 <tc_cmac_setup+0x50>

0001ae48 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae4c:	460d      	mov	r5, r1
   1ae4e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1ae50:	4604      	mov	r4, r0
   1ae52:	2800      	cmp	r0, #0
   1ae54:	d062      	beq.n	1af1c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1ae56:	b912      	cbnz	r2, 1ae5e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1ae58:	2001      	movs	r0, #1
}
   1ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1ae5e:	2900      	cmp	r1, #0
   1ae60:	d05c      	beq.n	1af1c <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1ae62:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1ae66:	ea50 0301 	orrs.w	r3, r0, r1
   1ae6a:	d057      	beq.n	1af1c <tc_cmac_update+0xd4>
	s->countdown--;
   1ae6c:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1ae70:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1ae74:	f141 33ff 	adc.w	r3, r1, #4294967295
   1ae78:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1ae7c:	f1b8 0f00 	cmp.w	r8, #0
   1ae80:	d02a      	beq.n	1aed8 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1ae82:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1ae86:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1ae8a:	42be      	cmp	r6, r7
   1ae8c:	4420      	add	r0, r4
   1ae8e:	d208      	bcs.n	1aea2 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ae90:	462a      	mov	r2, r5
   1ae92:	4633      	mov	r3, r6
   1ae94:	4631      	mov	r1, r6
   1ae96:	f7fe ffb1 	bl	19dfc <_copy>
			s->leftover_offset += data_length;
   1ae9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1ae9c:	4432      	add	r2, r6
   1ae9e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1aea0:	e7da      	b.n	1ae58 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1aea2:	463b      	mov	r3, r7
   1aea4:	462a      	mov	r2, r5
   1aea6:	4639      	mov	r1, r7
   1aea8:	f7fe ffa8 	bl	19dfc <_copy>
		data_length -= remaining_space;
   1aeac:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1aeae:	2300      	movs	r3, #0
   1aeb0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1aeb2:	4446      	add	r6, r8
		data += remaining_space;
   1aeb4:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1aeb6:	1e63      	subs	r3, r4, #1
   1aeb8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1aebc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1aec0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1aec4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1aec6:	ea82 0200 	eor.w	r2, r2, r0
   1aeca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1aecc:	d1f6      	bne.n	1aebc <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1aece:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1aed0:	4621      	mov	r1, r4
   1aed2:	4620      	mov	r0, r4
   1aed4:	f7f5 ff56 	bl	10d84 <tc_aes_encrypt>
   1aed8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1aedc:	2e10      	cmp	r6, #16
   1aede:	d80a      	bhi.n	1aef6 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1aee0:	2e00      	cmp	r6, #0
   1aee2:	d0b9      	beq.n	1ae58 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1aee4:	4633      	mov	r3, r6
   1aee6:	462a      	mov	r2, r5
   1aee8:	4631      	mov	r1, r6
   1aeea:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1aeee:	f7fe ff85 	bl	19dfc <_copy>
		s->leftover_offset = data_length;
   1aef2:	6466      	str	r6, [r4, #68]	; 0x44
   1aef4:	e7b0      	b.n	1ae58 <tc_cmac_update+0x10>
   1aef6:	1e63      	subs	r3, r4, #1
   1aef8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1aefa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1aefe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1af02:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1af04:	ea82 0200 	eor.w	r2, r2, r0
   1af08:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1af0a:	d1f6      	bne.n	1aefa <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1af0c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1af0e:	4621      	mov	r1, r4
   1af10:	4620      	mov	r0, r4
   1af12:	f7f5 ff37 	bl	10d84 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1af16:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1af18:	3e10      	subs	r6, #16
   1af1a:	e7df      	b.n	1aedc <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1af1c:	2000      	movs	r0, #0
   1af1e:	e79c      	b.n	1ae5a <tc_cmac_update+0x12>

0001af20 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1af20:	b570      	push	{r4, r5, r6, lr}
   1af22:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1af24:	4605      	mov	r5, r0
   1af26:	b1e8      	cbz	r0, 1af64 <tc_cmac_final+0x44>
   1af28:	b369      	cbz	r1, 1af86 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1af2a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1af2c:	2a10      	cmp	r2, #16
   1af2e:	d11a      	bne.n	1af66 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1af30:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1af32:	1e63      	subs	r3, r4, #1
   1af34:	3901      	subs	r1, #1
   1af36:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1af3a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1af3e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1af42:	4072      	eors	r2, r6
   1af44:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1af48:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1af4a:	ea82 0206 	eor.w	r2, r2, r6
   1af4e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1af50:	d1f3      	bne.n	1af3a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1af52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1af54:	4621      	mov	r1, r4
   1af56:	4628      	mov	r0, r5
   1af58:	f7f5 ff14 	bl	10d84 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1af5c:	4620      	mov	r0, r4
   1af5e:	f7ff ff2a 	bl	1adb6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1af62:	2001      	movs	r0, #1
}
   1af64:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1af66:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1af6a:	2100      	movs	r1, #0
   1af6c:	f1c2 0210 	rsb	r2, r2, #16
   1af70:	4420      	add	r0, r4
   1af72:	f7fe ff50 	bl	19e16 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1af76:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1af78:	4423      	add	r3, r4
   1af7a:	2280      	movs	r2, #128	; 0x80
   1af7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1af80:	f104 0120 	add.w	r1, r4, #32
   1af84:	e7d5      	b.n	1af32 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1af86:	4608      	mov	r0, r1
   1af88:	e7ec      	b.n	1af64 <tc_cmac_final+0x44>

0001af8a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1af8a:	2100      	movs	r1, #0
   1af8c:	2001      	movs	r0, #1
   1af8e:	f000 b800 	b.w	1af92 <z_arm_fatal_error>

0001af92 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1af92:	f002 bf02 	b.w	1dd9a <z_fatal_error>

0001af96 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1af96:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1af98:	6800      	ldr	r0, [r0, #0]
   1af9a:	f002 befe 	b.w	1dd9a <z_fatal_error>

0001af9e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1af9e:	b508      	push	{r3, lr}
	handler();
   1afa0:	f7f6 f854 	bl	1104c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1afa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1afa8:	f7f6 b984 	b.w	112b4 <z_arm_exc_exit>

0001afac <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1afac:	3901      	subs	r1, #1
   1afae:	4603      	mov	r3, r0
   1afb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1afb4:	b90a      	cbnz	r2, 1afba <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1afb6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1afb8:	4770      	bx	lr
		*d = *s;
   1afba:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1afbe:	e7f7      	b.n	1afb0 <strcpy+0x4>

0001afc0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1afc0:	4603      	mov	r3, r0
	size_t n = 0;
   1afc2:	2000      	movs	r0, #0

	while (*s != '\0') {
   1afc4:	5c1a      	ldrb	r2, [r3, r0]
   1afc6:	b902      	cbnz	r2, 1afca <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1afc8:	4770      	bx	lr
		n++;
   1afca:	3001      	adds	r0, #1
   1afcc:	e7fa      	b.n	1afc4 <strlen+0x4>

0001afce <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1afce:	4603      	mov	r3, r0
	size_t n = 0;
   1afd0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1afd2:	5c1a      	ldrb	r2, [r3, r0]
   1afd4:	b10a      	cbz	r2, 1afda <strnlen+0xc>
   1afd6:	4288      	cmp	r0, r1
   1afd8:	d100      	bne.n	1afdc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1afda:	4770      	bx	lr
		n++;
   1afdc:	3001      	adds	r0, #1
   1afde:	e7f8      	b.n	1afd2 <strnlen+0x4>

0001afe0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1afe0:	1e43      	subs	r3, r0, #1
   1afe2:	3901      	subs	r1, #1
   1afe4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1afe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1afec:	4282      	cmp	r2, r0
   1afee:	d101      	bne.n	1aff4 <strcmp+0x14>
   1aff0:	2a00      	cmp	r2, #0
   1aff2:	d1f7      	bne.n	1afe4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1aff4:	1a10      	subs	r0, r2, r0
   1aff6:	4770      	bx	lr

0001aff8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1aff8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1affa:	b15a      	cbz	r2, 1b014 <memcmp+0x1c>
   1affc:	3901      	subs	r1, #1
   1affe:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b000:	f810 2b01 	ldrb.w	r2, [r0], #1
   1b004:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1b008:	42a0      	cmp	r0, r4
   1b00a:	d001      	beq.n	1b010 <memcmp+0x18>
   1b00c:	429a      	cmp	r2, r3
   1b00e:	d0f7      	beq.n	1b000 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1b010:	1ad0      	subs	r0, r2, r3
}
   1b012:	bd10      	pop	{r4, pc}
		return 0;
   1b014:	4610      	mov	r0, r2
   1b016:	e7fc      	b.n	1b012 <memcmp+0x1a>

0001b018 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1b018:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1b01a:	ea81 0400 	eor.w	r4, r1, r0
   1b01e:	07a5      	lsls	r5, r4, #30
   1b020:	4603      	mov	r3, r0
   1b022:	d00b      	beq.n	1b03c <memcpy+0x24>
   1b024:	3b01      	subs	r3, #1
   1b026:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1b028:	4291      	cmp	r1, r2
   1b02a:	d11b      	bne.n	1b064 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1b02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1b02e:	2a00      	cmp	r2, #0
   1b030:	d0fc      	beq.n	1b02c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1b032:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b036:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1b03a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1b03c:	079c      	lsls	r4, r3, #30
   1b03e:	d1f6      	bne.n	1b02e <memcpy+0x16>
   1b040:	f022 0403 	bic.w	r4, r2, #3
   1b044:	1f1d      	subs	r5, r3, #4
   1b046:	0896      	lsrs	r6, r2, #2
   1b048:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1b04a:	42b9      	cmp	r1, r7
   1b04c:	d105      	bne.n	1b05a <memcpy+0x42>
   1b04e:	f06f 0503 	mvn.w	r5, #3
   1b052:	fb05 2206 	mla	r2, r5, r6, r2
   1b056:	4423      	add	r3, r4
   1b058:	e7e4      	b.n	1b024 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1b05a:	f851 cb04 	ldr.w	ip, [r1], #4
   1b05e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1b062:	e7f2      	b.n	1b04a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1b064:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b068:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1b06c:	e7dc      	b.n	1b028 <memcpy+0x10>

0001b06e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1b06e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1b070:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1b072:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1b074:	079c      	lsls	r4, r3, #30
   1b076:	d111      	bne.n	1b09c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1b078:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1b07c:	f022 0603 	bic.w	r6, r2, #3
   1b080:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1b084:	441e      	add	r6, r3
   1b086:	0894      	lsrs	r4, r2, #2
   1b088:	42b3      	cmp	r3, r6
   1b08a:	d10d      	bne.n	1b0a8 <memset+0x3a>
   1b08c:	f06f 0503 	mvn.w	r5, #3
   1b090:	fb05 2204 	mla	r2, r5, r4, r2
   1b094:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1b096:	4293      	cmp	r3, r2
   1b098:	d109      	bne.n	1b0ae <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b09a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1b09c:	2a00      	cmp	r2, #0
   1b09e:	d0fc      	beq.n	1b09a <memset+0x2c>
		*(d_byte++) = c_byte;
   1b0a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b0a4:	3a01      	subs	r2, #1
   1b0a6:	e7e5      	b.n	1b074 <memset+0x6>
		*(d_word++) = c_word;
   1b0a8:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1b0ac:	e7ec      	b.n	1b088 <memset+0x1a>
		*(d_byte++) = c_byte;
   1b0ae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b0b2:	e7f0      	b.n	1b096 <memset+0x28>

0001b0b4 <_stdout_hook_default>:
}
   1b0b4:	f04f 30ff 	mov.w	r0, #4294967295
   1b0b8:	4770      	bx	lr

0001b0ba <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1b0ba:	f7fc bd35 	b.w	17b28 <SystemInit>

0001b0be <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   1b0be:	b082      	sub	sp, #8
   1b0c0:	ab02      	add	r3, sp, #8
   1b0c2:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   1b0c6:	f89d 3000 	ldrb.w	r3, [sp]
   1b0ca:	2b06      	cmp	r3, #6
   1b0cc:	d108      	bne.n	1b0e0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1b0ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b0d2:	2201      	movs	r2, #1
   1b0d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1b0d8:	f3bf 8f4f 	dsb	sy
        __WFE();
   1b0dc:	bf20      	wfe
    while (true)
   1b0de:	e7fd      	b.n	1b0dc <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1b0e0:	b002      	add	sp, #8
   1b0e2:	4770      	bx	lr

0001b0e4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1b0e4:	b082      	sub	sp, #8
   1b0e6:	ab02      	add	r3, sp, #8
   1b0e8:	e903 0003 	stmdb	r3, {r0, r1}
   1b0ec:	2300      	movs	r3, #0
   1b0ee:	f383 8811 	msr	BASEPRI, r3
   1b0f2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b0f6:	b002      	add	sp, #8
   1b0f8:	4770      	bx	lr

0001b0fa <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1b0fa:	b530      	push	{r4, r5, lr}
   1b0fc:	b085      	sub	sp, #20
   1b0fe:	4604      	mov	r4, r0
   1b100:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1b102:	4668      	mov	r0, sp
   1b104:	2203      	movs	r2, #3
   1b106:	f7ff ff87 	bl	1b018 <memcpy>
	(void)memset(res + 3, 0, 13);
   1b10a:	220d      	movs	r2, #13
   1b10c:	2100      	movs	r1, #0
   1b10e:	f10d 0003 	add.w	r0, sp, #3
   1b112:	f7ff ffac 	bl	1b06e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1b116:	4620      	mov	r0, r4
   1b118:	466a      	mov	r2, sp
   1b11a:	4669      	mov	r1, sp
   1b11c:	f002 fdbf 	bl	1dc9e <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1b120:	4604      	mov	r4, r0
   1b122:	b920      	cbnz	r0, 1b12e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1b124:	2203      	movs	r2, #3
   1b126:	4669      	mov	r1, sp
   1b128:	4628      	mov	r0, r5
   1b12a:	f7ff ff75 	bl	1b018 <memcpy>

	return 0;
}
   1b12e:	4620      	mov	r0, r4
   1b130:	b005      	add	sp, #20
   1b132:	bd30      	pop	{r4, r5, pc}

0001b134 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1b134:	b513      	push	{r0, r1, r4, lr}
   1b136:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1b138:	aa01      	add	r2, sp, #4
   1b13a:	3103      	adds	r1, #3
   1b13c:	f7ff ffdd 	bl	1b0fa <ah>
	if (err) {
   1b140:	b948      	cbnz	r0, 1b156 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1b142:	2203      	movs	r2, #3
   1b144:	a901      	add	r1, sp, #4
   1b146:	4620      	mov	r0, r4
   1b148:	f7ff ff56 	bl	1aff8 <memcmp>
   1b14c:	fab0 f080 	clz	r0, r0
   1b150:	0940      	lsrs	r0, r0, #5
}
   1b152:	b002      	add	sp, #8
   1b154:	bd10      	pop	{r4, pc}
		return false;
   1b156:	2000      	movs	r0, #0
   1b158:	e7fb      	b.n	1b152 <bt_rpa_irk_matches+0x1e>

0001b15a <send_cmd_status>:
{
   1b15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1b15e:	f04f 32ff 	mov.w	r2, #4294967295
{
   1b162:	4606      	mov	r6, r0
   1b164:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1b166:	f04f 33ff 	mov.w	r3, #4294967295
   1b16a:	2100      	movs	r1, #0
   1b16c:	200f      	movs	r0, #15
   1b16e:	f7f6 fbc5 	bl	118fc <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1b172:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1b174:	f100 0808 	add.w	r8, r0, #8
   1b178:	4604      	mov	r4, r0
   1b17a:	7507      	strb	r7, [r0, #20]
   1b17c:	2102      	movs	r1, #2
   1b17e:	4640      	mov	r0, r8
   1b180:	f002 fcbe 	bl	1db00 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1b184:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1b186:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1b188:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1b18a:	7041      	strb	r1, [r0, #1]
   1b18c:	4640      	mov	r0, r8
   1b18e:	f002 fcb7 	bl	1db00 <net_buf_simple_add>
	evt->ncmd = 1U;
   1b192:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1b194:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1b196:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   1b198:	4620      	mov	r0, r4
}
   1b19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   1b19e:	f7f7 bacf 	b.w	12740 <bt_recv>

0001b1a2 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1b1a2:	f101 0320 	add.w	r3, r1, #32
   1b1a6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1b1a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1b1ac:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1b1b0:	428b      	cmp	r3, r1
   1b1b2:	d1f9      	bne.n	1b1a8 <sys_memcpy_swap.constprop.0+0x6>
}
   1b1b4:	4770      	bx	lr

0001b1b6 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1b1b6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1b1ba:	f043 0306 	orr.w	r3, r3, #6
   1b1be:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1b1c2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1b1c6:	f043 0304 	orr.w	r3, r3, #4
   1b1ca:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1b1ce:	4770      	bx	lr

0001b1d0 <default_CSPRNG>:
{
   1b1d0:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1b1d2:	f7fc fbd3 	bl	1797c <bt_rand>
}
   1b1d6:	fab0 f080 	clz	r0, r0
   1b1da:	0940      	lsrs	r0, r0, #5
   1b1dc:	bd08      	pop	{r3, pc}

0001b1de <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1b1de:	b510      	push	{r4, lr}
   1b1e0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1b1e2:	7801      	ldrb	r1, [r0, #0]
   1b1e4:	7822      	ldrb	r2, [r4, #0]
   1b1e6:	428a      	cmp	r2, r1
{
   1b1e8:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1b1ea:	d00e      	beq.n	1b20a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1b1ec:	4669      	mov	r1, sp
   1b1ee:	f7f6 fb11 	bl	11814 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1b1f2:	a905      	add	r1, sp, #20
   1b1f4:	4620      	mov	r0, r4
   1b1f6:	f7f6 fb0d 	bl	11814 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1b1fa:	2210      	movs	r2, #16
   1b1fc:	f10d 0115 	add.w	r1, sp, #21
   1b200:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b204:	f7ff fef8 	bl	1aff8 <memcmp>
   1b208:	e007      	b.n	1b21a <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1b20a:	2a01      	cmp	r2, #1
   1b20c:	d007      	beq.n	1b21e <bt_uuid_cmp+0x40>
   1b20e:	2a02      	cmp	r2, #2
   1b210:	d008      	beq.n	1b224 <bt_uuid_cmp+0x46>
   1b212:	b95a      	cbnz	r2, 1b22c <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1b214:	8840      	ldrh	r0, [r0, #2]
   1b216:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1b218:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1b21a:	b00a      	add	sp, #40	; 0x28
   1b21c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1b21e:	6840      	ldr	r0, [r0, #4]
   1b220:	6863      	ldr	r3, [r4, #4]
   1b222:	e7f9      	b.n	1b218 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b224:	2210      	movs	r2, #16
   1b226:	1c61      	adds	r1, r4, #1
   1b228:	3001      	adds	r0, #1
   1b22a:	e7eb      	b.n	1b204 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1b22c:	f06f 0015 	mvn.w	r0, #21
   1b230:	e7f3      	b.n	1b21a <bt_uuid_cmp+0x3c>

0001b232 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1b232:	2a04      	cmp	r2, #4
{
   1b234:	b538      	push	{r3, r4, r5, lr}
   1b236:	460c      	mov	r4, r1
	switch (data_len) {
   1b238:	d00d      	beq.n	1b256 <bt_uuid_create+0x24>
   1b23a:	2a10      	cmp	r2, #16
   1b23c:	d019      	beq.n	1b272 <bt_uuid_create+0x40>
   1b23e:	2a02      	cmp	r2, #2
   1b240:	f04f 0300 	mov.w	r3, #0
   1b244:	d11b      	bne.n	1b27e <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1b246:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1b248:	784a      	ldrb	r2, [r1, #1]
   1b24a:	780b      	ldrb	r3, [r1, #0]
   1b24c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1b250:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1b252:	2001      	movs	r0, #1
}
   1b254:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1b256:	2301      	movs	r3, #1
   1b258:	7003      	strb	r3, [r0, #0]
   1b25a:	78a2      	ldrb	r2, [r4, #2]
   1b25c:	78c9      	ldrb	r1, [r1, #3]
   1b25e:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1b260:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1b264:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1b266:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1b26a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1b26e:	6042      	str	r2, [r0, #4]
		break;
   1b270:	e7ef      	b.n	1b252 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1b272:	2302      	movs	r3, #2
   1b274:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1b278:	f7ff fece 	bl	1b018 <memcpy>
		break;
   1b27c:	e7e9      	b.n	1b252 <bt_uuid_create+0x20>
	switch (data_len) {
   1b27e:	4618      	mov	r0, r3
   1b280:	e7e8      	b.n	1b254 <bt_uuid_create+0x22>

0001b282 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1b282:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1b284:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1b286:	2106      	movs	r1, #6
{
   1b288:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1b28a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1b28e:	f7fc fb75 	bl	1797c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1b292:	b918      	cbnz	r0, 1b29c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1b294:	79a3      	ldrb	r3, [r4, #6]
   1b296:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b29a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1b29c:	bd10      	pop	{r4, pc}

0001b29e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1b29e:	280f      	cmp	r0, #15
   1b2a0:	d806      	bhi.n	1b2b0 <bt_hci_evt_get_flags+0x12>
   1b2a2:	280d      	cmp	r0, #13
   1b2a4:	d80b      	bhi.n	1b2be <bt_hci_evt_get_flags+0x20>
   1b2a6:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1b2a8:	bf14      	ite	ne
   1b2aa:	2002      	movne	r0, #2
   1b2ac:	2003      	moveq	r0, #3
   1b2ae:	4770      	bx	lr
	switch (evt) {
   1b2b0:	2813      	cmp	r0, #19
   1b2b2:	d004      	beq.n	1b2be <bt_hci_evt_get_flags+0x20>
   1b2b4:	281a      	cmp	r0, #26
   1b2b6:	bf14      	ite	ne
   1b2b8:	2002      	movne	r0, #2
   1b2ba:	2001      	moveq	r0, #1
   1b2bc:	4770      	bx	lr
   1b2be:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1b2c0:	4770      	bx	lr

0001b2c2 <handle_event>:
{
   1b2c2:	b410      	push	{r4}
   1b2c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b2c8:	4604      	mov	r4, r0
   1b2ca:	4608      	mov	r0, r1
		if (handler->event != event) {
   1b2cc:	7811      	ldrb	r1, [r2, #0]
   1b2ce:	42a1      	cmp	r1, r4
   1b2d0:	d004      	beq.n	1b2dc <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1b2d2:	3208      	adds	r2, #8
   1b2d4:	429a      	cmp	r2, r3
   1b2d6:	d1f9      	bne.n	1b2cc <handle_event+0xa>
}
   1b2d8:	bc10      	pop	{r4}
   1b2da:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1b2dc:	8981      	ldrh	r1, [r0, #12]
   1b2de:	7853      	ldrb	r3, [r2, #1]
   1b2e0:	4299      	cmp	r1, r3
   1b2e2:	d3f9      	bcc.n	1b2d8 <handle_event+0x16>
		handler->handler(buf);
   1b2e4:	6853      	ldr	r3, [r2, #4]
}
   1b2e6:	bc10      	pop	{r4}
		handler->handler(buf);
   1b2e8:	4718      	bx	r3

0001b2ea <hci_data_buf_overflow>:
}
   1b2ea:	4770      	bx	lr

0001b2ec <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1b2ec:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1b2f0:	b193      	cbz	r3, 1b318 <update_sec_level+0x2c>
   1b2f2:	7b5a      	ldrb	r2, [r3, #13]
   1b2f4:	07d1      	lsls	r1, r2, #31
   1b2f6:	d50f      	bpl.n	1b318 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1b2f8:	06d2      	lsls	r2, r2, #27
   1b2fa:	d50b      	bpl.n	1b314 <update_sec_level+0x28>
   1b2fc:	7b1b      	ldrb	r3, [r3, #12]
   1b2fe:	2b10      	cmp	r3, #16
   1b300:	d108      	bne.n	1b314 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   1b302:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1b304:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1b306:	7a82      	ldrb	r2, [r0, #10]
   1b308:	7a40      	ldrb	r0, [r0, #9]
}
   1b30a:	4282      	cmp	r2, r0
   1b30c:	bf8c      	ite	hi
   1b30e:	2000      	movhi	r0, #0
   1b310:	2001      	movls	r0, #1
   1b312:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   1b314:	2303      	movs	r3, #3
   1b316:	e7f5      	b.n	1b304 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   1b318:	2302      	movs	r3, #2
   1b31a:	e7f3      	b.n	1b304 <update_sec_level+0x18>

0001b31c <get_adv_channel_map>:
{
   1b31c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1b31e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1b322:	bf0c      	ite	eq
   1b324:	2007      	moveq	r0, #7
   1b326:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1b328:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1b32a:	bf48      	it	mi
   1b32c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1b330:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1b332:	bf48      	it	mi
   1b334:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1b338:	4770      	bx	lr

0001b33a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b33a:	f3bf 8f5b 	dmb	ish
   1b33e:	6800      	ldr	r0, [r0, #0]
   1b340:	f3bf 8f5b 	dmb	ish
}
   1b344:	4770      	bx	lr

0001b346 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b346:	2207      	movs	r2, #7
   1b348:	f7ff be66 	b.w	1b018 <memcpy>

0001b34c <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1b34c:	2207      	movs	r2, #7
   1b34e:	f7ff be53 	b.w	1aff8 <memcmp>

0001b352 <atomic_and>:
{
   1b352:	4603      	mov	r3, r0
}
   1b354:	f3bf 8f5b 	dmb	ish
   1b358:	e853 0f00 	ldrex	r0, [r3]
   1b35c:	ea00 0201 	and.w	r2, r0, r1
   1b360:	e843 2c00 	strex	ip, r2, [r3]
   1b364:	f1bc 0f00 	cmp.w	ip, #0
   1b368:	d1f6      	bne.n	1b358 <atomic_and+0x6>
   1b36a:	f3bf 8f5b 	dmb	ish
   1b36e:	4770      	bx	lr

0001b370 <atomic_or>:
{
   1b370:	4603      	mov	r3, r0
}
   1b372:	f3bf 8f5b 	dmb	ish
   1b376:	e853 0f00 	ldrex	r0, [r3]
   1b37a:	ea40 0201 	orr.w	r2, r0, r1
   1b37e:	e843 2c00 	strex	ip, r2, [r3]
   1b382:	f1bc 0f00 	cmp.w	ip, #0
   1b386:	d1f6      	bne.n	1b376 <atomic_or+0x6>
   1b388:	f3bf 8f5b 	dmb	ish
   1b38c:	4770      	bx	lr

0001b38e <atomic_set_bit_to>:
{
   1b38e:	460b      	mov	r3, r1
   1b390:	b410      	push	{r4}
   1b392:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b394:	f001 041f 	and.w	r4, r1, #31
   1b398:	2101      	movs	r1, #1
   1b39a:	40a1      	lsls	r1, r4
	if (val) {
   1b39c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1b3a0:	b112      	cbz	r2, 1b3a8 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1b3a2:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b3a4:	f7ff bfe4 	b.w	1b370 <atomic_or>
}
   1b3a8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3aa:	43c9      	mvns	r1, r1
   1b3ac:	f7ff bfd1 	b.w	1b352 <atomic_and>

0001b3b0 <le_data_len_change>:
{
   1b3b0:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1b3b2:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1b3b4:	8818      	ldrh	r0, [r3, #0]
   1b3b6:	f7f8 f86d 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b3ba:	b118      	cbz	r0, 1b3c4 <le_data_len_change+0x14>
}
   1b3bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1b3c0:	f000 bc32 	b.w	1bc28 <bt_conn_unref>
}
   1b3c4:	bd08      	pop	{r3, pc}

0001b3c6 <hci_disconn_complete_prio>:
{
   1b3c6:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1b3c8:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1b3ca:	781a      	ldrb	r2, [r3, #0]
   1b3cc:	b96a      	cbnz	r2, 1b3ea <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   1b3ce:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1b3d2:	f7f8 f85f 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b3d6:	4604      	mov	r4, r0
   1b3d8:	b138      	cbz	r0, 1b3ea <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1b3da:	2101      	movs	r1, #1
   1b3dc:	f7f8 f866 	bl	134ac <bt_conn_set_state>
	bt_conn_unref(conn);
   1b3e0:	4620      	mov	r0, r4
}
   1b3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1b3e6:	f000 bc1f 	b.w	1bc28 <bt_conn_unref>
}
   1b3ea:	bd10      	pop	{r4, pc}

0001b3ec <hci_disconn_complete>:
{
   1b3ec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1b3ee:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1b3f0:	7835      	ldrb	r5, [r6, #0]
   1b3f2:	b985      	cbnz	r5, 1b416 <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1b3f4:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1b3f8:	f7f8 f84c 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b3fc:	4604      	mov	r4, r0
   1b3fe:	b150      	cbz	r0, 1b416 <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1b400:	78f3      	ldrb	r3, [r6, #3]
   1b402:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b404:	4629      	mov	r1, r5
   1b406:	f7f8 f851 	bl	134ac <bt_conn_set_state>
	conn->handle = 0U;
   1b40a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1b40c:	4620      	mov	r0, r4
}
   1b40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1b412:	f000 bc09 	b.w	1bc28 <bt_conn_unref>
}
   1b416:	bd70      	pop	{r4, r5, r6, pc}

0001b418 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1b418:	2101      	movs	r1, #1
   1b41a:	3008      	adds	r0, #8
   1b41c:	f002 bb97 	b.w	1db4e <net_buf_simple_pull_mem>

0001b420 <le_conn_update_complete>:
{
   1b420:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1b422:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1b424:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1b428:	f7f8 f834 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b42c:	4604      	mov	r4, r0
   1b42e:	b1c0      	cbz	r0, 1b462 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1b430:	782b      	ldrb	r3, [r5, #0]
   1b432:	b9c3      	cbnz	r3, 1b466 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1b434:	792a      	ldrb	r2, [r5, #4]
   1b436:	78eb      	ldrb	r3, [r5, #3]
   1b438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b43c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1b440:	79aa      	ldrb	r2, [r5, #6]
   1b442:	796b      	ldrb	r3, [r5, #5]
   1b444:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b448:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1b44c:	79eb      	ldrb	r3, [r5, #7]
   1b44e:	7a2a      	ldrb	r2, [r5, #8]
   1b450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b454:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1b458:	f7f7 febe 	bl	131d8 <notify_le_param_updated>
	bt_conn_unref(conn);
   1b45c:	4620      	mov	r0, r4
   1b45e:	f000 fbe3 	bl	1bc28 <bt_conn_unref>
}
   1b462:	b003      	add	sp, #12
   1b464:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1b466:	2b1a      	cmp	r3, #26
   1b468:	d1f8      	bne.n	1b45c <le_conn_update_complete+0x3c>
   1b46a:	78c3      	ldrb	r3, [r0, #3]
   1b46c:	2b01      	cmp	r3, #1
   1b46e:	d1f5      	bne.n	1b45c <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b470:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1b474:	3004      	adds	r0, #4
   1b476:	f7ff ff7b 	bl	1b370 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1b47a:	0543      	lsls	r3, r0, #21
   1b47c:	d4ee      	bmi.n	1b45c <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1b47e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1b482:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1b484:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1b486:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1b48a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1b48c:	4620      	mov	r0, r4
   1b48e:	f7f8 fae7 	bl	13a60 <bt_l2cap_update_conn_param>
   1b492:	e7e3      	b.n	1b45c <le_conn_update_complete+0x3c>

0001b494 <hci_vendor_event>:
   1b494:	4770      	bx	lr

0001b496 <sys_put_le64>:
	dst[1] = val >> 8;
   1b496:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1b49a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1b49c:	0e00      	lsrs	r0, r0, #24
   1b49e:	7053      	strb	r3, [r2, #1]
   1b4a0:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1b4a2:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1b4a4:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1b4a8:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1b4aa:	7093      	strb	r3, [r2, #2]
   1b4ac:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1b4ae:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1b4b0:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1b4b2:	71d1      	strb	r1, [r2, #7]
}
   1b4b4:	4770      	bx	lr

0001b4b6 <le_ltk_request>:
{
   1b4b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1b4b8:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1b4ba:	8826      	ldrh	r6, [r4, #0]
{
   1b4bc:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1b4be:	b2b0      	uxth	r0, r6
   1b4c0:	f7f7 ffe8 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b4c4:	4605      	mov	r5, r0
   1b4c6:	b318      	cbz	r0, 1b510 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1b4c8:	af02      	add	r7, sp, #8
   1b4ca:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1b4ce:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1b4d2:	9701      	str	r7, [sp, #4]
   1b4d4:	8961      	ldrh	r1, [r4, #10]
   1b4d6:	9100      	str	r1, [sp, #0]
   1b4d8:	f002 f811 	bl	1d4fe <bt_smp_request_ltk>
   1b4dc:	b1d0      	cbz	r0, 1b514 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1b4de:	2112      	movs	r1, #18
   1b4e0:	f242 001a 	movw	r0, #8218	; 0x201a
   1b4e4:	f7f6 fd8a 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b4e8:	4604      	mov	r4, r0
   1b4ea:	b170      	cbz	r0, 1b50a <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   1b4ec:	2112      	movs	r1, #18
   1b4ee:	3008      	adds	r0, #8
   1b4f0:	f002 fb06 	bl	1db00 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1b4f4:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1b4f6:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1b4fa:	2210      	movs	r2, #16
   1b4fc:	f7ff fd8c 	bl	1b018 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1b500:	4621      	mov	r1, r4
   1b502:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1b506:	f7f6 fdb1 	bl	1206c <bt_hci_cmd_send>
	bt_conn_unref(conn);
   1b50a:	4628      	mov	r0, r5
   1b50c:	f000 fb8c 	bl	1bc28 <bt_conn_unref>
}
   1b510:	b007      	add	sp, #28
   1b512:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1b514:	2102      	movs	r1, #2
   1b516:	f242 001b 	movw	r0, #8219	; 0x201b
   1b51a:	f7f6 fd6f 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b51e:	4604      	mov	r4, r0
   1b520:	2800      	cmp	r0, #0
   1b522:	d0f2      	beq.n	1b50a <le_ltk_request+0x54>
   1b524:	2102      	movs	r1, #2
   1b526:	3008      	adds	r0, #8
   1b528:	f002 faea 	bl	1db00 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1b52c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1b52e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1b530:	f242 001b 	movw	r0, #8219	; 0x201b
   1b534:	e7e7      	b.n	1b506 <le_ltk_request+0x50>

0001b536 <le_conn_param_neg_reply>:
{
   1b536:	b570      	push	{r4, r5, r6, lr}
   1b538:	4606      	mov	r6, r0
   1b53a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1b53c:	f242 0021 	movw	r0, #8225	; 0x2021
   1b540:	2103      	movs	r1, #3
   1b542:	f7f6 fd5b 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b546:	4604      	mov	r4, r0
   1b548:	b160      	cbz	r0, 1b564 <le_conn_param_neg_reply+0x2e>
   1b54a:	2103      	movs	r1, #3
   1b54c:	3008      	adds	r0, #8
   1b54e:	f002 fad7 	bl	1db00 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1b552:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1b554:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1b556:	4621      	mov	r1, r4
   1b558:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1b55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1b560:	f7f6 bd84 	b.w	1206c <bt_hci_cmd_send>
}
   1b564:	bd70      	pop	{r4, r5, r6, pc}

0001b566 <le_conn_param_req>:
{
   1b566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1b568:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1b56a:	78d9      	ldrb	r1, [r3, #3]
   1b56c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1b56e:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1b570:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b574:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1b578:	7959      	ldrb	r1, [r3, #5]
   1b57a:	791a      	ldrb	r2, [r3, #4]
   1b57c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b580:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1b584:	799a      	ldrb	r2, [r3, #6]
   1b586:	79d9      	ldrb	r1, [r3, #7]
   1b588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b58c:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1b590:	7a1a      	ldrb	r2, [r3, #8]
   1b592:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1b594:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1b596:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1b59a:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1b59c:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1b5a0:	f7f7 ff78 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b5a4:	4606      	mov	r6, r0
   1b5a6:	b928      	cbnz	r0, 1b5b4 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1b5a8:	2102      	movs	r1, #2
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	f7ff ffc3 	bl	1b536 <le_conn_param_neg_reply>
}
   1b5b0:	b003      	add	sp, #12
   1b5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1b5b4:	4669      	mov	r1, sp
   1b5b6:	f7f7 fe47 	bl	13248 <le_param_req>
   1b5ba:	b938      	cbnz	r0, 1b5cc <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1b5bc:	211e      	movs	r1, #30
   1b5be:	4620      	mov	r0, r4
   1b5c0:	f7ff ffb9 	bl	1b536 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1b5c4:	4630      	mov	r0, r6
   1b5c6:	f000 fb2f 	bl	1bc28 <bt_conn_unref>
   1b5ca:	e7f1      	b.n	1b5b0 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1b5cc:	210e      	movs	r1, #14
   1b5ce:	f242 0020 	movw	r0, #8224	; 0x2020
   1b5d2:	f7f6 fd13 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b5d6:	4605      	mov	r5, r0
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	d0f3      	beq.n	1b5c4 <le_conn_param_req+0x5e>
   1b5dc:	210e      	movs	r1, #14
   1b5de:	3008      	adds	r0, #8
   1b5e0:	f002 fa8e 	bl	1db00 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1b5e4:	220e      	movs	r2, #14
   1b5e6:	4604      	mov	r4, r0
   1b5e8:	2100      	movs	r1, #0
   1b5ea:	f7ff fd40 	bl	1b06e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1b5ee:	f8bd 3000 	ldrh.w	r3, [sp]
   1b5f2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1b5f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1b5f8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1b5fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1b5fe:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1b600:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1b604:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1b606:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1b608:	4629      	mov	r1, r5
   1b60a:	f242 0020 	movw	r0, #8224	; 0x2020
   1b60e:	f7f6 fd2d 	bl	1206c <bt_hci_cmd_send>
   1b612:	e7d7      	b.n	1b5c4 <le_conn_param_req+0x5e>

0001b614 <hci_le_read_max_data_len>:
{
   1b614:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b616:	4606      	mov	r6, r0
   1b618:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1b61a:	aa01      	add	r2, sp, #4
   1b61c:	2100      	movs	r1, #0
   1b61e:	f242 002f 	movw	r0, #8239	; 0x202f
   1b622:	f7f6 fd45 	bl	120b0 <bt_hci_cmd_send_sync>
	if (err) {
   1b626:	4604      	mov	r4, r0
   1b628:	b948      	cbnz	r0, 1b63e <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1b62a:	9801      	ldr	r0, [sp, #4]
   1b62c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1b62e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1b632:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1b634:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1b638:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1b63a:	f7fa fe85 	bl	16348 <net_buf_unref>
}
   1b63e:	4620      	mov	r0, r4
   1b640:	b002      	add	sp, #8
   1b642:	bd70      	pop	{r4, r5, r6, pc}

0001b644 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b644:	f100 0310 	add.w	r3, r0, #16
{
   1b648:	b510      	push	{r4, lr}
   1b64a:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b64c:	4618      	mov	r0, r3
   1b64e:	f7ff fe74 	bl	1b33a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b652:	0642      	lsls	r2, r0, #25
   1b654:	d50a      	bpl.n	1b66c <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1b65a:	4618      	mov	r0, r3
   1b65c:	f7ff fe88 	bl	1b370 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1b660:	4620      	mov	r0, r4
   1b662:	2100      	movs	r1, #0
}
   1b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1b668:	f7f6 be0c 	b.w	12284 <set_le_adv_enable_legacy>
}
   1b66c:	bd10      	pop	{r4, pc}

0001b66e <adv_unpause_enabled>:
{
   1b66e:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b670:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1b674:	4604      	mov	r4, r0
   1b676:	3010      	adds	r0, #16
   1b678:	f7ff fe6b 	bl	1b352 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1b67c:	0483      	lsls	r3, r0, #18
   1b67e:	d505      	bpl.n	1b68c <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1b680:	4620      	mov	r0, r4
   1b682:	2101      	movs	r1, #1
}
   1b684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1b688:	f7f6 bdfc 	b.w	12284 <set_le_adv_enable_legacy>
}
   1b68c:	bd10      	pop	{r4, pc}

0001b68e <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1b68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b690:	4607      	mov	r7, r0
   1b692:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1b694:	f242 0027 	movw	r0, #8231	; 0x2027
   1b698:	2127      	movs	r1, #39	; 0x27
   1b69a:	f7f6 fcaf 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b69e:	4604      	mov	r4, r0
   1b6a0:	b1d0      	cbz	r0, 1b6d8 <hci_id_add.isra.0+0x4a>
   1b6a2:	2127      	movs	r1, #39	; 0x27
   1b6a4:	3008      	adds	r0, #8
   1b6a6:	f002 fa2b 	bl	1db00 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1b6aa:	4639      	mov	r1, r7
   1b6ac:	4605      	mov	r5, r0
   1b6ae:	f7ff fe4a 	bl	1b346 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1b6b2:	4631      	mov	r1, r6
   1b6b4:	2210      	movs	r2, #16
   1b6b6:	1de8      	adds	r0, r5, #7
   1b6b8:	f7ff fcae 	bl	1b018 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1b6bc:	2210      	movs	r2, #16
   1b6be:	2100      	movs	r1, #0
   1b6c0:	f105 0017 	add.w	r0, r5, #23
   1b6c4:	f7ff fcd3 	bl	1b06e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1b6c8:	4621      	mov	r1, r4
   1b6ca:	2200      	movs	r2, #0
}
   1b6cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1b6d0:	f242 0027 	movw	r0, #8231	; 0x2027
   1b6d4:	f7f6 bcec 	b.w	120b0 <bt_hci_cmd_send_sync>
}
   1b6d8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b6de <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b6de:	7a03      	ldrb	r3, [r0, #8]
   1b6e0:	075b      	lsls	r3, r3, #29
   1b6e2:	d504      	bpl.n	1b6ee <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1b6e4:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1b6e8:	3001      	adds	r0, #1
   1b6ea:	f7ff bfd0 	b.w	1b68e <hci_id_add.isra.0>
}
   1b6ee:	4770      	bx	lr

0001b6f0 <addr_res_enable>:
{
   1b6f0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1b6f2:	2101      	movs	r1, #1
{
   1b6f4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1b6f6:	f242 002d 	movw	r0, #8237	; 0x202d
   1b6fa:	f7f6 fc7f 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b6fe:	4604      	mov	r4, r0
   1b700:	b158      	cbz	r0, 1b71a <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1b702:	4629      	mov	r1, r5
   1b704:	3008      	adds	r0, #8
   1b706:	f002 fa0a 	bl	1db1e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1b70a:	4621      	mov	r1, r4
   1b70c:	2200      	movs	r2, #0
}
   1b70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1b712:	f242 002d 	movw	r0, #8237	; 0x202d
   1b716:	f7f6 bccb 	b.w	120b0 <bt_hci_cmd_send_sync>
}
   1b71a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b71e:	bd38      	pop	{r3, r4, r5, pc}

0001b720 <hci_set_ad>:
{
   1b720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b724:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b726:	2120      	movs	r1, #32
{
   1b728:	4682      	mov	sl, r0
   1b72a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b72c:	f7f6 fc66 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b730:	4606      	mov	r6, r0
   1b732:	2800      	cmp	r0, #0
   1b734:	d04a      	beq.n	1b7cc <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   1b736:	2120      	movs	r1, #32
   1b738:	3008      	adds	r0, #8
   1b73a:	f002 f9e1 	bl	1db00 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1b73e:	2220      	movs	r2, #32
   1b740:	2100      	movs	r1, #0
   1b742:	4681      	mov	r9, r0
   1b744:	f7ff fc93 	bl	1b06e <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1b748:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1b74c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1b750:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1b752:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1b754:	f8d4 8000 	ldr.w	r8, [r4]
   1b758:	2300      	movs	r3, #0
   1b75a:	6862      	ldr	r2, [r4, #4]
   1b75c:	4293      	cmp	r3, r2
   1b75e:	d30d      	bcc.n	1b77c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1b760:	9b00      	ldr	r3, [sp, #0]
   1b762:	3408      	adds	r4, #8
   1b764:	42a3      	cmp	r3, r4
   1b766:	d1f5      	bne.n	1b754 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b768:	2200      	movs	r2, #0
   1b76a:	4631      	mov	r1, r6
   1b76c:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1b76e:	f889 5000 	strb.w	r5, [r9]
}
   1b772:	b003      	add	sp, #12
   1b774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b778:	f7f6 bc9a 	b.w	120b0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1b77c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1b780:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b784:	1ca8      	adds	r0, r5, #2
   1b786:	1811      	adds	r1, r2, r0
   1b788:	291f      	cmp	r1, #31
   1b78a:	d908      	bls.n	1b79e <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b78c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1b790:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b794:	d11f      	bne.n	1b7d6 <hci_set_ad+0xb6>
   1b796:	2a00      	cmp	r2, #0
   1b798:	dd1d      	ble.n	1b7d6 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1b79a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1b79e:	b2d7      	uxtb	r7, r2
   1b7a0:	1c79      	adds	r1, r7, #1
   1b7a2:	f80b 1005 	strb.w	r1, [fp, r5]
   1b7a6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1b7a8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1b7aa:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1b7ae:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1b7b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b7b6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1b7b8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1b7ba:	f7ff fc2d 	bl	1b018 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1b7be:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1b7c0:	443d      	add	r5, r7
   1b7c2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1b7c4:	3301      	adds	r3, #1
   1b7c6:	f108 0808 	add.w	r8, r8, #8
   1b7ca:	e7c6      	b.n	1b75a <hci_set_ad+0x3a>
		return -ENOBUFS;
   1b7cc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1b7d0:	b003      	add	sp, #12
   1b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1b7d6:	4630      	mov	r0, r6
   1b7d8:	f7fa fdb6 	bl	16348 <net_buf_unref>
		return err;
   1b7dc:	f06f 0015 	mvn.w	r0, #21
   1b7e0:	e7f6      	b.n	1b7d0 <hci_set_ad+0xb0>

0001b7e2 <bt_lookup_id_addr>:
{
   1b7e2:	b510      	push	{r4, lr}
   1b7e4:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1b7e6:	f7fa fca9 	bl	1613c <bt_keys_find_irk>
		if (keys) {
   1b7ea:	b100      	cbz	r0, 1b7ee <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1b7ec:	1c44      	adds	r4, r0, #1
}
   1b7ee:	4620      	mov	r0, r4
   1b7f0:	bd10      	pop	{r4, pc}

0001b7f2 <bt_hci_disconnect>:
{
   1b7f2:	b570      	push	{r4, r5, r6, lr}
   1b7f4:	4606      	mov	r6, r0
   1b7f6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1b7f8:	f240 4006 	movw	r0, #1030	; 0x406
   1b7fc:	2103      	movs	r1, #3
   1b7fe:	f7f6 fbfd 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b802:	4604      	mov	r4, r0
   1b804:	b168      	cbz	r0, 1b822 <bt_hci_disconnect+0x30>
   1b806:	2103      	movs	r1, #3
   1b808:	3008      	adds	r0, #8
   1b80a:	f002 f979 	bl	1db00 <net_buf_simple_add>
	disconn->reason = reason;
   1b80e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1b810:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b812:	4621      	mov	r1, r4
   1b814:	2200      	movs	r2, #0
}
   1b816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b81a:	f240 4006 	movw	r0, #1030	; 0x406
   1b81e:	f7f6 bc47 	b.w	120b0 <bt_hci_cmd_send_sync>
}
   1b822:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b826:	bd70      	pop	{r4, r5, r6, pc}

0001b828 <bt_le_set_data_len>:
{
   1b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b82a:	4607      	mov	r7, r0
   1b82c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b82e:	f242 0022 	movw	r0, #8226	; 0x2022
   1b832:	2106      	movs	r1, #6
{
   1b834:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b836:	f7f6 fbe1 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b83a:	4604      	mov	r4, r0
   1b83c:	b170      	cbz	r0, 1b85c <bt_le_set_data_len+0x34>
   1b83e:	2106      	movs	r1, #6
   1b840:	3008      	adds	r0, #8
   1b842:	f002 f95d 	bl	1db00 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b846:	883b      	ldrh	r3, [r7, #0]
   1b848:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1b84a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1b84c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b84e:	4621      	mov	r1, r4
   1b850:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1b854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b858:	f7f6 bc08 	b.w	1206c <bt_hci_cmd_send>
}
   1b85c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b862 <bt_le_set_phy>:
{
   1b862:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b866:	4680      	mov	r8, r0
   1b868:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b86a:	f242 0032 	movw	r0, #8242	; 0x2032
   1b86e:	2107      	movs	r1, #7
{
   1b870:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1b874:	4616      	mov	r6, r2
   1b876:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b878:	f7f6 fbc0 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1b87c:	4604      	mov	r4, r0
   1b87e:	b190      	cbz	r0, 1b8a6 <bt_le_set_phy+0x44>
   1b880:	2107      	movs	r1, #7
   1b882:	3008      	adds	r0, #8
   1b884:	f002 f93c 	bl	1db00 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b888:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1b88c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1b88e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1b890:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b892:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1b894:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b898:	4621      	mov	r1, r4
   1b89a:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1b89e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b8a2:	f7f6 bbe3 	b.w	1206c <bt_hci_cmd_send>
}
   1b8a6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b8ae <le_phy_update_complete>:
{
   1b8ae:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1b8b0:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1b8b2:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1b8b6:	f7f7 fded 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b8ba:	4604      	mov	r4, r0
   1b8bc:	b1a0      	cbz	r0, 1b8e8 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1b8be:	1d05      	adds	r5, r0, #4
   1b8c0:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1b8c4:	4628      	mov	r0, r5
   1b8c6:	f7ff fd44 	bl	1b352 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1b8ca:	0603      	lsls	r3, r0, #24
   1b8cc:	d507      	bpl.n	1b8de <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b8ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1b8d2:	4628      	mov	r0, r5
   1b8d4:	f7ff fd4c 	bl	1b370 <atomic_or>
		conn_auto_initiate(conn);
   1b8d8:	4620      	mov	r0, r4
   1b8da:	f7f6 fd75 	bl	123c8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1b8de:	4620      	mov	r0, r4
}
   1b8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1b8e4:	f000 b9a0 	b.w	1bc28 <bt_conn_unref>
}
   1b8e8:	bd38      	pop	{r3, r4, r5, pc}

0001b8ea <le_remote_feat_complete>:
{
   1b8ea:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1b8ec:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1b8ee:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1b8f2:	f7f7 fdcf 	bl	13494 <bt_conn_lookup_handle>
	if (!conn) {
   1b8f6:	4604      	mov	r4, r0
   1b8f8:	b198      	cbz	r0, 1b922 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1b8fa:	782b      	ldrb	r3, [r5, #0]
   1b8fc:	b923      	cbnz	r3, 1b908 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1b8fe:	2208      	movs	r2, #8
   1b900:	1ce9      	adds	r1, r5, #3
   1b902:	30ac      	adds	r0, #172	; 0xac
   1b904:	f7ff fb88 	bl	1b018 <memcpy>
   1b908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1b90c:	1d20      	adds	r0, r4, #4
   1b90e:	f7ff fd2f 	bl	1b370 <atomic_or>
	conn_auto_initiate(conn);
   1b912:	4620      	mov	r0, r4
   1b914:	f7f6 fd58 	bl	123c8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1b918:	4620      	mov	r0, r4
}
   1b91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1b91e:	f000 b983 	b.w	1bc28 <bt_conn_unref>
}
   1b922:	bd38      	pop	{r3, r4, r5, pc}

0001b924 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1b924:	8802      	ldrh	r2, [r0, #0]
   1b926:	8843      	ldrh	r3, [r0, #2]
   1b928:	429a      	cmp	r2, r3
{
   1b92a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1b92c:	d818      	bhi.n	1b960 <bt_le_conn_params_valid+0x3c>
   1b92e:	2a05      	cmp	r2, #5
   1b930:	d916      	bls.n	1b960 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1b932:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1b936:	d813      	bhi.n	1b960 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1b938:	8884      	ldrh	r4, [r0, #4]
   1b93a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1b93e:	d20f      	bcs.n	1b960 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b940:	88c1      	ldrh	r1, [r0, #6]
   1b942:	f1a1 020a 	sub.w	r2, r1, #10
   1b946:	b292      	uxth	r2, r2
   1b948:	f640 4076 	movw	r0, #3190	; 0xc76
   1b94c:	4282      	cmp	r2, r0
   1b94e:	d807      	bhi.n	1b960 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1b950:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b954:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1b958:	bf34      	ite	cc
   1b95a:	2001      	movcc	r0, #1
   1b95c:	2000      	movcs	r0, #0
}
   1b95e:	bd10      	pop	{r4, pc}
		return false;
   1b960:	2000      	movs	r0, #0
   1b962:	e7fc      	b.n	1b95e <bt_le_conn_params_valid+0x3a>

0001b964 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1b964:	7a03      	ldrb	r3, [r0, #8]
   1b966:	07d9      	lsls	r1, r3, #31
   1b968:	d504      	bpl.n	1b974 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1b96a:	f023 0301 	bic.w	r3, r3, #1
   1b96e:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1b970:	f7f6 bd8c 	b.w	1248c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1b974:	0799      	lsls	r1, r3, #30
   1b976:	d504      	bpl.n	1b982 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1b978:	f023 0302 	bic.w	r3, r3, #2
   1b97c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1b97e:	f7f6 be0f 	b.w	125a0 <bt_id_del>
}
   1b982:	4770      	bx	lr

0001b984 <bt_send>:
		return bt_hci_ecc_send(buf);
   1b984:	f7f5 beb4 	b.w	116f0 <bt_hci_ecc_send>

0001b988 <bt_addr_le_is_bonded>:
{
   1b988:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1b98a:	f7fa fc11 	bl	161b0 <bt_keys_find_addr>
		return keys && keys->keys;
   1b98e:	b118      	cbz	r0, 1b998 <bt_addr_le_is_bonded+0x10>
   1b990:	89c0      	ldrh	r0, [r0, #14]
   1b992:	3800      	subs	r0, #0
   1b994:	bf18      	it	ne
   1b996:	2001      	movne	r0, #1
}
   1b998:	bd08      	pop	{r3, pc}

0001b99a <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1b99a:	6880      	ldr	r0, [r0, #8]
   1b99c:	f7f7 b9d0 	b.w	12d40 <enh_conn_complete>

0001b9a0 <le_legacy_conn_complete>:
{
   1b9a0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b9a2:	6881      	ldr	r1, [r0, #8]
{
   1b9a4:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1b9a6:	780b      	ldrb	r3, [r1, #0]
   1b9a8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1b9ac:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1b9b0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1b9b4:	78cb      	ldrb	r3, [r1, #3]
   1b9b6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1b9ba:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1b9be:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1b9c2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1b9c6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1b9ca:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1b9ce:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1b9d2:	7c4b      	ldrb	r3, [r1, #17]
   1b9d4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b9d8:	a803      	add	r0, sp, #12
   1b9da:	3104      	adds	r1, #4
   1b9dc:	f7ff fcb3 	bl	1b346 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b9e0:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1b9e2:	4669      	mov	r1, sp
   1b9e4:	2206      	movs	r2, #6
   1b9e6:	f10d 0013 	add.w	r0, sp, #19
   1b9ea:	9400      	str	r4, [sp, #0]
   1b9ec:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b9f0:	f7ff fb12 	bl	1b018 <memcpy>
   1b9f4:	2206      	movs	r2, #6
   1b9f6:	4669      	mov	r1, sp
   1b9f8:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1b9fc:	9400      	str	r4, [sp, #0]
   1b9fe:	f8ad 4004 	strh.w	r4, [sp, #4]
   1ba02:	f7ff fb09 	bl	1b018 <memcpy>
	enh_conn_complete(&enh);
   1ba06:	a802      	add	r0, sp, #8
   1ba08:	f7f7 f99a 	bl	12d40 <enh_conn_complete>
}
   1ba0c:	b00a      	add	sp, #40	; 0x28
   1ba0e:	bd10      	pop	{r4, pc}

0001ba10 <tx_notify>:
{
   1ba10:	b570      	push	{r4, r5, r6, lr}
   1ba12:	4604      	mov	r4, r0
	__asm__ volatile(
   1ba14:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ba18:	f3ef 8311 	mrs	r3, BASEPRI
   1ba1c:	f382 8811 	msr	BASEPRI, r2
   1ba20:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1ba24:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1ba26:	b920      	cbnz	r0, 1ba32 <tx_notify+0x22>
	__asm__ volatile(
   1ba28:	f383 8811 	msr	BASEPRI, r3
   1ba2c:	f3bf 8f6f 	isb	sy
}
   1ba30:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba32:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ba34:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ba36:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba38:	4288      	cmp	r0, r1
	list->tail = node;
   1ba3a:	bf08      	it	eq
   1ba3c:	6262      	streq	r2, [r4, #36]	; 0x24
   1ba3e:	f383 8811 	msr	BASEPRI, r3
   1ba42:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1ba46:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1ba4a:	f7f7 fb17 	bl	1307c <tx_free>
		cb(conn, user_data);
   1ba4e:	4631      	mov	r1, r6
   1ba50:	4620      	mov	r0, r4
   1ba52:	47a8      	blx	r5
	while (1) {
   1ba54:	e7de      	b.n	1ba14 <tx_notify+0x4>

0001ba56 <tx_complete_work>:
	tx_notify(conn);
   1ba56:	3828      	subs	r0, #40	; 0x28
   1ba58:	f7ff bfda 	b.w	1ba10 <tx_notify>

0001ba5c <bt_conn_new>:
{
   1ba5c:	b538      	push	{r3, r4, r5, lr}
   1ba5e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1ba60:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ba62:	2501      	movs	r5, #1
   1ba64:	428b      	cmp	r3, r1
   1ba66:	d102      	bne.n	1ba6e <bt_conn_new+0x12>
		return NULL;
   1ba68:	2400      	movs	r4, #0
}
   1ba6a:	4620      	mov	r0, r4
   1ba6c:	bd38      	pop	{r3, r4, r5, pc}
   1ba6e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1ba72:	f3bf 8f5b 	dmb	ish
   1ba76:	e852 0f00 	ldrex	r0, [r2]
   1ba7a:	2800      	cmp	r0, #0
   1ba7c:	d104      	bne.n	1ba88 <bt_conn_new+0x2c>
   1ba7e:	e842 5c00 	strex	ip, r5, [r2]
   1ba82:	f1bc 0f00 	cmp.w	ip, #0
   1ba86:	d1f6      	bne.n	1ba76 <bt_conn_new+0x1a>
   1ba88:	f3bf 8f5b 	dmb	ish
   1ba8c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1ba90:	d002      	beq.n	1ba98 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1ba92:	3301      	adds	r3, #1
   1ba94:	4604      	mov	r4, r0
   1ba96:	e7e5      	b.n	1ba64 <bt_conn_new+0x8>
	if (!conn) {
   1ba98:	2c00      	cmp	r4, #0
   1ba9a:	d0e6      	beq.n	1ba6a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1ba9c:	22b8      	movs	r2, #184	; 0xb8
   1ba9e:	2100      	movs	r1, #0
   1baa0:	4620      	mov	r0, r4
   1baa2:	f7ff fae4 	bl	1b06e <memset>
	return conn;
   1baa6:	e7e0      	b.n	1ba6a <bt_conn_new+0xe>

0001baa8 <bt_conn_set_security>:
{
   1baa8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1baaa:	7b43      	ldrb	r3, [r0, #13]
   1baac:	2b07      	cmp	r3, #7
{
   1baae:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1bab0:	d128      	bne.n	1bb04 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1bab2:	7a43      	ldrb	r3, [r0, #9]
   1bab4:	428b      	cmp	r3, r1
   1bab6:	d228      	bcs.n	1bb0a <bt_conn_set_security+0x62>
   1bab8:	7a83      	ldrb	r3, [r0, #10]
   1baba:	428b      	cmp	r3, r1
   1babc:	d225      	bcs.n	1bb0a <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1babe:	f3bf 8f5b 	dmb	ish
	if (val) {
   1bac2:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1bac4:	f100 0304 	add.w	r3, r0, #4
   1bac8:	d513      	bpl.n	1baf2 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1baca:	e853 2f00 	ldrex	r2, [r3]
   1bace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1bad2:	e843 2000 	strex	r0, r2, [r3]
   1bad6:	2800      	cmp	r0, #0
   1bad8:	d1f7      	bne.n	1baca <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bada:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1bade:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1bae2:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1bae4:	4620      	mov	r0, r4
   1bae6:	f7fa f855 	bl	15b94 <bt_smp_start_security>
	if (err) {
   1baea:	b108      	cbz	r0, 1baf0 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1baec:	7a63      	ldrb	r3, [r4, #9]
   1baee:	72a3      	strb	r3, [r4, #10]
}
   1baf0:	bd10      	pop	{r4, pc}
   1baf2:	e853 2f00 	ldrex	r2, [r3]
   1baf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1bafa:	e843 2000 	strex	r0, r2, [r3]
   1bafe:	2800      	cmp	r0, #0
   1bb00:	d0eb      	beq.n	1bada <bt_conn_set_security+0x32>
   1bb02:	e7f6      	b.n	1baf2 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1bb04:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1bb08:	e7f2      	b.n	1baf0 <bt_conn_set_security+0x48>
		return 0;
   1bb0a:	2000      	movs	r0, #0
   1bb0c:	e7f0      	b.n	1baf0 <bt_conn_set_security+0x48>

0001bb0e <bt_conn_get_security>:
}
   1bb0e:	7a40      	ldrb	r0, [r0, #9]
   1bb10:	4770      	bx	lr

0001bb12 <bt_conn_reset_rx_state>:
{
   1bb12:	b510      	push	{r4, lr}
   1bb14:	4604      	mov	r4, r0
	if (!conn->rx) {
   1bb16:	6900      	ldr	r0, [r0, #16]
   1bb18:	b118      	cbz	r0, 1bb22 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1bb1a:	f7fa fc15 	bl	16348 <net_buf_unref>
	conn->rx = NULL;
   1bb1e:	2300      	movs	r3, #0
   1bb20:	6123      	str	r3, [r4, #16]
}
   1bb22:	bd10      	pop	{r4, pc}

0001bb24 <bt_conn_recv>:
{
   1bb24:	b570      	push	{r4, r5, r6, lr}
   1bb26:	4616      	mov	r6, r2
   1bb28:	4604      	mov	r4, r0
   1bb2a:	460d      	mov	r5, r1
	tx_notify(conn);
   1bb2c:	f7ff ff70 	bl	1ba10 <tx_notify>
	switch (flags) {
   1bb30:	2e01      	cmp	r6, #1
   1bb32:	d01a      	beq.n	1bb6a <bt_conn_recv+0x46>
   1bb34:	2e02      	cmp	r6, #2
   1bb36:	d11a      	bne.n	1bb6e <bt_conn_recv+0x4a>
		if (conn->rx) {
   1bb38:	6923      	ldr	r3, [r4, #16]
   1bb3a:	b113      	cbz	r3, 1bb42 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1bb3c:	4620      	mov	r0, r4
   1bb3e:	f7ff ffe8 	bl	1bb12 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1bb42:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1bb44:	6921      	ldr	r1, [r4, #16]
   1bb46:	898a      	ldrh	r2, [r1, #12]
   1bb48:	2a01      	cmp	r2, #1
   1bb4a:	d931      	bls.n	1bbb0 <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1bb4c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1bb4e:	7845      	ldrb	r5, [r0, #1]
   1bb50:	7803      	ldrb	r3, [r0, #0]
   1bb52:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1bb56:	3304      	adds	r3, #4
   1bb58:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1bb5a:	429a      	cmp	r2, r3
   1bb5c:	d328      	bcc.n	1bbb0 <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1bb5e:	d920      	bls.n	1bba2 <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1bb60:	4620      	mov	r0, r4
}
   1bb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1bb66:	f7ff bfd4 	b.w	1bb12 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1bb6a:	6920      	ldr	r0, [r4, #16]
   1bb6c:	b918      	cbnz	r0, 1bb76 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1bb6e:	4620      	mov	r0, r4
   1bb70:	f7ff ffcf 	bl	1bb12 <bt_conn_reset_rx_state>
   1bb74:	e001      	b.n	1bb7a <bt_conn_recv+0x56>
		if (!buf->len) {
   1bb76:	89ae      	ldrh	r6, [r5, #12]
   1bb78:	b926      	cbnz	r6, 1bb84 <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1bb7a:	4628      	mov	r0, r5
}
   1bb7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1bb80:	f7fa bbe2 	b.w	16348 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1bb84:	3008      	adds	r0, #8
   1bb86:	f001 fff6 	bl	1db76 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1bb8a:	4286      	cmp	r6, r0
   1bb8c:	d8ef      	bhi.n	1bb6e <bt_conn_recv+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bb8e:	6920      	ldr	r0, [r4, #16]
   1bb90:	89aa      	ldrh	r2, [r5, #12]
   1bb92:	68a9      	ldr	r1, [r5, #8]
   1bb94:	3008      	adds	r0, #8
   1bb96:	f001 ffb9 	bl	1db0c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1bb9a:	4628      	mov	r0, r5
   1bb9c:	f7fa fbd4 	bl	16348 <net_buf_unref>
		break;
   1bba0:	e7d0      	b.n	1bb44 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1bba2:	2300      	movs	r3, #0
   1bba4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1bba6:	4620      	mov	r0, r4
}
   1bba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1bbac:	f000 b9bc 	b.w	1bf28 <bt_l2cap_recv>
}
   1bbb0:	bd70      	pop	{r4, r5, r6, pc}

0001bbb2 <bt_conn_is_peer_addr_le>:
{
   1bbb2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1bbb4:	7a03      	ldrb	r3, [r0, #8]
   1bbb6:	428b      	cmp	r3, r1
{
   1bbb8:	4604      	mov	r4, r0
   1bbba:	4615      	mov	r5, r2
	if (id != conn->id) {
   1bbbc:	d115      	bne.n	1bbea <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1bbbe:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1bbc2:	2207      	movs	r2, #7
   1bbc4:	4628      	mov	r0, r5
   1bbc6:	f7ff fa17 	bl	1aff8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1bbca:	b180      	cbz	r0, 1bbee <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1bbcc:	78e3      	ldrb	r3, [r4, #3]
   1bbce:	2207      	movs	r2, #7
   1bbd0:	b943      	cbnz	r3, 1bbe4 <bt_conn_is_peer_addr_le+0x32>
   1bbd2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1bbd6:	4628      	mov	r0, r5
   1bbd8:	f7ff fa0e 	bl	1aff8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1bbdc:	fab0 f080 	clz	r0, r0
   1bbe0:	0940      	lsrs	r0, r0, #5
}
   1bbe2:	bd38      	pop	{r3, r4, r5, pc}
   1bbe4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1bbe8:	e7f5      	b.n	1bbd6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1bbea:	2000      	movs	r0, #0
   1bbec:	e7f9      	b.n	1bbe2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1bbee:	2001      	movs	r0, #1
   1bbf0:	e7f7      	b.n	1bbe2 <bt_conn_is_peer_addr_le+0x30>

0001bbf2 <bt_conn_ref>:
{
   1bbf2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1bbf4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bbf8:	f3bf 8f5b 	dmb	ish
   1bbfc:	6813      	ldr	r3, [r2, #0]
   1bbfe:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1bc02:	b17b      	cbz	r3, 1bc24 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bc04:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1bc08:	1c59      	adds	r1, r3, #1
   1bc0a:	e852 4f00 	ldrex	r4, [r2]
   1bc0e:	429c      	cmp	r4, r3
   1bc10:	d104      	bne.n	1bc1c <bt_conn_ref+0x2a>
   1bc12:	e842 1c00 	strex	ip, r1, [r2]
   1bc16:	f1bc 0f00 	cmp.w	ip, #0
   1bc1a:	d1f6      	bne.n	1bc0a <bt_conn_ref+0x18>
   1bc1c:	f3bf 8f5b 	dmb	ish
   1bc20:	d1ea      	bne.n	1bbf8 <bt_conn_ref+0x6>
}
   1bc22:	bd10      	pop	{r4, pc}
			return NULL;
   1bc24:	4618      	mov	r0, r3
   1bc26:	e7fc      	b.n	1bc22 <bt_conn_ref+0x30>

0001bc28 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   1bc28:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bc2c:	f3bf 8f5b 	dmb	ish
   1bc30:	e853 2f00 	ldrex	r2, [r3]
   1bc34:	3a01      	subs	r2, #1
   1bc36:	e843 2100 	strex	r1, r2, [r3]
   1bc3a:	2900      	cmp	r1, #0
   1bc3c:	d1f8      	bne.n	1bc30 <bt_conn_unref+0x8>
   1bc3e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bc42:	f3bf 8f5b 	dmb	ish
   1bc46:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1bc4a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1bc4e:	b90b      	cbnz	r3, 1bc54 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   1bc50:	f7f7 b840 	b.w	12cd4 <bt_le_adv_resume>
}
   1bc54:	4770      	bx	lr

0001bc56 <conn_lookup_handle>:
{
   1bc56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc5a:	4607      	mov	r7, r0
   1bc5c:	460e      	mov	r6, r1
   1bc5e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1bc60:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1bc62:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1bc66:	42b4      	cmp	r4, r6
   1bc68:	d103      	bne.n	1bc72 <conn_lookup_handle+0x1c>
	return NULL;
   1bc6a:	2300      	movs	r3, #0
}
   1bc6c:	4618      	mov	r0, r3
   1bc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1bc72:	fb09 7004 	mla	r0, r9, r4, r7
   1bc76:	f7ff ffbc 	bl	1bbf2 <bt_conn_ref>
   1bc7a:	4603      	mov	r3, r0
		if (!conn) {
   1bc7c:	b158      	cbz	r0, 1bc96 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1bc7e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1bc80:	2d01      	cmp	r5, #1
   1bc82:	d002      	beq.n	1bc8a <conn_lookup_handle+0x34>
   1bc84:	3d07      	subs	r5, #7
   1bc86:	2d01      	cmp	r5, #1
   1bc88:	d803      	bhi.n	1bc92 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1bc8a:	881a      	ldrh	r2, [r3, #0]
   1bc8c:	4542      	cmp	r2, r8
   1bc8e:	d0ed      	beq.n	1bc6c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1bc90:	4618      	mov	r0, r3
   1bc92:	f7ff ffc9 	bl	1bc28 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1bc96:	3401      	adds	r4, #1
   1bc98:	e7e5      	b.n	1bc66 <conn_lookup_handle+0x10>

0001bc9a <bt_conn_exists_le>:
{
   1bc9a:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1bc9c:	f7f7 fcb8 	bl	13610 <bt_conn_lookup_addr_le>
	if (conn) {
   1bca0:	b110      	cbz	r0, 1bca8 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1bca2:	f7ff ffc1 	bl	1bc28 <bt_conn_unref>
		return true;
   1bca6:	2001      	movs	r0, #1
}
   1bca8:	bd08      	pop	{r3, pc}

0001bcaa <bt_conn_get_dst>:
}
   1bcaa:	3088      	adds	r0, #136	; 0x88
   1bcac:	4770      	bx	lr

0001bcae <bt_conn_disconnect>:
{
   1bcae:	b538      	push	{r3, r4, r5, lr}
   1bcb0:	7b43      	ldrb	r3, [r0, #13]
   1bcb2:	3b02      	subs	r3, #2
   1bcb4:	4605      	mov	r5, r0
   1bcb6:	2b06      	cmp	r3, #6
   1bcb8:	d805      	bhi.n	1bcc6 <bt_conn_disconnect+0x18>
   1bcba:	e8df f003 	tbb	[pc, r3]
   1bcbe:	0408      	.short	0x0408
   1bcc0:	0e0c0404 	.word	0x0e0c0404
   1bcc4:	0c          	.byte	0x0c
   1bcc5:	00          	.byte	0x00
	switch (conn->state) {
   1bcc6:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   1bcca:	4620      	mov	r0, r4
   1bccc:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1bcce:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1bcd0:	2100      	movs	r1, #0
   1bcd2:	f7f7 fbeb 	bl	134ac <bt_conn_set_state>
		return 0;
   1bcd6:	2400      	movs	r4, #0
   1bcd8:	e7f7      	b.n	1bcca <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1bcda:	8800      	ldrh	r0, [r0, #0]
   1bcdc:	f7ff fd89 	bl	1b7f2 <bt_hci_disconnect>
	if (err) {
   1bce0:	4604      	mov	r4, r0
   1bce2:	2800      	cmp	r0, #0
   1bce4:	d1f1      	bne.n	1bcca <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1bce6:	2108      	movs	r1, #8
   1bce8:	4628      	mov	r0, r5
   1bcea:	f7f7 fbdf 	bl	134ac <bt_conn_set_state>
	return 0;
   1bcee:	e7ec      	b.n	1bcca <bt_conn_disconnect+0x1c>

0001bcf0 <bt_conn_le_conn_update>:
{
   1bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcf2:	4607      	mov	r7, r0
   1bcf4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1bcf6:	f242 0013 	movw	r0, #8211	; 0x2013
   1bcfa:	210e      	movs	r1, #14
   1bcfc:	f7f6 f97e 	bl	11ffc <bt_hci_cmd_create>
	if (!buf) {
   1bd00:	4606      	mov	r6, r0
   1bd02:	b1d0      	cbz	r0, 1bd3a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1bd04:	210e      	movs	r1, #14
   1bd06:	3008      	adds	r0, #8
   1bd08:	f001 fefa 	bl	1db00 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1bd0c:	220e      	movs	r2, #14
   1bd0e:	4604      	mov	r4, r0
   1bd10:	2100      	movs	r1, #0
   1bd12:	f7ff f9ac 	bl	1b06e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1bd16:	883b      	ldrh	r3, [r7, #0]
   1bd18:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1bd1a:	882b      	ldrh	r3, [r5, #0]
   1bd1c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1bd1e:	886b      	ldrh	r3, [r5, #2]
   1bd20:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1bd22:	88ab      	ldrh	r3, [r5, #4]
   1bd24:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1bd26:	88eb      	ldrh	r3, [r5, #6]
   1bd28:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1bd2a:	4631      	mov	r1, r6
   1bd2c:	2200      	movs	r2, #0
}
   1bd2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1bd32:	f242 0013 	movw	r0, #8211	; 0x2013
   1bd36:	f7f6 b9bb 	b.w	120b0 <bt_hci_cmd_send_sync>
}
   1bd3a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bd40 <l2cap_connected>:
}
   1bd40:	4770      	bx	lr

0001bd42 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1bd42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd44:	4607      	mov	r7, r0
   1bd46:	460e      	mov	r6, r1
   1bd48:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1bd4a:	2300      	movs	r3, #0
   1bd4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bd50:	2104      	movs	r1, #4
   1bd52:	2000      	movs	r0, #0
   1bd54:	f7f7 fd1c 	bl	13790 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1bd58:	4604      	mov	r4, r0
   1bd5a:	b130      	cbz	r0, 1bd6a <l2cap_create_le_sig_pdu.isra.0+0x28>
   1bd5c:	2104      	movs	r1, #4
   1bd5e:	3008      	adds	r0, #8
   1bd60:	f001 fece 	bl	1db00 <net_buf_simple_add>
	hdr->code = code;
   1bd64:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1bd66:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1bd68:	8045      	strh	r5, [r0, #2]
}
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bd6e <l2cap_disconnected>:
   1bd6e:	4770      	bx	lr

0001bd70 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bd70:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1bd72:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bd74:	b17b      	cbz	r3, 1bd96 <bt_l2cap_chan_remove+0x26>
   1bd76:	3b08      	subs	r3, #8
   1bd78:	2200      	movs	r2, #0
   1bd7a:	b163      	cbz	r3, 1bd96 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1bd7c:	428b      	cmp	r3, r1
   1bd7e:	f103 0408 	add.w	r4, r3, #8
   1bd82:	d10f      	bne.n	1bda4 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1bd84:	688b      	ldr	r3, [r1, #8]
   1bd86:	b93a      	cbnz	r2, 1bd98 <bt_l2cap_chan_remove+0x28>
   1bd88:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   1bd8a:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1bd8c:	4294      	cmp	r4, r2
   1bd8e:	d100      	bne.n	1bd92 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1bd90:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   1bd92:	2300      	movs	r3, #0
   1bd94:	608b      	str	r3, [r1, #8]
}
   1bd96:	bd10      	pop	{r4, pc}
   1bd98:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bd9a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1bd9c:	429c      	cmp	r4, r3
	list->tail = node;
   1bd9e:	bf08      	it	eq
   1bda0:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1bda2:	e7f6      	b.n	1bd92 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bda4:	2c00      	cmp	r4, #0
   1bda6:	d0f6      	beq.n	1bd96 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bda8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bdaa:	2b00      	cmp	r3, #0
   1bdac:	d0f3      	beq.n	1bd96 <bt_l2cap_chan_remove+0x26>
   1bdae:	3b08      	subs	r3, #8
   1bdb0:	4622      	mov	r2, r4
   1bdb2:	e7e2      	b.n	1bd7a <bt_l2cap_chan_remove+0xa>

0001bdb4 <bt_l2cap_chan_del>:
{
   1bdb4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1bdb6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1bdba:	4604      	mov	r4, r0
	if (!chan->conn) {
   1bdbc:	b123      	cbz	r3, 1bdc8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1bdbe:	686b      	ldr	r3, [r5, #4]
   1bdc0:	b103      	cbz	r3, 1bdc4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1bdc2:	4798      	blx	r3
	chan->conn = NULL;
   1bdc4:	2300      	movs	r3, #0
   1bdc6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1bdc8:	68e3      	ldr	r3, [r4, #12]
   1bdca:	b10b      	cbz	r3, 1bdd0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1bdcc:	4620      	mov	r0, r4
   1bdce:	4798      	blx	r3
	if (ops->released) {
   1bdd0:	69eb      	ldr	r3, [r5, #28]
   1bdd2:	b11b      	cbz	r3, 1bddc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1bdd4:	4620      	mov	r0, r4
}
   1bdd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1bdda:	4718      	bx	r3
}
   1bddc:	bd70      	pop	{r4, r5, r6, pc}

0001bdde <l2cap_rtx_timeout>:
{
   1bdde:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1bde0:	f1a0 0110 	sub.w	r1, r0, #16
   1bde4:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1bde8:	f7ff ffc2 	bl	1bd70 <bt_l2cap_chan_remove>
}
   1bdec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1bdf0:	4608      	mov	r0, r1
   1bdf2:	f7ff bfdf 	b.w	1bdb4 <bt_l2cap_chan_del>

0001bdf6 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bdf6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1bdf8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bdfa:	b18b      	cbz	r3, 1be20 <bt_l2cap_disconnected+0x2a>
   1bdfc:	f1b3 0008 	subs.w	r0, r3, #8
   1be00:	d00e      	beq.n	1be20 <bt_l2cap_disconnected+0x2a>
   1be02:	681c      	ldr	r4, [r3, #0]
   1be04:	b104      	cbz	r4, 1be08 <bt_l2cap_disconnected+0x12>
   1be06:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1be08:	f7ff ffd4 	bl	1bdb4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1be0c:	b144      	cbz	r4, 1be20 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1be0e:	f114 0308 	adds.w	r3, r4, #8
   1be12:	d002      	beq.n	1be1a <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1be14:	68a3      	ldr	r3, [r4, #8]
   1be16:	b103      	cbz	r3, 1be1a <bt_l2cap_disconnected+0x24>
   1be18:	3b08      	subs	r3, #8
{
   1be1a:	4620      	mov	r0, r4
   1be1c:	461c      	mov	r4, r3
   1be1e:	e7f3      	b.n	1be08 <bt_l2cap_disconnected+0x12>
}
   1be20:	bd10      	pop	{r4, pc}

0001be22 <bt_l2cap_security_changed>:
{
   1be22:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1be24:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1be26:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1be28:	b1a3      	cbz	r3, 1be54 <bt_l2cap_security_changed+0x32>
   1be2a:	f1b3 0008 	subs.w	r0, r3, #8
   1be2e:	d011      	beq.n	1be54 <bt_l2cap_security_changed+0x32>
   1be30:	681c      	ldr	r4, [r3, #0]
   1be32:	b104      	cbz	r4, 1be36 <bt_l2cap_security_changed+0x14>
   1be34:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1be36:	6843      	ldr	r3, [r0, #4]
   1be38:	689b      	ldr	r3, [r3, #8]
   1be3a:	b10b      	cbz	r3, 1be40 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1be3c:	4629      	mov	r1, r5
   1be3e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1be40:	b144      	cbz	r4, 1be54 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1be42:	f114 0308 	adds.w	r3, r4, #8
   1be46:	d002      	beq.n	1be4e <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1be48:	68a3      	ldr	r3, [r4, #8]
   1be4a:	b103      	cbz	r3, 1be4e <bt_l2cap_security_changed+0x2c>
   1be4c:	3b08      	subs	r3, #8
{
   1be4e:	4620      	mov	r0, r4
   1be50:	461c      	mov	r4, r3
   1be52:	e7f0      	b.n	1be36 <bt_l2cap_security_changed+0x14>
}
   1be54:	bd38      	pop	{r3, r4, r5, pc}

0001be56 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1be56:	3104      	adds	r1, #4
   1be58:	f7f7 bc9a 	b.w	13790 <bt_conn_create_pdu_timeout>

0001be5c <bt_l2cap_send_cb>:
{
   1be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be60:	4614      	mov	r4, r2
   1be62:	4605      	mov	r5, r0
   1be64:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1be66:	f102 0008 	add.w	r0, r2, #8
   1be6a:	2104      	movs	r1, #4
   1be6c:	461e      	mov	r6, r3
   1be6e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1be72:	f001 fe5c 	bl	1db2e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1be76:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1be78:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1be7a:	3a04      	subs	r2, #4
   1be7c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1be7e:	4643      	mov	r3, r8
   1be80:	4632      	mov	r2, r6
   1be82:	4621      	mov	r1, r4
   1be84:	4628      	mov	r0, r5
}
   1be86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1be8a:	f7f7 ba57 	b.w	1333c <bt_conn_send_cb>

0001be8e <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1be8e:	898b      	ldrh	r3, [r1, #12]
   1be90:	2b03      	cmp	r3, #3
{
   1be92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1be94:	4605      	mov	r5, r0
   1be96:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1be98:	d923      	bls.n	1bee2 <l2cap_recv+0x54>
	return net_buf_simple_pull_mem(&buf->b, len);
   1be9a:	2104      	movs	r1, #4
   1be9c:	f104 0008 	add.w	r0, r4, #8
   1bea0:	f001 fe55 	bl	1db4e <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1bea4:	89a3      	ldrh	r3, [r4, #12]
   1bea6:	8842      	ldrh	r2, [r0, #2]
   1bea8:	429a      	cmp	r2, r3
   1beaa:	d11a      	bne.n	1bee2 <l2cap_recv+0x54>
	if (!hdr->ident) {
   1beac:	7841      	ldrb	r1, [r0, #1]
   1beae:	b1c1      	cbz	r1, 1bee2 <l2cap_recv+0x54>
	switch (hdr->code) {
   1beb0:	7803      	ldrb	r3, [r0, #0]
   1beb2:	2b01      	cmp	r3, #1
   1beb4:	d015      	beq.n	1bee2 <l2cap_recv+0x54>
   1beb6:	2b13      	cmp	r3, #19
   1beb8:	d013      	beq.n	1bee2 <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1beba:	2202      	movs	r2, #2
   1bebc:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1bebe:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1bec0:	f7ff ff3f 	bl	1bd42 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1bec4:	4604      	mov	r4, r0
   1bec6:	b160      	cbz	r0, 1bee2 <l2cap_recv+0x54>
	return net_buf_simple_add(&buf->b, len);
   1bec8:	2102      	movs	r1, #2
   1beca:	3008      	adds	r0, #8
   1becc:	f001 fe18 	bl	1db00 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1bed0:	2300      	movs	r3, #0
   1bed2:	7003      	strb	r3, [r0, #0]
   1bed4:	7043      	strb	r3, [r0, #1]
   1bed6:	4622      	mov	r2, r4
   1bed8:	9300      	str	r3, [sp, #0]
   1beda:	2105      	movs	r1, #5
   1bedc:	4628      	mov	r0, r5
   1bede:	f7ff ffbd 	bl	1be5c <bt_l2cap_send_cb>
}
   1bee2:	2000      	movs	r0, #0
   1bee4:	b003      	add	sp, #12
   1bee6:	bd30      	pop	{r4, r5, pc}

0001bee8 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bee8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1beea:	b160      	cbz	r0, 1bf06 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1beec:	3808      	subs	r0, #8
   1beee:	b900      	cbnz	r0, 1bef2 <bt_l2cap_le_lookup_tx_cid+0xa>
   1bef0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1bef2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1bef6:	428b      	cmp	r3, r1
   1bef8:	d005      	beq.n	1bf06 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1befa:	f110 0308 	adds.w	r3, r0, #8
   1befe:	d001      	beq.n	1bf04 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bf00:	6880      	ldr	r0, [r0, #8]
   1bf02:	e7f2      	b.n	1beea <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1bf04:	4618      	mov	r0, r3
}
   1bf06:	4770      	bx	lr

0001bf08 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bf08:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1bf0a:	b160      	cbz	r0, 1bf26 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1bf0c:	3808      	subs	r0, #8
   1bf0e:	b900      	cbnz	r0, 1bf12 <bt_l2cap_le_lookup_rx_cid+0xa>
   1bf10:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1bf12:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1bf16:	428b      	cmp	r3, r1
   1bf18:	d005      	beq.n	1bf26 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf1a:	f110 0308 	adds.w	r3, r0, #8
   1bf1e:	d001      	beq.n	1bf24 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bf20:	6880      	ldr	r0, [r0, #8]
   1bf22:	e7f2      	b.n	1bf0a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1bf24:	4618      	mov	r0, r3
}
   1bf26:	4770      	bx	lr

0001bf28 <bt_l2cap_recv>:
{
   1bf28:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1bf2a:	898b      	ldrh	r3, [r1, #12]
   1bf2c:	2b03      	cmp	r3, #3
{
   1bf2e:	4605      	mov	r5, r0
   1bf30:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1bf32:	d804      	bhi.n	1bf3e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1bf34:	4620      	mov	r0, r4
}
   1bf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1bf3a:	f7fa ba05 	b.w	16348 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1bf3e:	2104      	movs	r1, #4
   1bf40:	f104 0008 	add.w	r0, r4, #8
   1bf44:	f001 fe03 	bl	1db4e <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1bf48:	8841      	ldrh	r1, [r0, #2]
   1bf4a:	4628      	mov	r0, r5
   1bf4c:	f7ff ffdc 	bl	1bf08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bf50:	2800      	cmp	r0, #0
   1bf52:	d0ef      	beq.n	1bf34 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1bf54:	6843      	ldr	r3, [r0, #4]
   1bf56:	4621      	mov	r1, r4
   1bf58:	691b      	ldr	r3, [r3, #16]
   1bf5a:	4798      	blx	r3
   1bf5c:	e7ea      	b.n	1bf34 <bt_l2cap_recv+0xc>

0001bf5e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1bf5e:	4770      	bx	lr

0001bf60 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1bf60:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1bf62:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1bf64:	b128      	cbz	r0, 1bf72 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf66:	6859      	ldr	r1, [r3, #4]
   1bf68:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1bf6a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf6c:	4288      	cmp	r0, r1
	list->tail = node;
   1bf6e:	bf08      	it	eq
   1bf70:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1bf72:	4770      	bx	lr

0001bf74 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bf74:	4603      	mov	r3, r0
   1bf76:	6800      	ldr	r0, [r0, #0]
   1bf78:	2200      	movs	r2, #0
   1bf7a:	b900      	cbnz	r0, 1bf7e <sys_slist_find_and_remove+0xa>
   1bf7c:	4770      	bx	lr
   1bf7e:	4288      	cmp	r0, r1
   1bf80:	d110      	bne.n	1bfa4 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1bf82:	6808      	ldr	r0, [r1, #0]
   1bf84:	b942      	cbnz	r2, 1bf98 <sys_slist_find_and_remove+0x24>
   1bf86:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1bf88:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bf8a:	4291      	cmp	r1, r2
   1bf8c:	d100      	bne.n	1bf90 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1bf8e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1bf90:	2300      	movs	r3, #0
   1bf92:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bf94:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1bf96:	4770      	bx	lr
	parent->next = child;
   1bf98:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bf9a:	6858      	ldr	r0, [r3, #4]
   1bf9c:	4281      	cmp	r1, r0
	list->tail = node;
   1bf9e:	bf08      	it	eq
   1bfa0:	605a      	streq	r2, [r3, #4]
}
   1bfa2:	e7f5      	b.n	1bf90 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bfa4:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bfa6:	6800      	ldr	r0, [r0, #0]
   1bfa8:	e7e7      	b.n	1bf7a <sys_slist_find_and_remove+0x6>

0001bfaa <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1bfaa:	4603      	mov	r3, r0
	size_t bytes = 0;
   1bfac:	2000      	movs	r0, #0

	while (buf) {
   1bfae:	b903      	cbnz	r3, 1bfb2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1bfb0:	4770      	bx	lr
		bytes += buf->len;
   1bfb2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1bfb4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1bfb6:	4410      	add	r0, r2
		buf = buf->frags;
   1bfb8:	e7f9      	b.n	1bfae <net_buf_frags_len+0x4>

0001bfba <att_sent>:
	if (chan->ops->sent) {
   1bfba:	684b      	ldr	r3, [r1, #4]
   1bfbc:	695b      	ldr	r3, [r3, #20]
{
   1bfbe:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1bfc0:	b103      	cbz	r3, 1bfc4 <att_sent+0xa>
		chan->ops->sent(chan);
   1bfc2:	4718      	bx	r3
}
   1bfc4:	4770      	bx	lr

0001bfc6 <attr_read_type_cb>:
{
   1bfc6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1bfc8:	68d4      	ldr	r4, [r2, #12]
   1bfca:	7823      	ldrb	r3, [r4, #0]
   1bfcc:	3102      	adds	r1, #2
   1bfce:	b913      	cbnz	r3, 1bfd6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1bfd0:	7021      	strb	r1, [r4, #0]
	return true;
   1bfd2:	2001      	movs	r0, #1
   1bfd4:	e006      	b.n	1bfe4 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1bfd6:	428b      	cmp	r3, r1
   1bfd8:	d0fb      	beq.n	1bfd2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1bfda:	8983      	ldrh	r3, [r0, #12]
   1bfdc:	3b02      	subs	r3, #2
   1bfde:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1bfe0:	2000      	movs	r0, #0
   1bfe2:	6110      	str	r0, [r2, #16]
}
   1bfe4:	bd10      	pop	{r4, pc}

0001bfe6 <att_prepare_write_req>:
}
   1bfe6:	2006      	movs	r0, #6
   1bfe8:	4770      	bx	lr

0001bfea <att_op_get_type>:
	switch (op) {
   1bfea:	281e      	cmp	r0, #30
   1bfec:	d816      	bhi.n	1c01c <att_op_get_type+0x32>
   1bfee:	b308      	cbz	r0, 1c034 <att_op_get_type+0x4a>
   1bff0:	1e43      	subs	r3, r0, #1
   1bff2:	2b1d      	cmp	r3, #29
   1bff4:	d81e      	bhi.n	1c034 <att_op_get_type+0x4a>
   1bff6:	e8df f003 	tbb	[pc, r3]
   1bffa:	2317      	.short	0x2317
   1bffc:	23172317 	.word	0x23172317
   1c000:	23172317 	.word	0x23172317
   1c004:	23172317 	.word	0x23172317
   1c008:	23172317 	.word	0x23172317
   1c00c:	231d1d17 	.word	0x231d1d17
   1c010:	1d172317 	.word	0x1d172317
   1c014:	0f1b1d19 	.word	0x0f1b1d19
   1c018:	2004      	movs	r0, #4
   1c01a:	4770      	bx	lr
   1c01c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c020:	2b52      	cmp	r3, #82	; 0x52
   1c022:	d107      	bne.n	1c034 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c024:	2000      	movs	r0, #0
}
   1c026:	4770      	bx	lr
		return ATT_RESPONSE;
   1c028:	2002      	movs	r0, #2
   1c02a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c02c:	2003      	movs	r0, #3
   1c02e:	4770      	bx	lr
		return ATT_INDICATION;
   1c030:	2005      	movs	r0, #5
   1c032:	4770      	bx	lr
		return ATT_COMMAND;
   1c034:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c038:	bf0c      	ite	eq
   1c03a:	2006      	moveq	r0, #6
   1c03c:	2000      	movne	r0, #0
   1c03e:	4770      	bx	lr
		return ATT_REQUEST;
   1c040:	2001      	movs	r0, #1
   1c042:	4770      	bx	lr

0001c044 <bt_gatt_foreach_attr>:
{
   1c044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c046:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c04a:	2300      	movs	r3, #0
   1c04c:	9300      	str	r3, [sp, #0]
   1c04e:	461a      	mov	r2, r3
   1c050:	f7f8 fd32 	bl	14ab8 <bt_gatt_foreach_attr_type>
}
   1c054:	b005      	add	sp, #20
   1c056:	f85d fb04 	ldr.w	pc, [sp], #4

0001c05a <att_chan_read>:
{
   1c05a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c05e:	4680      	mov	r8, r0
   1c060:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c062:	4610      	mov	r0, r2
{
   1c064:	4699      	mov	r9, r3
   1c066:	468b      	mov	fp, r1
   1c068:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c06a:	f7ff ff9e 	bl	1bfaa <net_buf_frags_len>
   1c06e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1c072:	4283      	cmp	r3, r0
   1c074:	d97a      	bls.n	1c16c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c076:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c07a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c07c:	4630      	mov	r0, r6
   1c07e:	f001 fd1d 	bl	1dabc <net_buf_frag_last>
	size_t len, total = 0;
   1c082:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c086:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c088:	4630      	mov	r0, r6
   1c08a:	f7ff ff8e 	bl	1bfaa <net_buf_frags_len>
   1c08e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c092:	f105 0708 	add.w	r7, r5, #8
   1c096:	1a24      	subs	r4, r4, r0
   1c098:	4638      	mov	r0, r7
   1c09a:	f001 fd6c 	bl	1db76 <net_buf_simple_tailroom>
   1c09e:	4284      	cmp	r4, r0
   1c0a0:	d211      	bcs.n	1c0c6 <att_chan_read+0x6c>
   1c0a2:	4630      	mov	r0, r6
   1c0a4:	f7ff ff81 	bl	1bfaa <net_buf_frags_len>
   1c0a8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c0ac:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c0ae:	bb34      	cbnz	r4, 1c0fe <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c0b0:	79b0      	ldrb	r0, [r6, #6]
   1c0b2:	f7fa f88d 	bl	161d0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c0b6:	2200      	movs	r2, #0
   1c0b8:	2300      	movs	r3, #0
   1c0ba:	f001 fccb 	bl	1da54 <net_buf_alloc_fixed>
			if (!frag) {
   1c0be:	4605      	mov	r5, r0
   1c0c0:	b930      	cbnz	r0, 1c0d0 <att_chan_read+0x76>
	return total;
   1c0c2:	4657      	mov	r7, sl
   1c0c4:	e02c      	b.n	1c120 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c0c6:	4638      	mov	r0, r7
   1c0c8:	f001 fd55 	bl	1db76 <net_buf_simple_tailroom>
   1c0cc:	4604      	mov	r4, r0
   1c0ce:	e7ee      	b.n	1c0ae <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c0d0:	4601      	mov	r1, r0
   1c0d2:	4630      	mov	r0, r6
   1c0d4:	f001 fd03 	bl	1dade <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c0d8:	4630      	mov	r0, r6
   1c0da:	f7ff ff66 	bl	1bfaa <net_buf_frags_len>
   1c0de:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c0e2:	f105 0708 	add.w	r7, r5, #8
   1c0e6:	1a24      	subs	r4, r4, r0
   1c0e8:	4638      	mov	r0, r7
   1c0ea:	f001 fd44 	bl	1db76 <net_buf_simple_tailroom>
   1c0ee:	4284      	cmp	r4, r0
   1c0f0:	d21a      	bcs.n	1c128 <att_chan_read+0xce>
   1c0f2:	4630      	mov	r0, r6
   1c0f4:	f7ff ff59 	bl	1bfaa <net_buf_frags_len>
   1c0f8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c0fc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c0fe:	68a9      	ldr	r1, [r5, #8]
   1c100:	89aa      	ldrh	r2, [r5, #12]
   1c102:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c106:	9803      	ldr	r0, [sp, #12]
   1c108:	f8cd 9000 	str.w	r9, [sp]
   1c10c:	440a      	add	r2, r1
   1c10e:	b2a3      	uxth	r3, r4
   1c110:	4659      	mov	r1, fp
   1c112:	47b8      	blx	r7
		if (read < 0) {
   1c114:	1e07      	subs	r7, r0, #0
   1c116:	da0c      	bge.n	1c132 <att_chan_read+0xd8>
				return total;
   1c118:	f1ba 0f00 	cmp.w	sl, #0
   1c11c:	bf18      	it	ne
   1c11e:	4657      	movne	r7, sl
}
   1c120:	4638      	mov	r0, r7
   1c122:	b005      	add	sp, #20
   1c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c128:	4638      	mov	r0, r7
   1c12a:	f001 fd24 	bl	1db76 <net_buf_simple_tailroom>
   1c12e:	4604      	mov	r4, r0
   1c130:	e7e5      	b.n	1c0fe <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c134:	b993      	cbnz	r3, 1c15c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c136:	4639      	mov	r1, r7
   1c138:	f105 0008 	add.w	r0, r5, #8
   1c13c:	f001 fce0 	bl	1db00 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c140:	4630      	mov	r0, r6
   1c142:	f7ff ff32 	bl	1bfaa <net_buf_frags_len>
   1c146:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c14a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c14c:	4283      	cmp	r3, r0
		total += read;
   1c14e:	44ba      	add	sl, r7
		offset += read;
   1c150:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c154:	d9b5      	bls.n	1c0c2 <att_chan_read+0x68>
   1c156:	42a7      	cmp	r7, r4
   1c158:	d096      	beq.n	1c088 <att_chan_read+0x2e>
   1c15a:	e7b2      	b.n	1c0c2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c15c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c15e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c160:	4639      	mov	r1, r7
   1c162:	4628      	mov	r0, r5
   1c164:	4798      	blx	r3
   1c166:	2800      	cmp	r0, #0
   1c168:	d1e5      	bne.n	1c136 <att_chan_read+0xdc>
   1c16a:	e7aa      	b.n	1c0c2 <att_chan_read+0x68>
		return 0;
   1c16c:	2700      	movs	r7, #0
   1c16e:	e7d7      	b.n	1c120 <att_chan_read+0xc6>

0001c170 <find_type_cb>:
{
   1c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1c174:	f8d2 9000 	ldr.w	r9, [r2]
{
   1c178:	b091      	sub	sp, #68	; 0x44
   1c17a:	4607      	mov	r7, r0
   1c17c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c17e:	2500      	movs	r5, #0
   1c180:	f642 0301 	movw	r3, #10241	; 0x2801
   1c184:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c186:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c18a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1c18e:	a90b      	add	r1, sp, #44	; 0x2c
{
   1c190:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c192:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1c196:	f7ff f822 	bl	1b1de <bt_uuid_cmp>
   1c19a:	2800      	cmp	r0, #0
   1c19c:	d079      	beq.n	1c292 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1c19e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c1a2:	6838      	ldr	r0, [r7, #0]
   1c1a4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1c1a8:	a90b      	add	r1, sp, #44	; 0x2c
   1c1aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1c1ae:	f7ff f816 	bl	1b1de <bt_uuid_cmp>
   1c1b2:	b138      	cbz	r0, 1c1c4 <find_type_cb+0x54>
		if (data->group &&
   1c1b4:	68a3      	ldr	r3, [r4, #8]
   1c1b6:	b11b      	cbz	r3, 1c1c0 <find_type_cb+0x50>
   1c1b8:	885a      	ldrh	r2, [r3, #2]
   1c1ba:	42b2      	cmp	r2, r6
   1c1bc:	d200      	bcs.n	1c1c0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c1be:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1c1c0:	2001      	movs	r0, #1
   1c1c2:	e009      	b.n	1c1d8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c1c4:	6861      	ldr	r1, [r4, #4]
   1c1c6:	4608      	mov	r0, r1
   1c1c8:	f7ff feef 	bl	1bfaa <net_buf_frags_len>
   1c1cc:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1c1d0:	1a1b      	subs	r3, r3, r0
   1c1d2:	2b03      	cmp	r3, #3
   1c1d4:	d803      	bhi.n	1c1de <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1c1d6:	2000      	movs	r0, #0
}
   1c1d8:	b011      	add	sp, #68	; 0x44
   1c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1c1de:	4608      	mov	r0, r1
   1c1e0:	f001 fc6c 	bl	1dabc <net_buf_frag_last>
   1c1e4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1c1e6:	6860      	ldr	r0, [r4, #4]
   1c1e8:	f7ff fedf 	bl	1bfaa <net_buf_frags_len>
   1c1ec:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c1f0:	f105 0b08 	add.w	fp, r5, #8
   1c1f4:	ebaa 0a00 	sub.w	sl, sl, r0
   1c1f8:	4658      	mov	r0, fp
   1c1fa:	f001 fcbc 	bl	1db76 <net_buf_simple_tailroom>
   1c1fe:	4550      	cmp	r0, sl
   1c200:	d93f      	bls.n	1c282 <find_type_cb+0x112>
   1c202:	6860      	ldr	r0, [r4, #4]
   1c204:	f7ff fed1 	bl	1bfaa <net_buf_frags_len>
   1c208:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1c20c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1c20e:	b970      	cbnz	r0, 1c22e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1c210:	6863      	ldr	r3, [r4, #4]
   1c212:	7998      	ldrb	r0, [r3, #6]
   1c214:	f7f9 ffdc 	bl	161d0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c218:	2200      	movs	r2, #0
   1c21a:	2300      	movs	r3, #0
   1c21c:	f001 fc1a 	bl	1da54 <net_buf_alloc_fixed>
		if (!frag) {
   1c220:	4605      	mov	r5, r0
   1c222:	2800      	cmp	r0, #0
   1c224:	d0d7      	beq.n	1c1d6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1c226:	4601      	mov	r1, r0
   1c228:	6860      	ldr	r0, [r4, #4]
   1c22a:	f001 fc58 	bl	1dade <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1c22e:	2300      	movs	r3, #0
   1c230:	9300      	str	r3, [sp, #0]
   1c232:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1c236:	4639      	mov	r1, r7
   1c238:	2310      	movs	r3, #16
   1c23a:	aa02      	add	r2, sp, #8
   1c23c:	4640      	mov	r0, r8
   1c23e:	47c8      	blx	r9
	if (read < 0) {
   1c240:	1e07      	subs	r7, r0, #0
   1c242:	db26      	blt.n	1c292 <find_type_cb+0x122>
	if (read != data->value_len) {
   1c244:	7c22      	ldrb	r2, [r4, #16]
   1c246:	68e0      	ldr	r0, [r4, #12]
   1c248:	42ba      	cmp	r2, r7
   1c24a:	d01e      	beq.n	1c28a <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c24c:	4601      	mov	r1, r0
   1c24e:	a80b      	add	r0, sp, #44	; 0x2c
   1c250:	f7fe ffef 	bl	1b232 <bt_uuid_create>
   1c254:	b1e8      	cbz	r0, 1c292 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1c256:	b2fa      	uxtb	r2, r7
   1c258:	a902      	add	r1, sp, #8
   1c25a:	a806      	add	r0, sp, #24
   1c25c:	f7fe ffe9 	bl	1b232 <bt_uuid_create>
   1c260:	b1b8      	cbz	r0, 1c292 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1c262:	a906      	add	r1, sp, #24
   1c264:	a80b      	add	r0, sp, #44	; 0x2c
   1c266:	f7fe ffba 	bl	1b1de <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1c26a:	b990      	cbnz	r0, 1c292 <find_type_cb+0x122>
	data->err = 0x00;
   1c26c:	2300      	movs	r3, #0
   1c26e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1c270:	2104      	movs	r1, #4
   1c272:	f105 0008 	add.w	r0, r5, #8
   1c276:	f001 fc43 	bl	1db00 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1c27a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c27c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c27e:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1c280:	e79e      	b.n	1c1c0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1c282:	4658      	mov	r0, fp
   1c284:	f001 fc77 	bl	1db76 <net_buf_simple_tailroom>
   1c288:	e7c1      	b.n	1c20e <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1c28a:	a902      	add	r1, sp, #8
   1c28c:	f7fe feb4 	bl	1aff8 <memcmp>
   1c290:	e7eb      	b.n	1c26a <find_type_cb+0xfa>
	data->group = NULL;
   1c292:	2300      	movs	r3, #0
   1c294:	60a3      	str	r3, [r4, #8]
   1c296:	e793      	b.n	1c1c0 <find_type_cb+0x50>

0001c298 <find_info_cb>:
{
   1c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c29a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1c29c:	6817      	ldr	r7, [r2, #0]
{
   1c29e:	4605      	mov	r5, r0
   1c2a0:	460e      	mov	r6, r1
   1c2a2:	4614      	mov	r4, r2
	if (!data->rsp) {
   1c2a4:	b963      	cbnz	r3, 1c2c0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c2a6:	6850      	ldr	r0, [r2, #4]
   1c2a8:	2101      	movs	r1, #1
   1c2aa:	3008      	adds	r0, #8
   1c2ac:	f001 fc28 	bl	1db00 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c2b0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c2b2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c2b4:	781b      	ldrb	r3, [r3, #0]
   1c2b6:	2b00      	cmp	r3, #0
   1c2b8:	bf0c      	ite	eq
   1c2ba:	2301      	moveq	r3, #1
   1c2bc:	2302      	movne	r3, #2
   1c2be:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c2c0:	68a3      	ldr	r3, [r4, #8]
   1c2c2:	781b      	ldrb	r3, [r3, #0]
   1c2c4:	2b01      	cmp	r3, #1
   1c2c6:	d003      	beq.n	1c2d0 <find_info_cb+0x38>
   1c2c8:	2b02      	cmp	r3, #2
   1c2ca:	d019      	beq.n	1c300 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c2cc:	2000      	movs	r0, #0
   1c2ce:	e016      	b.n	1c2fe <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c2d0:	682b      	ldr	r3, [r5, #0]
   1c2d2:	781b      	ldrb	r3, [r3, #0]
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	d1f9      	bne.n	1c2cc <find_info_cb+0x34>
   1c2d8:	6860      	ldr	r0, [r4, #4]
   1c2da:	2104      	movs	r1, #4
   1c2dc:	3008      	adds	r0, #8
   1c2de:	f001 fc0f 	bl	1db00 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c2e2:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c2e4:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c2e6:	885b      	ldrh	r3, [r3, #2]
   1c2e8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c2ea:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c2ec:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1c2ee:	899b      	ldrh	r3, [r3, #12]
   1c2f0:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c2f4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c2f6:	2804      	cmp	r0, #4
   1c2f8:	bf94      	ite	ls
   1c2fa:	2000      	movls	r0, #0
   1c2fc:	2001      	movhi	r0, #1
}
   1c2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c300:	682b      	ldr	r3, [r5, #0]
   1c302:	781b      	ldrb	r3, [r3, #0]
   1c304:	2b02      	cmp	r3, #2
   1c306:	d1e1      	bne.n	1c2cc <find_info_cb+0x34>
   1c308:	6860      	ldr	r0, [r4, #4]
   1c30a:	2112      	movs	r1, #18
   1c30c:	3008      	adds	r0, #8
   1c30e:	f001 fbf7 	bl	1db00 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c312:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c314:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c316:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c318:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c31c:	3101      	adds	r1, #1
   1c31e:	f7fe fe7b 	bl	1b018 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c322:	6863      	ldr	r3, [r4, #4]
   1c324:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c328:	899b      	ldrh	r3, [r3, #12]
   1c32a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c32c:	2812      	cmp	r0, #18
   1c32e:	e7e3      	b.n	1c2f8 <find_info_cb+0x60>

0001c330 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c330:	68d0      	ldr	r0, [r2, #12]
   1c332:	7803      	ldrb	r3, [r0, #0]
   1c334:	3104      	adds	r1, #4
   1c336:	b913      	cbnz	r3, 1c33e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c338:	7001      	strb	r1, [r0, #0]
	return true;
   1c33a:	2001      	movs	r0, #1
}
   1c33c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c33e:	428b      	cmp	r3, r1
   1c340:	d0fb      	beq.n	1c33a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1c342:	6891      	ldr	r1, [r2, #8]
   1c344:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1c346:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c348:	3b04      	subs	r3, #4
   1c34a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c34c:	6110      	str	r0, [r2, #16]
		return false;
   1c34e:	4770      	bx	lr

0001c350 <chan_req_send>:
{
   1c350:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c352:	688e      	ldr	r6, [r1, #8]
{
   1c354:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c356:	4630      	mov	r0, r6
{
   1c358:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c35a:	f7ff fe26 	bl	1bfaa <net_buf_frags_len>
   1c35e:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1c362:	4283      	cmp	r3, r0
   1c364:	d30a      	bcc.n	1c37c <chan_req_send+0x2c>
	req->buf = NULL;
   1c366:	2200      	movs	r2, #0
	chan->req = req;
   1c368:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	err = chan_send(chan, buf, NULL);
   1c36c:	4628      	mov	r0, r5
	req->buf = NULL;
   1c36e:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1c370:	4631      	mov	r1, r6
   1c372:	f7f7 fc71 	bl	13c58 <chan_send>
	if (err) {
   1c376:	b100      	cbz	r0, 1c37a <chan_req_send+0x2a>
		req->buf = buf;
   1c378:	60a6      	str	r6, [r4, #8]
}
   1c37a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c37c:	f06f 0023 	mvn.w	r0, #35	; 0x23
   1c380:	e7fb      	b.n	1c37a <chan_req_send+0x2a>

0001c382 <process_queue>:
{
   1c382:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c384:	2200      	movs	r2, #0
{
   1c386:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c388:	2300      	movs	r3, #0
   1c38a:	4608      	mov	r0, r1
{
   1c38c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c38e:	f001 fb66 	bl	1da5e <net_buf_get>
	if (buf) {
   1c392:	4605      	mov	r5, r0
   1c394:	b160      	cbz	r0, 1c3b0 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c396:	4601      	mov	r1, r0
   1c398:	2200      	movs	r2, #0
   1c39a:	4620      	mov	r0, r4
   1c39c:	f7f7 fc5c 	bl	13c58 <chan_send>
		if (err) {
   1c3a0:	4604      	mov	r4, r0
   1c3a2:	b118      	cbz	r0, 1c3ac <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c3a4:	4629      	mov	r1, r5
   1c3a6:	4630      	mov	r0, r6
   1c3a8:	f001 fe05 	bl	1dfb6 <k_queue_prepend>
}
   1c3ac:	4620      	mov	r0, r4
   1c3ae:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c3b0:	f06f 0401 	mvn.w	r4, #1
   1c3b4:	e7fa      	b.n	1c3ac <process_queue+0x2a>

0001c3b6 <att_exec_write_req>:
   1c3b6:	2006      	movs	r0, #6
   1c3b8:	4770      	bx	lr

0001c3ba <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c3ba:	30c8      	adds	r0, #200	; 0xc8
   1c3bc:	f3bf 8f5b 	dmb	ish
   1c3c0:	e850 3f00 	ldrex	r3, [r0]
   1c3c4:	f023 0302 	bic.w	r3, r3, #2
   1c3c8:	e840 3200 	strex	r2, r3, [r0]
   1c3cc:	2a00      	cmp	r2, #0
   1c3ce:	d1f7      	bne.n	1c3c0 <chan_cfm_sent+0x6>
   1c3d0:	f3bf 8f5b 	dmb	ish
}
   1c3d4:	4770      	bx	lr

0001c3d6 <chan_rsp_sent>:
   1c3d6:	30c8      	adds	r0, #200	; 0xc8
   1c3d8:	f3bf 8f5b 	dmb	ish
   1c3dc:	e850 3f00 	ldrex	r3, [r0]
   1c3e0:	f023 0301 	bic.w	r3, r3, #1
   1c3e4:	e840 3200 	strex	r2, r3, [r0]
   1c3e8:	2a00      	cmp	r2, #0
   1c3ea:	d1f7      	bne.n	1c3dc <chan_rsp_sent+0x6>
   1c3ec:	f3bf 8f5b 	dmb	ish
}
   1c3f0:	4770      	bx	lr

0001c3f2 <att_get>:
{
   1c3f2:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1c3f4:	7b43      	ldrb	r3, [r0, #13]
   1c3f6:	2b07      	cmp	r3, #7
   1c3f8:	d001      	beq.n	1c3fe <att_get+0xc>
		return NULL;
   1c3fa:	2000      	movs	r0, #0
}
   1c3fc:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1c3fe:	2104      	movs	r1, #4
   1c400:	f7ff fd82 	bl	1bf08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c404:	2800      	cmp	r0, #0
   1c406:	d0f8      	beq.n	1c3fa <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c408:	f3bf 8f5b 	dmb	ish
   1c40c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1c410:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1c414:	075b      	lsls	r3, r3, #29
   1c416:	d4f0      	bmi.n	1c3fa <att_get+0x8>
	return att_chan->att;
   1c418:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c41c:	e7ee      	b.n	1c3fc <att_get+0xa>

0001c41e <bt_att_status>:
{
   1c41e:	b538      	push	{r3, r4, r5, lr}
   1c420:	f3bf 8f5b 	dmb	ish
   1c424:	680b      	ldr	r3, [r1, #0]
   1c426:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c42a:	07db      	lsls	r3, r3, #31
{
   1c42c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c42e:	d519      	bpl.n	1c464 <bt_att_status+0x46>
	if (!chan->att) {
   1c430:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c434:	b1b0      	cbz	r0, 1c464 <bt_att_status+0x46>
	if (chan->req) {
   1c436:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1c43a:	b99b      	cbnz	r3, 1c464 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1c43c:	3004      	adds	r0, #4
   1c43e:	f7ff fd8f 	bl	1bf60 <sys_slist_get>
	if (!node) {
   1c442:	4604      	mov	r4, r0
   1c444:	b170      	cbz	r0, 1c464 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1c446:	4601      	mov	r1, r0
   1c448:	f1a5 0008 	sub.w	r0, r5, #8
   1c44c:	f7ff ff80 	bl	1c350 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c450:	2800      	cmp	r0, #0
   1c452:	da07      	bge.n	1c464 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1c454:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1c458:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c45a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c45c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c45e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c460:	b902      	cbnz	r2, 1c464 <bt_att_status+0x46>
	list->tail = node;
   1c462:	609c      	str	r4, [r3, #8]
}
   1c464:	bd38      	pop	{r3, r4, r5, pc}

0001c466 <write_cb>:
{
   1c466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c468:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c46a:	4601      	mov	r1, r0
{
   1c46c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c46e:	222a      	movs	r2, #42	; 0x2a
   1c470:	6820      	ldr	r0, [r4, #0]
   1c472:	f000 fd2c 	bl	1cece <bt_gatt_check_perm>
   1c476:	4605      	mov	r5, r0
   1c478:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c47a:	bb00      	cbnz	r0, 1c4be <write_cb+0x58>
	if (!data->req) {
   1c47c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c47e:	68b7      	ldr	r7, [r6, #8]
   1c480:	68e2      	ldr	r2, [r4, #12]
   1c482:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1c484:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c486:	bf14      	ite	ne
   1c488:	2300      	movne	r3, #0
   1c48a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c48c:	9301      	str	r3, [sp, #4]
   1c48e:	8a63      	ldrh	r3, [r4, #18]
   1c490:	9300      	str	r3, [sp, #0]
   1c492:	4631      	mov	r1, r6
   1c494:	8a23      	ldrh	r3, [r4, #16]
   1c496:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c498:	1e03      	subs	r3, r0, #0
   1c49a:	db05      	blt.n	1c4a8 <write_cb+0x42>
   1c49c:	8a22      	ldrh	r2, [r4, #16]
   1c49e:	4293      	cmp	r3, r2
   1c4a0:	d10b      	bne.n	1c4ba <write_cb+0x54>
	data->err = 0U;
   1c4a2:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c4a4:	2501      	movs	r5, #1
   1c4a6:	e005      	b.n	1c4b4 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c4a8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c4ac:	d305      	bcc.n	1c4ba <write_cb+0x54>
		return -err;
   1c4ae:	425b      	negs	r3, r3
   1c4b0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c4b2:	7523      	strb	r3, [r4, #20]
}
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	b003      	add	sp, #12
   1c4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c4ba:	230e      	movs	r3, #14
   1c4bc:	e7f9      	b.n	1c4b2 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c4be:	2500      	movs	r5, #0
   1c4c0:	e7f8      	b.n	1c4b4 <write_cb+0x4e>

0001c4c2 <bt_att_sent>:
{
   1c4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1c4c4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
	struct bt_att *att = chan->att;
   1c4c8:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1c4cc:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c4ce:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1c4d2:	b10b      	cbz	r3, 1c4d8 <bt_att_sent+0x16>
		chan->sent(chan);
   1c4d4:	4638      	mov	r0, r7
   1c4d6:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c4d8:	f3bf 8f5b 	dmb	ish
   1c4dc:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   1c4e0:	e853 2f00 	ldrex	r2, [r3]
   1c4e4:	f022 0210 	bic.w	r2, r2, #16
   1c4e8:	e843 2100 	strex	r1, r2, [r3]
   1c4ec:	2900      	cmp	r1, #0
   1c4ee:	d1f7      	bne.n	1c4e0 <bt_att_sent+0x1e>
   1c4f0:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1c4f4:	b30c      	cbz	r4, 1c53a <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c4f6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1c4fa:	b98b      	cbnz	r3, 1c520 <bt_att_sent+0x5e>
   1c4fc:	6863      	ldr	r3, [r4, #4]
   1c4fe:	b17b      	cbz	r3, 1c520 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c500:	1d20      	adds	r0, r4, #4
   1c502:	f7ff fd2d 	bl	1bf60 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c506:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c508:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c50a:	4638      	mov	r0, r7
   1c50c:	f7ff ff20 	bl	1c350 <chan_req_send>
   1c510:	2800      	cmp	r0, #0
   1c512:	da12      	bge.n	1c53a <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1c514:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1c516:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c518:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1c51a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c51c:	b903      	cbnz	r3, 1c520 <bt_att_sent+0x5e>
	list->tail = node;
   1c51e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1c520:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   1c524:	4638      	mov	r0, r7
   1c526:	f7ff ff2c 	bl	1c382 <process_queue>
	if (!err) {
   1c52a:	b130      	cbz	r0, 1c53a <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1c52c:	f104 010c 	add.w	r1, r4, #12
   1c530:	4638      	mov	r0, r7
}
   1c532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1c536:	f7ff bf24 	b.w	1c382 <process_queue>
}
   1c53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c53c <read_cb>:
{
   1c53c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1c540:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c544:	4606      	mov	r6, r0
	data->err = 0x00;
   1c546:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1c548:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1c54c:	7317      	strb	r7, [r2, #12]
{
   1c54e:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c550:	4631      	mov	r1, r6
   1c552:	2215      	movs	r2, #21
   1c554:	f000 fcbb 	bl	1cece <bt_gatt_check_perm>
   1c558:	4604      	mov	r4, r0
   1c55a:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c55c:	b9a0      	cbnz	r0, 1c588 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c55e:	e9cd 0000 	strd	r0, r0, [sp]
   1c562:	88ab      	ldrh	r3, [r5, #4]
   1c564:	68aa      	ldr	r2, [r5, #8]
   1c566:	4631      	mov	r1, r6
   1c568:	4640      	mov	r0, r8
   1c56a:	f7ff fd76 	bl	1c05a <att_chan_read>
	if (ret < 0) {
   1c56e:	1e03      	subs	r3, r0, #0
   1c570:	da0c      	bge.n	1c58c <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1c572:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1c576:	bf26      	itte	cs
   1c578:	425b      	negcs	r3, r3
   1c57a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1c57c:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1c57e:	732b      	strb	r3, [r5, #12]
}
   1c580:	4620      	mov	r0, r4
   1c582:	b002      	add	sp, #8
   1c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1c588:	463c      	mov	r4, r7
   1c58a:	e7f9      	b.n	1c580 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1c58c:	2401      	movs	r4, #1
   1c58e:	e7f7      	b.n	1c580 <read_cb+0x44>

0001c590 <bt_att_chan_create_pdu>:
{
   1c590:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c592:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   1c596:	3201      	adds	r2, #1
   1c598:	429a      	cmp	r2, r3
{
   1c59a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c59c:	d81b      	bhi.n	1c5d6 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1c59e:	4608      	mov	r0, r1
   1c5a0:	f7ff fd23 	bl	1bfea <att_op_get_type>
   1c5a4:	2802      	cmp	r0, #2
   1c5a6:	d001      	beq.n	1c5ac <bt_att_chan_create_pdu+0x1c>
   1c5a8:	2804      	cmp	r0, #4
   1c5aa:	d10f      	bne.n	1c5cc <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1c5ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c5b0:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1c5b2:	2100      	movs	r1, #0
   1c5b4:	4608      	mov	r0, r1
   1c5b6:	f7ff fc4e 	bl	1be56 <bt_l2cap_create_pdu_timeout>
   1c5ba:	4604      	mov	r4, r0
	if (!buf) {
   1c5bc:	b120      	cbz	r0, 1c5c8 <bt_att_chan_create_pdu+0x38>
   1c5be:	2101      	movs	r1, #1
   1c5c0:	3008      	adds	r0, #8
   1c5c2:	f001 fa9d 	bl	1db00 <net_buf_simple_add>
	hdr->code = op;
   1c5c6:	7005      	strb	r5, [r0, #0]
}
   1c5c8:	4620      	mov	r0, r4
   1c5ca:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1c5cc:	f04f 32ff 	mov.w	r2, #4294967295
   1c5d0:	f04f 33ff 	mov.w	r3, #4294967295
   1c5d4:	e7ed      	b.n	1c5b2 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1c5d6:	2400      	movs	r4, #0
   1c5d8:	e7f6      	b.n	1c5c8 <bt_att_chan_create_pdu+0x38>

0001c5da <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5de:	4688      	mov	r8, r1
   1c5e0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c5e2:	2101      	movs	r1, #1
   1c5e4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c5e6:	4605      	mov	r5, r0
   1c5e8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c5ea:	f7ff ffd1 	bl	1c590 <bt_att_chan_create_pdu>
	if (!buf) {
   1c5ee:	4604      	mov	r4, r0
   1c5f0:	b170      	cbz	r0, 1c610 <send_err_rsp.part.0+0x36>
   1c5f2:	2104      	movs	r1, #4
   1c5f4:	3008      	adds	r0, #8
   1c5f6:	f001 fa83 	bl	1db00 <net_buf_simple_add>
	rsp->request = req;
   1c5fa:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1c5fe:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1c600:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1c604:	4621      	mov	r1, r4
   1c606:	4628      	mov	r0, r5
}
   1c608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1c60c:	f7f7 bb82 	b.w	13d14 <bt_att_chan_send_rsp.constprop.0>
}
   1c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c614 <bt_att_create_pdu>:
{
   1c614:	b570      	push	{r4, r5, r6, lr}
   1c616:	460e      	mov	r6, r1
   1c618:	4615      	mov	r5, r2
	att = att_get(conn);
   1c61a:	f7ff feea 	bl	1c3f2 <att_get>
	if (!att) {
   1c61e:	b170      	cbz	r0, 1c63e <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c620:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c622:	b163      	cbz	r3, 1c63e <bt_att_create_pdu+0x2a>
   1c624:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   1c628:	d009      	beq.n	1c63e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c62a:	681b      	ldr	r3, [r3, #0]
   1c62c:	b10b      	cbz	r3, 1c632 <bt_att_create_pdu+0x1e>
   1c62e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c632:	1c6a      	adds	r2, r5, #1
   1c634:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   1c638:	428a      	cmp	r2, r1
   1c63a:	d902      	bls.n	1c642 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c63c:	b93b      	cbnz	r3, 1c64e <bt_att_create_pdu+0x3a>
}
   1c63e:	2000      	movs	r0, #0
   1c640:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1c642:	462a      	mov	r2, r5
   1c644:	4631      	mov	r1, r6
}
   1c646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1c64a:	f7ff bfa1 	b.w	1c590 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c64e:	f513 748e 	adds.w	r4, r3, #284	; 0x11c
   1c652:	d004      	beq.n	1c65e <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c654:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c658:	b10c      	cbz	r4, 1c65e <bt_att_create_pdu+0x4a>
   1c65a:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
{
   1c65e:	4618      	mov	r0, r3
   1c660:	4623      	mov	r3, r4
   1c662:	e7e7      	b.n	1c634 <bt_att_create_pdu+0x20>

0001c664 <att_read_blob_req>:
{
   1c664:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1c666:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1c668:	8813      	ldrh	r3, [r2, #0]
   1c66a:	8852      	ldrh	r2, [r2, #2]
   1c66c:	9200      	str	r2, [sp, #0]
   1c66e:	210c      	movs	r1, #12
   1c670:	220d      	movs	r2, #13
   1c672:	f7f7 fdaf 	bl	141d4 <att_read_rsp>
}
   1c676:	b003      	add	sp, #12
   1c678:	f85d fb04 	ldr.w	pc, [sp], #4

0001c67c <att_read_req>:
{
   1c67c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1c67e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1c680:	2200      	movs	r2, #0
   1c682:	881b      	ldrh	r3, [r3, #0]
   1c684:	9200      	str	r2, [sp, #0]
   1c686:	210a      	movs	r1, #10
   1c688:	220b      	movs	r2, #11
   1c68a:	f7f7 fda3 	bl	141d4 <att_read_rsp>
}
   1c68e:	b003      	add	sp, #12
   1c690:	f85d fb04 	ldr.w	pc, [sp], #4

0001c694 <att_mtu_req>:
{
   1c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1c696:	6803      	ldr	r3, [r0, #0]
{
   1c698:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1c69a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c69c:	f3bf 8f5b 	dmb	ish
   1c6a0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   1c6a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1c6a8:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1c6ac:	071b      	lsls	r3, r3, #28
   1c6ae:	d41d      	bmi.n	1c6ec <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1c6b0:	688b      	ldr	r3, [r1, #8]
   1c6b2:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1c6b4:	2e16      	cmp	r6, #22
   1c6b6:	d91b      	bls.n	1c6f0 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1c6b8:	2202      	movs	r2, #2
   1c6ba:	2103      	movs	r1, #3
   1c6bc:	f7ff ffaa 	bl	1c614 <bt_att_create_pdu>
	if (!pdu) {
   1c6c0:	4607      	mov	r7, r0
   1c6c2:	b1b8      	cbz	r0, 1c6f4 <att_mtu_req+0x60>
   1c6c4:	2102      	movs	r1, #2
   1c6c6:	3008      	adds	r0, #8
   1c6c8:	f001 fa1a 	bl	1db00 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1c6cc:	2341      	movs	r3, #65	; 0x41
   1c6ce:	7003      	strb	r3, [r0, #0]
   1c6d0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1c6d2:	4639      	mov	r1, r7
   1c6d4:	4628      	mov	r0, r5
   1c6d6:	f7f7 fb1d 	bl	13d14 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1c6da:	2e41      	cmp	r6, #65	; 0x41
   1c6dc:	bf28      	it	cs
   1c6de:	2641      	movcs	r6, #65	; 0x41
   1c6e0:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1c6e4:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   1c6e8:	4620      	mov	r0, r4
}
   1c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1c6ec:	2006      	movs	r0, #6
   1c6ee:	e7fc      	b.n	1c6ea <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1c6f0:	2004      	movs	r0, #4
   1c6f2:	e7fa      	b.n	1c6ea <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1c6f4:	200e      	movs	r0, #14
   1c6f6:	e7f8      	b.n	1c6ea <att_mtu_req+0x56>

0001c6f8 <bt_att_init>:
	bt_gatt_init();
   1c6f8:	f7f8 b95a 	b.w	149b0 <bt_gatt_init>

0001c6fc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1c6fc:	898a      	ldrh	r2, [r1, #12]
   1c6fe:	6889      	ldr	r1, [r1, #8]
   1c700:	2300      	movs	r3, #0
   1c702:	f7f7 bed9 	b.w	144b8 <att_handle_rsp>

0001c706 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1c706:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1c70a:	b570      	push	{r4, r5, r6, lr}
   1c70c:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c70e:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1c712:	2b00      	cmp	r3, #0
   1c714:	d037      	beq.n	1c786 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   1c716:	b171      	cbz	r1, 1c736 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   1c718:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1c71c:	2b00      	cmp	r3, #0
   1c71e:	d032      	beq.n	1c786 <bt_att_encrypt_change+0x80>
   1c720:	7c1b      	ldrb	r3, [r3, #16]
   1c722:	07da      	lsls	r2, r3, #31
   1c724:	d52f      	bpl.n	1c786 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   1c726:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   1c728:	2200      	movs	r2, #0
   1c72a:	4630      	mov	r0, r6
   1c72c:	4611      	mov	r1, r2
}
   1c72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1c732:	f7f7 bec1 	b.w	144b8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1c736:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1c738:	4628      	mov	r0, r5
   1c73a:	f7f8 fbf9 	bl	14f30 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1c73e:	7a6b      	ldrb	r3, [r5, #9]
   1c740:	2b01      	cmp	r3, #1
   1c742:	d020      	beq.n	1c786 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1c744:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
   1c748:	b1ec      	cbz	r4, 1c786 <bt_att_encrypt_change+0x80>
   1c74a:	7c23      	ldrb	r3, [r4, #16]
   1c74c:	07db      	lsls	r3, r3, #31
   1c74e:	d51a      	bpl.n	1c786 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   1c750:	68e3      	ldr	r3, [r4, #12]
   1c752:	2b00      	cmp	r3, #0
   1c754:	d0e7      	beq.n	1c726 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1c756:	6962      	ldr	r2, [r4, #20]
   1c758:	7c61      	ldrb	r1, [r4, #17]
   1c75a:	4630      	mov	r0, r6
   1c75c:	f7ff ff18 	bl	1c590 <bt_att_chan_create_pdu>
	if (!buf) {
   1c760:	4605      	mov	r5, r0
   1c762:	b140      	cbz	r0, 1c776 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   1c764:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1c768:	68e3      	ldr	r3, [r4, #12]
   1c76a:	4798      	blx	r3
   1c76c:	4602      	mov	r2, r0
   1c76e:	b120      	cbz	r0, 1c77a <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   1c770:	4628      	mov	r0, r5
   1c772:	f7f9 fde9 	bl	16348 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1c776:	230e      	movs	r3, #14
   1c778:	e7d6      	b.n	1c728 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   1c77a:	4629      	mov	r1, r5
   1c77c:	4630      	mov	r0, r6
   1c77e:	f7f7 fa6b 	bl	13c58 <chan_send>
   1c782:	2800      	cmp	r0, #0
   1c784:	d1f4      	bne.n	1c770 <bt_att_encrypt_change+0x6a>
}
   1c786:	bd70      	pop	{r4, r5, r6, pc}

0001c788 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1c788:	38e0      	subs	r0, #224	; 0xe0
   1c78a:	f7f7 bef9 	b.w	14580 <bt_att_disconnected>

0001c78e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1c78e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c792:	4605      	mov	r5, r0
   1c794:	460e      	mov	r6, r1
   1c796:	4614      	mov	r4, r2
   1c798:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1c79a:	f7ff fe2a 	bl	1c3f2 <att_get>
	if (!att) {
   1c79e:	4607      	mov	r7, r0
   1c7a0:	b938      	cbnz	r0, 1c7b2 <bt_att_send+0x24>
		net_buf_unref(buf);
   1c7a2:	4630      	mov	r0, r6
   1c7a4:	f7f9 fdd0 	bl	16348 <net_buf_unref>
		return -ENOTCONN;
   1c7a8:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1c7ac:	b002      	add	sp, #8
   1c7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1c7b2:	b144      	cbz	r4, 1c7c6 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1c7b4:	f8cd 8000 	str.w	r8, [sp]
   1c7b8:	4623      	mov	r3, r4
   1c7ba:	4632      	mov	r2, r6
   1c7bc:	2104      	movs	r1, #4
   1c7be:	4628      	mov	r0, r5
   1c7c0:	f7ff fb4c 	bl	1be5c <bt_l2cap_send_cb>
   1c7c4:	e7f2      	b.n	1c7ac <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c7c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1c7c8:	b184      	cbz	r4, 1c7ec <bt_att_send+0x5e>
   1c7ca:	f5b4 758e 	subs.w	r5, r4, #284	; 0x11c
   1c7ce:	d00f      	beq.n	1c7f0 <bt_att_send+0x62>
   1c7d0:	6824      	ldr	r4, [r4, #0]
   1c7d2:	b10c      	cbz	r4, 1c7d8 <bt_att_send+0x4a>
   1c7d4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
   1c7d8:	2000      	movs	r0, #0
   1c7da:	b95d      	cbnz	r5, 1c7f4 <bt_att_send+0x66>
	if (ret < 0) {
   1c7dc:	b188      	cbz	r0, 1c802 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1c7de:	f107 000c 	add.w	r0, r7, #12
   1c7e2:	4631      	mov	r1, r6
   1c7e4:	f001 f959 	bl	1da9a <net_buf_put>
	return 0;
   1c7e8:	4628      	mov	r0, r5
   1c7ea:	e7df      	b.n	1c7ac <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c7ec:	4625      	mov	r5, r4
   1c7ee:	e7f3      	b.n	1c7d8 <bt_att_send+0x4a>
   1c7f0:	462c      	mov	r4, r5
   1c7f2:	e7f1      	b.n	1c7d8 <bt_att_send+0x4a>
	return chan_send(chan, buf, cb);
   1c7f4:	2200      	movs	r2, #0
   1c7f6:	4631      	mov	r1, r6
   1c7f8:	4628      	mov	r0, r5
   1c7fa:	f7f7 fa2d 	bl	13c58 <chan_send>
		if (ret >= 0) {
   1c7fe:	2800      	cmp	r0, #0
   1c800:	db01      	blt.n	1c806 <bt_att_send+0x78>
	return 0;
   1c802:	2000      	movs	r0, #0
   1c804:	e7d2      	b.n	1c7ac <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c806:	b154      	cbz	r4, 1c81e <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c808:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   1c80c:	d004      	beq.n	1c818 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c80e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1c812:	b10b      	cbz	r3, 1c818 <bt_att_send+0x8a>
   1c814:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
   1c818:	4625      	mov	r5, r4
   1c81a:	461c      	mov	r4, r3
   1c81c:	e7dd      	b.n	1c7da <bt_att_send+0x4c>
   1c81e:	4623      	mov	r3, r4
   1c820:	e7fa      	b.n	1c818 <bt_att_send+0x8a>

0001c822 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1c822:	b570      	push	{r4, r5, r6, lr}
   1c824:	460e      	mov	r6, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1c826:	f7ff fde4 	bl	1c3f2 <att_get>
	if (!att) {
   1c82a:	4605      	mov	r5, r0
   1c82c:	b340      	cbz	r0, 1c880 <bt_att_req_send+0x5e>
		return -ENOTCONN;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c82e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c830:	b153      	cbz	r3, 1c848 <bt_att_req_send+0x26>
   1c832:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   1c836:	d007      	beq.n	1c848 <bt_att_req_send+0x26>
   1c838:	681c      	ldr	r4, [r3, #0]
   1c83a:	b10c      	cbz	r4, 1c840 <bt_att_req_send+0x1e>
   1c83c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		/* If there is nothing pending use the channel */
		if (!chan->req) {
   1c840:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1c844:	b143      	cbz	r3, 1c858 <bt_att_req_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c846:	b96c      	cbnz	r4, 1c864 <bt_att_req_send+0x42>
	parent->next = child;
   1c848:	2000      	movs	r0, #0
   1c84a:	6030      	str	r0, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1c84c:	68ab      	ldr	r3, [r5, #8]
   1c84e:	b9a3      	cbnz	r3, 1c87a <bt_att_req_send+0x58>
	list->head = node;
   1c850:	e9c5 6601 	strd	r6, r6, [r5, #4]
	/* Queue the request to be send later */
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
   1c854:	4618      	mov	r0, r3
}
   1c856:	e004      	b.n	1c862 <bt_att_req_send+0x40>
	return chan_req_send(chan, req);
   1c858:	4631      	mov	r1, r6
   1c85a:	f7ff fd79 	bl	1c350 <chan_req_send>
			if (ret >= 0) {
   1c85e:	2800      	cmp	r0, #0
   1c860:	dbf1      	blt.n	1c846 <bt_att_req_send+0x24>
}
   1c862:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c864:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   1c868:	d004      	beq.n	1c874 <bt_att_req_send+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c86a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c86e:	b10b      	cbz	r3, 1c874 <bt_att_req_send+0x52>
   1c870:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   1c874:	4620      	mov	r0, r4
   1c876:	461c      	mov	r4, r3
   1c878:	e7e2      	b.n	1c840 <bt_att_req_send+0x1e>
	parent->next = child;
   1c87a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c87c:	60ae      	str	r6, [r5, #8]
}
   1c87e:	e7f0      	b.n	1c862 <bt_att_req_send+0x40>
		return -ENOTCONN;
   1c880:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1c884:	e7ed      	b.n	1c862 <bt_att_req_send+0x40>

0001c886 <gatt_ccc_changed>:
{
   1c886:	460b      	mov	r3, r1
   1c888:	8909      	ldrh	r1, [r1, #8]
   1c88a:	8a5a      	ldrh	r2, [r3, #18]
   1c88c:	4291      	cmp	r1, r2
   1c88e:	bf38      	it	cc
   1c890:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1c892:	8a9a      	ldrh	r2, [r3, #20]
   1c894:	428a      	cmp	r2, r1
   1c896:	d003      	beq.n	1c8a0 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1c898:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1c89a:	699b      	ldr	r3, [r3, #24]
   1c89c:	b103      	cbz	r3, 1c8a0 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1c89e:	4718      	bx	r3
}
   1c8a0:	4770      	bx	lr

0001c8a2 <gatt_indicate_rsp>:
{
   1c8a2:	b510      	push	{r4, lr}
   1c8a4:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1c8a6:	68a3      	ldr	r3, [r4, #8]
{
   1c8a8:	460a      	mov	r2, r1
	if (params->func) {
   1c8aa:	b10b      	cbz	r3, 1c8b0 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1c8ac:	4621      	mov	r1, r4
   1c8ae:	4798      	blx	r3
	params->_ref--;
   1c8b0:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1c8b2:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1c8b4:	3b01      	subs	r3, #1
   1c8b6:	b2db      	uxtb	r3, r3
   1c8b8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1c8ba:	b122      	cbz	r2, 1c8c6 <gatt_indicate_rsp+0x24>
   1c8bc:	b91b      	cbnz	r3, 1c8c6 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1c8be:	4620      	mov	r0, r4
}
   1c8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1c8c4:	4710      	bx	r2
}
   1c8c6:	bd10      	pop	{r4, pc}

0001c8c8 <match_uuid>:
	data->attr = attr;
   1c8c8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1c8ca:	8091      	strh	r1, [r2, #4]
}
   1c8cc:	2000      	movs	r0, #0
   1c8ce:	4770      	bx	lr

0001c8d0 <gen_hash_m>:
{
   1c8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c8d2:	6807      	ldr	r7, [r0, #0]
   1c8d4:	783d      	ldrb	r5, [r7, #0]
{
   1c8d6:	b089      	sub	sp, #36	; 0x24
   1c8d8:	4606      	mov	r6, r0
   1c8da:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c8dc:	b10d      	cbz	r5, 1c8e2 <gen_hash_m+0x12>
	switch (u16->val) {
   1c8de:	2501      	movs	r5, #1
   1c8e0:	e014      	b.n	1c90c <gen_hash_m+0x3c>
   1c8e2:	887b      	ldrh	r3, [r7, #2]
   1c8e4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1c8e8:	d004      	beq.n	1c8f4 <gen_hash_m+0x24>
   1c8ea:	d812      	bhi.n	1c912 <gen_hash_m+0x42>
   1c8ec:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1c8f0:	2b03      	cmp	r3, #3
   1c8f2:	d8f4      	bhi.n	1c8de <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c8f4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c8f8:	2202      	movs	r2, #2
   1c8fa:	f10d 010e 	add.w	r1, sp, #14
   1c8fe:	4620      	mov	r0, r4
   1c900:	f7fe faa2 	bl	1ae48 <tc_cmac_update>
   1c904:	b9e0      	cbnz	r0, 1c940 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1c906:	f06f 0315 	mvn.w	r3, #21
   1c90a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1c90c:	4628      	mov	r0, r5
   1c90e:	b009      	add	sp, #36	; 0x24
   1c910:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1c912:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1c916:	33ff      	adds	r3, #255	; 0xff
   1c918:	b29b      	uxth	r3, r3
   1c91a:	2b04      	cmp	r3, #4
   1c91c:	d8df      	bhi.n	1c8de <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c91e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c922:	2202      	movs	r2, #2
   1c924:	f10d 010e 	add.w	r1, sp, #14
   1c928:	4620      	mov	r0, r4
   1c92a:	f7fe fa8d 	bl	1ae48 <tc_cmac_update>
   1c92e:	2800      	cmp	r0, #0
   1c930:	d0e9      	beq.n	1c906 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1c932:	887b      	ldrh	r3, [r7, #2]
   1c934:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c938:	2202      	movs	r2, #2
   1c93a:	f10d 010e 	add.w	r1, sp, #14
   1c93e:	e017      	b.n	1c970 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1c940:	887b      	ldrh	r3, [r7, #2]
   1c942:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c946:	2202      	movs	r2, #2
   1c948:	f10d 010e 	add.w	r1, sp, #14
   1c94c:	4620      	mov	r0, r4
   1c94e:	f7fe fa7b 	bl	1ae48 <tc_cmac_update>
   1c952:	2800      	cmp	r0, #0
   1c954:	d0d7      	beq.n	1c906 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1c956:	2000      	movs	r0, #0
   1c958:	2310      	movs	r3, #16
   1c95a:	eb0d 0203 	add.w	r2, sp, r3
   1c95e:	6877      	ldr	r7, [r6, #4]
   1c960:	9000      	str	r0, [sp, #0]
   1c962:	4631      	mov	r1, r6
   1c964:	47b8      	blx	r7
		if (len < 0) {
   1c966:	1e02      	subs	r2, r0, #0
   1c968:	da01      	bge.n	1c96e <gen_hash_m+0x9e>
			state->err = len;
   1c96a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1c96c:	e7ce      	b.n	1c90c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1c96e:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c970:	4620      	mov	r0, r4
   1c972:	f7fe fa69 	bl	1ae48 <tc_cmac_update>
   1c976:	2800      	cmp	r0, #0
   1c978:	d1b1      	bne.n	1c8de <gen_hash_m+0xe>
   1c97a:	e7c4      	b.n	1c906 <gen_hash_m+0x36>

0001c97c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c97c:	2301      	movs	r3, #1
   1c97e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c980:	f3bf 8f5b 	dmb	ish
   1c984:	e850 2f00 	ldrex	r2, [r0]
   1c988:	431a      	orrs	r2, r3
   1c98a:	e840 2100 	strex	r1, r2, [r0]
   1c98e:	2900      	cmp	r1, #0
   1c990:	d1f8      	bne.n	1c984 <atomic_set_bit+0x8>
   1c992:	f3bf 8f5b 	dmb	ish
}
   1c996:	4770      	bx	lr

0001c998 <clear_cf_cfg>:
{
   1c998:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c99a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c99c:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1c99e:	2207      	movs	r2, #7
   1c9a0:	4669      	mov	r1, sp
   1c9a2:	3001      	adds	r0, #1
   1c9a4:	9500      	str	r5, [sp, #0]
   1c9a6:	f8cd 5003 	str.w	r5, [sp, #3]
   1c9aa:	f7fe fb35 	bl	1b018 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1c9ae:	f104 0008 	add.w	r0, r4, #8
   1c9b2:	2201      	movs	r2, #1
   1c9b4:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c9b6:	340c      	adds	r4, #12
   1c9b8:	f7fe fb59 	bl	1b06e <memset>
   1c9bc:	f3bf 8f5b 	dmb	ish
   1c9c0:	e854 3f00 	ldrex	r3, [r4]
   1c9c4:	e844 5200 	strex	r2, r5, [r4]
   1c9c8:	2a00      	cmp	r2, #0
   1c9ca:	d1f9      	bne.n	1c9c0 <clear_cf_cfg+0x28>
   1c9cc:	f3bf 8f5b 	dmb	ish
}
   1c9d0:	b003      	add	sp, #12
   1c9d2:	bd30      	pop	{r4, r5, pc}

0001c9d4 <gatt_notify>:
{
   1c9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c9d8:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1c9da:	8992      	ldrh	r2, [r2, #12]
{
   1c9dc:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1c9de:	3202      	adds	r2, #2
   1c9e0:	211b      	movs	r1, #27
{
   1c9e2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1c9e4:	f7ff fe16 	bl	1c614 <bt_att_create_pdu>
	if (!buf) {
   1c9e8:	4605      	mov	r5, r0
   1c9ea:	b1c8      	cbz	r0, 1ca20 <gatt_notify+0x4c>
   1c9ec:	f100 0908 	add.w	r9, r0, #8
   1c9f0:	2102      	movs	r1, #2
   1c9f2:	4648      	mov	r0, r9
   1c9f4:	f001 f884 	bl	1db00 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1c9f8:	4606      	mov	r6, r0
   1c9fa:	89a1      	ldrh	r1, [r4, #12]
   1c9fc:	f826 8b02 	strh.w	r8, [r6], #2
   1ca00:	4648      	mov	r0, r9
   1ca02:	f001 f87d 	bl	1db00 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1ca06:	89a2      	ldrh	r2, [r4, #12]
   1ca08:	68a1      	ldr	r1, [r4, #8]
   1ca0a:	4630      	mov	r0, r6
   1ca0c:	f7fe fb04 	bl	1b018 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ca10:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ca14:	4629      	mov	r1, r5
   1ca16:	4638      	mov	r0, r7
}
   1ca18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ca1c:	f7ff beb7 	b.w	1c78e <bt_att_send>
}
   1ca20:	f06f 000b 	mvn.w	r0, #11
   1ca24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ca28 <cf_write>:
{
   1ca28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca2c:	4698      	mov	r8, r3
   1ca2e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1ca32:	2b01      	cmp	r3, #1
{
   1ca34:	4606      	mov	r6, r0
   1ca36:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1ca38:	d831      	bhi.n	1ca9e <cf_write+0x76>
	if (offset + len > sizeof(cfg->data)) {
   1ca3a:	4443      	add	r3, r8
   1ca3c:	2b01      	cmp	r3, #1
   1ca3e:	4645      	mov	r5, r8
   1ca40:	dc30      	bgt.n	1caa4 <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   1ca42:	f7f7 fe5f 	bl	14704 <find_cf_cfg>
	if (!cfg) {
   1ca46:	4604      	mov	r4, r0
   1ca48:	b918      	cbnz	r0, 1ca52 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1ca4a:	f7f7 fe5b 	bl	14704 <find_cf_cfg>
	if (!cfg) {
   1ca4e:	4604      	mov	r4, r0
   1ca50:	b358      	cbz	r0, 1caaa <cf_write+0x82>
{
   1ca52:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ca54:	f1b8 0f00 	cmp.w	r8, #0
   1ca58:	d10f      	bne.n	1ca7a <cf_write+0x52>
   1ca5a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1ca5e:	2207      	movs	r2, #7
   1ca60:	1c60      	adds	r0, r4, #1
   1ca62:	f7fe fad9 	bl	1b018 <memcpy>
	cfg->id = conn->id;
   1ca66:	4620      	mov	r0, r4
   1ca68:	7a33      	ldrb	r3, [r6, #8]
   1ca6a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ca6e:	2100      	movs	r1, #0
   1ca70:	f7ff ff84 	bl	1c97c <atomic_set_bit>
}
   1ca74:	4628      	mov	r0, r5
   1ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ca7a:	7a20      	ldrb	r0, [r4, #8]
   1ca7c:	fa20 f301 	lsr.w	r3, r0, r1
   1ca80:	07da      	lsls	r2, r3, #31
   1ca82:	d503      	bpl.n	1ca8c <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
   1ca84:	783b      	ldrb	r3, [r7, #0]
   1ca86:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ca88:	07db      	lsls	r3, r3, #31
   1ca8a:	d511      	bpl.n	1cab0 <cf_write+0x88>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ca8c:	3101      	adds	r1, #1
   1ca8e:	2903      	cmp	r1, #3
   1ca90:	d1e0      	bne.n	1ca54 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1ca92:	783b      	ldrb	r3, [r7, #0]
   1ca94:	f003 0307 	and.w	r3, r3, #7
   1ca98:	4318      	orrs	r0, r3
   1ca9a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1ca9c:	e7dd      	b.n	1ca5a <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ca9e:	f06f 0506 	mvn.w	r5, #6
   1caa2:	e7e7      	b.n	1ca74 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1caa4:	f06f 050c 	mvn.w	r5, #12
   1caa8:	e7e4      	b.n	1ca74 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1caaa:	f06f 0510 	mvn.w	r5, #16
   1caae:	e7e1      	b.n	1ca74 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1cab0:	f06f 0512 	mvn.w	r5, #18
   1cab4:	e7de      	b.n	1ca74 <cf_write+0x4c>

0001cab6 <sc_restore_rsp>:
{
   1cab6:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1cab8:	f7f7 fe24 	bl	14704 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1cabc:	b140      	cbz	r0, 1cad0 <sc_restore_rsp+0x1a>
   1cabe:	7a03      	ldrb	r3, [r0, #8]
   1cac0:	07db      	lsls	r3, r3, #31
   1cac2:	d505      	bpl.n	1cad0 <sc_restore_rsp+0x1a>
}
   1cac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1cac8:	2100      	movs	r1, #0
   1caca:	300c      	adds	r0, #12
   1cacc:	f7ff bf56 	b.w	1c97c <atomic_set_bit>
}
   1cad0:	bd08      	pop	{r3, pc}

0001cad2 <find_ccc_cfg>:
{
   1cad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cad4:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cad6:	1c4c      	adds	r4, r1, #1
   1cad8:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1cadc:	1e67      	subs	r7, r4, #1
		if (conn) {
   1cade:	b14e      	cbz	r6, 1caf4 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1cae0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1cae4:	4622      	mov	r2, r4
   1cae6:	4630      	mov	r0, r6
   1cae8:	f7ff f863 	bl	1bbb2 <bt_conn_is_peer_addr_le>
   1caec:	b160      	cbz	r0, 1cb08 <find_ccc_cfg+0x36>
}
   1caee:	4638      	mov	r0, r7
   1caf0:	b003      	add	sp, #12
   1caf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   1caf4:	2207      	movs	r2, #7
   1caf6:	4669      	mov	r1, sp
   1caf8:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cafa:	9600      	str	r6, [sp, #0]
   1cafc:	f8cd 6003 	str.w	r6, [sp, #3]
   1cb00:	f7fe fa7a 	bl	1aff8 <memcmp>
   1cb04:	2800      	cmp	r0, #0
   1cb06:	d0f2      	beq.n	1caee <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cb08:	340a      	adds	r4, #10
   1cb0a:	42ac      	cmp	r4, r5
   1cb0c:	d1e6      	bne.n	1cadc <find_ccc_cfg+0xa>
	return NULL;
   1cb0e:	2700      	movs	r7, #0
   1cb10:	e7ed      	b.n	1caee <find_ccc_cfg+0x1c>

0001cb12 <read_appearance>:
{
   1cb12:	b513      	push	{r0, r1, r4, lr}
   1cb14:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1cb18:	4610      	mov	r0, r2
	if (offset > value_len) {
   1cb1a:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1cb1c:	f44f 7240 	mov.w	r2, #768	; 0x300
   1cb20:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cb24:	d80d      	bhi.n	1cb42 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1cb26:	f1c1 0402 	rsb	r4, r1, #2
   1cb2a:	429c      	cmp	r4, r3
   1cb2c:	bfa8      	it	ge
   1cb2e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cb30:	f10d 0306 	add.w	r3, sp, #6
   1cb34:	4622      	mov	r2, r4
   1cb36:	4419      	add	r1, r3
   1cb38:	f7fe fa6e 	bl	1b018 <memcpy>
}
   1cb3c:	4620      	mov	r0, r4
   1cb3e:	b002      	add	sp, #8
   1cb40:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cb42:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1cb46:	e7f9      	b.n	1cb3c <read_appearance+0x2a>

0001cb48 <read_name>:
{
   1cb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb4c:	4698      	mov	r8, r3
   1cb4e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1cb52:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1cb54:	f7f5 fe30 	bl	127b8 <bt_get_name>
   1cb58:	4607      	mov	r7, r0
				 strlen(name));
   1cb5a:	f7fe fa31 	bl	1afc0 <strlen>
	if (offset > value_len) {
   1cb5e:	b283      	uxth	r3, r0
   1cb60:	42b3      	cmp	r3, r6
   1cb62:	d30c      	bcc.n	1cb7e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1cb64:	1b9c      	subs	r4, r3, r6
   1cb66:	4544      	cmp	r4, r8
   1cb68:	bfa8      	it	ge
   1cb6a:	4644      	movge	r4, r8
   1cb6c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cb6e:	4622      	mov	r2, r4
   1cb70:	19b9      	adds	r1, r7, r6
   1cb72:	4628      	mov	r0, r5
   1cb74:	f7fe fa50 	bl	1b018 <memcpy>
}
   1cb78:	4620      	mov	r0, r4
   1cb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cb7e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1cb82:	e7f9      	b.n	1cb78 <read_name+0x30>

0001cb84 <cf_read>:
{
   1cb84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb86:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1cb88:	2300      	movs	r3, #0
{
   1cb8a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1cb8e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1cb92:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1cb94:	f7f7 fdb6 	bl	14704 <find_cf_cfg>
	if (cfg) {
   1cb98:	b128      	cbz	r0, 1cba6 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1cb9a:	f100 0108 	add.w	r1, r0, #8
   1cb9e:	2201      	movs	r2, #1
   1cba0:	a801      	add	r0, sp, #4
   1cba2:	f7fe fa39 	bl	1b018 <memcpy>
	if (offset > value_len) {
   1cba6:	2e01      	cmp	r6, #1
   1cba8:	d80d      	bhi.n	1cbc6 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1cbaa:	f1c6 0401 	rsb	r4, r6, #1
   1cbae:	42bc      	cmp	r4, r7
   1cbb0:	bfa8      	it	ge
   1cbb2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cbb4:	ab01      	add	r3, sp, #4
   1cbb6:	4622      	mov	r2, r4
   1cbb8:	1999      	adds	r1, r3, r6
   1cbba:	4628      	mov	r0, r5
   1cbbc:	f7fe fa2c 	bl	1b018 <memcpy>
}
   1cbc0:	4620      	mov	r0, r4
   1cbc2:	b003      	add	sp, #12
   1cbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cbc6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1cbca:	e7f9      	b.n	1cbc0 <cf_read+0x3c>

0001cbcc <bt_gatt_attr_read_ccc>:
{
   1cbcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1cbce:	68c9      	ldr	r1, [r1, #12]
{
   1cbd0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1cbd4:	4615      	mov	r5, r2
   1cbd6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1cbd8:	f7ff ff7b 	bl	1cad2 <find_ccc_cfg>
	if (cfg) {
   1cbdc:	b100      	cbz	r0, 1cbe0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1cbde:	8900      	ldrh	r0, [r0, #8]
   1cbe0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1cbe4:	2e02      	cmp	r6, #2
   1cbe6:	d80e      	bhi.n	1cc06 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1cbe8:	f1c6 0402 	rsb	r4, r6, #2
   1cbec:	42bc      	cmp	r4, r7
   1cbee:	bfa8      	it	ge
   1cbf0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cbf2:	f10d 0306 	add.w	r3, sp, #6
   1cbf6:	4622      	mov	r2, r4
   1cbf8:	1999      	adds	r1, r3, r6
   1cbfa:	4628      	mov	r0, r5
   1cbfc:	f7fe fa0c 	bl	1b018 <memcpy>
}
   1cc00:	4620      	mov	r0, r4
   1cc02:	b003      	add	sp, #12
   1cc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cc06:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1cc0a:	e7f9      	b.n	1cc00 <bt_gatt_attr_read_ccc+0x34>

0001cc0c <bt_gatt_attr_read_service>:
{
   1cc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1cc0e:	68c9      	ldr	r1, [r1, #12]
{
   1cc10:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1cc14:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1cc16:	780b      	ldrb	r3, [r1, #0]
{
   1cc18:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1cc1a:	b993      	cbnz	r3, 1cc42 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cc1c:	884b      	ldrh	r3, [r1, #2]
   1cc1e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1cc22:	2d02      	cmp	r5, #2
   1cc24:	d819      	bhi.n	1cc5a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cc26:	f1c5 0202 	rsb	r2, r5, #2
   1cc2a:	4294      	cmp	r4, r2
   1cc2c:	bfa8      	it	ge
   1cc2e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cc30:	f10d 0306 	add.w	r3, sp, #6
   1cc34:	4622      	mov	r2, r4
   1cc36:	1959      	adds	r1, r3, r5
   1cc38:	f7fe f9ee 	bl	1b018 <memcpy>
}
   1cc3c:	4620      	mov	r0, r4
   1cc3e:	b003      	add	sp, #12
   1cc40:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1cc42:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1cc44:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1cc48:	d807      	bhi.n	1cc5a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cc4a:	f1c5 0210 	rsb	r2, r5, #16
   1cc4e:	4294      	cmp	r4, r2
   1cc50:	bfa8      	it	ge
   1cc52:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cc54:	4622      	mov	r2, r4
   1cc56:	4429      	add	r1, r5
   1cc58:	e7ee      	b.n	1cc38 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cc5a:	f06f 0406 	mvn.w	r4, #6
   1cc5e:	e7ed      	b.n	1cc3c <bt_gatt_attr_read_service+0x30>

0001cc60 <sc_save>:
{
   1cc60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cc64:	4680      	mov	r8, r0
   1cc66:	460f      	mov	r7, r1
   1cc68:	4616      	mov	r6, r2
   1cc6a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1cc6c:	f7f7 fd28 	bl	146c0 <find_sc_cfg>
	if (!cfg) {
   1cc70:	4604      	mov	r4, r0
   1cc72:	b968      	cbnz	r0, 1cc90 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1cc74:	4669      	mov	r1, sp
   1cc76:	9000      	str	r0, [sp, #0]
   1cc78:	f8cd 0003 	str.w	r0, [sp, #3]
   1cc7c:	f7f7 fd20 	bl	146c0 <find_sc_cfg>
		if (!cfg) {
   1cc80:	4604      	mov	r4, r0
   1cc82:	b180      	cbz	r0, 1cca6 <sc_save+0x46>
		cfg->id = id;
   1cc84:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   1cc88:	2207      	movs	r2, #7
   1cc8a:	4639      	mov	r1, r7
   1cc8c:	f7fe f9c4 	bl	1b018 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1cc90:	8922      	ldrh	r2, [r4, #8]
   1cc92:	8963      	ldrh	r3, [r4, #10]
   1cc94:	b91a      	cbnz	r2, 1cc9e <sc_save+0x3e>
   1cc96:	b923      	cbnz	r3, 1cca2 <sc_save+0x42>
		cfg->data.start = start;
   1cc98:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1cc9a:	8165      	strh	r5, [r4, #10]
   1cc9c:	e003      	b.n	1cca6 <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   1cc9e:	4296      	cmp	r6, r2
   1cca0:	d304      	bcc.n	1ccac <sc_save+0x4c>
   1cca2:	429d      	cmp	r5, r3
   1cca4:	d8f9      	bhi.n	1cc9a <sc_save+0x3a>
}
   1cca6:	b002      	add	sp, #8
   1cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1ccac:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1ccae:	e7f8      	b.n	1cca2 <sc_save+0x42>

0001ccb0 <sc_clear>:
{
   1ccb0:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ccb2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1ccb6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ccb8:	4631      	mov	r1, r6
   1ccba:	7a00      	ldrb	r0, [r0, #8]
   1ccbc:	f7fe fe64 	bl	1b988 <bt_addr_le_is_bonded>
   1ccc0:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1ccc2:	4631      	mov	r1, r6
   1ccc4:	f7f7 fcfc 	bl	146c0 <find_sc_cfg>
	if (!cfg) {
   1ccc8:	b128      	cbz	r0, 1ccd6 <sc_clear+0x26>
}
   1ccca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1ccce:	220c      	movs	r2, #12
   1ccd0:	2100      	movs	r1, #0
   1ccd2:	f7fe b9cc 	b.w	1b06e <memset>
}
   1ccd6:	bd70      	pop	{r4, r5, r6, pc}

0001ccd8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1ccd8:	2a02      	cmp	r2, #2
{
   1ccda:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1ccdc:	d108      	bne.n	1ccf0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1ccde:	2300      	movs	r3, #0
   1cce0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1cce4:	461a      	mov	r2, r3
   1cce6:	7a00      	ldrb	r0, [r0, #8]
   1cce8:	f7ff ffba 	bl	1cc60 <sc_save>
}
   1ccec:	2002      	movs	r0, #2
   1ccee:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1ccf0:	f7ff ffde 	bl	1ccb0 <sc_clear>
   1ccf4:	e7fa      	b.n	1ccec <sc_ccc_cfg_write+0x14>

0001ccf6 <bt_gatt_attr_write_ccc>:
{
   1ccf6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ccfa:	461f      	mov	r7, r3
   1ccfc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1cd00:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1cd04:	4606      	mov	r6, r0
   1cd06:	4688      	mov	r8, r1
	if (offset) {
   1cd08:	2b00      	cmp	r3, #0
   1cd0a:	d146      	bne.n	1cd9a <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   1cd0c:	1e7b      	subs	r3, r7, #1
   1cd0e:	2b01      	cmp	r3, #1
   1cd10:	d846      	bhi.n	1cda0 <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   1cd12:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1cd14:	7815      	ldrb	r5, [r2, #0]
   1cd16:	bf18      	it	ne
   1cd18:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1cd1a:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1cd1c:	bf0c      	ite	eq
   1cd1e:	b2ad      	uxtheq	r5, r5
   1cd20:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1cd24:	f7ff fed5 	bl	1cad2 <find_ccc_cfg>
	if (!cfg) {
   1cd28:	4604      	mov	r4, r0
   1cd2a:	b988      	cbnz	r0, 1cd50 <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   1cd2c:	b91d      	cbnz	r5, 1cd36 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1cd2e:	4638      	mov	r0, r7
}
   1cd30:	b003      	add	sp, #12
   1cd32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1cd36:	4649      	mov	r1, r9
   1cd38:	f7ff fecb 	bl	1cad2 <find_ccc_cfg>
		if (!cfg) {
   1cd3c:	4604      	mov	r4, r0
   1cd3e:	b390      	cbz	r0, 1cda6 <bt_gatt_attr_write_ccc+0xb0>
   1cd40:	2207      	movs	r2, #7
   1cd42:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1cd46:	3001      	adds	r0, #1
   1cd48:	f7fe f966 	bl	1b018 <memcpy>
		cfg->id = conn->id;
   1cd4c:	7a33      	ldrb	r3, [r6, #8]
   1cd4e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1cd50:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1cd54:	b9ab      	cbnz	r3, 1cd82 <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   1cd56:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   1cd5a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1cd5c:	42ab      	cmp	r3, r5
   1cd5e:	d003      	beq.n	1cd68 <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   1cd60:	4649      	mov	r1, r9
   1cd62:	4640      	mov	r0, r8
   1cd64:	f7ff fd8f 	bl	1c886 <gatt_ccc_changed>
	if (!value) {
   1cd68:	2d00      	cmp	r5, #0
   1cd6a:	d1e0      	bne.n	1cd2e <bt_gatt_attr_write_ccc+0x38>
   1cd6c:	2207      	movs	r2, #7
   1cd6e:	4669      	mov	r1, sp
   1cd70:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cd72:	9500      	str	r5, [sp, #0]
   1cd74:	f8cd 5003 	str.w	r5, [sp, #3]
   1cd78:	f7fe f94e 	bl	1b018 <memcpy>
	cfg->id = 0U;
   1cd7c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cd7e:	8125      	strh	r5, [r4, #8]
}
   1cd80:	e7d5      	b.n	1cd2e <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1cd82:	462a      	mov	r2, r5
   1cd84:	4641      	mov	r1, r8
   1cd86:	4630      	mov	r0, r6
   1cd88:	4798      	blx	r3
		if (write < 0) {
   1cd8a:	2800      	cmp	r0, #0
   1cd8c:	dbd0      	blt.n	1cd30 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1cd8e:	3801      	subs	r0, #1
   1cd90:	2801      	cmp	r0, #1
   1cd92:	d9e0      	bls.n	1cd56 <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1cd94:	f06f 000d 	mvn.w	r0, #13
   1cd98:	e7ca      	b.n	1cd30 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cd9a:	f06f 0006 	mvn.w	r0, #6
   1cd9e:	e7c7      	b.n	1cd30 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1cda0:	f06f 000c 	mvn.w	r0, #12
   1cda4:	e7c4      	b.n	1cd30 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1cda6:	f06f 0010 	mvn.w	r0, #16
   1cdaa:	e7c1      	b.n	1cd30 <bt_gatt_attr_write_ccc+0x3a>

0001cdac <bt_gatt_attr_read>:
{
   1cdac:	b538      	push	{r3, r4, r5, lr}
   1cdae:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1cdb2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1cdb6:	42a9      	cmp	r1, r5
{
   1cdb8:	4610      	mov	r0, r2
	if (offset > value_len) {
   1cdba:	d80b      	bhi.n	1cdd4 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1cdbc:	1a6d      	subs	r5, r5, r1
   1cdbe:	429d      	cmp	r5, r3
   1cdc0:	bfa8      	it	ge
   1cdc2:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cdc4:	9b05      	ldr	r3, [sp, #20]
   1cdc6:	b2ad      	uxth	r5, r5
   1cdc8:	462a      	mov	r2, r5
   1cdca:	4419      	add	r1, r3
   1cdcc:	f7fe f924 	bl	1b018 <memcpy>
}
   1cdd0:	4628      	mov	r0, r5
   1cdd2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cdd4:	f06f 0506 	mvn.w	r5, #6
   1cdd8:	e7fa      	b.n	1cdd0 <bt_gatt_attr_read+0x24>

0001cdda <bt_gatt_attr_value_handle>:
{
   1cdda:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1cddc:	4604      	mov	r4, r0
   1cdde:	b910      	cbnz	r0, 1cde6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1cde0:	2000      	movs	r0, #0
}
   1cde2:	b002      	add	sp, #8
   1cde4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1cde6:	2300      	movs	r3, #0
   1cde8:	f88d 3004 	strb.w	r3, [sp, #4]
   1cdec:	6800      	ldr	r0, [r0, #0]
   1cdee:	f642 0303 	movw	r3, #10243	; 0x2803
   1cdf2:	a901      	add	r1, sp, #4
   1cdf4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cdf8:	f7fe f9f1 	bl	1b1de <bt_uuid_cmp>
   1cdfc:	2800      	cmp	r0, #0
   1cdfe:	d1ef      	bne.n	1cde0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1ce00:	68e3      	ldr	r3, [r4, #12]
   1ce02:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1ce04:	2800      	cmp	r0, #0
   1ce06:	d1ec      	bne.n	1cde2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1ce08:	4620      	mov	r0, r4
   1ce0a:	f7f7 fe25 	bl	14a58 <bt_gatt_attr_get_handle>
   1ce0e:	3001      	adds	r0, #1
   1ce10:	b280      	uxth	r0, r0
	return handle;
   1ce12:	e7e6      	b.n	1cde2 <bt_gatt_attr_value_handle+0x8>

0001ce14 <bt_gatt_attr_read_chrc>:
{
   1ce14:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ce16:	68cf      	ldr	r7, [r1, #12]
{
   1ce18:	b087      	sub	sp, #28
   1ce1a:	4608      	mov	r0, r1
   1ce1c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1ce1e:	79bb      	ldrb	r3, [r7, #6]
   1ce20:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ce24:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1ce28:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ce2a:	f7ff ffd6 	bl	1cdda <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ce2e:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ce30:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ce34:	780b      	ldrb	r3, [r1, #0]
   1ce36:	b99b      	cbnz	r3, 1ce60 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1ce38:	884b      	ldrh	r3, [r1, #2]
   1ce3a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1ce3e:	2105      	movs	r1, #5
	if (offset > value_len) {
   1ce40:	42b1      	cmp	r1, r6
   1ce42:	d315      	bcc.n	1ce70 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ce44:	1b89      	subs	r1, r1, r6
   1ce46:	42a1      	cmp	r1, r4
   1ce48:	bfa8      	it	ge
   1ce4a:	4621      	movge	r1, r4
   1ce4c:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1ce4e:	ab01      	add	r3, sp, #4
   1ce50:	4622      	mov	r2, r4
   1ce52:	1999      	adds	r1, r3, r6
   1ce54:	4628      	mov	r0, r5
   1ce56:	f7fe f8df 	bl	1b018 <memcpy>
}
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	b007      	add	sp, #28
   1ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ce60:	3101      	adds	r1, #1
   1ce62:	2210      	movs	r2, #16
   1ce64:	f10d 0007 	add.w	r0, sp, #7
   1ce68:	f7fe f8d6 	bl	1b018 <memcpy>
		value_len += 16U;
   1ce6c:	2113      	movs	r1, #19
   1ce6e:	e7e7      	b.n	1ce40 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ce70:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ce74:	e7f1      	b.n	1ce5a <bt_gatt_attr_read_chrc+0x46>

0001ce76 <bt_gatt_foreach_attr>:
{
   1ce76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ce78:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ce7c:	2300      	movs	r3, #0
   1ce7e:	9300      	str	r3, [sp, #0]
   1ce80:	461a      	mov	r2, r3
   1ce82:	f7f7 fe19 	bl	14ab8 <bt_gatt_foreach_attr_type>
}
   1ce86:	b005      	add	sp, #20
   1ce88:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce8c <db_hash_process>:
	db_hash_gen(true);
   1ce8c:	f7f7 be6e 	b.w	14b6c <db_hash_gen.isra.0>

0001ce90 <bt_gatt_attr_read_cud>:
{
   1ce90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   1ce94:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ce98:	f8bd 6018 	ldrh.w	r6, [sp, #24]
				 strlen(value));
   1ce9c:	4640      	mov	r0, r8
{
   1ce9e:	461f      	mov	r7, r3
   1cea0:	4615      	mov	r5, r2
				 strlen(value));
   1cea2:	f7fe f88d 	bl	1afc0 <strlen>
	if (offset > value_len) {
   1cea6:	b283      	uxth	r3, r0
   1cea8:	42b3      	cmp	r3, r6
   1ceaa:	d30d      	bcc.n	1cec8 <bt_gatt_attr_read_cud+0x38>
	len = MIN(buf_len, value_len - offset);
   1ceac:	1b9c      	subs	r4, r3, r6
   1ceae:	42bc      	cmp	r4, r7
   1ceb0:	bfa8      	it	ge
   1ceb2:	463c      	movge	r4, r7
   1ceb4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1ceb6:	4622      	mov	r2, r4
   1ceb8:	eb08 0106 	add.w	r1, r8, r6
   1cebc:	4628      	mov	r0, r5
   1cebe:	f7fe f8ab 	bl	1b018 <memcpy>
}
   1cec2:	4620      	mov	r0, r4
   1cec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cec8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1cecc:	e7f9      	b.n	1cec2 <bt_gatt_attr_read_cud+0x32>

0001cece <bt_gatt_check_perm>:
{
   1cece:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1ced0:	07d4      	lsls	r4, r2, #31
{
   1ced2:	4605      	mov	r5, r0
   1ced4:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ced6:	d504      	bpl.n	1cee2 <bt_gatt_check_perm+0x14>
   1ced8:	f010 0f15 	tst.w	r0, #21
   1cedc:	d01e      	beq.n	1cf1c <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1cede:	684b      	ldr	r3, [r1, #4]
   1cee0:	b1e3      	cbz	r3, 1cf1c <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1cee2:	0793      	lsls	r3, r2, #30
   1cee4:	d504      	bpl.n	1cef0 <bt_gatt_check_perm+0x22>
   1cee6:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1ceea:	d019      	beq.n	1cf20 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ceec:	688b      	ldr	r3, [r1, #8]
   1ceee:	b1bb      	cbz	r3, 1cf20 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1cef0:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1cef4:	f014 0f30 	tst.w	r4, #48	; 0x30
   1cef8:	d103      	bne.n	1cf02 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1cefa:	f014 000c 	ands.w	r0, r4, #12
   1cefe:	d107      	bne.n	1cf10 <bt_gatt_check_perm+0x42>
}
   1cf00:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1cf02:	4628      	mov	r0, r5
   1cf04:	f7fe fe03 	bl	1bb0e <bt_conn_get_security>
   1cf08:	2802      	cmp	r0, #2
   1cf0a:	d8f6      	bhi.n	1cefa <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1cf0c:	2005      	movs	r0, #5
   1cf0e:	e7f7      	b.n	1cf00 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1cf10:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	bf14      	ite	ne
   1cf16:	2000      	movne	r0, #0
   1cf18:	200f      	moveq	r0, #15
   1cf1a:	e7f1      	b.n	1cf00 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1cf1c:	2002      	movs	r0, #2
   1cf1e:	e7ef      	b.n	1cf00 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1cf20:	2003      	movs	r0, #3
   1cf22:	e7ed      	b.n	1cf00 <bt_gatt_check_perm+0x32>

0001cf24 <bt_gatt_change_aware>:
{
   1cf24:	b510      	push	{r4, lr}
   1cf26:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1cf28:	f7f7 fbec 	bl	14704 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1cf2c:	4603      	mov	r3, r0
   1cf2e:	b910      	cbnz	r0, 1cf36 <bt_gatt_change_aware+0x12>
		return true;
   1cf30:	2401      	movs	r4, #1
}
   1cf32:	4620      	mov	r0, r4
   1cf34:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1cf36:	7a02      	ldrb	r2, [r0, #8]
   1cf38:	07d2      	lsls	r2, r2, #31
   1cf3a:	d5f9      	bpl.n	1cf30 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf3c:	f3bf 8f5b 	dmb	ish
   1cf40:	68d9      	ldr	r1, [r3, #12]
   1cf42:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1cf46:	f011 0101 	ands.w	r1, r1, #1
   1cf4a:	f100 000c 	add.w	r0, r0, #12
   1cf4e:	d1ef      	bne.n	1cf30 <bt_gatt_change_aware+0xc>
	if (!req) {
   1cf50:	2c00      	cmp	r4, #0
   1cf52:	d0ee      	beq.n	1cf32 <bt_gatt_change_aware+0xe>
   1cf54:	f3bf 8f5b 	dmb	ish
   1cf58:	68db      	ldr	r3, [r3, #12]
   1cf5a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1cf5e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1cf62:	079b      	lsls	r3, r3, #30
   1cf64:	d50e      	bpl.n	1cf84 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cf66:	f3bf 8f5b 	dmb	ish
   1cf6a:	e850 3f00 	ldrex	r3, [r0]
   1cf6e:	f023 0302 	bic.w	r3, r3, #2
   1cf72:	e840 3200 	strex	r2, r3, [r0]
   1cf76:	2a00      	cmp	r2, #0
   1cf78:	d1f7      	bne.n	1cf6a <bt_gatt_change_aware+0x46>
   1cf7a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1cf7e:	f7ff fcfd 	bl	1c97c <atomic_set_bit>
	return false;
   1cf82:	e7d6      	b.n	1cf32 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1cf84:	2101      	movs	r1, #1
   1cf86:	e7fa      	b.n	1cf7e <bt_gatt_change_aware+0x5a>

0001cf88 <sys_memcpy_swap>:
	psrc += length - 1;
   1cf88:	1e53      	subs	r3, r2, #1
   1cf8a:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1cf8c:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1cf8e:	f811 3901 	ldrb.w	r3, [r1], #-1
   1cf92:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1cf96:	4290      	cmp	r0, r2
   1cf98:	d1f9      	bne.n	1cf8e <sys_memcpy_swap+0x6>
}
   1cf9a:	4770      	bx	lr

0001cf9c <smp_pairing_rsp>:
}
   1cf9c:	2007      	movs	r0, #7
   1cf9e:	4770      	bx	lr

0001cfa0 <smp_chan_get>:
{
   1cfa0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1cfa2:	2106      	movs	r1, #6
   1cfa4:	f7fe ffb0 	bl	1bf08 <bt_l2cap_le_lookup_rx_cid>
}
   1cfa8:	2800      	cmp	r0, #0
   1cfaa:	bf38      	it	cc
   1cfac:	2000      	movcc	r0, #0
   1cfae:	bd08      	pop	{r3, pc}

0001cfb0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cfb0:	2301      	movs	r3, #1
   1cfb2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cfb4:	f3bf 8f5b 	dmb	ish
   1cfb8:	e850 2f00 	ldrex	r2, [r0]
   1cfbc:	431a      	orrs	r2, r3
   1cfbe:	e840 2100 	strex	r1, r2, [r0]
   1cfc2:	2900      	cmp	r1, #0
   1cfc4:	d1f8      	bne.n	1cfb8 <atomic_set_bit+0x8>
   1cfc6:	f3bf 8f5b 	dmb	ish
}
   1cfca:	4770      	bx	lr

0001cfcc <smp_keypress_notif>:
{
   1cfcc:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1cfce:	210e      	movs	r1, #14
   1cfd0:	30c0      	adds	r0, #192	; 0xc0
   1cfd2:	f7ff ffed 	bl	1cfb0 <atomic_set_bit>
}
   1cfd6:	2000      	movs	r0, #0
   1cfd8:	bd08      	pop	{r3, pc}

0001cfda <k_delayed_work_cancel>:
{
   1cfda:	b538      	push	{r3, r4, r5, lr}
   1cfdc:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
   1cfde:	f001 fa00 	bl	1e3e2 <k_work_delayable_busy_get>
   1cfe2:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
   1cfe4:	4628      	mov	r0, r5
   1cfe6:	f001 fa10 	bl	1e40a <k_work_cancel_delayable>
	if (pending) {
   1cfea:	b124      	cbz	r4, 1cff6 <k_delayed_work_cancel+0x1c>
		return (rc == 0) ? 0 : -EINVAL;
   1cfec:	2800      	cmp	r0, #0
   1cfee:	bf18      	it	ne
   1cff0:	f06f 0015 	mvnne.w	r0, #21
}
   1cff4:	bd38      	pop	{r3, r4, r5, pc}
	return -EALREADY;
   1cff6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1cffa:	e7fb      	b.n	1cff4 <k_delayed_work_cancel+0x1a>

0001cffc <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cffc:	2301      	movs	r3, #1
   1cffe:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d000:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d002:	f3bf 8f5b 	dmb	ish
   1d006:	e850 2f00 	ldrex	r2, [r0]
   1d00a:	401a      	ands	r2, r3
   1d00c:	e840 2100 	strex	r1, r2, [r0]
   1d010:	2900      	cmp	r1, #0
   1d012:	d1f8      	bne.n	1d006 <atomic_clear_bit+0xa>
   1d014:	f3bf 8f5b 	dmb	ish
}
   1d018:	4770      	bx	lr

0001d01a <bt_smp_aes_cmac>:
{
   1d01a:	b570      	push	{r4, r5, r6, lr}
   1d01c:	b0c2      	sub	sp, #264	; 0x108
   1d01e:	460d      	mov	r5, r1
   1d020:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d022:	4601      	mov	r1, r0
   1d024:	aa16      	add	r2, sp, #88	; 0x58
   1d026:	4668      	mov	r0, sp
{
   1d028:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d02a:	f7fd fee2 	bl	1adf2 <tc_cmac_setup>
   1d02e:	b150      	cbz	r0, 1d046 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1d030:	4632      	mov	r2, r6
   1d032:	4629      	mov	r1, r5
   1d034:	4668      	mov	r0, sp
   1d036:	f7fd ff07 	bl	1ae48 <tc_cmac_update>
   1d03a:	b120      	cbz	r0, 1d046 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1d03c:	4669      	mov	r1, sp
   1d03e:	4620      	mov	r0, r4
   1d040:	f7fd ff6e 	bl	1af20 <tc_cmac_final>
   1d044:	b918      	cbnz	r0, 1d04e <bt_smp_aes_cmac+0x34>
		return -EIO;
   1d046:	f06f 0004 	mvn.w	r0, #4
}
   1d04a:	b042      	add	sp, #264	; 0x108
   1d04c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1d04e:	2000      	movs	r0, #0
   1d050:	e7fb      	b.n	1d04a <bt_smp_aes_cmac+0x30>

0001d052 <smp_security_request>:
   1d052:	2007      	movs	r0, #7
   1d054:	4770      	bx	lr

0001d056 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1d056:	b510      	push	{r4, lr}
   1d058:	1e43      	subs	r3, r0, #1
   1d05a:	f100 0210 	add.w	r2, r0, #16
   1d05e:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1d060:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d064:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d068:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1d06a:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1d06c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1d06e:	d1f7      	bne.n	1d060 <sys_mem_swap.constprop.0+0xa>
	}
}
   1d070:	bd10      	pop	{r4, pc}

0001d072 <smp_f6>:
{
   1d072:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d074:	b097      	sub	sp, #92	; 0x5c
   1d076:	4605      	mov	r5, r0
   1d078:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1d07a:	a805      	add	r0, sp, #20
   1d07c:	2210      	movs	r2, #16
{
   1d07e:	461c      	mov	r4, r3
   1d080:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1d082:	f7ff ff81 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1d086:	2210      	movs	r2, #16
   1d088:	4631      	mov	r1, r6
   1d08a:	a809      	add	r0, sp, #36	; 0x24
   1d08c:	f7ff ff7c 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1d090:	4621      	mov	r1, r4
   1d092:	2210      	movs	r2, #16
   1d094:	a80d      	add	r0, sp, #52	; 0x34
   1d096:	f7ff ff77 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1d09a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1d09c:	2203      	movs	r2, #3
   1d09e:	a811      	add	r0, sp, #68	; 0x44
   1d0a0:	f7ff ff72 	bl	1cf88 <sys_memcpy_swap>
	m[51] = a1->type;
   1d0a4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1d0a6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d0aa:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1d0ae:	4621      	mov	r1, r4
   1d0b0:	2206      	movs	r2, #6
   1d0b2:	a812      	add	r0, sp, #72	; 0x48
   1d0b4:	f7fd ffb0 	bl	1b018 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1d0b8:	4621      	mov	r1, r4
   1d0ba:	2206      	movs	r2, #6
   1d0bc:	a812      	add	r0, sp, #72	; 0x48
   1d0be:	f7ff ff63 	bl	1cf88 <sys_memcpy_swap>
	m[58] = a2->type;
   1d0c2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1d0c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d0c8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1d0cc:	4621      	mov	r1, r4
   1d0ce:	2206      	movs	r2, #6
   1d0d0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1d0d4:	f7fd ffa0 	bl	1b018 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1d0d8:	4621      	mov	r1, r4
   1d0da:	2206      	movs	r2, #6
   1d0dc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1d0e0:	f7ff ff52 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1d0e4:	2210      	movs	r2, #16
   1d0e6:	4629      	mov	r1, r5
   1d0e8:	a801      	add	r0, sp, #4
   1d0ea:	f7ff ff4d 	bl	1cf88 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1d0ee:	463b      	mov	r3, r7
   1d0f0:	2241      	movs	r2, #65	; 0x41
   1d0f2:	a905      	add	r1, sp, #20
   1d0f4:	a801      	add	r0, sp, #4
   1d0f6:	f7ff ff90 	bl	1d01a <bt_smp_aes_cmac>
	if (err) {
   1d0fa:	4604      	mov	r4, r0
   1d0fc:	b910      	cbnz	r0, 1d104 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1d0fe:	4638      	mov	r0, r7
   1d100:	f7ff ffa9 	bl	1d056 <sys_mem_swap.constprop.0>
}
   1d104:	4620      	mov	r0, r4
   1d106:	b017      	add	sp, #92	; 0x5c
   1d108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d10a <smp_f4>:
{
   1d10a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d10c:	b097      	sub	sp, #92	; 0x5c
   1d10e:	4614      	mov	r4, r2
   1d110:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1d112:	2220      	movs	r2, #32
   1d114:	4601      	mov	r1, r0
   1d116:	a805      	add	r0, sp, #20
{
   1d118:	461d      	mov	r5, r3
   1d11a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1d11c:	f7ff ff34 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1d120:	2220      	movs	r2, #32
   1d122:	4631      	mov	r1, r6
   1d124:	a80d      	add	r0, sp, #52	; 0x34
   1d126:	f7ff ff2f 	bl	1cf88 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1d12a:	4621      	mov	r1, r4
   1d12c:	2210      	movs	r2, #16
   1d12e:	a801      	add	r0, sp, #4
	m[64] = z;
   1d130:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1d134:	f7ff ff28 	bl	1cf88 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1d138:	463b      	mov	r3, r7
   1d13a:	2241      	movs	r2, #65	; 0x41
   1d13c:	a905      	add	r1, sp, #20
   1d13e:	a801      	add	r0, sp, #4
   1d140:	f7ff ff6b 	bl	1d01a <bt_smp_aes_cmac>
	if (err) {
   1d144:	4604      	mov	r4, r0
   1d146:	b910      	cbnz	r0, 1d14e <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1d148:	4638      	mov	r0, r7
   1d14a:	f7ff ff84 	bl	1d056 <sys_mem_swap.constprop.0>
}
   1d14e:	4620      	mov	r0, r4
   1d150:	b017      	add	sp, #92	; 0x5c
   1d152:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d154 <smp_signing_info>:
   1d154:	2007      	movs	r0, #7
   1d156:	4770      	bx	lr

0001d158 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d158:	f3bf 8f5b 	dmb	ish
   1d15c:	6800      	ldr	r0, [r0, #0]
   1d15e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d162:	4108      	asrs	r0, r1
}
   1d164:	f000 0001 	and.w	r0, r0, #1
   1d168:	4770      	bx	lr

0001d16a <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1d16a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d16c:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1d170:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d172:	4628      	mov	r0, r5
   1d174:	2104      	movs	r1, #4
   1d176:	f7ff ffef 	bl	1d158 <atomic_test_bit>
   1d17a:	b168      	cbz	r0, 1d198 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   1d17c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d17e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1d180:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d182:	4608      	mov	r0, r1
   1d184:	f7fe fe67 	bl	1be56 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1d188:	4604      	mov	r4, r0
   1d18a:	b940      	cbnz	r0, 1d19e <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d18c:	2104      	movs	r1, #4
   1d18e:	4628      	mov	r0, r5
   1d190:	f7ff ff0e 	bl	1cfb0 <atomic_set_bit>
}
   1d194:	4620      	mov	r0, r4
   1d196:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1d198:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d19c:	e7ef      	b.n	1d17e <smp_create_pdu.isra.0+0x14>
   1d19e:	2101      	movs	r1, #1
   1d1a0:	3008      	adds	r0, #8
   1d1a2:	f000 fcad 	bl	1db00 <net_buf_simple_add>
	hdr->code = op;
   1d1a6:	7006      	strb	r6, [r0, #0]
	return buf;
   1d1a8:	e7f4      	b.n	1d194 <smp_create_pdu.isra.0+0x2a>

0001d1aa <smp_send_pairing_random>:
{
   1d1aa:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1d1ac:	2104      	movs	r1, #4
{
   1d1ae:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1d1b0:	f7ff ffdb 	bl	1d16a <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1d1b4:	4604      	mov	r4, r0
   1d1b6:	b178      	cbz	r0, 1d1d8 <smp_send_pairing_random+0x2e>
   1d1b8:	2110      	movs	r1, #16
   1d1ba:	3008      	adds	r0, #8
   1d1bc:	f000 fca0 	bl	1db00 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1d1c0:	2210      	movs	r2, #16
   1d1c2:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   1d1c6:	f7fd ff27 	bl	1b018 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1d1ca:	4628      	mov	r0, r5
   1d1cc:	2200      	movs	r2, #0
   1d1ce:	4621      	mov	r1, r4
   1d1d0:	f7f7 ffa2 	bl	15118 <smp_send.isra.0>
	return 0;
   1d1d4:	2000      	movs	r0, #0
}
   1d1d6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d1d8:	2008      	movs	r0, #8
   1d1da:	e7fc      	b.n	1d1d6 <smp_send_pairing_random+0x2c>

0001d1dc <send_pairing_rsp>:
{
   1d1dc:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1d1de:	2102      	movs	r1, #2
{
   1d1e0:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1d1e2:	f7ff ffc2 	bl	1d16a <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1d1e6:	4604      	mov	r4, r0
   1d1e8:	b178      	cbz	r0, 1d20a <send_pairing_rsp+0x2e>
   1d1ea:	2106      	movs	r1, #6
   1d1ec:	3008      	adds	r0, #8
   1d1ee:	f000 fc87 	bl	1db00 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1d1f2:	2206      	movs	r2, #6
   1d1f4:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   1d1f8:	f7fd ff0e 	bl	1b018 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1d1fc:	4628      	mov	r0, r5
   1d1fe:	2200      	movs	r2, #0
   1d200:	4621      	mov	r1, r4
   1d202:	f7f7 ff89 	bl	15118 <smp_send.isra.0>
	return 0;
   1d206:	2000      	movs	r0, #0
}
   1d208:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d20a:	2008      	movs	r0, #8
   1d20c:	e7fc      	b.n	1d208 <send_pairing_rsp+0x2c>

0001d20e <smp_dhkey_check>:
{
   1d20e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1d210:	6803      	ldr	r3, [r0, #0]
   1d212:	78db      	ldrb	r3, [r3, #3]
   1d214:	2b01      	cmp	r3, #1
{
   1d216:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1d218:	d115      	bne.n	1d246 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1d21a:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1d21c:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   1d220:	2110      	movs	r1, #16
   1d222:	4628      	mov	r0, r5
   1d224:	f7ff feea 	bl	1cffc <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1d228:	4631      	mov	r1, r6
   1d22a:	2210      	movs	r2, #16
   1d22c:	f204 1077 	addw	r0, r4, #375	; 0x177
   1d230:	f7fd fef2 	bl	1b018 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1d234:	2107      	movs	r1, #7
   1d236:	4628      	mov	r0, r5
   1d238:	f7ff ff8e 	bl	1d158 <atomic_test_bit>
   1d23c:	b128      	cbz	r0, 1d24a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d23e:	2109      	movs	r1, #9
   1d240:	4628      	mov	r0, r5
   1d242:	f7ff feb5 	bl	1cfb0 <atomic_set_bit>
}
   1d246:	2000      	movs	r0, #0
   1d248:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d24a:	210a      	movs	r1, #10
   1d24c:	4628      	mov	r0, r5
   1d24e:	f7ff ff83 	bl	1d158 <atomic_test_bit>
   1d252:	2800      	cmp	r0, #0
   1d254:	d1f3      	bne.n	1d23e <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1d256:	4620      	mov	r0, r4
}
   1d258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1d25c:	f7f7 bf82 	b.w	15164 <compute_and_check_and_send_slave_dhcheck>

0001d260 <smp_ident_info>:
{
   1d260:	b538      	push	{r3, r4, r5, lr}
   1d262:	4604      	mov	r4, r0
   1d264:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d266:	30c4      	adds	r0, #196	; 0xc4
   1d268:	210d      	movs	r1, #13
   1d26a:	f7ff ff75 	bl	1d158 <atomic_test_bit>
   1d26e:	b168      	cbz	r0, 1d28c <smp_ident_info+0x2c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1d270:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d272:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d274:	2002      	movs	r0, #2
   1d276:	7a19      	ldrb	r1, [r3, #8]
   1d278:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1d27c:	f000 fbc7 	bl	1da0e <bt_keys_get_type>
		if (!keys) {
   1d280:	b158      	cbz	r0, 1d29a <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   1d282:	2210      	movs	r2, #16
   1d284:	4629      	mov	r1, r5
   1d286:	302a      	adds	r0, #42	; 0x2a
   1d288:	f7fd fec6 	bl	1b018 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1d28c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1d290:	2109      	movs	r1, #9
   1d292:	f7ff fe8d 	bl	1cfb0 <atomic_set_bit>
	return 0;
   1d296:	2000      	movs	r0, #0
}
   1d298:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1d29a:	2008      	movs	r0, #8
   1d29c:	e7fc      	b.n	1d298 <smp_ident_info+0x38>

0001d29e <smp_encrypt_info>:
{
   1d29e:	b538      	push	{r3, r4, r5, lr}
   1d2a0:	4604      	mov	r4, r0
   1d2a2:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d2a4:	30c4      	adds	r0, #196	; 0xc4
   1d2a6:	210d      	movs	r1, #13
   1d2a8:	f7ff ff56 	bl	1d158 <atomic_test_bit>
   1d2ac:	b168      	cbz	r0, 1d2ca <smp_encrypt_info+0x2c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1d2ae:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d2b0:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d2b2:	2004      	movs	r0, #4
   1d2b4:	7a19      	ldrb	r1, [r3, #8]
   1d2b6:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1d2ba:	f000 fba8 	bl	1da0e <bt_keys_get_type>
		if (!keys) {
   1d2be:	b158      	cbz	r0, 1d2d8 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   1d2c0:	2210      	movs	r2, #16
   1d2c2:	4629      	mov	r1, r5
   1d2c4:	301a      	adds	r0, #26
   1d2c6:	f7fd fea7 	bl	1b018 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1d2ca:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1d2ce:	2107      	movs	r1, #7
   1d2d0:	f7ff fe6e 	bl	1cfb0 <atomic_set_bit>
	return 0;
   1d2d4:	2000      	movs	r0, #0
}
   1d2d6:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1d2d8:	2008      	movs	r0, #8
   1d2da:	e7fc      	b.n	1d2d6 <smp_encrypt_info+0x38>

0001d2dc <atomic_test_and_clear_bit>:
{
   1d2dc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d2de:	2301      	movs	r3, #1
   1d2e0:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d2e4:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d2e6:	f3bf 8f5b 	dmb	ish
   1d2ea:	e850 3f00 	ldrex	r3, [r0]
   1d2ee:	ea03 0c02 	and.w	ip, r3, r2
   1d2f2:	e840 ce00 	strex	lr, ip, [r0]
   1d2f6:	f1be 0f00 	cmp.w	lr, #0
   1d2fa:	d1f6      	bne.n	1d2ea <atomic_test_and_clear_bit+0xe>
   1d2fc:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1d300:	420b      	tst	r3, r1
}
   1d302:	bf14      	ite	ne
   1d304:	2001      	movne	r0, #1
   1d306:	2000      	moveq	r0, #0
   1d308:	f85d fb04 	ldr.w	pc, [sp], #4

0001d30c <smp_reset>:
{
   1d30c:	b510      	push	{r4, lr}
   1d30e:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   1d310:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1d314:	f7ff fe61 	bl	1cfda <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1d318:	2300      	movs	r3, #0
   1d31a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(smp->allowed_cmds, 0);
   1d31e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d322:	f3bf 8f5b 	dmb	ish
   1d326:	e850 2f00 	ldrex	r2, [r0]
   1d32a:	e840 3100 	strex	r1, r3, [r0]
   1d32e:	2900      	cmp	r1, #0
   1d330:	d1f9      	bne.n	1d326 <smp_reset+0x1a>
   1d332:	f3bf 8f5b 	dmb	ish
   1d336:	f3bf 8f5b 	dmb	ish
   1d33a:	34c4      	adds	r4, #196	; 0xc4
   1d33c:	e854 2f00 	ldrex	r2, [r4]
   1d340:	e844 3100 	strex	r1, r3, [r4]
   1d344:	2900      	cmp	r1, #0
   1d346:	d1f9      	bne.n	1d33c <smp_reset+0x30>
   1d348:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d34c:	2101      	movs	r1, #1
}
   1d34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d352:	f7ff be2d 	b.w	1cfb0 <atomic_set_bit>

0001d356 <smp_c1>:
{
   1d356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d35a:	b089      	sub	sp, #36	; 0x24
   1d35c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1d360:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1d362:	783b      	ldrb	r3, [r7, #0]
{
   1d364:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1d366:	f88d 3000 	strb.w	r3, [sp]
{
   1d36a:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1d36c:	f898 3000 	ldrb.w	r3, [r8]
   1d370:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1d374:	4611      	mov	r1, r2
   1d376:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1d378:	2207      	movs	r2, #7
   1d37a:	f10d 0002 	add.w	r0, sp, #2
   1d37e:	f7fd fe4b 	bl	1b018 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1d382:	2207      	movs	r2, #7
   1d384:	4649      	mov	r1, r9
   1d386:	f10d 0009 	add.w	r0, sp, #9
   1d38a:	f7fd fe45 	bl	1b018 <memcpy>
	while (len--) {
   1d38e:	f104 0010 	add.w	r0, r4, #16
   1d392:	4629      	mov	r1, r5
   1d394:	466a      	mov	r2, sp
   1d396:	4284      	cmp	r4, r0
   1d398:	d127      	bne.n	1d3ea <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1d39a:	462a      	mov	r2, r5
   1d39c:	4629      	mov	r1, r5
   1d39e:	4630      	mov	r0, r6
   1d3a0:	f000 fc7d 	bl	1dc9e <bt_encrypt_le>
	if (err) {
   1d3a4:	4604      	mov	r4, r0
   1d3a6:	b9e0      	cbnz	r0, 1d3e2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1d3a8:	2206      	movs	r2, #6
   1d3aa:	f108 0101 	add.w	r1, r8, #1
   1d3ae:	a804      	add	r0, sp, #16
   1d3b0:	f7fd fe32 	bl	1b018 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1d3b4:	2206      	movs	r2, #6
   1d3b6:	1c79      	adds	r1, r7, #1
   1d3b8:	f10d 0016 	add.w	r0, sp, #22
   1d3bc:	f7fd fe2c 	bl	1b018 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1d3c0:	2204      	movs	r2, #4
   1d3c2:	4621      	mov	r1, r4
   1d3c4:	a807      	add	r0, sp, #28
   1d3c6:	f7fd fe52 	bl	1b06e <memset>
	while (len--) {
   1d3ca:	f105 0010 	add.w	r0, r5, #16
   1d3ce:	462a      	mov	r2, r5
   1d3d0:	ab04      	add	r3, sp, #16
   1d3d2:	4282      	cmp	r2, r0
   1d3d4:	d112      	bne.n	1d3fc <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1d3d6:	462a      	mov	r2, r5
   1d3d8:	4629      	mov	r1, r5
   1d3da:	4630      	mov	r0, r6
   1d3dc:	f000 fc5f 	bl	1dc9e <bt_encrypt_le>
   1d3e0:	4604      	mov	r4, r0
}
   1d3e2:	4620      	mov	r0, r4
   1d3e4:	b009      	add	sp, #36	; 0x24
   1d3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1d3ea:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d3ee:	f812 cb01 	ldrb.w	ip, [r2], #1
   1d3f2:	ea83 030c 	eor.w	r3, r3, ip
   1d3f6:	f801 3b01 	strb.w	r3, [r1], #1
   1d3fa:	e7cc      	b.n	1d396 <smp_c1+0x40>
   1d3fc:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d400:	f813 4b01 	ldrb.w	r4, [r3], #1
   1d404:	4061      	eors	r1, r4
   1d406:	f802 1c01 	strb.w	r1, [r2, #-1]
   1d40a:	e7e2      	b.n	1d3d2 <smp_c1+0x7c>

0001d40c <legacy_pairing_confirm>:
{
   1d40c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d40e:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
{
   1d412:	b085      	sub	sp, #20
   1d414:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d416:	210a      	movs	r1, #10
   1d418:	4638      	mov	r0, r7
   1d41a:	f7ff fe9d 	bl	1d158 <atomic_test_bit>
   1d41e:	bb90      	cbnz	r0, 1d486 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(smp->allowed_cmds,
   1d420:	2104      	movs	r1, #4
   1d422:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   1d426:	f7ff fdc3 	bl	1cfb0 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d42a:	2103      	movs	r1, #3
   1d42c:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   1d42e:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d430:	f7ff fe9b 	bl	1d16a <smp_create_pdu.isra.0>
	if (!buf) {
   1d434:	4606      	mov	r6, r0
   1d436:	b1c0      	cbz	r0, 1d46a <legacy_pairing_confirm+0x5e>
   1d438:	2110      	movs	r1, #16
   1d43a:	3008      	adds	r0, #8
   1d43c:	f000 fb60 	bl	1db00 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1d440:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1d444:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1d446:	9002      	str	r0, [sp, #8]
   1d448:	9301      	str	r3, [sp, #4]
   1d44a:	9400      	str	r4, [sp, #0]
   1d44c:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   1d450:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   1d454:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   1d458:	f205 1007 	addw	r0, r5, #263	; 0x107
   1d45c:	f7ff ff7b 	bl	1d356 <smp_c1>
   1d460:	4604      	mov	r4, r0
   1d462:	b120      	cbz	r0, 1d46e <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   1d464:	4630      	mov	r0, r6
   1d466:	f7f8 ff6f 	bl	16348 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d46a:	2008      	movs	r0, #8
   1d46c:	e009      	b.n	1d482 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   1d46e:	4602      	mov	r2, r0
   1d470:	4631      	mov	r1, r6
   1d472:	4628      	mov	r0, r5
   1d474:	f7f7 fe50 	bl	15118 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d478:	4621      	mov	r1, r4
   1d47a:	4638      	mov	r0, r7
   1d47c:	f7ff fdbe 	bl	1cffc <atomic_clear_bit>
	return 0;
   1d480:	2000      	movs	r0, #0
}
   1d482:	b005      	add	sp, #20
   1d484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d486:	2100      	movs	r1, #0
   1d488:	4638      	mov	r0, r7
   1d48a:	f7ff fd91 	bl	1cfb0 <atomic_set_bit>
   1d48e:	e7f7      	b.n	1d480 <legacy_pairing_confirm+0x74>

0001d490 <smp_pairing_confirm>:
{
   1d490:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1d492:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d494:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   1d498:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d49a:	210b      	movs	r1, #11
   1d49c:	4628      	mov	r0, r5
   1d49e:	f7ff fdad 	bl	1cffc <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1d4a2:	4631      	mov	r1, r6
   1d4a4:	2210      	movs	r2, #16
   1d4a6:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   1d4aa:	f7fd fdb5 	bl	1b018 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d4ae:	2105      	movs	r1, #5
   1d4b0:	4628      	mov	r0, r5
   1d4b2:	f7ff fe51 	bl	1d158 <atomic_test_bit>
   1d4b6:	b920      	cbnz	r0, 1d4c2 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1d4b8:	4620      	mov	r0, r4
}
   1d4ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1d4be:	f7ff bfa5 	b.w	1d40c <legacy_pairing_confirm>
	switch (smp->method) {
   1d4c2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1d4c6:	2b01      	cmp	r3, #1
   1d4c8:	d00b      	beq.n	1d4e2 <smp_pairing_confirm+0x52>
   1d4ca:	2b02      	cmp	r3, #2
   1d4cc:	d115      	bne.n	1d4fa <smp_pairing_confirm+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d4ce:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1d4d2:	2104      	movs	r1, #4
   1d4d4:	f7ff fd6c 	bl	1cfb0 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1d4d8:	4620      	mov	r0, r4
}
   1d4da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1d4de:	f7f7 bf25 	b.w	1532c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d4e2:	210a      	movs	r1, #10
   1d4e4:	4628      	mov	r0, r5
   1d4e6:	f7ff fe37 	bl	1d158 <atomic_test_bit>
   1d4ea:	2800      	cmp	r0, #0
   1d4ec:	d0ef      	beq.n	1d4ce <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d4ee:	4628      	mov	r0, r5
   1d4f0:	2100      	movs	r1, #0
   1d4f2:	f7ff fd5d 	bl	1cfb0 <atomic_set_bit>
			return 0;
   1d4f6:	2000      	movs	r0, #0
}
   1d4f8:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1d4fa:	2008      	movs	r0, #8
   1d4fc:	e7fc      	b.n	1d4f8 <smp_pairing_confirm+0x68>

0001d4fe <bt_smp_request_ltk>:
{
   1d4fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d502:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1d506:	e9cd 2300 	strd	r2, r3, [sp]
   1d50a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d50c:	f7ff fd48 	bl	1cfa0 <smp_chan_get>
	if (!smp) {
   1d510:	4605      	mov	r5, r0
   1d512:	2800      	cmp	r0, #0
   1d514:	f000 8093 	beq.w	1d63e <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   1d518:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1d51c:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
   1d520:	f1b9 0f00 	cmp.w	r9, #0
   1d524:	d12c      	bne.n	1d580 <bt_smp_request_ltk+0x82>
   1d526:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d52a:	4313      	orrs	r3, r2
   1d52c:	d128      	bne.n	1d580 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d52e:	2103      	movs	r1, #3
   1d530:	4638      	mov	r0, r7
   1d532:	f7ff fe11 	bl	1d158 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1d536:	b318      	cbz	r0, 1d580 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d538:	2101      	movs	r1, #1
   1d53a:	4638      	mov	r0, r7
   1d53c:	f7ff fe0c 	bl	1d158 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d540:	4606      	mov	r6, r0
   1d542:	b1e8      	cbz	r0, 1d580 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d544:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   1d548:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   1d54c:	429c      	cmp	r4, r3
   1d54e:	bf28      	it	cs
   1d550:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1d552:	4622      	mov	r2, r4
   1d554:	f205 1107 	addw	r1, r5, #263	; 0x107
   1d558:	4640      	mov	r0, r8
   1d55a:	f7fd fd5d 	bl	1b018 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1d55e:	2c0f      	cmp	r4, #15
   1d560:	d806      	bhi.n	1d570 <bt_smp_request_ltk+0x72>
			(void)memset(ltk + enc_size, 0,
   1d562:	f1c4 0210 	rsb	r2, r4, #16
   1d566:	4649      	mov	r1, r9
   1d568:	eb08 0004 	add.w	r0, r8, r4
   1d56c:	f7fd fd7f 	bl	1b06e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d570:	2101      	movs	r1, #1
   1d572:	4638      	mov	r0, r7
   1d574:	f7ff fd1c 	bl	1cfb0 <atomic_set_bit>
}
   1d578:	4630      	mov	r0, r6
   1d57a:	b003      	add	sp, #12
   1d57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1d580:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1d584:	b983      	cbnz	r3, 1d5a8 <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   1d586:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1d58a:	7a21      	ldrb	r1, [r4, #8]
   1d58c:	4632      	mov	r2, r6
   1d58e:	2020      	movs	r0, #32
   1d590:	f7f8 fdbe 	bl	16110 <bt_keys_find>
   1d594:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1d598:	b930      	cbnz	r0, 1d5a8 <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1d59a:	7a21      	ldrb	r1, [r4, #8]
   1d59c:	4632      	mov	r2, r6
   1d59e:	2001      	movs	r0, #1
   1d5a0:	f7f8 fdb6 	bl	16110 <bt_keys_find>
   1d5a4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1d5a8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   1d5ac:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d5b0:	b9ee      	cbnz	r6, 1d5ee <bt_smp_request_ltk+0xf0>
   1d5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d5b6:	4313      	orrs	r3, r2
   1d5b8:	d119      	bne.n	1d5ee <bt_smp_request_ltk+0xf0>
   1d5ba:	b388      	cbz	r0, 1d620 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1d5bc:	89c3      	ldrh	r3, [r0, #14]
   1d5be:	069a      	lsls	r2, r3, #26
   1d5c0:	d516      	bpl.n	1d5f0 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   1d5c2:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1d5c4:	f100 011a 	add.w	r1, r0, #26
   1d5c8:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1d5ca:	4640      	mov	r0, r8
   1d5cc:	f7fd fd24 	bl	1b018 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1d5d0:	2c0f      	cmp	r4, #15
   1d5d2:	d806      	bhi.n	1d5e2 <bt_smp_request_ltk+0xe4>
			(void)memset(ltk + enc_size, 0,
   1d5d4:	f1c4 0210 	rsb	r2, r4, #16
   1d5d8:	4631      	mov	r1, r6
   1d5da:	eb08 0004 	add.w	r0, r8, r4
   1d5de:	f7fd fd46 	bl	1b06e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d5e2:	2101      	movs	r1, #1
   1d5e4:	4638      	mov	r0, r7
   1d5e6:	f7ff fce3 	bl	1cfb0 <atomic_set_bit>
		return true;
   1d5ea:	2601      	movs	r6, #1
   1d5ec:	e7c4      	b.n	1d578 <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1d5ee:	b1b8      	cbz	r0, 1d620 <bt_smp_request_ltk+0x122>
   1d5f0:	89c3      	ldrh	r3, [r0, #14]
   1d5f2:	07db      	lsls	r3, r3, #31
   1d5f4:	d514      	bpl.n	1d620 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1d5f6:	2208      	movs	r2, #8
   1d5f8:	4669      	mov	r1, sp
   1d5fa:	3040      	adds	r0, #64	; 0x40
   1d5fc:	f7fd fcfc 	bl	1aff8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1d600:	b970      	cbnz	r0, 1d620 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1d602:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d606:	2202      	movs	r2, #2
   1d608:	a90a      	add	r1, sp, #40	; 0x28
   1d60a:	3048      	adds	r0, #72	; 0x48
   1d60c:	f7fd fcf4 	bl	1aff8 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1d610:	4606      	mov	r6, r0
   1d612:	b928      	cbnz	r0, 1d620 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   1d614:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1d618:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1d61a:	314a      	adds	r1, #74	; 0x4a
   1d61c:	4622      	mov	r2, r4
   1d61e:	e7d4      	b.n	1d5ca <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d620:	210f      	movs	r1, #15
   1d622:	4638      	mov	r0, r7
   1d624:	f7ff fd98 	bl	1d158 <atomic_test_bit>
   1d628:	b120      	cbz	r0, 1d634 <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1d62a:	2202      	movs	r2, #2
   1d62c:	2106      	movs	r1, #6
   1d62e:	4620      	mov	r0, r4
   1d630:	f7f5 fe44 	bl	132bc <bt_conn_security_changed>
	smp_reset(smp);
   1d634:	4628      	mov	r0, r5
   1d636:	f7ff fe69 	bl	1d30c <smp_reset>
	return false;
   1d63a:	2600      	movs	r6, #0
   1d63c:	e79c      	b.n	1d578 <bt_smp_request_ltk+0x7a>
		return false;
   1d63e:	4606      	mov	r6, r0
   1d640:	e79a      	b.n	1d578 <bt_smp_request_ltk+0x7a>

0001d642 <bt_smp_sign>:
   1d642:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d646:	4770      	bx	lr

0001d648 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d648:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
{
   1d64c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d64e:	4605      	mov	r5, r0
   1d650:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d652:	4618      	mov	r0, r3
   1d654:	2103      	movs	r1, #3
   1d656:	f7ff fd7f 	bl	1d158 <atomic_test_bit>
   1d65a:	b1c8      	cbz	r0, 1d690 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   1d65c:	4621      	mov	r1, r4
   1d65e:	4628      	mov	r0, r5
   1d660:	f7f8 fb56 	bl	15d10 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1d664:	2105      	movs	r1, #5
   1d666:	4628      	mov	r0, r5
   1d668:	f7ff fd7f 	bl	1d16a <smp_create_pdu.isra.0>
	if (!buf) {
   1d66c:	4606      	mov	r6, r0
   1d66e:	b1e0      	cbz	r0, 1d6aa <smp_error+0x62>
   1d670:	2101      	movs	r1, #1
   1d672:	3008      	adds	r0, #8
   1d674:	f000 fa44 	bl	1db00 <net_buf_simple_add>
	rsp->reason = reason;
   1d678:	7004      	strb	r4, [r0, #0]
   1d67a:	2400      	movs	r4, #0
   1d67c:	6828      	ldr	r0, [r5, #0]
   1d67e:	9400      	str	r4, [sp, #0]
   1d680:	4623      	mov	r3, r4
   1d682:	4632      	mov	r2, r6
   1d684:	2106      	movs	r1, #6
   1d686:	f7fe fbe9 	bl	1be5c <bt_l2cap_send_cb>
	return 0;
   1d68a:	4620      	mov	r0, r4
}
   1d68c:	b002      	add	sp, #8
   1d68e:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d690:	2101      	movs	r1, #1
   1d692:	4618      	mov	r0, r3
   1d694:	f7ff fd60 	bl	1d158 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d698:	2800      	cmp	r0, #0
   1d69a:	d1df      	bne.n	1d65c <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d69c:	210f      	movs	r1, #15
   1d69e:	4618      	mov	r0, r3
   1d6a0:	f7ff fd5a 	bl	1d158 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d6a4:	2800      	cmp	r0, #0
   1d6a6:	d1d9      	bne.n	1d65c <smp_error+0x14>
   1d6a8:	e7dc      	b.n	1d664 <smp_error+0x1c>
		return -ENOBUFS;
   1d6aa:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1d6ae:	e7ed      	b.n	1d68c <smp_error+0x44>

0001d6b0 <bt_smp_dhkey_ready>:
{
   1d6b0:	b570      	push	{r4, r5, r6, lr}
   1d6b2:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1d6b4:	2008      	movs	r0, #8
   1d6b6:	f7f7 fd47 	bl	15148 <smp_find>
	if (smp) {
   1d6ba:	4604      	mov	r4, r0
   1d6bc:	b1c0      	cbz	r0, 1d6f0 <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d6be:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   1d6c2:	2108      	movs	r1, #8
   1d6c4:	4628      	mov	r0, r5
   1d6c6:	f7ff fc99 	bl	1cffc <atomic_clear_bit>
	if (!dhkey) {
   1d6ca:	b38e      	cbz	r6, 1d730 <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1d6cc:	2107      	movs	r1, #7
   1d6ce:	f7ff fc95 	bl	1cffc <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   1d6d2:	4631      	mov	r1, r6
   1d6d4:	2220      	movs	r2, #32
   1d6d6:	f204 1057 	addw	r0, r4, #343	; 0x157
   1d6da:	f7fd fc9d 	bl	1b018 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d6de:	210a      	movs	r1, #10
   1d6e0:	4628      	mov	r0, r5
   1d6e2:	f7ff fd39 	bl	1d158 <atomic_test_bit>
   1d6e6:	b168      	cbz	r0, 1d704 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d6e8:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d6ea:	4628      	mov	r0, r5
   1d6ec:	f7ff fc60 	bl	1cfb0 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1d6f0:	2007      	movs	r0, #7
   1d6f2:	f7f7 fd29 	bl	15148 <smp_find>
		if (smp) {
   1d6f6:	4604      	mov	r4, r0
   1d6f8:	b118      	cbz	r0, 1d702 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   1d6fa:	f7f7 fcbb 	bl	15074 <smp_dhkey_generate>
			if (err) {
   1d6fe:	4601      	mov	r1, r0
   1d700:	b990      	cbnz	r0, 1d728 <bt_smp_dhkey_ready+0x78>
}
   1d702:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1d704:	2110      	movs	r1, #16
   1d706:	4628      	mov	r0, r5
   1d708:	f7ff fd26 	bl	1d158 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d70c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1d70e:	2800      	cmp	r0, #0
   1d710:	d1eb      	bne.n	1d6ea <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1d712:	4628      	mov	r0, r5
   1d714:	f7ff fd20 	bl	1d158 <atomic_test_bit>
   1d718:	2800      	cmp	r0, #0
   1d71a:	d0e9      	beq.n	1d6f0 <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   1d71c:	4620      	mov	r0, r4
   1d71e:	f7f7 fd21 	bl	15164 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   1d722:	4601      	mov	r1, r0
   1d724:	2800      	cmp	r0, #0
   1d726:	d0e3      	beq.n	1d6f0 <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   1d728:	4620      	mov	r0, r4
   1d72a:	f7ff ff8d 	bl	1d648 <smp_error>
   1d72e:	e7df      	b.n	1d6f0 <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1d730:	210b      	movs	r1, #11
   1d732:	e7f9      	b.n	1d728 <bt_smp_dhkey_ready+0x78>

0001d734 <smp_ident_addr_info>:
{
   1d734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1d738:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d73a:	783b      	ldrb	r3, [r7, #0]
{
   1d73c:	4605      	mov	r5, r0
   1d73e:	b123      	cbz	r3, 1d74a <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1d740:	79bb      	ldrb	r3, [r7, #6]
   1d742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d746:	2bc0      	cmp	r3, #192	; 0xc0
   1d748:	d155      	bne.n	1d7f6 <smp_ident_addr_info+0xc2>
	struct bt_conn *conn = smp->chan.chan.conn;
   1d74a:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d74c:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
   1d74e:	f850 4bc4 	ldr.w	r4, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d752:	f7ff fd01 	bl	1d158 <atomic_test_bit>
   1d756:	b3a8      	cbz	r0, 1d7c4 <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d758:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1d75c:	7a21      	ldrb	r1, [r4, #8]
   1d75e:	4642      	mov	r2, r8
   1d760:	2002      	movs	r0, #2
   1d762:	f000 f954 	bl	1da0e <bt_keys_get_type>
		if (!keys) {
   1d766:	4606      	mov	r6, r0
   1d768:	2800      	cmp	r0, #0
   1d76a:	d047      	beq.n	1d7fc <smp_ident_addr_info+0xc8>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1d76c:	78e3      	ldrb	r3, [r4, #3]
   1d76e:	2b00      	cmp	r3, #0
   1d770:	d13e      	bne.n	1d7f0 <smp_ident_addr_info+0xbc>
			dst = &conn->le.resp_addr;
   1d772:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d776:	780b      	ldrb	r3, [r1, #0]
   1d778:	2b01      	cmp	r3, #1
   1d77a:	d120      	bne.n	1d7be <smp_ident_addr_info+0x8a>
		if (bt_addr_le_is_rpa(dst)) {
   1d77c:	798b      	ldrb	r3, [r1, #6]
   1d77e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d782:	2b40      	cmp	r3, #64	; 0x40
   1d784:	d11b      	bne.n	1d7be <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   1d786:	2206      	movs	r2, #6
   1d788:	3101      	adds	r1, #1
   1d78a:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1d78e:	f7fd fc43 	bl	1b018 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d792:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1d796:	b193      	cbz	r3, 1d7be <smp_ident_addr_info+0x8a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1d798:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1d79c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d7a0:	2bc0      	cmp	r3, #192	; 0xc0
   1d7a2:	d00c      	beq.n	1d7be <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   1d7a4:	2207      	movs	r2, #7
   1d7a6:	4639      	mov	r1, r7
   1d7a8:	1c70      	adds	r0, r6, #1
   1d7aa:	f7fd fc35 	bl	1b018 <memcpy>
   1d7ae:	2207      	movs	r2, #7
   1d7b0:	4639      	mov	r1, r7
   1d7b2:	4640      	mov	r0, r8
   1d7b4:	f7fd fc30 	bl	1b018 <memcpy>
				bt_conn_identity_resolved(conn);
   1d7b8:	4620      	mov	r0, r4
   1d7ba:	f7f5 fd65 	bl	13288 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1d7be:	4630      	mov	r0, r6
   1d7c0:	f7f4 fe64 	bl	1248c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d7c4:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   1d7c8:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d7cc:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d7ce:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d7d2:	d504      	bpl.n	1d7de <smp_ident_addr_info+0xaa>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d7d4:	210a      	movs	r1, #10
   1d7d6:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   1d7da:	f7ff fbe9 	bl	1cfb0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1d7de:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   1d7e2:	b91c      	cbnz	r4, 1d7ec <smp_ident_addr_info+0xb8>
		smp_pairing_complete(smp, 0);
   1d7e4:	4621      	mov	r1, r4
   1d7e6:	4628      	mov	r0, r5
   1d7e8:	f7f8 fa92 	bl	15d10 <smp_pairing_complete>
	return 0;
   1d7ec:	2000      	movs	r0, #0
   1d7ee:	e003      	b.n	1d7f8 <smp_ident_addr_info+0xc4>
			dst = &conn->le.init_addr;
   1d7f0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1d7f4:	e7bf      	b.n	1d776 <smp_ident_addr_info+0x42>
		return BT_SMP_ERR_INVALID_PARAMS;
   1d7f6:	200a      	movs	r0, #10
}
   1d7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1d7fc:	2008      	movs	r0, #8
   1d7fe:	e7fb      	b.n	1d7f8 <smp_ident_addr_info+0xc4>

0001d800 <smp_master_ident>:
{
   1d800:	b570      	push	{r4, r5, r6, lr}
   1d802:	460b      	mov	r3, r1
   1d804:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d806:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
   1d808:	f850 5bc4 	ldr.w	r5, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d80c:	f7ff fca4 	bl	1d158 <atomic_test_bit>
   1d810:	b1c8      	cbz	r0, 1d846 <smp_master_ident+0x46>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d812:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1d814:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d816:	f105 0288 	add.w	r2, r5, #136	; 0x88
   1d81a:	2004      	movs	r0, #4
   1d81c:	f000 f8f7 	bl	1da0e <bt_keys_get_type>
		if (!keys) {
   1d820:	4605      	mov	r5, r0
   1d822:	b330      	cbz	r0, 1d872 <smp_master_ident+0x72>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1d824:	2202      	movs	r2, #2
   1d826:	4631      	mov	r1, r6
   1d828:	3018      	adds	r0, #24
   1d82a:	f7fd fbf5 	bl	1b018 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1d82e:	2208      	movs	r2, #8
   1d830:	1cb1      	adds	r1, r6, #2
   1d832:	f105 0010 	add.w	r0, r5, #16
   1d836:	f7fd fbef 	bl	1b018 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1d83a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1d83e:	f023 0301 	bic.w	r3, r3, #1
   1d842:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d846:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1d84a:	079a      	lsls	r2, r3, #30
   1d84c:	d50d      	bpl.n	1d86a <smp_master_ident+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d84e:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d850:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1d854:	f7ff fbac 	bl	1cfb0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1d858:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
   1d85c:	b91d      	cbnz	r5, 1d866 <smp_master_ident+0x66>
		smp_pairing_complete(smp, 0);
   1d85e:	4629      	mov	r1, r5
   1d860:	4620      	mov	r0, r4
   1d862:	f7f8 fa55 	bl	15d10 <smp_pairing_complete>
	return 0;
   1d866:	2000      	movs	r0, #0
   1d868:	e004      	b.n	1d874 <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d86a:	075b      	lsls	r3, r3, #29
   1d86c:	d5f4      	bpl.n	1d858 <smp_master_ident+0x58>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d86e:	210a      	movs	r1, #10
   1d870:	e7ee      	b.n	1d850 <smp_master_ident+0x50>
			return BT_SMP_ERR_UNSPECIFIED;
   1d872:	2008      	movs	r0, #8
}
   1d874:	bd70      	pop	{r4, r5, r6, pc}

0001d876 <bt_smp_disconnected>:
{
   1d876:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1d878:	6803      	ldr	r3, [r0, #0]
{
   1d87a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   1d87c:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	struct bt_keys *keys = chan->conn->le.keys;
   1d880:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   1d884:	f7ff fba9 	bl	1cfda <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d888:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   1d88c:	2103      	movs	r1, #3
   1d88e:	4618      	mov	r0, r3
   1d890:	f7ff fc62 	bl	1d158 <atomic_test_bit>
   1d894:	b1a0      	cbz	r0, 1d8c0 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d896:	2108      	movs	r1, #8
   1d898:	4620      	mov	r0, r4
   1d89a:	f7f8 fa39 	bl	15d10 <smp_pairing_complete>
	if (keys) {
   1d89e:	b13d      	cbz	r5, 1d8b0 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1d8a0:	89eb      	ldrh	r3, [r5, #14]
   1d8a2:	b113      	cbz	r3, 1d8aa <bt_smp_disconnected+0x34>
   1d8a4:	7b6b      	ldrb	r3, [r5, #13]
   1d8a6:	079b      	lsls	r3, r3, #30
   1d8a8:	d502      	bpl.n	1d8b0 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1d8aa:	4628      	mov	r0, r5
   1d8ac:	f000 f8c3 	bl	1da36 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1d8b0:	4620      	mov	r0, r4
   1d8b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   1d8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1d8ba:	2100      	movs	r1, #0
   1d8bc:	f7fd bbd7 	b.w	1b06e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d8c0:	2101      	movs	r1, #1
   1d8c2:	4618      	mov	r0, r3
   1d8c4:	f7ff fc48 	bl	1d158 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d8c8:	2800      	cmp	r0, #0
   1d8ca:	d1e4      	bne.n	1d896 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d8cc:	210f      	movs	r1, #15
   1d8ce:	4618      	mov	r0, r3
   1d8d0:	f7ff fc42 	bl	1d158 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d8d4:	2800      	cmp	r0, #0
   1d8d6:	d1de      	bne.n	1d896 <bt_smp_disconnected+0x20>
   1d8d8:	e7e1      	b.n	1d89e <bt_smp_disconnected+0x28>

0001d8da <smp_timeout>:
{
   1d8da:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d8dc:	2108      	movs	r1, #8
{
   1d8de:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d8e0:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
   1d8e4:	f7f8 fa14 	bl	15d10 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d8e8:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   1d8ec:	2104      	movs	r1, #4
}
   1d8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d8f2:	f7ff bb5d 	b.w	1cfb0 <atomic_set_bit>

0001d8f6 <smp_ident_sent>:
{
   1d8f6:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1d8f8:	7883      	ldrb	r3, [r0, #2]
   1d8fa:	2b01      	cmp	r3, #1
   1d8fc:	d10f      	bne.n	1d91e <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1d8fe:	2106      	movs	r1, #6
   1d900:	f7fe faf2 	bl	1bee8 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1d904:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   1d908:	f022 0201 	bic.w	r2, r2, #1
   1d90c:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   1d910:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   1d914:	b919      	cbnz	r1, 1d91e <smp_ident_sent+0x28>
}
   1d916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1d91a:	f7f8 b9f9 	b.w	15d10 <smp_pairing_complete>
}
   1d91e:	bd08      	pop	{r3, pc}

0001d920 <bt_smp_update_keys>:
{
   1d920:	b570      	push	{r4, r5, r6, lr}
   1d922:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d924:	f7ff fb3c 	bl	1cfa0 <smp_chan_get>
	if (!smp) {
   1d928:	4605      	mov	r5, r0
   1d92a:	2800      	cmp	r0, #0
   1d92c:	d06e      	beq.n	1da0c <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d92e:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   1d932:	2103      	movs	r1, #3
   1d934:	4630      	mov	r0, r6
   1d936:	f7ff fc0f 	bl	1d158 <atomic_test_bit>
   1d93a:	2800      	cmp	r0, #0
   1d93c:	d066      	beq.n	1da0c <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
   1d93e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d942:	b108      	cbz	r0, 1d948 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1d944:	f000 f877 	bl	1da36 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d948:	7a20      	ldrb	r0, [r4, #8]
   1d94a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1d94e:	f7f8 fba9 	bl	160a4 <bt_keys_get_addr>
   1d952:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1d956:	b928      	cbnz	r0, 1d964 <bt_smp_update_keys+0x44>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d958:	4628      	mov	r0, r5
   1d95a:	2108      	movs	r1, #8
}
   1d95c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d960:	f7ff be72 	b.w	1d648 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d964:	210e      	movs	r1, #14
   1d966:	4630      	mov	r0, r6
   1d968:	f7ff fbf6 	bl	1d158 <atomic_test_bit>
   1d96c:	b128      	cbz	r0, 1d97a <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d96e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d972:	7b53      	ldrb	r3, [r2, #13]
   1d974:	f043 0302 	orr.w	r3, r3, #2
   1d978:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1d97a:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1d97e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1d982:	2a03      	cmp	r2, #3
   1d984:	7b4b      	ldrb	r3, [r1, #13]
   1d986:	d838      	bhi.n	1d9fa <bt_smp_update_keys+0xda>
   1d988:	b3d2      	cbz	r2, 1da00 <bt_smp_update_keys+0xe0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d98a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d98e:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1d990:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   1d994:	f895 20d4 	ldrb.w	r2, [r5, #212]	; 0xd4
   1d998:	4293      	cmp	r3, r2
   1d99a:	bf28      	it	cs
   1d99c:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d99e:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d9a0:	4630      	mov	r0, r6
   1d9a2:	2105      	movs	r1, #5
   1d9a4:	f7ff fbd8 	bl	1d158 <atomic_test_bit>
   1d9a8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1d9ac:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d9ae:	b350      	cbz	r0, 1da06 <bt_smp_update_keys+0xe6>
		conn->le.keys->flags |= BT_KEYS_SC;
   1d9b0:	f042 0210 	orr.w	r2, r2, #16
   1d9b4:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d9b6:	210d      	movs	r1, #13
   1d9b8:	4630      	mov	r0, r6
   1d9ba:	f7ff fbcd 	bl	1d158 <atomic_test_bit>
   1d9be:	b328      	cbz	r0, 1da0c <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1d9c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d9c4:	2120      	movs	r1, #32
   1d9c6:	f000 f832 	bl	1da2e <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1d9ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d9ce:	f205 1107 	addw	r1, r5, #263	; 0x107
   1d9d2:	2210      	movs	r2, #16
   1d9d4:	301a      	adds	r0, #26
   1d9d6:	f7fd fb1f 	bl	1b018 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1d9da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d9de:	2208      	movs	r2, #8
   1d9e0:	2100      	movs	r1, #0
   1d9e2:	3010      	adds	r0, #16
   1d9e4:	f7fd fb43 	bl	1b06e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1d9e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d9ec:	2202      	movs	r2, #2
}
   1d9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1d9f2:	2100      	movs	r1, #0
   1d9f4:	3018      	adds	r0, #24
   1d9f6:	f7fd bb3a 	b.w	1b06e <memset>
	switch (smp->method) {
   1d9fa:	3a05      	subs	r2, #5
   1d9fc:	2a01      	cmp	r2, #1
   1d9fe:	d9c4      	bls.n	1d98a <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1da00:	f023 0301 	bic.w	r3, r3, #1
   1da04:	e7c3      	b.n	1d98e <bt_smp_update_keys+0x6e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1da06:	f022 0210 	bic.w	r2, r2, #16
   1da0a:	735a      	strb	r2, [r3, #13]
}
   1da0c:	bd70      	pop	{r4, r5, r6, pc}

0001da0e <bt_keys_get_type>:
{
   1da0e:	b570      	push	{r4, r5, r6, lr}
   1da10:	4604      	mov	r4, r0
   1da12:	460d      	mov	r5, r1
   1da14:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1da16:	f7f8 fb7b 	bl	16110 <bt_keys_find>
	if (keys) {
   1da1a:	b938      	cbnz	r0, 1da2c <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1da1c:	4631      	mov	r1, r6
   1da1e:	4628      	mov	r0, r5
   1da20:	f7f8 fb40 	bl	160a4 <bt_keys_get_addr>
	if (!keys) {
   1da24:	b110      	cbz	r0, 1da2c <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1da26:	89c3      	ldrh	r3, [r0, #14]
   1da28:	431c      	orrs	r4, r3
   1da2a:	81c4      	strh	r4, [r0, #14]
}
   1da2c:	bd70      	pop	{r4, r5, r6, pc}

0001da2e <bt_keys_add_type>:
	keys->keys |= type;
   1da2e:	89c3      	ldrh	r3, [r0, #14]
   1da30:	4319      	orrs	r1, r3
   1da32:	81c1      	strh	r1, [r0, #14]
}
   1da34:	4770      	bx	lr

0001da36 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1da36:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1da38:	7a03      	ldrb	r3, [r0, #8]
   1da3a:	075b      	lsls	r3, r3, #29
{
   1da3c:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1da3e:	d501      	bpl.n	1da44 <bt_keys_clear+0xe>
		bt_id_del(keys);
   1da40:	f7f4 fdae 	bl	125a0 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1da44:	4620      	mov	r0, r4
   1da46:	225c      	movs	r2, #92	; 0x5c
}
   1da48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1da4c:	2100      	movs	r1, #0
   1da4e:	f7fd bb0e 	b.w	1b06e <memset>

0001da52 <fixed_data_unref>:
}
   1da52:	4770      	bx	lr

0001da54 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1da54:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1da56:	6849      	ldr	r1, [r1, #4]
   1da58:	6809      	ldr	r1, [r1, #0]
   1da5a:	f7f8 bbe9 	b.w	16230 <net_buf_alloc_len>

0001da5e <net_buf_get>:
{
   1da5e:	b570      	push	{r4, r5, r6, lr}
   1da60:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1da62:	f7fa fb89 	bl	18178 <z_impl_k_queue_get>
	if (!buf) {
   1da66:	4605      	mov	r5, r0
   1da68:	b128      	cbz	r0, 1da76 <net_buf_get+0x18>
   1da6a:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1da6c:	7963      	ldrb	r3, [r4, #5]
   1da6e:	f013 0301 	ands.w	r3, r3, #1
   1da72:	d102      	bne.n	1da7a <net_buf_get+0x1c>
	frag->frags = NULL;
   1da74:	6023      	str	r3, [r4, #0]
}
   1da76:	4628      	mov	r0, r5
   1da78:	bd70      	pop	{r4, r5, r6, pc}
   1da7a:	2300      	movs	r3, #0
   1da7c:	2200      	movs	r2, #0
   1da7e:	4630      	mov	r0, r6
   1da80:	f7fa fb7a 	bl	18178 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1da84:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1da86:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1da88:	f023 0301 	bic.w	r3, r3, #1
   1da8c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1da8e:	4604      	mov	r4, r0
   1da90:	e7ec      	b.n	1da6c <net_buf_get+0xe>

0001da92 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1da92:	6883      	ldr	r3, [r0, #8]
   1da94:	440b      	add	r3, r1
   1da96:	6003      	str	r3, [r0, #0]
}
   1da98:	4770      	bx	lr

0001da9a <net_buf_put>:
{
   1da9a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1da9c:	460a      	mov	r2, r1
   1da9e:	6814      	ldr	r4, [r2, #0]
   1daa0:	b914      	cbnz	r4, 1daa8 <net_buf_put+0xe>
}
   1daa2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1daa4:	f000 ba91 	b.w	1dfca <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1daa8:	7953      	ldrb	r3, [r2, #5]
   1daaa:	f043 0301 	orr.w	r3, r3, #1
   1daae:	7153      	strb	r3, [r2, #5]
   1dab0:	4622      	mov	r2, r4
   1dab2:	e7f4      	b.n	1da9e <net_buf_put+0x4>

0001dab4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1dab4:	7902      	ldrb	r2, [r0, #4]
   1dab6:	3201      	adds	r2, #1
   1dab8:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1daba:	4770      	bx	lr

0001dabc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1dabc:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1dabe:	4618      	mov	r0, r3
   1dac0:	681b      	ldr	r3, [r3, #0]
   1dac2:	2b00      	cmp	r3, #0
   1dac4:	d1fb      	bne.n	1dabe <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1dac6:	4770      	bx	lr

0001dac8 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1dac8:	6802      	ldr	r2, [r0, #0]
{
   1daca:	b510      	push	{r4, lr}
	if (parent->frags) {
   1dacc:	b12a      	cbz	r2, 1dada <net_buf_frag_insert+0x12>
   1dace:	460b      	mov	r3, r1
	while (buf->frags) {
   1dad0:	461c      	mov	r4, r3
   1dad2:	681b      	ldr	r3, [r3, #0]
   1dad4:	2b00      	cmp	r3, #0
   1dad6:	d1fb      	bne.n	1dad0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1dad8:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1dada:	6001      	str	r1, [r0, #0]
}
   1dadc:	bd10      	pop	{r4, pc}

0001dade <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1dade:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1dae0:	4604      	mov	r4, r0
   1dae2:	b920      	cbnz	r0, 1daee <net_buf_frag_add+0x10>
	buf->ref++;
   1dae4:	790b      	ldrb	r3, [r1, #4]
   1dae6:	3301      	adds	r3, #1
   1dae8:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1daea:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1daec:	bd10      	pop	{r4, pc}
   1daee:	4603      	mov	r3, r0
	while (buf->frags) {
   1daf0:	4618      	mov	r0, r3
   1daf2:	681b      	ldr	r3, [r3, #0]
   1daf4:	2b00      	cmp	r3, #0
   1daf6:	d1fb      	bne.n	1daf0 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1daf8:	f7ff ffe6 	bl	1dac8 <net_buf_frag_insert>
   1dafc:	4620      	mov	r0, r4
   1dafe:	e7f5      	b.n	1daec <net_buf_frag_add+0xe>

0001db00 <net_buf_simple_add>:
	return buf->data + buf->len;
   1db00:	8883      	ldrh	r3, [r0, #4]
   1db02:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1db04:	4419      	add	r1, r3
   1db06:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1db08:	18d0      	adds	r0, r2, r3
   1db0a:	4770      	bx	lr

0001db0c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1db0c:	b430      	push	{r4, r5}
   1db0e:	8884      	ldrh	r4, [r0, #4]
   1db10:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1db12:	18a3      	adds	r3, r4, r2
   1db14:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1db16:	1928      	adds	r0, r5, r4
}
   1db18:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1db1a:	f7fd ba7d 	b.w	1b018 <memcpy>

0001db1e <net_buf_simple_add_u8>:
   1db1e:	8883      	ldrh	r3, [r0, #4]
   1db20:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1db22:	b510      	push	{r4, lr}
	buf->len += len;
   1db24:	1c5c      	adds	r4, r3, #1
   1db26:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1db28:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1db2a:	18d0      	adds	r0, r2, r3
   1db2c:	bd10      	pop	{r4, pc}

0001db2e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1db2e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1db30:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1db32:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1db34:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1db36:	4411      	add	r1, r2
	buf->data -= len;
   1db38:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1db3a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1db3c:	4770      	bx	lr

0001db3e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1db3e:	8882      	ldrh	r2, [r0, #4]
   1db40:	1a52      	subs	r2, r2, r1
{
   1db42:	4603      	mov	r3, r0
	buf->len -= len;
   1db44:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1db46:	6800      	ldr	r0, [r0, #0]
   1db48:	4408      	add	r0, r1
   1db4a:	6018      	str	r0, [r3, #0]
}
   1db4c:	4770      	bx	lr

0001db4e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1db4e:	4603      	mov	r3, r0
	void *data = buf->data;
   1db50:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1db52:	889a      	ldrh	r2, [r3, #4]
   1db54:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1db56:	4401      	add	r1, r0
	buf->len -= len;
   1db58:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1db5a:	6019      	str	r1, [r3, #0]

	return data;
}
   1db5c:	4770      	bx	lr

0001db5e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1db5e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1db60:	6803      	ldr	r3, [r0, #0]
   1db62:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1db64:	2102      	movs	r1, #2
   1db66:	f7ff ffea 	bl	1db3e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1db6a:	4620      	mov	r0, r4
   1db6c:	bd10      	pop	{r4, pc}

0001db6e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1db6e:	6802      	ldr	r2, [r0, #0]
   1db70:	6880      	ldr	r0, [r0, #8]
}
   1db72:	1a10      	subs	r0, r2, r0
   1db74:	4770      	bx	lr

0001db76 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1db76:	8883      	ldrh	r3, [r0, #4]
   1db78:	88c2      	ldrh	r2, [r0, #6]
   1db7a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1db7c:	6803      	ldr	r3, [r0, #0]
   1db7e:	6880      	ldr	r0, [r0, #8]
   1db80:	1a18      	subs	r0, r3, r0
}
   1db82:	1a10      	subs	r0, r2, r0
   1db84:	4770      	bx	lr

0001db86 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1db86:	f1a0 0308 	sub.w	r3, r0, #8
   1db8a:	f3bf 8f5b 	dmb	ish
   1db8e:	e853 2f00 	ldrex	r2, [r3]
   1db92:	1c51      	adds	r1, r2, #1
   1db94:	e843 1c00 	strex	ip, r1, [r3]
   1db98:	f1bc 0f00 	cmp.w	ip, #0
   1db9c:	d1f7      	bne.n	1db8e <adc_context_on_timer_expired+0x8>
   1db9e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1dba2:	b91a      	cbnz	r2, 1dbac <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   1dba4:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   1dba8:	f7f8 bc02 	b.w	163b0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   1dbac:	f06f 030f 	mvn.w	r3, #15
   1dbb0:	6683      	str	r3, [r0, #104]	; 0x68
}
   1dbb2:	4770      	bx	lr

0001dbb4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1dbb4:	f000 001f 	and.w	r0, r0, #31
   1dbb8:	0080      	lsls	r0, r0, #2
   1dbba:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1dbbe:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1dbc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1dbc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dbca:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1dbce:	4770      	bx	lr

0001dbd0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbd0:	6843      	ldr	r3, [r0, #4]
   1dbd2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1dbd4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1dbd8:	600b      	str	r3, [r1, #0]
}
   1dbda:	2000      	movs	r0, #0
   1dbdc:	4770      	bx	lr

0001dbde <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbde:	6843      	ldr	r3, [r0, #4]
   1dbe0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1dbe2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1dbe6:	4042      	eors	r2, r0
   1dbe8:	400a      	ands	r2, r1
   1dbea:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1dbec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1dbf0:	2000      	movs	r0, #0
   1dbf2:	4770      	bx	lr

0001dbf4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dbf4:	6843      	ldr	r3, [r0, #4]
   1dbf6:	685b      	ldr	r3, [r3, #4]
}
   1dbf8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1dbfa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1dbfe:	4770      	bx	lr

0001dc00 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dc00:	6843      	ldr	r3, [r0, #4]
   1dc02:	685b      	ldr	r3, [r3, #4]
}
   1dc04:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1dc06:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1dc0a:	4770      	bx	lr

0001dc0c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dc0c:	6843      	ldr	r3, [r0, #4]
   1dc0e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1dc10:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1dc14:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1dc16:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1dc1a:	2000      	movs	r0, #0
   1dc1c:	4770      	bx	lr

0001dc1e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1dc1e:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1dc20:	6858      	ldr	r0, [r3, #4]
{
   1dc22:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1dc24:	b158      	cbz	r0, 1dc3e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dc26:	2400      	movs	r4, #0
   1dc28:	4281      	cmp	r1, r0
   1dc2a:	d113      	bne.n	1dc54 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1dc2c:	6808      	ldr	r0, [r1, #0]
   1dc2e:	b95c      	cbnz	r4, 1dc48 <gpio_nrfx_manage_callback+0x2a>
   1dc30:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1dc32:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1dc34:	42a1      	cmp	r1, r4
   1dc36:	d100      	bne.n	1dc3a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1dc38:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1dc3a:	2000      	movs	r0, #0
   1dc3c:	6008      	str	r0, [r1, #0]
	if (set) {
   1dc3e:	b972      	cbnz	r2, 1dc5e <gpio_nrfx_manage_callback+0x40>
	return 0;
   1dc40:	2000      	movs	r0, #0
}
   1dc42:	bd30      	pop	{r4, r5, pc}
   1dc44:	4628      	mov	r0, r5
   1dc46:	e7ef      	b.n	1dc28 <gpio_nrfx_manage_callback+0xa>
   1dc48:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dc4a:	6898      	ldr	r0, [r3, #8]
   1dc4c:	4281      	cmp	r1, r0
	list->tail = node;
   1dc4e:	bf08      	it	eq
   1dc50:	609c      	streq	r4, [r3, #8]
}
   1dc52:	e7f2      	b.n	1dc3a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc54:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dc56:	4604      	mov	r4, r0
   1dc58:	2d00      	cmp	r5, #0
   1dc5a:	d1f3      	bne.n	1dc44 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1dc5c:	b13a      	cbz	r2, 1dc6e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1dc5e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1dc60:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1dc62:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1dc64:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1dc66:	2800      	cmp	r0, #0
   1dc68:	d1ea      	bne.n	1dc40 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1dc6a:	6099      	str	r1, [r3, #8]
}
   1dc6c:	e7e9      	b.n	1dc42 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1dc6e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1dc72:	e7e6      	b.n	1dc42 <gpio_nrfx_manage_callback+0x24>

0001dc74 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1dc74:	6902      	ldr	r2, [r0, #16]
{
   1dc76:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1dc78:	e892 0003 	ldmia.w	r2, {r0, r1}
   1dc7c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1dc80:	2000      	movs	r0, #0
   1dc82:	4770      	bx	lr

0001dc84 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1dc84:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1dc86:	2000      	movs	r0, #0
   1dc88:	f7f3 fbf4 	bl	11474 <sys_arch_reboot>

0001dc8c <sdc_assertion_handler>:
	k_oops();
   1dc8c:	4040      	eors	r0, r0
   1dc8e:	f380 8811 	msr	BASEPRI, r0
   1dc92:	f04f 0003 	mov.w	r0, #3
   1dc96:	df02      	svc	2
}
   1dc98:	4770      	bx	lr

0001dc9a <rand_prio_high_vector_get>:
   1dc9a:	f7f9 b9e1 	b.w	17060 <rand_prio_low_vector_get>

0001dc9e <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   1dc9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dca0:	b08d      	sub	sp, #52	; 0x34
   1dca2:	4615      	mov	r5, r2
   1dca4:	466a      	mov	r2, sp
   1dca6:	f100 0310 	add.w	r3, r0, #16
   1dcaa:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   1dcac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1dcb0:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   1dcb4:	4298      	cmp	r0, r3
   1dcb6:	d1f9      	bne.n	1dcac <bt_encrypt_le+0xe>
   1dcb8:	aa04      	add	r2, sp, #16
   1dcba:	f101 0310 	add.w	r3, r1, #16
   1dcbe:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   1dcc0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1dcc4:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1dcc8:	428b      	cmp	r3, r1
   1dcca:	d1f9      	bne.n	1dcc0 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1dccc:	f04f 30ff 	mov.w	r0, #4294967295
   1dcd0:	f04f 31ff 	mov.w	r1, #4294967295
   1dcd4:	f7f9 f99a 	bl	1700c <multithreading_lock_acquire>

	if (!errcode) {
   1dcd8:	4604      	mov	r4, r0
   1dcda:	b990      	cbnz	r0, 1dd02 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   1dcdc:	aa08      	add	r2, sp, #32
   1dcde:	4639      	mov	r1, r7
   1dce0:	4630      	mov	r0, r6
   1dce2:	f7ee fb43 	bl	c36c <sdc_soc_ecb_block_encrypt>
   1dce6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1dce8:	f7f9 f998 	bl	1701c <multithreading_lock_release>
	}

	if (!errcode) {
   1dcec:	b94c      	cbnz	r4, 1dd02 <bt_encrypt_le+0x64>
   1dcee:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   1dcf0:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   1dcf4:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   1dcf6:	f812 1901 	ldrb.w	r1, [r2], #-1
   1dcfa:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1dcfe:	429d      	cmp	r5, r3
   1dd00:	d1f9      	bne.n	1dcf6 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   1dd02:	4620      	mov	r0, r4
   1dd04:	b00d      	add	sp, #52	; 0x34
   1dd06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dd08 <m_assert_handler>:
	k_oops();
   1dd08:	4040      	eors	r0, r0
   1dd0a:	f380 8811 	msr	BASEPRI, r0
   1dd0e:	f04f 0003 	mov.w	r0, #3
   1dd12:	df02      	svc	2
}
   1dd14:	4770      	bx	lr

0001dd16 <mpsl_fem_init>:
#if IS_ENABLED(CONFIG_MPSL_FEM)
	return mpsl_fem_configure();
#else
	return 0;
#endif
}
   1dd16:	2000      	movs	r0, #0
   1dd18:	4770      	bx	lr

0001dd1a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1dd1a:	4668      	mov	r0, sp
   1dd1c:	f020 0107 	bic.w	r1, r0, #7
   1dd20:	468d      	mov	sp, r1
   1dd22:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1dd24:	f7e4 ff58 	bl	2bd8 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1dd28:	f7f3 f930 	bl	10f8c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1dd2c:	f7f3 fac2 	bl	112b4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1dd30:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dd34:	4685      	mov	sp, r0
   1dd36:	4770      	bx	lr

0001dd38 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1dd38:	4668      	mov	r0, sp
   1dd3a:	f020 0107 	bic.w	r1, r0, #7
   1dd3e:	468d      	mov	sp, r1
   1dd40:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1dd42:	f7e4 fefb 	bl	2b3c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1dd46:	f7f3 f921 	bl	10f8c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1dd4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dd4e:	4685      	mov	sp, r0
   1dd50:	4770      	bx	lr

0001dd52 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1dd52:	4668      	mov	r0, sp
   1dd54:	f020 0107 	bic.w	r1, r0, #7
   1dd58:	468d      	mov	sp, r1
   1dd5a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1dd5c:	f7ee f860 	bl	be20 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1dd60:	f7f3 f914 	bl	10f8c <_arch_isr_direct_pm>
   1dd64:	f7f3 faa6 	bl	112b4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1dd68:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dd6c:	4685      	mov	sp, r0
   1dd6e:	4770      	bx	lr

0001dd70 <nrfx_clock_stop>:
	switch (domain) {
   1dd70:	2801      	cmp	r0, #1
   1dd72:	d101      	bne.n	1dd78 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1dd74:	f7e5 bd46 	b.w	3804 <mpsl_clock_hfclk_release>
}
   1dd78:	4770      	bx	lr

0001dd7a <nrfx_clock_enable>:
}
   1dd7a:	4770      	bx	lr

0001dd7c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1dd7c:	f7e5 bb60 	b.w	3440 <MPSL_IRQ_CLOCK_Handler>

0001dd80 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1dd80:	4700      	bx	r0

0001dd82 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1dd82:	f000 ba8c 	b.w	1e29e <z_impl_k_busy_wait>

0001dd86 <z_device_state_init>:
}
   1dd86:	4770      	bx	lr

0001dd88 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0);
   1dd88:	68c3      	ldr	r3, [r0, #12]
   1dd8a:	8818      	ldrh	r0, [r3, #0]
   1dd8c:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   1dd90:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1dd94:	4258      	negs	r0, r3
   1dd96:	4158      	adcs	r0, r3
   1dd98:	4770      	bx	lr

0001dd9a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1dd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd9c:	4605      	mov	r5, r0
   1dd9e:	460e      	mov	r6, r1
	__asm__ volatile(
   1dda0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dda4:	f3ef 8711 	mrs	r7, BASEPRI
   1dda8:	f383 8811 	msr	BASEPRI, r3
   1ddac:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ddb0:	f7fa fcd2 	bl	18758 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1ddb4:	4631      	mov	r1, r6
   1ddb6:	4604      	mov	r4, r0
   1ddb8:	4628      	mov	r0, r5
   1ddba:	f7ff ff63 	bl	1dc84 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1ddbe:	f387 8811 	msr	BASEPRI, r7
   1ddc2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ddc6:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1ddc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ddcc:	f7f3 ba8c 	b.w	112e8 <z_impl_k_thread_abort>

0001ddd0 <k_heap_init>:
{
   1ddd0:	b410      	push	{r4}
   1ddd2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1ddd6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1ddda:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1dddc:	f7fb bea6 	b.w	19b2c <sys_heap_init>

0001dde0 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dde4:	b087      	sub	sp, #28
   1dde6:	4604      	mov	r4, r0
   1dde8:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1ddea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1ddee:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   1ddf0:	f000 fb63 	bl	1e4ba <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1ddf4:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1ddf8:	4605      	mov	r5, r0
   1ddfa:	4688      	mov	r8, r1
	__asm__ volatile(
   1ddfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de00:	f3ef 8b11 	mrs	fp, BASEPRI
   1de04:	f383 8811 	msr	BASEPRI, r3
   1de08:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1de0c:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1de10:	463a      	mov	r2, r7
   1de12:	4631      	mov	r1, r6
   1de14:	4620      	mov	r0, r4
   1de16:	f7fb fe0e 	bl	19a36 <sys_heap_aligned_alloc>
   1de1a:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   1de1c:	f7fb f92c 	bl	19078 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1de20:	9b05      	ldr	r3, [sp, #20]
   1de22:	b13b      	cbz	r3, 1de34 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1de24:	f38b 8811 	msr	BASEPRI, fp
   1de28:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1de2c:	4618      	mov	r0, r3
   1de2e:	b007      	add	sp, #28
   1de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1de34:	1a2a      	subs	r2, r5, r0
   1de36:	9202      	str	r2, [sp, #8]
   1de38:	eb68 0201 	sbc.w	r2, r8, r1
   1de3c:	9203      	str	r2, [sp, #12]
   1de3e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1de42:	2901      	cmp	r1, #1
   1de44:	f172 0200 	sbcs.w	r2, r2, #0
   1de48:	dbec      	blt.n	1de24 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1de4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1de4e:	4659      	mov	r1, fp
   1de50:	e9cd 2300 	strd	r2, r3, [sp]
   1de54:	4648      	mov	r0, r9
   1de56:	4652      	mov	r2, sl
   1de58:	f7fa fa8c 	bl	18374 <z_pend_curr>
	__asm__ volatile(
   1de5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de60:	f3ef 8b11 	mrs	fp, BASEPRI
   1de64:	f383 8811 	msr	BASEPRI, r3
   1de68:	f3bf 8f6f 	isb	sy
   1de6c:	e7d0      	b.n	1de10 <k_heap_aligned_alloc+0x30>

0001de6e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1de6e:	b538      	push	{r3, r4, r5, lr}
   1de70:	4604      	mov	r4, r0
   1de72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de76:	f3ef 8511 	mrs	r5, BASEPRI
   1de7a:	f383 8811 	msr	BASEPRI, r3
   1de7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1de82:	f7fb fd8b 	bl	1999c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1de86:	f104 000c 	add.w	r0, r4, #12
   1de8a:	f000 f9c5 	bl	1e218 <z_unpend_all>
   1de8e:	b130      	cbz	r0, 1de9e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1de90:	4629      	mov	r1, r5
   1de92:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1de96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1de9a:	f7fa b9e9 	b.w	18270 <z_reschedule>
	__asm__ volatile(
   1de9e:	f385 8811 	msr	BASEPRI, r5
   1dea2:	f3bf 8f6f 	isb	sy
}
   1dea6:	bd38      	pop	{r3, r4, r5, pc}

0001dea8 <queue_insert>:
{
   1dea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1deac:	4699      	mov	r9, r3
   1deae:	4604      	mov	r4, r0
   1deb0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1deb4:	460d      	mov	r5, r1
   1deb6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1deb8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1debc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1dec0:	f3ef 8711 	mrs	r7, BASEPRI
   1dec4:	f382 8811 	msr	BASEPRI, r2
   1dec8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1decc:	b103      	cbz	r3, 1ded0 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1dece:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1ded0:	4630      	mov	r0, r6
   1ded2:	f000 f989 	bl	1e1e8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1ded6:	b158      	cbz	r0, 1def0 <queue_insert+0x48>
   1ded8:	2400      	movs	r4, #0
   1deda:	67c4      	str	r4, [r0, #124]	; 0x7c
   1dedc:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1dee0:	f000 f93b 	bl	1e15a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1dee4:	4630      	mov	r0, r6
   1dee6:	4639      	mov	r1, r7
   1dee8:	f7fa f9c2 	bl	18270 <z_reschedule>
	return 0;
   1deec:	2000      	movs	r0, #0
   1deee:	e00c      	b.n	1df0a <queue_insert+0x62>
	if (alloc) {
   1def0:	f1b9 0f00 	cmp.w	r9, #0
   1def4:	d01b      	beq.n	1df2e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1def6:	2108      	movs	r1, #8
   1def8:	f7fb f9e0 	bl	192bc <z_thread_aligned_alloc>
		if (anode == NULL) {
   1defc:	b938      	cbnz	r0, 1df0e <queue_insert+0x66>
	__asm__ volatile(
   1defe:	f387 8811 	msr	BASEPRI, r7
   1df02:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1df06:	f06f 000b 	mvn.w	r0, #11
}
   1df0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1df0e:	2301      	movs	r3, #1
		anode->data = data;
   1df10:	f8c0 8004 	str.w	r8, [r0, #4]
   1df14:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1df16:	6803      	ldr	r3, [r0, #0]
   1df18:	f003 0203 	and.w	r2, r3, #3
   1df1c:	b95d      	cbnz	r5, 1df36 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1df1e:	6823      	ldr	r3, [r4, #0]
   1df20:	4313      	orrs	r3, r2
   1df22:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1df24:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1df26:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1df28:	b973      	cbnz	r3, 1df48 <queue_insert+0xa0>
	list->tail = node;
   1df2a:	6060      	str	r0, [r4, #4]
}
   1df2c:	e00c      	b.n	1df48 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1df2e:	f8c8 9000 	str.w	r9, [r8]
}
   1df32:	4640      	mov	r0, r8
   1df34:	e7ef      	b.n	1df16 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1df36:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1df38:	f033 0303 	bics.w	r3, r3, #3
   1df3c:	d110      	bne.n	1df60 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1df3e:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1df40:	6862      	ldr	r2, [r4, #4]
   1df42:	b93a      	cbnz	r2, 1df54 <queue_insert+0xac>
	list->head = node;
   1df44:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1df48:	2104      	movs	r1, #4
   1df4a:	f104 0010 	add.w	r0, r4, #16
   1df4e:	f000 fc26 	bl	1e79e <z_handle_obj_poll_events>
   1df52:	e7c7      	b.n	1dee4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1df54:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1df56:	f003 0303 	and.w	r3, r3, #3
   1df5a:	4303      	orrs	r3, r0
   1df5c:	6013      	str	r3, [r2, #0]
   1df5e:	e7e4      	b.n	1df2a <queue_insert+0x82>
   1df60:	4313      	orrs	r3, r2
   1df62:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1df64:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1df66:	f003 0303 	and.w	r3, r3, #3
   1df6a:	4303      	orrs	r3, r0
   1df6c:	602b      	str	r3, [r5, #0]
}
   1df6e:	e7eb      	b.n	1df48 <queue_insert+0xa0>

0001df70 <z_queue_node_peek>:
{
   1df70:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1df72:	4604      	mov	r4, r0
   1df74:	b130      	cbz	r0, 1df84 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1df76:	6802      	ldr	r2, [r0, #0]
   1df78:	0793      	lsls	r3, r2, #30
   1df7a:	d003      	beq.n	1df84 <z_queue_node_peek+0x14>
		ret = anode->data;
   1df7c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1df7e:	b109      	cbz	r1, 1df84 <z_queue_node_peek+0x14>
			k_free(anode);
   1df80:	f000 fc1b 	bl	1e7ba <k_free>
}
   1df84:	4620      	mov	r0, r4
   1df86:	bd10      	pop	{r4, pc}

0001df88 <z_impl_k_queue_init>:
	list->head = NULL;
   1df88:	2300      	movs	r3, #0
	list->tail = NULL;
   1df8a:	e9c0 3300 	strd	r3, r3, [r0]
   1df8e:	f100 0308 	add.w	r3, r0, #8
   1df92:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1df96:	f100 0310 	add.w	r3, r0, #16
   1df9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1df9e:	4770      	bx	lr

0001dfa0 <k_queue_append>:
{
   1dfa0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1dfa2:	2301      	movs	r3, #1
   1dfa4:	9300      	str	r3, [sp, #0]
   1dfa6:	2300      	movs	r3, #0
{
   1dfa8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1dfaa:	4619      	mov	r1, r3
   1dfac:	f7ff ff7c 	bl	1dea8 <queue_insert>
}
   1dfb0:	b003      	add	sp, #12
   1dfb2:	f85d fb04 	ldr.w	pc, [sp], #4

0001dfb6 <k_queue_prepend>:
{
   1dfb6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1dfb8:	2300      	movs	r3, #0
{
   1dfba:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1dfbc:	9300      	str	r3, [sp, #0]
   1dfbe:	4619      	mov	r1, r3
   1dfc0:	f7ff ff72 	bl	1dea8 <queue_insert>
}
   1dfc4:	b003      	add	sp, #12
   1dfc6:	f85d fb04 	ldr.w	pc, [sp], #4

0001dfca <k_queue_append_list>:
{
   1dfca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dfce:	4605      	mov	r5, r0
   1dfd0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1dfd2:	460c      	mov	r4, r1
   1dfd4:	b391      	cbz	r1, 1e03c <k_queue_append_list+0x72>
   1dfd6:	b38a      	cbz	r2, 1e03c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1dfd8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1dfdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dfe0:	f3ef 8811 	mrs	r8, BASEPRI
   1dfe4:	f383 8811 	msr	BASEPRI, r3
   1dfe8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1dfec:	4638      	mov	r0, r7
   1dfee:	f000 f8fb 	bl	1e1e8 <z_unpend_first_thread>
   1dff2:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1dff6:	b920      	cbnz	r0, 1e002 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1dff8:	686b      	ldr	r3, [r5, #4]
   1dffa:	b9cb      	cbnz	r3, 1e030 <k_queue_append_list+0x66>
	list->head = node;
   1dffc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1dffe:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e000:	e00a      	b.n	1e018 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1e002:	6144      	str	r4, [r0, #20]
   1e004:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1e008:	f000 f8a7 	bl	1e15a <z_ready_thread>
		head = *(void **)head;
   1e00c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1e00e:	4638      	mov	r0, r7
   1e010:	f000 f8ea 	bl	1e1e8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1e014:	2c00      	cmp	r4, #0
   1e016:	d1ee      	bne.n	1dff6 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e018:	2104      	movs	r1, #4
   1e01a:	f105 0010 	add.w	r0, r5, #16
   1e01e:	f000 fbbe 	bl	1e79e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e022:	4638      	mov	r0, r7
   1e024:	4641      	mov	r1, r8
   1e026:	f7fa f923 	bl	18270 <z_reschedule>
	return 0;
   1e02a:	2000      	movs	r0, #0
}
   1e02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e030:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e032:	f001 0103 	and.w	r1, r1, #3
   1e036:	430c      	orrs	r4, r1
   1e038:	601c      	str	r4, [r3, #0]
}
   1e03a:	e7e0      	b.n	1dffe <k_queue_append_list+0x34>
		return -EINVAL;
   1e03c:	f06f 0015 	mvn.w	r0, #21
   1e040:	e7f4      	b.n	1e02c <k_queue_append_list+0x62>

0001e042 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1e042:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e046:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e048:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e04a:	2300      	movs	r3, #0
	node->prev = NULL;
   1e04c:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e050:	4770      	bx	lr

0001e052 <unpend_thread_no_timeout>:
{
   1e052:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e054:	f7ff fff5 	bl	1e042 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e058:	7b43      	ldrb	r3, [r0, #13]
   1e05a:	f023 0302 	bic.w	r3, r3, #2
   1e05e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1e060:	2300      	movs	r3, #0
   1e062:	6083      	str	r3, [r0, #8]
}
   1e064:	bd08      	pop	{r3, pc}

0001e066 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1e066:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1e06a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1e06e:	4283      	cmp	r3, r0
		return b2 - b1;
   1e070:	bf14      	ite	ne
   1e072:	1ac0      	subne	r0, r0, r3
	return 0;
   1e074:	2000      	moveq	r0, #0
}
   1e076:	4770      	bx	lr

0001e078 <z_unpend_thread_no_timeout>:
{
   1e078:	b508      	push	{r3, lr}
   1e07a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e07e:	f3ef 8111 	mrs	r1, BASEPRI
   1e082:	f383 8811 	msr	BASEPRI, r3
   1e086:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e08a:	f7ff ffe2 	bl	1e052 <unpend_thread_no_timeout>
	__asm__ volatile(
   1e08e:	f381 8811 	msr	BASEPRI, r1
   1e092:	f3bf 8f6f 	isb	sy
}
   1e096:	bd08      	pop	{r3, pc}

0001e098 <z_unpend_thread>:
{
   1e098:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e09a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e09e:	f3ef 8411 	mrs	r4, BASEPRI
   1e0a2:	f383 8811 	msr	BASEPRI, r3
   1e0a6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e0aa:	f7ff ffd2 	bl	1e052 <unpend_thread_no_timeout>
	__asm__ volatile(
   1e0ae:	f384 8811 	msr	BASEPRI, r4
   1e0b2:	f3bf 8f6f 	isb	sy
}
   1e0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   1e0ba:	3018      	adds	r0, #24
   1e0bc:	f000 b9b9 	b.w	1e432 <z_abort_timeout>

0001e0c0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e0c0:	4603      	mov	r3, r0
   1e0c2:	b920      	cbnz	r0, 1e0ce <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e0c4:	f3ef 8205 	mrs	r2, IPSR
   1e0c8:	b90a      	cbnz	r2, 1e0ce <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1e0ca:	f7f2 bec5 	b.w	10e58 <arch_swap>
   1e0ce:	f383 8811 	msr	BASEPRI, r3
   1e0d2:	f3bf 8f6f 	isb	sy
}
   1e0d6:	4770      	bx	lr

0001e0d8 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e0d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e0dc:	f3ef 8011 	mrs	r0, BASEPRI
   1e0e0:	f383 8811 	msr	BASEPRI, r3
   1e0e4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e0e8:	f7ff bfea 	b.w	1e0c0 <z_reschedule_irqlock>

0001e0ec <z_priq_dumb_best>:
{
   1e0ec:	4603      	mov	r3, r0
	return list->head == list;
   1e0ee:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e0f0:	4283      	cmp	r3, r0
   1e0f2:	d003      	beq.n	1e0fc <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1e0f4:	2800      	cmp	r0, #0
   1e0f6:	bf38      	it	cc
   1e0f8:	2000      	movcc	r0, #0
   1e0fa:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1e0fc:	2000      	movs	r0, #0
}
   1e0fe:	4770      	bx	lr

0001e100 <add_to_waitq_locked>:
{
   1e100:	b538      	push	{r3, r4, r5, lr}
   1e102:	4604      	mov	r4, r0
   1e104:	460d      	mov	r5, r1
	unready_thread(thread);
   1e106:	f7fa f8f7 	bl	182f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1e10a:	7b63      	ldrb	r3, [r4, #13]
   1e10c:	f043 0302 	orr.w	r3, r3, #2
   1e110:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1e112:	b1b5      	cbz	r5, 1e142 <add_to_waitq_locked+0x42>
	return list->head == list;
   1e114:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1e116:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e118:	429d      	cmp	r5, r3
   1e11a:	bf08      	it	eq
   1e11c:	2300      	moveq	r3, #0
   1e11e:	2b00      	cmp	r3, #0
   1e120:	bf38      	it	cc
   1e122:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e124:	b19b      	cbz	r3, 1e14e <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   1e126:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1e12a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1e12e:	4291      	cmp	r1, r2
   1e130:	d008      	beq.n	1e144 <add_to_waitq_locked+0x44>
		return b2 - b1;
   1e132:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e134:	2a00      	cmp	r2, #0
   1e136:	dd05      	ble.n	1e144 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   1e138:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e13a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1e13e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e140:	605c      	str	r4, [r3, #4]
}
   1e142:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1e144:	686a      	ldr	r2, [r5, #4]
   1e146:	4293      	cmp	r3, r2
   1e148:	d001      	beq.n	1e14e <add_to_waitq_locked+0x4e>
   1e14a:	681b      	ldr	r3, [r3, #0]
   1e14c:	e7ea      	b.n	1e124 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   1e14e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1e150:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1e154:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e156:	606c      	str	r4, [r5, #4]
   1e158:	e7f3      	b.n	1e142 <add_to_waitq_locked+0x42>

0001e15a <z_ready_thread>:
{
   1e15a:	b510      	push	{r4, lr}
   1e15c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e160:	f3ef 8411 	mrs	r4, BASEPRI
   1e164:	f383 8811 	msr	BASEPRI, r3
   1e168:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1e16c:	f7fa fa1e 	bl	185ac <ready_thread>
	__asm__ volatile(
   1e170:	f384 8811 	msr	BASEPRI, r4
   1e174:	f3bf 8f6f 	isb	sy
}
   1e178:	bd10      	pop	{r4, pc}

0001e17a <z_thread_timeout>:
{
   1e17a:	b510      	push	{r4, lr}
   1e17c:	4601      	mov	r1, r0
	__asm__ volatile(
   1e17e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e182:	f3ef 8411 	mrs	r4, BASEPRI
   1e186:	f383 8811 	msr	BASEPRI, r3
   1e18a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1e18e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1e192:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e196:	d10d      	bne.n	1e1b4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1e198:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1e19c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1e19e:	b10b      	cbz	r3, 1e1a4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1e1a0:	f7ff ff57 	bl	1e052 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e1a4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1e1a8:	f023 0314 	bic.w	r3, r3, #20
   1e1ac:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1e1b0:	f7fa f9fc 	bl	185ac <ready_thread>
	__asm__ volatile(
   1e1b4:	f384 8811 	msr	BASEPRI, r4
   1e1b8:	f3bf 8f6f 	isb	sy
}
   1e1bc:	bd10      	pop	{r4, pc}

0001e1be <z_unpend1_no_timeout>:
{
   1e1be:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e1c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1c4:	f3ef 8411 	mrs	r4, BASEPRI
   1e1c8:	f383 8811 	msr	BASEPRI, r3
   1e1cc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e1d0:	f7ff ff8c 	bl	1e0ec <z_priq_dumb_best>
		if (thread != NULL) {
   1e1d4:	4601      	mov	r1, r0
   1e1d6:	b108      	cbz	r0, 1e1dc <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1e1d8:	f7ff ff3b 	bl	1e052 <unpend_thread_no_timeout>
	__asm__ volatile(
   1e1dc:	f384 8811 	msr	BASEPRI, r4
   1e1e0:	f3bf 8f6f 	isb	sy
}
   1e1e4:	4608      	mov	r0, r1
   1e1e6:	bd10      	pop	{r4, pc}

0001e1e8 <z_unpend_first_thread>:
{
   1e1e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e1ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1ee:	f3ef 8511 	mrs	r5, BASEPRI
   1e1f2:	f383 8811 	msr	BASEPRI, r3
   1e1f6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e1fa:	f7ff ff77 	bl	1e0ec <z_priq_dumb_best>
		if (thread != NULL) {
   1e1fe:	4604      	mov	r4, r0
   1e200:	b120      	cbz	r0, 1e20c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1e202:	f7ff ff26 	bl	1e052 <unpend_thread_no_timeout>
   1e206:	3018      	adds	r0, #24
   1e208:	f000 f913 	bl	1e432 <z_abort_timeout>
	__asm__ volatile(
   1e20c:	f385 8811 	msr	BASEPRI, r5
   1e210:	f3bf 8f6f 	isb	sy
}
   1e214:	4620      	mov	r0, r4
   1e216:	bd38      	pop	{r3, r4, r5, pc}

0001e218 <z_unpend_all>:
{
   1e218:	b538      	push	{r3, r4, r5, lr}
   1e21a:	4605      	mov	r5, r0
	int need_sched = 0;
   1e21c:	2000      	movs	r0, #0
	return list->head == list;
   1e21e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e220:	42a5      	cmp	r5, r4
   1e222:	d000      	beq.n	1e226 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e224:	b904      	cbnz	r4, 1e228 <z_unpend_all+0x10>
}
   1e226:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e228:	4620      	mov	r0, r4
   1e22a:	f7ff ff35 	bl	1e098 <z_unpend_thread>
		z_ready_thread(thread);
   1e22e:	4620      	mov	r0, r4
   1e230:	f7ff ff93 	bl	1e15a <z_ready_thread>
		need_sched = 1;
   1e234:	2001      	movs	r0, #1
   1e236:	e7f2      	b.n	1e21e <z_unpend_all+0x6>

0001e238 <z_sched_wake>:
{
   1e238:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e23a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e23e:	f3ef 8511 	mrs	r5, BASEPRI
   1e242:	f383 8811 	msr	BASEPRI, r3
   1e246:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e24a:	f7ff ff4f 	bl	1e0ec <z_priq_dumb_best>
		if (thread != NULL) {
   1e24e:	4604      	mov	r4, r0
   1e250:	b150      	cbz	r0, 1e268 <z_sched_wake+0x30>
   1e252:	67c1      	str	r1, [r0, #124]	; 0x7c
   1e254:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1e256:	f7ff fefc 	bl	1e052 <unpend_thread_no_timeout>
   1e25a:	3018      	adds	r0, #24
   1e25c:	f000 f8e9 	bl	1e432 <z_abort_timeout>
			ready_thread(thread);
   1e260:	4620      	mov	r0, r4
   1e262:	f7fa f9a3 	bl	185ac <ready_thread>
			ret = true;
   1e266:	2001      	movs	r0, #1
	__asm__ volatile(
   1e268:	f385 8811 	msr	BASEPRI, r5
   1e26c:	f3bf 8f6f 	isb	sy
}
   1e270:	bd38      	pop	{r3, r4, r5, pc}

0001e272 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1e272:	b15a      	cbz	r2, 1e28c <z_impl_k_sem_init+0x1a>
   1e274:	428a      	cmp	r2, r1
   1e276:	d309      	bcc.n	1e28c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e278:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e27c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e280:	e9c0 0000 	strd	r0, r0, [r0]
   1e284:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e288:	2000      	movs	r0, #0
   1e28a:	4770      	bx	lr
		return -EINVAL;
   1e28c:	f06f 0015 	mvn.w	r0, #21
}
   1e290:	4770      	bx	lr

0001e292 <k_is_in_isr>:
   1e292:	f3ef 8005 	mrs	r0, IPSR
}
   1e296:	3800      	subs	r0, #0
   1e298:	bf18      	it	ne
   1e29a:	2001      	movne	r0, #1
   1e29c:	4770      	bx	lr

0001e29e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1e29e:	b108      	cbz	r0, 1e2a4 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1e2a0:	f7f3 b8fe 	b.w	114a0 <arch_busy_wait>
}
   1e2a4:	4770      	bx	lr

0001e2a6 <z_impl_k_thread_name_set>:
}
   1e2a6:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e2aa:	4770      	bx	lr

0001e2ac <z_impl_k_thread_start>:
	z_sched_start(thread);
   1e2ac:	f7fa b9b6 	b.w	1861c <z_sched_start>

0001e2b0 <notify_queue_locked>:
	if (queue != NULL) {
   1e2b0:	b120      	cbz	r0, 1e2bc <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1e2b2:	2200      	movs	r2, #0
   1e2b4:	4611      	mov	r1, r2
   1e2b6:	3088      	adds	r0, #136	; 0x88
   1e2b8:	f7ff bfbe 	b.w	1e238 <z_sched_wake>
}
   1e2bc:	4770      	bx	lr

0001e2be <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1e2be:	68c3      	ldr	r3, [r0, #12]
{
   1e2c0:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1e2c2:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1e2c6:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e2ca:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1e2cc:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e2ce:	d502      	bpl.n	1e2d6 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1e2d0:	3010      	adds	r0, #16
   1e2d2:	f000 f8ae 	bl	1e432 <z_abort_timeout>
}
   1e2d6:	4620      	mov	r0, r4
   1e2d8:	bd10      	pop	{r4, pc}

0001e2da <cancel_async_locked>:
{
   1e2da:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e2dc:	68c0      	ldr	r0, [r0, #12]
{
   1e2de:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e2e0:	0784      	lsls	r4, r0, #30
   1e2e2:	f3c0 0140 	ubfx	r1, r0, #1, #1
   1e2e6:	d416      	bmi.n	1e316 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   1e2e8:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1e2ec:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   1e2ee:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   1e2f0:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1e2f2:	d510      	bpl.n	1e316 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e2f4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1e2f8:	b168      	cbz	r0, 1e316 <cancel_async_locked+0x3c>
   1e2fa:	4283      	cmp	r3, r0
   1e2fc:	d11d      	bne.n	1e33a <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1e2fe:	6818      	ldr	r0, [r3, #0]
   1e300:	b999      	cbnz	r1, 1e32a <cancel_async_locked+0x50>
   1e302:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   1e306:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1e30a:	428b      	cmp	r3, r1
   1e30c:	d101      	bne.n	1e312 <cancel_async_locked+0x38>
	list->tail = node;
   1e30e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   1e312:	2200      	movs	r2, #0
   1e314:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   1e316:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1e318:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   1e31c:	bf1e      	ittt	ne
   1e31e:	f042 0202 	orrne.w	r2, r2, #2
   1e322:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1e324:	f002 000f 	andne.w	r0, r2, #15
}
   1e328:	bd10      	pop	{r4, pc}
   1e32a:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e32c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1e330:	4283      	cmp	r3, r0
	list->tail = node;
   1e332:	bf08      	it	eq
   1e334:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   1e338:	e7eb      	b.n	1e312 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e33a:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e33c:	6800      	ldr	r0, [r0, #0]
   1e33e:	e7db      	b.n	1e2f8 <cancel_async_locked+0x1e>

0001e340 <work_timeout>:
{
   1e340:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   1e342:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e346:	f3ef 8411 	mrs	r4, BASEPRI
   1e34a:	f383 8811 	msr	BASEPRI, r3
   1e34e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1e352:	2300      	movs	r3, #0
   1e354:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1e356:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   1e35a:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e35e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1e360:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e364:	d505      	bpl.n	1e372 <work_timeout+0x32>
		queue = dw->queue;
   1e366:	6983      	ldr	r3, [r0, #24]
   1e368:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1e36a:	a901      	add	r1, sp, #4
   1e36c:	3810      	subs	r0, #16
   1e36e:	f7fa fb91 	bl	18a94 <submit_to_queue_locked>
	__asm__ volatile(
   1e372:	f384 8811 	msr	BASEPRI, r4
   1e376:	f3bf 8f6f 	isb	sy
}
   1e37a:	b002      	add	sp, #8
   1e37c:	bd10      	pop	{r4, pc}

0001e37e <k_work_init>:
{
   1e37e:	b538      	push	{r3, r4, r5, lr}
   1e380:	4604      	mov	r4, r0
   1e382:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e384:	2210      	movs	r2, #16
   1e386:	2100      	movs	r1, #0
   1e388:	f7fc fe71 	bl	1b06e <memset>
   1e38c:	6065      	str	r5, [r4, #4]
}
   1e38e:	bd38      	pop	{r3, r4, r5, pc}

0001e390 <k_work_submit_to_queue>:
{
   1e390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e392:	9001      	str	r0, [sp, #4]
   1e394:	4608      	mov	r0, r1
	__asm__ volatile(
   1e396:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e39a:	f3ef 8511 	mrs	r5, BASEPRI
   1e39e:	f383 8811 	msr	BASEPRI, r3
   1e3a2:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1e3a6:	a901      	add	r1, sp, #4
   1e3a8:	f7fa fb74 	bl	18a94 <submit_to_queue_locked>
   1e3ac:	4604      	mov	r4, r0
	__asm__ volatile(
   1e3ae:	f385 8811 	msr	BASEPRI, r5
   1e3b2:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1e3b6:	2800      	cmp	r0, #0
   1e3b8:	dd04      	ble.n	1e3c4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1e3ba:	f7fa f9d3 	bl	18764 <z_impl_k_is_preempt_thread>
   1e3be:	b108      	cbz	r0, 1e3c4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1e3c0:	f7fa f956 	bl	18670 <z_impl_k_yield>
}
   1e3c4:	4620      	mov	r0, r4
   1e3c6:	b003      	add	sp, #12
   1e3c8:	bd30      	pop	{r4, r5, pc}

0001e3ca <k_work_init_delayable>:
{
   1e3ca:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1e3cc:	2230      	movs	r2, #48	; 0x30
{
   1e3ce:	4604      	mov	r4, r0
   1e3d0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1e3d2:	2100      	movs	r1, #0
   1e3d4:	f7fc fe4b 	bl	1b06e <memset>
   1e3d8:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e3dc:	6065      	str	r5, [r4, #4]
   1e3de:	60e3      	str	r3, [r4, #12]
}
   1e3e0:	bd38      	pop	{r3, r4, r5, pc}

0001e3e2 <k_work_delayable_busy_get>:
	__asm__ volatile(
   1e3e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e3e6:	f3ef 8311 	mrs	r3, BASEPRI
   1e3ea:	f382 8811 	msr	BASEPRI, r2
   1e3ee:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e3f2:	f3bf 8f5b 	dmb	ish
   1e3f6:	68c0      	ldr	r0, [r0, #12]
   1e3f8:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   1e3fc:	f383 8811 	msr	BASEPRI, r3
   1e400:	f3bf 8f6f 	isb	sy
}
   1e404:	f000 000f 	and.w	r0, r0, #15
   1e408:	4770      	bx	lr

0001e40a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1e40a:	b538      	push	{r3, r4, r5, lr}
   1e40c:	4604      	mov	r4, r0
	__asm__ volatile(
   1e40e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e412:	f3ef 8511 	mrs	r5, BASEPRI
   1e416:	f383 8811 	msr	BASEPRI, r3
   1e41a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1e41e:	f7ff ff4e 	bl	1e2be <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1e422:	4620      	mov	r0, r4
   1e424:	f7ff ff59 	bl	1e2da <cancel_async_locked>
	__asm__ volatile(
   1e428:	f385 8811 	msr	BASEPRI, r5
   1e42c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   1e430:	bd38      	pop	{r3, r4, r5, pc}

0001e432 <z_abort_timeout>:
{
   1e432:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e434:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e438:	f3ef 8411 	mrs	r4, BASEPRI
   1e43c:	f382 8811 	msr	BASEPRI, r2
   1e440:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1e444:	6803      	ldr	r3, [r0, #0]
   1e446:	b13b      	cbz	r3, 1e458 <z_abort_timeout+0x26>
			remove_timeout(to);
   1e448:	f7fa fcd4 	bl	18df4 <remove_timeout>
			ret = 0;
   1e44c:	2000      	movs	r0, #0
	__asm__ volatile(
   1e44e:	f384 8811 	msr	BASEPRI, r4
   1e452:	f3bf 8f6f 	isb	sy
}
   1e456:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1e458:	f06f 0015 	mvn.w	r0, #21
   1e45c:	e7f7      	b.n	1e44e <z_abort_timeout+0x1c>

0001e45e <z_get_next_timeout_expiry>:
{
   1e45e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e460:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e464:	f3ef 8411 	mrs	r4, BASEPRI
   1e468:	f383 8811 	msr	BASEPRI, r3
   1e46c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1e470:	f7fa fcda 	bl	18e28 <next_timeout>
	__asm__ volatile(
   1e474:	f384 8811 	msr	BASEPRI, r4
   1e478:	f3bf 8f6f 	isb	sy
}
   1e47c:	bd10      	pop	{r4, pc}

0001e47e <z_set_timeout_expiry>:
{
   1e47e:	b570      	push	{r4, r5, r6, lr}
   1e480:	4604      	mov	r4, r0
   1e482:	460d      	mov	r5, r1
	__asm__ volatile(
   1e484:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e488:	f3ef 8611 	mrs	r6, BASEPRI
   1e48c:	f383 8811 	msr	BASEPRI, r3
   1e490:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1e494:	f7fa fcc8 	bl	18e28 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1e498:	2801      	cmp	r0, #1
   1e49a:	dd05      	ble.n	1e4a8 <z_set_timeout_expiry+0x2a>
   1e49c:	42a0      	cmp	r0, r4
   1e49e:	db03      	blt.n	1e4a8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1e4a0:	4629      	mov	r1, r5
   1e4a2:	4620      	mov	r0, r4
   1e4a4:	f7f2 fafa 	bl	10a9c <z_clock_set_timeout>
	__asm__ volatile(
   1e4a8:	f386 8811 	msr	BASEPRI, r6
   1e4ac:	f3bf 8f6f 	isb	sy
}
   1e4b0:	bd70      	pop	{r4, r5, r6, pc}

0001e4b2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1e4b2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1e4b4:	f7fa fde0 	bl	19078 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e4b8:	bd08      	pop	{r3, pc}

0001e4ba <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1e4ba:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e4bc:	1c4b      	adds	r3, r1, #1
   1e4be:	bf08      	it	eq
   1e4c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e4c4:	4604      	mov	r4, r0
   1e4c6:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e4c8:	d013      	beq.n	1e4f2 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e4ca:	ea54 0105 	orrs.w	r1, r4, r5
   1e4ce:	d103      	bne.n	1e4d8 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1e4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1e4d4:	f7fa bdd0 	b.w	19078 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e4d8:	f06f 0101 	mvn.w	r1, #1
   1e4dc:	1a0a      	subs	r2, r1, r0
   1e4de:	f04f 31ff 	mov.w	r1, #4294967295
   1e4e2:	eb61 0305 	sbc.w	r3, r1, r5
   1e4e6:	2a00      	cmp	r2, #0
   1e4e8:	f173 0100 	sbcs.w	r1, r3, #0
   1e4ec:	db02      	blt.n	1e4f4 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1e4ee:	4610      	mov	r0, r2
   1e4f0:	4619      	mov	r1, r3
}
   1e4f2:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1e4f4:	f7fa fdc0 	bl	19078 <z_tick_get>
   1e4f8:	2c01      	cmp	r4, #1
   1e4fa:	f175 0300 	sbcs.w	r3, r5, #0
   1e4fe:	bfbc      	itt	lt
   1e500:	2401      	movlt	r4, #1
   1e502:	2500      	movlt	r5, #0
   1e504:	1820      	adds	r0, r4, r0
   1e506:	eb45 0101 	adc.w	r1, r5, r1
   1e50a:	e7f2      	b.n	1e4f2 <z_timeout_end_calc+0x38>

0001e50c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1e50c:	b510      	push	{r4, lr}
   1e50e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1e510:	f7ff ff8f 	bl	1e432 <z_abort_timeout>

	if (inactive) {
   1e514:	b9b0      	cbnz	r0, 1e544 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1e516:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e518:	b10b      	cbz	r3, 1e51e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1e51a:	4620      	mov	r0, r4
   1e51c:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1e51e:	f104 0018 	add.w	r0, r4, #24
   1e522:	f7ff fe4c 	bl	1e1be <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   1e526:	b168      	cbz	r0, 1e544 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   1e528:	f7ff fe17 	bl	1e15a <z_ready_thread>
	__asm__ volatile(
   1e52c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e530:	f3ef 8011 	mrs	r0, BASEPRI
   1e534:	f383 8811 	msr	BASEPRI, r3
   1e538:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e540:	f7ff bdbe 	b.w	1e0c0 <z_reschedule_irqlock>
   1e544:	bd10      	pop	{r4, pc}

0001e546 <clear_event_registrations>:
	while (num_events--) {
   1e546:	2314      	movs	r3, #20
{
   1e548:	b530      	push	{r4, r5, lr}
   1e54a:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1e54e:	2400      	movs	r4, #0
	while (num_events--) {
   1e550:	4281      	cmp	r1, r0
   1e552:	d100      	bne.n	1e556 <clear_event_registrations+0x10>
}
   1e554:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1e556:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1e55a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1e55e:	f003 030f 	and.w	r3, r3, #15
   1e562:	2b02      	cmp	r3, #2
   1e564:	d80a      	bhi.n	1e57c <clear_event_registrations+0x36>
   1e566:	b15b      	cbz	r3, 1e580 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1e568:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1e56c:	b143      	cbz	r3, 1e580 <clear_event_registrations+0x3a>
	sys_dnode_t *const prev = node->prev;
   1e56e:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   1e572:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1e574:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1e576:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   1e57a:	e001      	b.n	1e580 <clear_event_registrations+0x3a>
	switch (event->type) {
   1e57c:	2b04      	cmp	r3, #4
   1e57e:	d0f3      	beq.n	1e568 <clear_event_registrations+0x22>
	__asm__ volatile(
   1e580:	f382 8811 	msr	BASEPRI, r2
   1e584:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e588:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e58c:	f3ef 8211 	mrs	r2, BASEPRI
   1e590:	f383 8811 	msr	BASEPRI, r3
   1e594:	f3bf 8f6f 	isb	sy
   1e598:	3914      	subs	r1, #20
   1e59a:	e7d9      	b.n	1e550 <clear_event_registrations+0xa>

0001e59c <add_event>:
{
   1e59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e59e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e5a0:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e5a4:	4290      	cmp	r0, r2
   1e5a6:	4604      	mov	r4, r0
   1e5a8:	460d      	mov	r5, r1
   1e5aa:	d105      	bne.n	1e5b8 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1e5ac:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1e5ae:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1e5b2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e5b4:	6065      	str	r5, [r4, #4]
}
   1e5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e5b8:	2b00      	cmp	r3, #0
   1e5ba:	d0f7      	beq.n	1e5ac <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e5bc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e5be:	b100      	cbz	r0, 1e5c2 <add_event+0x26>
   1e5c0:	3860      	subs	r0, #96	; 0x60
   1e5c2:	b107      	cbz	r7, 1e5c6 <add_event+0x2a>
   1e5c4:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e5c6:	4639      	mov	r1, r7
   1e5c8:	f7ff fd4d 	bl	1e066 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e5cc:	2800      	cmp	r0, #0
   1e5ce:	dced      	bgt.n	1e5ac <add_event+0x10>
	return list->head == list;
   1e5d0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e5d2:	42b4      	cmp	r4, r6
   1e5d4:	d0ea      	beq.n	1e5ac <add_event+0x10>
   1e5d6:	2e00      	cmp	r6, #0
   1e5d8:	bf38      	it	cc
   1e5da:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e5dc:	2e00      	cmp	r6, #0
   1e5de:	d0e5      	beq.n	1e5ac <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e5e0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e5e2:	b101      	cbz	r1, 1e5e6 <add_event+0x4a>
   1e5e4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1e5e6:	4638      	mov	r0, r7
   1e5e8:	f7ff fd3d 	bl	1e066 <z_sched_prio_cmp>
   1e5ec:	2800      	cmp	r0, #0
   1e5ee:	dd05      	ble.n	1e5fc <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   1e5f0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e5f2:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1e5f6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e5f8:	6075      	str	r5, [r6, #4]
			return;
   1e5fa:	e7dc      	b.n	1e5b6 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1e5fc:	6863      	ldr	r3, [r4, #4]
   1e5fe:	42b3      	cmp	r3, r6
   1e600:	d0d4      	beq.n	1e5ac <add_event+0x10>
   1e602:	6836      	ldr	r6, [r6, #0]
   1e604:	e7ea      	b.n	1e5dc <add_event+0x40>

0001e606 <register_events>:
{
   1e606:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1e60a:	f04f 0a00 	mov.w	sl, #0
{
   1e60e:	460e      	mov	r6, r1
   1e610:	4614      	mov	r4, r2
   1e612:	461f      	mov	r7, r3
   1e614:	4683      	mov	fp, r0
	int events_registered = 0;
   1e616:	4655      	mov	r5, sl
	event->poller = NULL;
   1e618:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   1e61a:	45b2      	cmp	sl, r6
   1e61c:	db02      	blt.n	1e624 <register_events+0x1e>
}
   1e61e:	4628      	mov	r0, r5
   1e620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e624:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e628:	f3ef 8911 	mrs	r9, BASEPRI
   1e62c:	f383 8811 	msr	BASEPRI, r3
   1e630:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1e634:	f89b 200d 	ldrb.w	r2, [fp, #13]
   1e638:	f002 020f 	and.w	r2, r2, #15
   1e63c:	2a02      	cmp	r2, #2
   1e63e:	d006      	beq.n	1e64e <register_events+0x48>
   1e640:	2a04      	cmp	r2, #4
   1e642:	d008      	beq.n	1e656 <register_events+0x50>
   1e644:	2a01      	cmp	r2, #1
   1e646:	d120      	bne.n	1e68a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   1e648:	f8db 3010 	ldr.w	r3, [fp, #16]
   1e64c:	e001      	b.n	1e652 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   1e64e:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1e652:	689b      	ldr	r3, [r3, #8]
   1e654:	e002      	b.n	1e65c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   1e656:	f8db 3010 	ldr.w	r3, [fp, #16]
   1e65a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   1e65c:	b1ab      	cbz	r3, 1e68a <register_events+0x84>
	event->state |= state;
   1e65e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1e662:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   1e666:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1e66a:	430a      	orrs	r2, r1
   1e66c:	f362 3310 	bfi	r3, r2, #12, #5
   1e670:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1e674:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1e678:	f389 8811 	msr	BASEPRI, r9
   1e67c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1e680:	f10a 0a01 	add.w	sl, sl, #1
   1e684:	f10b 0b14 	add.w	fp, fp, #20
   1e688:	e7c7      	b.n	1e61a <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1e68a:	2f00      	cmp	r7, #0
   1e68c:	d1f4      	bne.n	1e678 <register_events+0x72>
   1e68e:	7823      	ldrb	r3, [r4, #0]
   1e690:	2b00      	cmp	r3, #0
   1e692:	d0f1      	beq.n	1e678 <register_events+0x72>
	switch (event->type) {
   1e694:	f89b 300d 	ldrb.w	r3, [fp, #13]
   1e698:	f003 030f 	and.w	r3, r3, #15
   1e69c:	2b02      	cmp	r3, #2
   1e69e:	d008      	beq.n	1e6b2 <register_events+0xac>
   1e6a0:	2b04      	cmp	r3, #4
   1e6a2:	d006      	beq.n	1e6b2 <register_events+0xac>
   1e6a4:	2b01      	cmp	r3, #1
   1e6a6:	d10b      	bne.n	1e6c0 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   1e6a8:	f8db 0010 	ldr.w	r0, [fp, #16]
   1e6ac:	4622      	mov	r2, r4
   1e6ae:	4659      	mov	r1, fp
   1e6b0:	e004      	b.n	1e6bc <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   1e6b2:	f8db 0010 	ldr.w	r0, [fp, #16]
   1e6b6:	4622      	mov	r2, r4
   1e6b8:	4659      	mov	r1, fp
   1e6ba:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1e6bc:	f7ff ff6e 	bl	1e59c <add_event>
	event->poller = poller;
   1e6c0:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   1e6c4:	3501      	adds	r5, #1
   1e6c6:	e7d7      	b.n	1e678 <register_events+0x72>

0001e6c8 <signal_poll_event>:
{
   1e6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1e6cc:	6884      	ldr	r4, [r0, #8]
{
   1e6ce:	4605      	mov	r5, r0
   1e6d0:	460e      	mov	r6, r1
	if (poller) {
   1e6d2:	b144      	cbz	r4, 1e6e6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1e6d4:	7863      	ldrb	r3, [r4, #1]
   1e6d6:	2b01      	cmp	r3, #1
   1e6d8:	d138      	bne.n	1e74c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1e6da:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e6de:	f013 0302 	ands.w	r3, r3, #2
   1e6e2:	d10a      	bne.n	1e6fa <signal_poll_event+0x32>
		poller->is_polling = false;
   1e6e4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1e6e6:	68eb      	ldr	r3, [r5, #12]
   1e6e8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1e6ec:	430e      	orrs	r6, r1
	event->poller = NULL;
   1e6ee:	2000      	movs	r0, #0
	event->state |= state;
   1e6f0:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   1e6f4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1e6f6:	60eb      	str	r3, [r5, #12]
	return retcode;
   1e6f8:	e00d      	b.n	1e716 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1e6fa:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1e6fe:	f04f 31ff 	mov.w	r1, #4294967295
   1e702:	f06f 0001 	mvn.w	r0, #1
   1e706:	428b      	cmp	r3, r1
   1e708:	bf08      	it	eq
   1e70a:	4282      	cmpeq	r2, r0
   1e70c:	d105      	bne.n	1e71a <signal_poll_event+0x52>
		poller->is_polling = false;
   1e70e:	2300      	movs	r3, #0
   1e710:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1e712:	f06f 000a 	mvn.w	r0, #10
}
   1e716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e71a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1e71e:	4640      	mov	r0, r8
   1e720:	f7ff fcba 	bl	1e098 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e724:	2e08      	cmp	r6, #8
   1e726:	bf0c      	ite	eq
   1e728:	f06f 0303 	mvneq.w	r3, #3
   1e72c:	2300      	movne	r3, #0
   1e72e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e730:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e734:	06db      	lsls	r3, r3, #27
   1e736:	d102      	bne.n	1e73e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1e738:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1e73c:	b10f      	cbz	r7, 1e742 <signal_poll_event+0x7a>
		poller->is_polling = false;
   1e73e:	2300      	movs	r3, #0
   1e740:	e7d0      	b.n	1e6e4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1e742:	4640      	mov	r0, r8
   1e744:	f7ff fd09 	bl	1e15a <z_ready_thread>
		poller->is_polling = false;
   1e748:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1e74a:	e7cc      	b.n	1e6e6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e74c:	2b02      	cmp	r3, #2
   1e74e:	d1f6      	bne.n	1e73e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e750:	7823      	ldrb	r3, [r4, #0]
   1e752:	2b00      	cmp	r3, #0
   1e754:	d0c7      	beq.n	1e6e6 <signal_poll_event+0x1e>
   1e756:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1e75a:	2f00      	cmp	r7, #0
   1e75c:	d0f4      	beq.n	1e748 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1e75e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1e762:	f1a4 0914 	sub.w	r9, r4, #20
   1e766:	f104 0014 	add.w	r0, r4, #20
   1e76a:	f7ff fe62 	bl	1e432 <z_abort_timeout>
		twork->poll_result = 0;
   1e76e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1e772:	4649      	mov	r1, r9
   1e774:	4638      	mov	r0, r7
   1e776:	f7ff fe0b 	bl	1e390 <k_work_submit_to_queue>
		poller->is_polling = false;
   1e77a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1e77e:	e7b2      	b.n	1e6e6 <signal_poll_event+0x1e>

0001e780 <k_poll_event_init>:
{
   1e780:	b510      	push	{r4, lr}
	event->type = type;
   1e782:	0452      	lsls	r2, r2, #17
   1e784:	0209      	lsls	r1, r1, #8
   1e786:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   1e78a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   1e78e:	430a      	orrs	r2, r1
   1e790:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1e792:	2400      	movs	r4, #0
	event->type = type;
   1e794:	430a      	orrs	r2, r1
	event->obj = obj;
   1e796:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1e79a:	6084      	str	r4, [r0, #8]
}
   1e79c:	bd10      	pop	{r4, pc}

0001e79e <z_handle_obj_poll_events>:
{
   1e79e:	4603      	mov	r3, r0
	return list->head == list;
   1e7a0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e7a2:	4283      	cmp	r3, r0
   1e7a4:	d008      	beq.n	1e7b8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1e7a6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e7aa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e7ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e7ae:	2300      	movs	r3, #0
	node->prev = NULL;
   1e7b0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e7b4:	f7ff bf88 	b.w	1e6c8 <signal_poll_event>
}
   1e7b8:	4770      	bx	lr

0001e7ba <k_free>:
	if (ptr != NULL) {
   1e7ba:	b120      	cbz	r0, 1e7c6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1e7bc:	1f01      	subs	r1, r0, #4
   1e7be:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e7c2:	f7ff bb54 	b.w	1de6e <k_heap_free>
}
   1e7c6:	4770      	bx	lr

0001e7c8 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1e7c8:	4770      	bx	lr
